<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Fabric</name>
    </assembly>
    <members>
        <member name="P:System.Fabric.ApplicationUpgradeProgress.StartTimestampUtc">
            <summary>
            Gets the time at which the upgrade started.
            </summary>
            <value>The time at which the upgrade started in UTC.</value>
        </member>
        <member name="P:System.Fabric.ApplicationUpgradeProgress.FailureTimestampUtc">
            <summary>
            Gets the time at which the upgrade failed.
            </summary>
            <value>The time at which the upgrade failed in UTC.</value>
        </member>
        <member name="P:System.Fabric.ApplicationUpgradeProgress.FailureReason">
            <summary>
            Gets the category of upgrade failure if the upgrade failed.
            </summary>
            <value>The category of upgrade failure. <see cref="T:System.Fabric.UpgradeFailureReason"/>.</value>
        </member>
        <member name="P:System.Fabric.ApplicationUpgradeProgress.UpgradeDomainProgressAtFailure">
            <summary>
            Gets structured information about what actions were being performed by the system at the moment of upgrade failure.
            </summary>
            <value>The upgrade progress details. <see cref="T:System.Fabric.UpgradeDomainProgress"/>.</value>
        </member>
        <member name="T:System.Fabric.Interop.NativeRuntime.IFabricKeyValueStoreReplica4">
            <summary>
            IFabricKeyValueStoreReplica4 interface.
            </summary>
            <remarks>Ensure that the GUID matches the one in FabricRuntime.idl</remarks>
        </member>
        <member name="T:System.Fabric.IOperationDataStream">
            <summary>
            An IOperationDataStream allows services to asynchronously exchange information.
            </summary>
            <remarks>IOperationDataStream classes are used during the copy process of building a new 
            secondary, as the secondary needs to send context information to the primary and the primary needs
            to send state to the secondary in response to that context data.</remarks>
        </member>
        <member name="M:System.Fabric.IOperationDataStream.GetNextAsync(System.Threading.CancellationToken)">
            <summary>
            Get the next piece of data from the stream
            </summary>
            <param name="cancellationToken">Cancellation token for the operation</param>
            <returns>A Task.</returns>
        </member>
        <member name="T:System.Fabric.CheckExistsPropertyOperation">
            <summary>
            Represents a property operation that check if a property exists
            </summary>
        </member>
        <member name="T:System.Fabric.PropertyBatchOperation">
            <summary>
            Represents a property operation that can be included in a batch
            </summary>
        </member>
        <member name="T:System.Fabric.CheckSequencePropertyOperation">
            <summary>
            Represents a property operation that checks the sequence against a given number
            </summary>
        </member>
        <member name="T:System.Fabric.CheckValuePropertyOperation">
            <summary>
            Represents a property operation that checks the value of a property
            </summary>
        </member>
        <member name="T:System.Fabric.FabricClientRole">
            <summary>
            Represents the fabric client security role.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricClientRole.User">
            <summary>
            Indicates user permissions.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricClientRole.Admin">
            <summary>
            Indicates administrator permissions.
            </summary>
        </member>
        <member name="T:System.Fabric.FabricConstants">
            <summary>
            These are constants used by ServiceFabric for various OS Related resources.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricConstants.FabricRegistryKeyPath">
            <summary>
            The registry key path used by Fabric. This is going to be deprecated soon, and no new dependency should be taken on this constant.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricConstants.FabricRegistryKeyPathDeprecated">
            <summary>
            The old (deprecated) registry key path. This is needed for compatibility between components
            that are versioned and deployed independently, e.g. the Azure plugin and the InfrastructureService.
            </summary>
        </member>
        <member name="T:System.Fabric.UpgradeFailureReason">
            <summary>
            Describes possible upgrade failure reasons.
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeFailureReason.None">
            <summary>
            There is no upgrade failures.
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeFailureReason.Interrupted">
            <summary>
            The upgrade was interrupted or manually rolled back.
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeFailureReason.HealthCheck">
            <summary>
            The upgrade failed because of health checks.
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeFailureReason.UpgradeDomainTimeout">
            <summary>
            The upgrade domain timeout expired.
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeFailureReason.OverallUpgradeTimeout">
            <summary>
            The overall upgrade timeout expired.
            </summary>
        </member>
        <member name="T:System.Fabric.NodeConfiguration">
            <summary>
            This class contains APIs for managing the configuration of the node.
            </summary>
        </member>
        <member name="M:System.Fabric.NodeConfiguration.GetNodeConfiguration">
            <summary>
            Gets the cluster manifest configured on that node.
            </summary>
            <returns>Gets the cluster manifest used to configure the node. Returns null if the node has never been configured.</returns>
        </member>
        <member name="M:System.Fabric.CodePackageDebugParameters.GetDebugParameters(System.Fabric.CodePackageDebugParameters[])">
            <summary>
            Returns JSON string representing CodePackageDebugParameters passed in.
            </summary>
             <param name="debugParameters">Array of CodePackageDebugParameters that need to be serialized into JSON. </param> 
        </member>
        <member name="M:System.Fabric.Common.Helpers.IsStatefulService(System.Type)">
            <summary>
            Returns true if it is stateful
            Returns false if it is stateless
            Returns null if it is both IFabricStatefulServiceReplica and IStatelessService
            Returns null if it is neither IFabricStatefulServiceReplica nor IStatelessService
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Helpers.CreateDirectoryIfNotExist(System.String,System.String)">
            <summary>
            Creates the given directory if it doesn't exist on the given machine
            If the machineName is null, the local machine is assumed to be the default
            </summary>
            <param name="directory"></param>
            <param name="machineName"></param>
        </member>
        <member name="M:System.Fabric.Common.Helpers.GetRemotePath(System.String,System.String)">
            <summary>
            Constructs and returns the remote path for the given path in the machine
            For e.g., for path = C:\temp; machineName = VM1, \\VM1\C$\temp will be returned
            if machineName is null, the given path will be returned as it is
            if machineName is IPV6 address, translate it into the format of \\(ipv6address).ipv6-literal.net\share.
            </summary>
            <param name="path"></param>
            <param name="machineName"></param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.Common.Helpers.CopyDirectory(System.String,System.String)">
            <summary>
            Copies the directory specified by sourcePath to the destPath
            For e.g. for sourcePath = C:\temp\package; targetpath = D:\temp,
            this will create D:\temp\package and copy contents of C:\temp\package to D:\temp\package 
            </summary>
            <param name="sourcePath"></param>
            <param name="destPath"></param>
        </member>
        <member name="M:System.Fabric.Common.ReleaseAssert.Failfast(System.String,System.Object[])">
            <summary>
            Failfast the process
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:System.Fabric.Common.Requires.ThrowIfNull(System.Object,System.String)">
            <summary>
            Call this method to check if an argument is null and throw <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <param name="argument">The argument to be checked.</param>
            <param name="argumentName">The name of the argument. This should not be null or empty.</param>
            <remarks>For better usability, it is recommended to use this method than <see cref="M:System.Fabric.Common.Requires.ArgumentRequirements`1.NotNull"/>.</remarks>
            <example>connection.ThrowIfArgumentNull("connection");</example>
        </member>
        <member name="M:System.Fabric.Common.Requires.ThrowIfNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Call this method to check if a string argument is null or whitespace and throw 
            <see cref="T:System.ArgumentNullException"/> or <see cref="T:System.ArgumentException"/> respectively.
            </summary>
            <param name="argument">The argument to be checked.</param>
            <param name="argumentName">The name of the argument. This should not be null or empty.</param>
            <remarks>For better usability, it is recommended to use this method than <see cref="M:System.Fabric.Common.Requires.ArgumentRequirements`1.NotNullOrWhiteSpace"/>.</remarks>
            <example>connectionString.ThrowIfArgumentNullOrWhiteSpace("connection");</example>        
        </member>
        <member name="M:System.Fabric.Common.Requires.Throw(System.Exception)">
            <summary>
            Call this method to throw an exception.
            </summary>
            <param name="exception">The exception to be thrown.</param>
            <remarks>
            Calling this method will log the exception and do other common processing, 
            and then it will throw the exception.
            </remarks>
        </member>
        <member name="M:System.Fabric.Common.Requires.ArgumentRequirements`1.NotNull">
            <summary>
            Call this method to check if an argument is null and throw <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <returns>The current instance of this class if the argument is valid.</returns>            
            <remarks>For better usability, it is recommended to use <see cref="M:System.Fabric.Common.Requires.ThrowIfNull(System.Object,System.String)"/> instead of this method.</remarks>
        </member>
        <member name="M:System.Fabric.Common.Requires.ArgumentRequirements`1.NotNullOrWhiteSpace">
            <summary>
            Call this method to check if a string argument is null or whitespace and throw 
            <see cref="T:System.ArgumentNullException"/> or <see cref="T:System.ArgumentException"/> respectively.            
            </summary>
            <returns>The current instance of this class if the argument is valid.</returns>            
            <remarks>For better usability, it is recommended to use <see cref="M:System.Fabric.Common.Requires.ThrowIfNullOrWhiteSpace(System.String,System.String)"/> instead of this method.</remarks>
        </member>
        <member name="M:System.Fabric.NoneSecurityCredentials.#ctor">
            <summary>
            Creates SecurityCredentials object with CredentialType.None.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.TemplateHelper">
            <summary>
            TemplateHelper - substitute templated content
            </summary>
        </member>
        <member name="M:System.Fabric.Common.TemplateHelper.ApplyTemplate(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Replaces all occurences of [[VARIABLE]] in templatedData with their associated values in the collection.
            Example: If templated data is "this is a [[VARIABLE_1]] [[VARIABLE_2]] message" and the collection contains
            {"[[VARIABLE_1]]" -> hello} and {"VARIABLE_2" -> world} this function will return
            "this is a hello world message"
            </summary>
            <param name="templatedData"></param>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="T:System.Fabric.Common.Tracing.Trace">
            <summary>
            Provides API for using trace.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.Trace.PerTaskEvents">
            <summary>
            Max number of events per task.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.Trace.IdFieldName">
            <summary>
            Name of the id field.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.Trace.SetDefaultLevel(System.Fabric.Common.Tracing.TraceSinkType,System.Fabric.Common.Tracing.TraceLevel)">
            <summary>
            Set default level for a sink type.
            </summary>
            <param name="sinkType">Type of the sink.</param>
            <param name="level">Default level for the sink.</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.Trace.SetDefaultSamplingRatio(System.Fabric.Common.Tracing.TraceSinkType,System.Double)">
            <summary>
            Set default sampling ratio for a sink type.
            </summary>
            <param name="sinkType">Type of the sink.</param>
            <param name="samplingRatio">Default sampling ratio for the sink.</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.Trace.AddFilter(System.Fabric.Common.Tracing.TraceSinkType,System.String)">
            <summary>
            Add filter for a sink.
            </summary>
            <param name="sinkType">Type of the sink.</param>
            <param name="filter">The filter to be applied for the sink.
            Syntax: task.event@id:level
            </param>
            <returns>Whether the filter is set correctly.</returns>
        </member>
        <member name="M:System.Fabric.Common.Tracing.Trace.RemoveFilter(System.Fabric.Common.Tracing.TraceSinkType,System.String)">
            <summary>
            Removes all filters based on source.
            </summary>
            <param name="sinkType">Type of the sink.</param>
            <param name="source">The source to be removed.
            Syntax: task.event@id:level
            </param>
            <returns>Whether the filter is removed correctly.</returns>
        </member>
        <member name="M:System.Fabric.Common.Tracing.Trace.InternalAddFilter(System.Fabric.Common.Tracing.TraceSinkType,System.String)">
            <summary>
            Add filter for a sink.
            </summary>
            <param name="sinkType">Type of the sink.</param>
            <param name="filter">The filter to be applied for the sink.
            Syntax: task.event@id:level
            </param>
            <returns>Whether the filter is set correctly.</returns>
        </member>
        <member name="M:System.Fabric.Common.Tracing.Trace.InternalAddFilter(System.Fabric.Common.Tracing.TraceSinkType,System.String,System.String,System.Fabric.Common.Tracing.TraceLevel,System.Int32)">
            <summary>
            Add filter for a sink.
            </summary>
            <param name="sink">Type of the sink.</param>
            <param name="taskName">Task name.</param>
            <param name="eventName">Event name.</param>
            <param name="level">Level for the filter.</param>
            <param name="samplingRatio">Sampling ratio for records below the level.</param>
            <returns>Whether the filter is set correctly.</returns>
        </member>
        <member name="M:System.Fabric.Common.Tracing.Trace.GetEventSource(System.Fabric.Common.Tracing.TraceTaskCodes)">
            <summary>
            Retrieve the TraceEventSource object for a given task.
            </summary>
            <param name="taskId">Task id.</param>
            <returns>The event source object for the given task.</returns>
        </member>
        <member name="M:System.Fabric.Common.Tracing.Trace.GetKeywordString(System.UInt64)">
            <summary>
            Converts the specified numeric keyword to its string name.
            </summary>
            <param name="keyword">The numeric keyword value.</param>
            <returns>The string name of the keyword.</returns>
        </member>
        <member name="M:System.Fabric.Common.Tracing.Trace.GenerateManifest(System.String,System.String,System.String[])">
            <summary>
            Generate the manifest for the events defined.
            </summary>
            <param name="path">The path for the manifest file.</param>
            <param name="targetFile">Path for the manifest target file.</param>
            <param name="inputFiles">Path for other manifest file to be merged.</param>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceChannelType">
            <summary>
            Channel type for ETW tracing.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceChannelType.Admin">
            <summary>
            Admin channel.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceChannelType.Operational">
            <summary>
            Operational channel.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceChannelType.Analytic">
            <summary>
            Analytic channel.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceChannelType.Debug">
            <summary>
            Debug channel.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceChannelType.DeprecatedOperational">
            <summary>
            Deprecated operational channel.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceEtwSink.EventProviderWrapper">
            <summary>
            This code is mostly copied from .NET implementation with a fix in
            bool type handling and some other minor simplifications.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceEventSource">
            <summary>
            Class encapsulating events defined for a task.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteError(System.String,System.String,System.Object[])">
            <summary>
            Write an error text event.
            </summary>
            <param name="type">Type of the event.</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteErrorWithId(System.String,System.String,System.String,System.Object[])">
            <summary>
            Write an error text event.
            </summary>
            <param name="type">Type of the event.</param>
            <param name="id">The id of the event.</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteExceptionAsError(System.String,System.Exception,System.String,System.Object[])">
            <summary>
            Writes a message with an exception
            </summary>
            <param name="type">Type of the event.</param>
            <param name="ex">The exception to trace</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteExceptionAsError(System.String,System.Exception)">
            <summary>
            Writes a message with an exception
            </summary>
            <param name="type">Type of the event.</param>
            <param name="ex">The exception to trace</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteExceptionAsErrorWithId(System.String,System.String,System.Exception,System.String,System.Object[])">
            <summary>
            Writes a message with an exception  and an id 
            </summary>
            <param name="type">Type of the event.</param>
            <param name="ex">The exception to trace</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteWarning(System.String,System.String,System.Object[])">
            <summary>
            Write a warning text event.
            </summary>
            <param name="type">Type of the event.</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteWarningWithId(System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a warning text event.
            </summary>
            <param name="type">Type of the event.</param>
            <param name="id">The id of the event.</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteExceptionAsWarning(System.String,System.Exception,System.String,System.Object[])">
            <summary>
            Writes a message with an exception
            </summary>
            <param name="type">Type of the event.</param>
            <param name="ex">The exception to trace</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteExceptionAsWarning(System.String,System.Exception)">
            <summary>
            Writes a message with an exception
            </summary>
            <param name="type">Type of the event.</param>
            <param name="ex">The exception to trace</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteExceptionAsWarningWithId(System.String,System.String,System.Exception,System.String,System.Object[])">
            <summary>
            Writes a message with an exception  and an id 
            </summary>
            <param name="type">Type of the event.</param>
            <param name="ex">The exception to trace</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteInfo(System.String,System.String,System.Object[])">
            <summary>
            Write an informational text event.
            </summary>
            <param name="type">Type of the event.</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteInfo(System.String)">
            <summary>
            Write an informational text event.
            </summary>
            <param name="type">Type of the event.</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteInfoWithId(System.String,System.String,System.String,System.Object[])">
            <summary>
            Write an informational text event.
            </summary>
            <param name="type">Type of the event.</param>
            <param name="id">The id of the event.</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteNoise(System.String,System.String,System.Object[])">
            <summary>
            Write a noise text event.
            </summary>
            <param name="type">Type of the event.</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteNoise(System.String)">
            <summary>
            Write a noise text event.
            </summary>
            <param name="type">Type of the event.</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteNoiseWithId(System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a noise text event.
            </summary>
            <param name="type">Type of the event.</param>
            <param name="id">The id of the event.</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceEventWriterBase">
            <summary>
            Writer for a structured event with Variant arguments.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventWriterBase.#ctor(System.Fabric.Common.Tracing.TraceTaskCodes,System.UInt16,System.String,System.Fabric.Common.Tracing.TraceLevel,System.Fabric.Common.Tracing.TraceChannelType,System.Fabric.Common.Tracing.TraceKeywords,System.String,System.Collections.Generic.KeyValuePair{System.String,System.Type}[])">
            <summary>
            Constructor.
            </summary>
            <param name="taskCode">Task id.</param>
            <param name="eventId">Event id within the task.</param>
            <param name="eventName">Event name.</param>
            <param name="level">Trace level for the event.</param>
            <param name="channel">Channel for the event.</param>
            <param name="keywords">Keywords for the event.</param>
            <param name="format">Format string for the event.</param>
            <param name="args">Array of argument name and type pairs for manifest.</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventWriterBase.VariantWrite(System.Int32,System.Fabric.Common.Tracing.Variant,System.Fabric.Common.Tracing.Variant,System.Fabric.Common.Tracing.Variant,System.Fabric.Common.Tracing.Variant,System.Fabric.Common.Tracing.Variant,System.Fabric.Common.Tracing.Variant,System.Fabric.Common.Tracing.Variant,System.Fabric.Common.Tracing.Variant,System.Fabric.Common.Tracing.Variant)">
            <summary>
            This is an internal method meant only for the tracing extensions.
            Please add using System.Fabric.Common.Tracing to get Write
            extension methods and add additional methods to 
            TraceEventWriterExtensions.cs.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceEventWriter">
            <summary>
            Writer for a structured event with 0 argument.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventWriter.#ctor(System.Fabric.Common.Tracing.TraceTaskCodes,System.UInt16,System.String,System.Fabric.Common.Tracing.TraceLevel,System.Fabric.Common.Tracing.TraceChannelType,System.Fabric.Common.Tracing.TraceKeywords,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="taskCode">Task id.</param>
            <param name="eventId">Event id within the task.</param>
            <param name="eventName">Event name.</param>
            <param name="level">Trace level for the event.</param>
            <param name="channel">Channel for the event.</param>
            <param name="keywords">Keywords for the event.</param>
            <param name="format">Format string for the event.</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventWriter.Write">
            <summary>
            Write out the event.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceEventWriter`1">
            <summary>
            Writer for a structured event with 1 argument.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventWriter`1.#ctor(System.Fabric.Common.Tracing.TraceTaskCodes,System.UInt16,System.String,System.Fabric.Common.Tracing.TraceLevel,System.Fabric.Common.Tracing.TraceChannelType,System.Fabric.Common.Tracing.TraceKeywords,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="taskCode">Task id.</param>
            <param name="eventId">Event id within the task.</param>
            <param name="eventName">Event name.</param>
            <param name="level">Trace level for the event.</param>
            <param name="channel">Channel for the event.</param>
            <param name="keywords">Keywords for the event.</param>
            <param name="format">Format string for the event.</param>
            <param name="argName0">Name for argument 0.</param>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceEventWriter`2">
            <summary>
            Writer for a structured event with 2 argument.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventWriter`2.#ctor(System.Fabric.Common.Tracing.TraceTaskCodes,System.UInt16,System.String,System.Fabric.Common.Tracing.TraceLevel,System.Fabric.Common.Tracing.TraceChannelType,System.Fabric.Common.Tracing.TraceKeywords,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="taskCode">Task id.</param>
            <param name="eventId">Event id within the task.</param>
            <param name="eventName">Event name.</param>
            <param name="level">Trace level for the event.</param>
            <param name="channel">Channel for the event.</param>
            <param name="keywords">Keywords for the event.</param>
            <param name="format">Format string for the event.</param>
            <param name="argName0">Name for argument 0.</param>
            <param name="argName1">Name for argument 1.</param>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceEventWriter`3">
            <summary>
            Writer for a structured event with 3 argument.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventWriter`3.#ctor(System.Fabric.Common.Tracing.TraceTaskCodes,System.UInt16,System.String,System.Fabric.Common.Tracing.TraceLevel,System.Fabric.Common.Tracing.TraceChannelType,System.Fabric.Common.Tracing.TraceKeywords,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="taskCode">Task id.</param>
            <param name="eventId">Event id within the task.</param>
            <param name="eventName">Event name.</param>
            <param name="level">Trace level for the event.</param>
            <param name="channel">Channel for the event.</param>
            <param name="keywords">Keywords for the event.</param>
            <param name="format">Format string for the event.</param>
            <param name="argName0">Name for argument 0.</param>
            <param name="argName1">Name for argument 1.</param>
            <param name="argName2">Name for argument 2.</param>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceEventWriter`4">
            <summary>
            Writer for a structured event with 4 argument.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventWriter`4.#ctor(System.Fabric.Common.Tracing.TraceTaskCodes,System.UInt16,System.String,System.Fabric.Common.Tracing.TraceLevel,System.Fabric.Common.Tracing.TraceChannelType,System.Fabric.Common.Tracing.TraceKeywords,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="taskCode">Task id.</param>
            <param name="eventId">Event id within the task.</param>
            <param name="eventName">Event name.</param>
            <param name="level">Trace level for the event.</param>
            <param name="channel">Channel for the event.</param>
            <param name="keywords">Keywords for the event.</param>
            <param name="format">Format string for the event.</param>
            <param name="argName0">Name for argument 0.</param>
            <param name="argName1">Name for argument 1.</param>
            <param name="argName2">Name for argument 2.</param>
            <param name="argName3">Name for argument 3.</param>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceEventWriter`5">
            <summary>
            Writer for a structured event with 5 argument.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventWriter`5.#ctor(System.Fabric.Common.Tracing.TraceTaskCodes,System.UInt16,System.String,System.Fabric.Common.Tracing.TraceLevel,System.Fabric.Common.Tracing.TraceChannelType,System.Fabric.Common.Tracing.TraceKeywords,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="taskCode">Task id.</param>
            <param name="eventId">Event id within the task.</param>
            <param name="eventName">Event name.</param>
            <param name="level">Trace level for the event.</param>
            <param name="channel">Channel for the event.</param>
            <param name="keywords">Keywords for the event.</param>
            <param name="format">Format string for the event.</param>
            <param name="argName0">Name for argument 0.</param>
            <param name="argName1">Name for argument 1.</param>
            <param name="argName2">Name for argument 2.</param>
            <param name="argName3">Name for argument 3.</param>
            <param name="argName4">Name for argument 4.</param>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceEventWriter`6">
            <summary>
            Writer for a structured event with 6 argument.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventWriter`6.#ctor(System.Fabric.Common.Tracing.TraceTaskCodes,System.UInt16,System.String,System.Fabric.Common.Tracing.TraceLevel,System.Fabric.Common.Tracing.TraceChannelType,System.Fabric.Common.Tracing.TraceKeywords,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="taskCode">Task id.</param>
            <param name="eventId">Event id within the task.</param>
            <param name="eventName">Event name.</param>
            <param name="level">Trace level for the event.</param>
            <param name="channel">Channel for the event.</param>
            <param name="keywords">Keywords for the event.</param>
            <param name="format">Format string for the event.</param>
            <param name="argName0">Name for argument 0.</param>
            <param name="argName1">Name for argument 1.</param>
            <param name="argName2">Name for argument 2.</param>
            <param name="argName3">Name for argument 3.</param>
            <param name="argName4">Name for argument 4.</param>
            <param name="argName5">Name for argument 5.</param>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceEventWriter`7">
            <summary>
            Writer for a structured event with 7 argument.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventWriter`7.#ctor(System.Fabric.Common.Tracing.TraceTaskCodes,System.UInt16,System.String,System.Fabric.Common.Tracing.TraceLevel,System.Fabric.Common.Tracing.TraceChannelType,System.Fabric.Common.Tracing.TraceKeywords,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="taskCode">Task id.</param>
            <param name="eventId">Event id within the task.</param>
            <param name="eventName">Event name.</param>
            <param name="level">Trace level for the event.</param>
            <param name="channel">Channel for the event.</param>
            <param name="keywords">Keywords for the event.</param>
            <param name="format">Format string for the event.</param>
            <param name="argName0">Name for argument 0.</param>
            <param name="argName1">Name for argument 1.</param>
            <param name="argName2">Name for argument 2.</param>
            <param name="argName3">Name for argument 3.</param>
            <param name="argName4">Name for argument 4.</param>
            <param name="argName5">Name for argument 5.</param>
            <param name="argName6">Name for argument 6.</param>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceEventWriter`8">
            <summary>
            Writer for a structured event with 8 argument.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventWriter`8.#ctor(System.Fabric.Common.Tracing.TraceTaskCodes,System.UInt16,System.String,System.Fabric.Common.Tracing.TraceLevel,System.Fabric.Common.Tracing.TraceChannelType,System.Fabric.Common.Tracing.TraceKeywords,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="taskCode">Task id.</param>
            <param name="eventId">Event id within the task.</param>
            <param name="eventName">Event name.</param>
            <param name="level">Trace level for the event.</param>
            <param name="channel">Channel for the event.</param>
            <param name="keywords">Keywords for the event.</param>
            <param name="format">Format string for the event.</param>
            <param name="argName0">Name for argument 0.</param>
            <param name="argName1">Name for argument 1.</param>
            <param name="argName2">Name for argument 2.</param>
            <param name="argName3">Name for argument 3.</param>
            <param name="argName4">Name for argument 4.</param>
            <param name="argName5">Name for argument 5.</param>
            <param name="argName6">Name for argument 6.</param>
            <param name="argName7">Name for argument 7.</param>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceEventWriter`9">
            <summary>
            Writer for a structured event with 9 argument.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventWriter`9.#ctor(System.Fabric.Common.Tracing.TraceTaskCodes,System.UInt16,System.String,System.Fabric.Common.Tracing.TraceLevel,System.Fabric.Common.Tracing.TraceChannelType,System.Fabric.Common.Tracing.TraceKeywords,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="taskCode">Task id.</param>
            <param name="eventId">Event id within the task.</param>
            <param name="eventName">Event name.</param>
            <param name="level">Trace level for the event.</param>
            <param name="channel">Channel for the event.</param>
            <param name="keywords">Keywords for the event.</param>
            <param name="format">Format string for the event.</param>
            <param name="argName0">Name for argument 0.</param>
            <param name="argName1">Name for argument 1.</param>
            <param name="argName2">Name for argument 2.</param>
            <param name="argName3">Name for argument 3.</param>
            <param name="argName4">Name for argument 4.</param>
            <param name="argName5">Name for argument 5.</param>
            <param name="argName6">Name for argument 6.</param>
            <param name="argName7">Name for argument 7.</param>
            <param name="argName8">Name for argument 8.</param>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceKeywords">
            <summary>
            User-defined ETW keywords. Values must be powers of 2, starting with 0x1.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceLevel">
            <summary>
            Trace level for records and sinks.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceLevel.Silent">
            <summary>
            Used for sink only.  The sink is effectively disabled.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceLevel.Critical">
            <summary>
            Critical error level.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceLevel.Error">
            <summary>
            Error level.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceLevel.Warning">
            <summary>
            Warning level.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceLevel.Info">
            <summary>
            Informational level.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceLevel.Noise">
            <summary>
            Noise level.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceSinkType">
            <summary>
            Trace sink types.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceSinkType.ETW">
            <summary>
            ETW sink.  This is the only sink that should be used for production environment.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceSinkType.TextFile">
            <summary>
            Text file sink.  Used mainly in dev environment for convenience.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceSinkType.Console">
            <summary>
            Console sink.  Must be highly filtered.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceSinkType.Max">
            <summary>
            The number of sink types.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceTaskCodes">
            <summary>
            Task id.  They take the most significant 8 bits of event id.
            The name of the task is the same as the enum member defined here.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.General">
            <summary>
            General task for managed code.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.ManagementCommon">
            <summary>
            The trace code for management common library.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.ImageStoreClient">
            <summary>
            The trace code for the Image Store code.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.FabricHost">
            <summary>
            The trace code for the Fabric Host code.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.FabricDeployer">
            <summary>
            The trace code for the Cluster Setup code.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.AzureLogCollector">
            <summary>
            The trace code for the Azure Log Collector code.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.SystemFabric">
            <summary>
            The trace code for System.Fabric
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.ImageBuilder">
            <summary>
            The trace code for ImageBuilder
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.FabricDCA">
            <summary>
            The trace code for DCA
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.FabricHttpGateway">
            <summary>
            The trace code for FabricHttpGateway
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.InfrastructureService">
            <summary>
            The trace code for InfrastructureService
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.DSTSTokenValidationService">
            <summary>
            The trace code for DSTS TokenValidationService
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.DSTSClient">
            <summary>
            The trace code for DSTS Client
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.FabricMonSvc">
            <summary>
            The trace code for Monitoring Service
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.TStore">
            <summary>
            Differential store
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.DistributedDictionary">
            <summary>
            Distributed Dictionary 
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.DistributedQueue">
            <summary>
            Distributed Queue 
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.Wave">
            <summary>
            Stream based waves
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.ReliableStream">
            <summary>
            Reliable Streams
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.DistributedVersionedDictionary">
            <summary>
            Distributed Versioned Dictionary 
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.Testability">
            <summary>
            Testability
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.RandomActionGenerator">
            <summary>
            RandomActionGenerator
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.FabricMdsAgentSvc">
            <summary>
            The trace code for MDS agent service
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.TReplicator">
            <summary>
            Transactional replicator
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.TStatefulServiceReplica">
            <summary>
            Stateful service replica that is part of the transactional replicator
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.TStateManager">
            <summary>
            State Manager that is part of the transactional replicator
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.ActorFramework">
            <summary>
            Actor framework
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.WRP">
            <summary>
            State Manager that is part of the transactional replicator
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.ServiceFramework">
            <summary>
            Service Framework (fabsrv)
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.Max">
            <summary>
            All valid task id must be below this number.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceTextFileSink">
            <summary>
            Sink that writes trace records to text file.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceTextFileSink.SetPath(System.String)">
            <summary>
            Set the path of the text file sink.
            Before the path is set, the sink is effectively disabled.
            </summary>
            <param name="path">Path for the text file where the records are written to.</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceTextFileSink.SetOption(System.String)">
            <summary>
            Set option for text file sink.
            </summary>
            <param name="option">If 'h' is contained, trace file is truncated
            every hour.
            If 'p' is contained, process id is appended to the file name.
            </param>
        </member>
        <member name="P:System.Fabric.Common.Serialization.JsonCustomizationAttribute.PropertyName">
            Defines the name of current property in JsonString.
        </member>
        <member name="P:System.Fabric.Common.Serialization.JsonCustomizationAttribute.IsIgnored">
            Defines the name of current property in JsonString.
        </member>
        <member name="P:System.Fabric.Common.Serialization.JsonCustomizationAttribute.JsonConverterTypeName">
            Defines the name of current property in JsonString.
        </member>
        <member name="P:System.Fabric.Common.Serialization.JsonCustomizationAttribute.ReCreateMember">
            Defines the name of current property in JsonString.
        </member>
        <member name="P:System.Fabric.Common.Serialization.JsonCustomizationAttribute.AppearanceOrder">
            Defines order of the this property in json string relative to other properties of the defining class.
        </member>
        <member name="T:System.Fabric.DeletePropertyOperation">
            <summary>
            Represents a property operation that deletes a property
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ApplicationDescription.ParameterList">
            Wrapper of property ApplicationParameters. Needed for serialization.
        </member>
        <member name="P:System.Fabric.Description.ApplicationUpgradeDescription.Parameters">
            Needed for serialization
            ReCreateMember will cause serializer to call setter of the property
            on deserialization rather than adding elements to the existing ParameterList.
            This will allow property "ApplicationParameters" can be populated on deserialization.
        </member>
        <member name="M:System.Fabric.Description.PartitionSchemeDescription.#ctor(System.Fabric.Description.PartitionSchemeDescription)">
            <summary>
            Instantiates a <see cref="T:System.Fabric.Description.PartitionSchemeDescription"/> class with parameters from another <see cref="T:System.Fabric.Description.PartitionSchemeDescription"/> object.
            </summary>
            <param name="other">The partition scheme description from which parameters are copied.</param>
        </member>
        <member name="P:System.Fabric.Description.SecurityGroupDescription.Sid">
            <summary>
            Primary SecurityIdentifier for the SecurityGroup
            </summary>
        </member>
        <member name="P:System.Fabric.Description.SecurityUserDescription.Sid">
            <summary>
            Primary SecurityIdentifier for the SecurityUser
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServiceCorrelationDescription.ToString">
            <summary> 
            Returns a string of the ServiceCorrelationDescription in the form 'ServiceName', 'Scheme'
            </summary>
            <returns>A string representing the ServiceCorrelationDescription object.</returns>
        </member>
        <member name="M:System.Fabric.Description.ServiceDescription.#ctor(System.Fabric.Description.ServiceDescription)">
            <summary>
            Instantiates a <see cref="T:System.Fabric.Description.ServiceDescription"/> class with parameters from another <see cref="T:System.Fabric.Description.ServiceDescription"/> object.
            </summary>
            <param name="other">The service description from which parameters are copied.</param>
        </member>
        <member name="P:System.Fabric.Description.ServiceDescription.PlacementPolicies">
             <summary> 
             Gets the list of ServicePlacementPolicyDescriptions belonging to the ServiceDescription.
             </summary>
            <value>The list of ServicePlacementPolicyDescriptions belonging to the ServiceDescription.</value>
        </member>
        <member name="P:System.Fabric.Description.ServiceDescription.IsDefaultMoveCostSpecified">
            <summary> 
            Gets whether a Default MoveCost is specified for a ServiceDescription.
            </summary>
            <value>A flag indicating whether a Default MoveCost is specified for a ServiceDescription.</value>
        </member>
        <member name="P:System.Fabric.Description.ServiceDescription.DefaultMoveCost">
            <summary> 
            Gets or sets the DefaultMoveCost of a service in a ServiceDescription
            </summary>
            <value> The value that the default MoveCost for the service should be set to for a service in its ServiceDescription.</value>
        </member>
        <member name="T:System.Fabric.Description.ServiceGroupMemberDescription">
            <summary>
            A ServiceGroupMemberDescription contains all of the information necessary to describe a member in a service group.
            TODO: Validate if this can be updated after a Read and what the behavior is
            </summary>
        </member>
        <member name="T:System.Fabric.Description.ServicePlacementInvalidDomainPolicyDescription">
            <summary>
            Placement policy description that requires a replica not to be placed in a particular domain.
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementPolicyDescription.#ctor(System.Fabric.Description.ServicePlacementPolicyDescription)">
            <summary> 
            Constructor for a ServicePlacementPolicyDescription
            </summary>
            <param name="other"> The ServicePlacementPolicyDescription that the new object should be constructed from.</param>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementInvalidDomainPolicyDescription.ToString">
            <summary> 
            Return a string representation of the InvalidDomain Service Placement Policy in the form 'InvalidDomain, DomainName' 
            </summary>
            <returns>A string representing the object.</returns>
        </member>
        <member name="T:System.Fabric.Description.ServicePlacementRequiredDomainPolicyDescription">
            <summary>
            Placement policy description that requires a replica to be placed in a particular domain.
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementRequiredDomainPolicyDescription.#ctor">
            <summary>
            Instantiates a new <see cref="T:System.Fabric.Description.ServicePlacementRequiredDomainPolicyDescription"/> object.
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementRequiredDomainPolicyDescription.#ctor(System.Fabric.Description.ServicePlacementRequiredDomainPolicyDescription)">
            <summary> 
            A copy constructor for the ServicePlacementRequiredDomainPolicyDescription class
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementRequiredDomainPolicyDescription.ToString">
            <summary> 
            Return a string representation of the RequiredDomain Service Placement Policy in the form 'RequiredDomain, DomainName' 
            </summary>
            <returns>A string representing the object.</returns>
        </member>
        <member name="P:System.Fabric.Description.ServicePlacementRequiredDomainPolicyDescription.DomainName">
            <summary> 
            Gets or sets the name of the domain specified in a ServicePlacementRequiredDomainPolicyDescription
            </summary>
            <value> A string containing the name of the domain that the ServicePlacementRequiredDomainPolicyDescription should respect.</value>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementPreferPrimaryDomainPolicyDescription.ToString">
            <summary> 
            Return a string representation of the PreferPrimaryDomain Service Placement Policy in the form 'PreferPrimaryDomain, DomainName' 
            </summary>
            <returns>A string representing the object.</returns>
        </member>
        <member name="T:System.Fabric.Description.ServicePlacementRequireDomainDistributionPolicyDescription">
            <summary>
            Placement policy description that requires replicas to be spread out over multiple domains.
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementRequireDomainDistributionPolicyDescription.ToString">
            <summary> 
            Return a string representation of the RequiredDomainDistribution Service Placement Policy in the form 'RequiredDomainDistribution, DomainName' 
            </summary>
            <returns>A string representing the object.</returns>
        </member>
        <member name="T:System.Fabric.Description.ServicePlacementNonPartiallyPlaceServicePolicyDescription">
            <summary>
            Placement policy description that describes a service placement where all replicas must be able to be placed in order for any replicas to be created.
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementNonPartiallyPlaceServicePolicyDescription.ToString">
            <summary> 
            Return a string representation of the ServicePlacementNonPartiallyPlaceServicePolicyDescription
            </summary>
            <returns>A string representing the object.</returns>
        </member>
        <member name="M:System.Fabric.Description.ServiceTypeDescription.#ctor(System.Fabric.Description.ServiceDescriptionKind)">
            <summary>
            Instantiates a <see cref="T:System.Fabric.Description.ServiceTypeDescription"/> class with specified service description kind.
            </summary>
            <param name="kind">The service description kind.</param>
        </member>
        <member name="M:System.Fabric.Description.ServiceTypeDescription.#ctor(System.Fabric.Description.ServiceTypeDescription)">
            <summary>
            Instantiates a <see cref="T:System.Fabric.Description.ServiceTypeDescription"/> class with parameters from another <see cref="T:System.Fabric.Description.ServiceTypeDescription"/> object.
            </summary>
            <param name="other">The service type description from which parameters are copied.</param>
        </member>
        <member name="P:System.Fabric.Description.ServiceTypeDescription.Extensions_">
            Wrapper of property "Extensions". Needed for serialization.
            Native serializer convert dictionary to JsonArray like [{key: "k", value: "v"}]
            rather than {key: value} so this is needed to serialize this as JsonArray.
            ObjectCreationHandling.Replace will cause serializer to use setter while deserializing this property.
        </member>
        <member name="P:System.Fabric.Description.ServiceTypeDescription.IsStateful">
            <summary>
            Indicates whether the service is stateful.
            </summary>
            <value>Flag indicating whether the service is stateful.</value>
            <remarks>Exposed by REST API and native code.</remarks>
        </member>
        <member name="M:System.Fabric.Description.ServiceUpdateDescription.#ctor(System.Fabric.Description.ServiceDescriptionKind)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Description.ServiceUpdateDescription"/> class
            The class help construct a update API call to update service description <see cref="T:System.Fabric.Description.ServiceDescription"/> .        
            </summary>
            <param name="kind">The  <see cref="T:System.Fabric.Description.ServiceDescriptionKind"/> that describes whether the service is stateful or stateless.</param>
        </member>
        <member name="P:System.Fabric.Description.ServiceUpdateDescription.Kind">
            <summary>
            <see cref="T:System.Fabric.Description.ServiceDescriptionKind"/> class describes whether the service is stateful or stateless.
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ServiceUpdateDescription.PlacementConstraints">
            <summary>
            The placement constraints for this service. A placement constraint restrict the replica being placed on some nodes.
            Placement constraints is a combined logic of each placement constraint.
            </summary>
            <value>PlacementConstraints property gets/sets the value of the string field, placementConstraints.</value>
            <example> nodeName == node1 || nodeType == databaseNode </example>
        </member>
        <member name="P:System.Fabric.Description.ServiceUpdateDescription.Metrics">
            <summary>
            A map of service metric name to service metric description. <see cref="T:System.Fabric.Description.ServiceLoadMetricDescription"/> 
            </summary>
            <value>Metrics property gets/sets the value of the KeyedCollection field, _metrics.</value>
        </member>
        <member name="P:System.Fabric.Description.ServiceUpdateDescription.Correlations">
            <summary>
            A list of service correlations. <see cref="T:System.Fabric.Description.ServiceCorrelationDescription"/>
            </summary>
            <value>Correlations property gets/sets the value of the IList field, _correlations.</value>
        </member>
        <member name="P:System.Fabric.Description.ServiceUpdateDescription.PlacementPolicies">
            <summary>
            A list of service placement policies. <see cref="T:System.Fabric.Description.ServicePlacementPolicyDescription"/>
            </summary>
            <value>PlacementPolicies property gets/sets the value of the IList field, _placementPolicies.</value>
        </member>
        <member name="P:System.Fabric.Description.ServiceUpdateDescription.DefaultMoveCost">
            <summary>
            The default move cost. <see cref="T:System.Fabric.MoveCost"/>
            If not provided, the value will be <see cref="F:System.Fabric.Interop.NativeTypes.FABRIC_MOVE_COST.FABRIC_MOVE_COST_LOW"/>
            </summary>
            <value>DefaultMoveCost property gets/sets the value of the MoveCost field, _defaultMoveCost.</value>
        </member>
        <member name="M:System.Fabric.FabricClient.#ctor(System.Fabric.FabricClientRole)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricClient"/> class with the specified fabric client role.
            </summary>
            <param name="clientRole">The fabric client role.</param>
        </member>
        <member name="M:System.Fabric.FabricClient.UpdateSecurityCredentials(System.Fabric.SecurityCredentials)">
            <summary>
            Updates the fabric client security credentials.
            </summary>
            <param name="credentials">The new security credentials to be used.</param>
        </member>
        <member name="M:System.Fabric.FabricClient.Dispose">
            <summary>
            Disposes of the fabric client.
            </summary>
        </member>
        <member name="E:System.Fabric.FabricClient.ClientConnected">
            <summary>
            Occurs when the client is connected to gateway.
            </summary>
        </member>
        <member name="E:System.Fabric.FabricClient.ClientDisconnected">
            <summary>
            Occurs when the client is disconnected from the gateway.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.ResetPartitionLoadAsync(System.Guid)">
            <summary> 
            Resets a given partition's load
            </summary>
            <param name="partitionId">The partition Id represented as a Guid </param>
            <returns>The task associated with this async method. </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.ResetPartitionLoadAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)">
            <summary> 
            Resets a given partition's load
            </summary>
            <param name="partitionId">The partition Id represented as a Guid </param>
            <param name="timeout"> The length of time within which the async method must complete in order for the method to not time out.</param>
            <param name="cancellationToken">A cancellation token for this method. </param>
            <returns>The task associated with this async method. </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.ToggleVerboseServicePlacementHealthReportingAsync(System.Boolean)">
            <summary> 
            Toggles whether the Cluster Resource Balancer will report a health warning when it's unable to place a replica.
            </summary>
            <param name="enabled">A boolean value, which if true causes reporting when a replica is unabled to be placed. </param>
            <returns>The task associated with this async method. </returns>
            <remarks>If this method is called twice with the value false, it clears from memory the reports that would potentially have been emitted.
            If this method is called with the value true, the Cluster Resource Balancer will report a health warning when it's unable to place a replica.
            If such health warnings are blocking a monitored upgrade's health checks the toggle can be switched off. </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.ToggleVerboseServicePlacementHealthReportingAsync(System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary> 
            Toggles whether the Cluster Resource Balancer will report a health warning when it's unable to place a replica.
            </summary>
            <param name="enabled">A boolean value, which if true causes reporting when a replica is unabled to be placed. </param>
            <returns>The task associated with this async method. </returns>
            <param name="timeout"> The length of time within which the async method must complete in order for the method to not time out.</param>
            <param name="cancellationToken">A cancellation token for this method. </param>
            <remarks>If this method is called twice with the value false, it clears from memory the reports that would potentially have been emitted.
            If this method is called with the value true, the Cluster Resource Balancer will report a health warning when it's unable to place a replica.
            If such health warnings are blocking a monitored upgrade's health checks, the toggle can be switched off. </remarks>
        </member>
        <member name="T:System.Fabric.FabricClient.GatewayInformationEventArgs">
            <summary>
            Represents the event arguments for gateway related events, like connect and disconnect.
            </summary>
            <remarks>Provides more information about the gateway that the client is configured with.</remarks>
        </member>
        <member name="P:System.Fabric.FabricClient.GatewayInformationEventArgs.GatewayInformation">
            <summary>
            Gets the gateway information.
            </summary>
            <value>The gateway information.</value>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetNodeListAsync(System.String,System.String)">
            <summary>
            Gets the details for all nodes in the cluster or the specified node.
            </summary>
            <param name="nodeNameFilter">The filter for the node name.</param>
            <param name="continuationToken">The continuation token obtained from a previous query.</param>
            <returns>A task that represents the asynchronous operation. It contains the list of nodes as <see cref="T:System.Fabric.Query.NodeList"/>.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetNodeListAsync(System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the details for all nodes in the cluster or the specified node.
            </summary>
            <param name="nodeNameFilter">The filter for the node name.</param>
            <param name="continuationToken">The continuation token obtained from a previous query.</param>
            <param name="timeout">Specifies the duration this operation has to complete before timing out.</param>
            <param name="cancellationToken">Propagates notification that operation should be canceled.</param>
            <returns>A task that represents the asynchronous operation. It contains the list of nodes as <see cref="T:System.Fabric.Query.NodeList"/>.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetApplicationListAsync(System.Uri,System.String)">
            <summary>
            Gets the details for all or a specific application created in the system.
            </summary>
            <param name="applicationNameFilter">The application name to get details for.</param>
            <param name="continuationToken">The continuation token obtained from a previous query.</param>
            <returns>A task that represents the asynchronous operation. It contains the list of applications as <see cref="T:System.Fabric.Query.ApplicationList"/>.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetApplicationListAsync(System.Uri,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the details for all or a specific application created in the system.
            </summary>
            <param name="applicationNameFilter">The application name to get details for.</param>
            <param name="continuationToken">The continuation token obtained from a previous query.</param>
            <param name="timeout">Specifies the duration this operation has to complete before timing out.</param>
            <param name="cancellationToken">Propagates notification that operation should be canceled.</param>
            <returns>A task that represents the asynchronous operation. It contains the list of applications as <see cref="T:System.Fabric.Query.ApplicationList"/>.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetServiceListAsync(System.Uri,System.Uri,System.String)">
            <summary>
            Gets the details for all application services or just the specified service.
            </summary>
            <param name="applicationName">The name of the application.</param>
            <param name="serviceNameFilter">The filter for the service name.</param>
            <param name="continuationToken">The continuation token obtained from a previous query.</param>
            <returns>A task that represents the asynchronous operation. It contains the list of services as <see cref="T:System.Fabric.Query.ServiceList"/>.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetServiceListAsync(System.Uri,System.Uri,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the details for all application services or just the specified service.
            </summary>
            <param name="applicationName">The name of the application.</param>
            <param name="serviceNameFilter">The filter for the service name.</param>
            <param name="continuationToken">The continuation token obtained from a previous query.</param>
            <param name="timeout">Specifies the duration this operation has to complete before timing out.</param>
            <param name="cancellationToken">Propagates notification that operation should be canceled.</param>
            <returns>A task that represents the asynchronous operation. It contains the list of services as <see cref="T:System.Fabric.Query.ServiceList"/>.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetPartitionListAsync(System.Uri,System.String)">
            <summary>
            Gets the details for all service partitions.
            </summary>
            <param name="serviceName">The name of the service.</param>
            <param name="continuationToken">The continuation token obtained from a previous query.</param>
            <returns>A task that represents the asynchronous operation. It contains the list of service partition as <see cref="T:System.Fabric.Query.ServicePartitionList"/>.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetPartitionListAsync(System.Uri,System.Nullable{System.Guid},System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the details for all service partition or just the specified partition.
            </summary>
            <param name="serviceName">The name of the service.</param>
            <param name="partitionIdFilter">The filter for the partition identifier.</param>
            <param name="continuationToken">The continuation token obtained from a previous query.</param>
            <param name="timeout">Specifies the duration this operation has to complete before timing out.</param>
            <param name="cancellationToken">Propagates notification that operation should be canceled.</param>
            <returns>A task that represents the asynchronous operation. It contains the list of service partitions as <see cref="T:System.Fabric.Query.ServicePartitionList"/>.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetReplicaListAsync(System.Guid,System.String)">
            <summary>
            Gets the details for all partition replicas.
            </summary>
            <param name="partitionId">The partition identifier.</param>
            <param name="continuationToken">The continuation token obtained from a previous query.</param>
            <returns>A task that represents the asynchronous operation. It contains the list of replicas as <see cref="T:System.Fabric.Query.ServiceReplicaList"/>.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetReplicaListAsync(System.Guid,System.Int64,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the details for all partition replicas that match the replica or instance filter.
            </summary>
            <param name="partitionId">The partition identifier.</param>
            <param name="replicaIdOrInstanceIdFilter">The replica or instance id.</param>
            <param name="timeout">Specifies the duration this operation has to complete before timing out.</param>
            <param name="cancellationToken">Propagates notification that operation should be canceled.</param>
            <returns>A task that represents the asynchronous operation. It contains the list of replicas as <see cref="T:System.Fabric.Query.ServiceReplicaList"/>.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetReplicaListAsync(System.Guid,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the details for all partition replicas.
            </summary>
            <param name="partitionId">The partition identifier.</param>
            <param name="continuationToken">The continuation token obtained from a previous query.</param>
            <param name="timeout">Specifies the duration this operation has to complete before timing out.</param>
            <param name="cancellationToken">Propagates notification that operation should be canceled.</param>
            <returns>A task that represents the asynchronous operation. It contains the list of replicas as <see cref="T:System.Fabric.Query.ServiceReplicaList"/>.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetReplicaListAsync(System.Guid,System.Int64,System.Fabric.Query.ServiceReplicaStatusFilter,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the details for all partition replicas that match the replica or instance filter and the status filter.
            </summary>
            <param name="partitionId">The partition identifier.</param>
            <param name="replicaIdOrInstanceIdFilter">The replica or instance id.</param>
            <param name="replicaStatusFilter">The replica status filter.</param>
            <param name="timeout">Specifies the duration this operation has to complete before timing out.</param>
            <param name="cancellationToken">Propagates notification that operation should be canceled.</param>
            <returns>A task that represents the asynchronous operation. It contains the list of replicas as <see cref="T:System.Fabric.Query.ServiceReplicaList"/>.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetReplicaListAsync(System.Guid,System.Int64,System.Fabric.Query.ServiceReplicaStatusFilter,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the details for all partition replicas or the specified replica.
            </summary>
            <param name="partitionId">The partition identifier.</param>
            <param name="replicaIdOrInstanceIdFilter">The filter for the replica identifier or instance identifier.</param>
            <param name="replicaStatusFilter">The filter used for matching the replica status for replicas that should be returned by query.</param>
            <param name="continuationToken">The continuation token obtained from a previous query.</param>
            <param name="timeout">Specifies the duration this operation has to complete before timing out.</param>
            <param name="cancellationToken">Propagates notification that operation should be canceled.</param>
            <returns>A task that represents the asynchronous operation. It contains the list of replicas as <see cref="T:System.Fabric.Query.ServiceReplicaList"/>.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.Boolean)">
            <summary>
            Removes a service replica.
            </summary>
            <param name="nodeName">The name of the node.</param>
            <param name="partitionId">The partition identifier.</param>
            <param name="replicaOrInstanceId">The replica or instance identifier.</param>
            <param name="forceRemove">Flag indicating whether the replica should be removed forcefully.</param>
            <returns>A Task representing the operation.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Removes a service replica.
            </summary>
            <param name="nodeName">The name of the node.</param>
            <param name="partitionId">The partition identifier.</param>
            <param name="replicaOrInstanceId">The replica or instance identifier.</param>
            <param name="forceRemove">Flag indicating whether the replica should be forced removed.</param>
            <param name="timeout">The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</param>
            <returns>A Task representing the operation.</returns>
        </member>
        <member name="T:System.Fabric.FabricErrorCode">
            <summary>
            Publicly exposed error codes
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.UserRoleClientCertificateNotConfigured">
            <summary>
            Indicates that certificate for user role (<see cref="F:System.Fabric.FabricClientRole.User"/>)
            <see cref="T:System.Fabric.FabricClient"/> is not setup.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ImageStoreAcquireFileLockFailed">
            <summary>
            A FabricErrorCode that indicates that the operation failed to acquire a lock.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.MultithreadedTransactionsNotAllowed">
            <summary>
            FabricErrorCode that indicates that one transaction can't be used by multiple threads simultaneously.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ConstraintKeyUndefined">
            <summary>
            A FabricErrorCode that indicates the specified constraint key is undefined.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidPackageSharingPolicy">
            <summary>
            A FabricErrorCode that indicates the package sharing policy is incorrect.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.PreDeploymentNotAllowed">
            <summary>
            Predeployed of application package on Node not allowed. Predeployment feature requires ImageCache to be enabled on node.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidBackupSetting">
            <summary>
            Invalid backup setting. E.g. incremental backup option is not set upfront etc.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidReplicaOperation">
            <summary>
            Cannot restart a replica of a volatile stateful service or an instance of a stateless service
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidReplicaStateForReplicaOperation">
            <summary>
            The replica is currently transitioning (closing or opening) and the operation cannot be performed at this time
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.MissingFullBackup">
            <summary>
            Incremental backups can only be done after an initial full backup.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.BackupInProgress">
            <summary>
            A backup is currently in progress.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.PLBNotReady">
            <summary>
            The Cluster Resource Balancer is not yet ready to handle the operation.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.BackupDirectoryNotEmpty">
            <summary>
            The backup directory is not empty.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ForceNotSupportedForReplicaControlOperation">
            <summary>
            The replica belongs to a self-activated service. The ForceRemove option is not supported for such replicas
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ConnectionDenied">
            <summary>
            A FabricErrorCode that indicates the connection was denied by the remote side.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ServerAuthenticationFailed">
            <summary>
            A FabricErrorCode that indicates the authentication failed.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.FabricCannotConnect">
            <summary>
            A FabricErrorCode that indicates there was a connection failure.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.FabricMessageTooLarge">
            <summary>
            A FabricErrorCode that indicates the message is too large.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ConstraintNotSatisfied">
            <summary>
            The service's and cluster's configuration settings would result in a constraint-violating state if the operation were executed.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.FabricEndpointNotFound">
            <summary>
            A FabricErrorCode that indicates the specified endpoint was not found.
            </summary>
        </member>
        <member name="T:System.Fabric.FabricConnectionDeniedException">
            <summary>
            The exception that is thrown when connection is denied.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricConnectionDeniedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricConnectionDeniedException"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricConnectionDeniedException.#ctor(System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricConnectionDeniedException"/> class with a specified <see cref="T:System.Fabric.FabricErrorCode"/>.
            </summary>
            <param name="errorCode">The error code that the exception is wrapping around.</param>
        </member>
        <member name="M:System.Fabric.FabricConnectionDeniedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricConnectionDeniedException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricConnectionDeniedException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricConnectionDeniedException"/> class with a specified error message and error code.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="errorCode">The error code that the exception is wrapping around.</param>
        </member>
        <member name="M:System.Fabric.FabricConnectionDeniedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricConnectionDeniedException"/> class with a specified error message and
            a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:System.Fabric.FabricConnectionDeniedException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricConnectionDeniedException"/> class with a specified error message,
            a reference to the inner exception that is the cause of this exception and an error code.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
            <param name="errorCode">The error code that the exception is wrapping around.</param>
        </member>
        <member name="M:System.Fabric.FabricConnectionDeniedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricConnectionDeniedException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:System.Fabric.FabricConnectionDeniedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricConnectionDeniedException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <param name="errorCode">The error code that the exception is wrapping around.</param>
        </member>
        <member name="T:System.Fabric.FabricServerAuthenticationFailedException">
            <summary>
            The exception that is thrown when server authentication failed.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricServerAuthenticationFailedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricServerAuthenticationFailedException"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricServerAuthenticationFailedException.#ctor(System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricServerAuthenticationFailedException"/> class with a specified <see cref="T:System.Fabric.FabricErrorCode"/>.
            </summary>
            <param name="errorCode">The error code that the exception is wrapping around.</param>
        </member>
        <member name="M:System.Fabric.FabricServerAuthenticationFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricServerAuthenticationFailedException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricServerAuthenticationFailedException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricServerAuthenticationFailedException"/> class with a specified error message and error code.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="errorCode">The error code that the exception is wrapping around.</param>
        </member>
        <member name="M:System.Fabric.FabricServerAuthenticationFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricServerAuthenticationFailedException"/> class with a specified error message and
            a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:System.Fabric.FabricServerAuthenticationFailedException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricServerAuthenticationFailedException"/> class with a specified error message,
            a reference to the inner exception that is the cause of this exception and an error code.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
            <param name="errorCode">The error code that the exception is wrapping around.</param>
        </member>
        <member name="M:System.Fabric.FabricServerAuthenticationFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricServerAuthenticationFailedException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:System.Fabric.FabricServerAuthenticationFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricServerAuthenticationFailedException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <param name="errorCode">The error code that the exception is wrapping around.</param>
        </member>
        <member name="T:System.Fabric.FabricInvalidAddressException">
            <summary>
            The exception that is thrown when an address is not recognized by Service fabric.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricInvalidAddressException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidAddressException"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricInvalidAddressException.#ctor(System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidAddressException"/> class with the specified error code.
            </summary>
            <param name="errorCode">Error code associated with the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricInvalidAddressException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidAddressException"/> class with the specified error message.
            </summary>
            <param name="message">Error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricInvalidAddressException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidAddressException"/> class with the specified error code and message.
            </summary>
            <param name="message">Error message that explains the reason for the exception.</param>
            <param name="errorCode">Error code associated with the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricInvalidAddressException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidAddressException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">Error message that explains the reason for the exception.</param>
            <param name="inner">Exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:System.Fabric.FabricInvalidAddressException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidAddressException"/> class with the specified error message,
            a reference to the inner exception that is the cause of this exception and specified error code.
            </summary>
            <param name="message">Error message that explains the reason for the exception.</param>
            <param name="inner">Exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
            <param name="errorCode">Error code associated with the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricInvalidAddressException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidAddressException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:System.Fabric.FabricInvalidAddressException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidAddressException"/> class with serialized data and specified error code.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <param name="errorCode">Error code associated with the exception.</param>
        </member>
        <member name="T:System.Fabric.FabricMissingFullBackupException">
            <summary>
            The exception that is thrown when an attempt is made to create an incremental backup of the key-value store
            before an initial full backup is created.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricMissingFullBackupException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricMissingFullBackupException"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricMissingFullBackupException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricMissingFullBackupException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricMissingFullBackupException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricMissingFullBackupException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:System.Fabric.FabricMissingFullBackupException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricMissingFullBackupException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:System.Fabric.FabricNotReadableException">
            <summary>
            Exception that is thrown when a partition cannot accept reads.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricNotReadableException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricNotReadableException"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricNotReadableException.#ctor(System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricNotReadableException"/> class with the specified error code.
            </summary>
            <param name="errorCode">Error code associated with the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricNotReadableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricNotReadableException"/> class with the specified error message.
            </summary>
            <param name="message">Error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricNotReadableException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricNotReadableException"/> class with the specified error code and message.
            </summary>
            <param name="message">Error message that explains the reason for the exception.</param>
            <param name="errorCode">Error code associated with the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricNotReadableException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricNotReadableException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">Error message that explains the reason for the exception.</param>
            <param name="inner">Exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:System.Fabric.FabricNotReadableException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricNotReadableException"/> class with the specified error message,
            a reference to the inner exception that is the cause of this exception and specified error code.
            </summary>
            <param name="message">Error message that explains the reason for the exception.</param>
            <param name="inner">Exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
            <param name="errorCode">Error code associated with the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricNotReadableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricNotReadableException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:System.Fabric.FabricNotReadableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricNotReadableException"/> class with serialized data and specified error code.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <param name="errorCode">Error code associated with the exception.</param>
        </member>
        <member name="T:System.Fabric.FabricImageStoreException">
            <summary>
            Exception that is thrown when perform ImageStore operations.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricImageStoreException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricImageStoreException"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricImageStoreException.#ctor(System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricImageStoreException"/> class with a specified <see cref="T:System.Fabric.FabricErrorCode"/>.
            </summary>
            <param name="errorCode">The error code that the exception is wrapping around.</param>
        </member>
        <member name="M:System.Fabric.FabricImageStoreException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricImageStoreException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricImageStoreException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricImageStoreException"/> class with a specified error message and error code.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="errorCode">The error code that the exception is wrapping around.</param>
        </member>
        <member name="M:System.Fabric.FabricImageStoreException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricImageStoreException"/> class with a specified error message and
            a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:System.Fabric.FabricImageStoreException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricImageStoreException"/> class with a specified error message,
            a reference to the inner exception that is the cause of this exception and an error code.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
            <param name="errorCode">The error code that the exception is wrapping around.</param>
        </member>
        <member name="M:System.Fabric.FabricImageStoreException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricImageStoreException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:System.Fabric.FabricImageStoreException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricImageStoreException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <param name="errorCode">The error code that the exception is wrapping around.</param>
        </member>
        <member name="T:System.Fabric.FabricBackupInProgressException">
            <summary>
            The exception that is thrown when an attempt is made to create a backup when a previous backup is in progress.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricBackupInProgressException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricBackupInProgressException"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricBackupInProgressException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricBackupInProgressException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricBackupInProgressException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricBackupInProgressException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:System.Fabric.FabricBackupInProgressException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricBackupInProgressException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:System.Fabric.FabricBackupDirectoryNotEmptyException">
            <summary>
            The exception that is thrown when the user provided backup directory is not empty.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricBackupDirectoryNotEmptyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricBackupDirectoryNotEmptyException"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricBackupDirectoryNotEmptyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricBackupDirectoryNotEmptyException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricBackupDirectoryNotEmptyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricBackupDirectoryNotEmptyException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:System.Fabric.FabricBackupDirectoryNotEmptyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricBackupDirectoryNotEmptyException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:System.Fabric.FabricReplicationOperationTooLargeException">
            <summary>
            Exception indicating that the associated replication operation is larger than the configured limit
            </summary>
        </member>
        <member name="M:System.Fabric.FabricReplicationOperationTooLargeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricReplicationOperationTooLargeException"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricReplicationOperationTooLargeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricReplicationOperationTooLargeException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricReplicationOperationTooLargeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricReplicationOperationTooLargeException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:System.Fabric.FabricReplicationOperationTooLargeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricReplicationOperationTooLargeException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:System.Fabric.FabricServiceNotFoundException">
            <summary>
            Exception indicating that there is no Service Found by that name.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricServiceNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricServiceNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricServiceNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricServiceNotFoundException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricServiceNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricServiceNotFoundException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:System.Fabric.FabricServiceNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricServiceNotFoundException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:System.Fabric.FabricCannotConnectException">
            <summary>
            Exception indicating that there is CannotConnect Error
            </summary>
        </member>
        <member name="M:System.Fabric.FabricCannotConnectException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricCannotConnectException"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricCannotConnectException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricCannotConnectException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricCannotConnectException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricCannotConnectException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:System.Fabric.FabricCannotConnectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricCannotConnectException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:System.Fabric.FabricMessageTooLargeException">
            <summary>
            Exception indicating that Message is too large.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricMessageTooLargeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricMessageTooLargeException"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricMessageTooLargeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricMessageTooLargeException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricMessageTooLargeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricMessageTooLargeException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:System.Fabric.FabricMessageTooLargeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricMessageTooLargeException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:System.Fabric.FabricEndpointNotFoundException">
            <summary>
            Exception indicating that the specified endpoint was not found.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricEndpointNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricEndpointNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricEndpointNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricEndpointNotFoundException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricEndpointNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricEndpointNotFoundException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:System.Fabric.FabricEndpointNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricEndpointNotFoundException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:System.Fabric.FabricReplicator">
            <summary>
            This is for internal use only.
            </summary>
        </member>
        <member name="P:System.Fabric.FabricUpgradeProgress.StartTimestampUtc">
            <summary>
            Gets the time at which the upgrade started.
            </summary>
            <value>The time at which the upgrade started in UTC.</value>
        </member>
        <member name="P:System.Fabric.FabricUpgradeProgress.FailureTimestampUtc">
            <summary>
            Gets the time at which the upgrade failed.
            </summary>
            <value>The time at which the upgrade failed in UTC.</value>
        </member>
        <member name="P:System.Fabric.FabricUpgradeProgress.FailureReason">
            <summary>
            Gets the category of upgrade failure if the upgrade failed.
            </summary>
            <value>The category of upgrade failure. <see cref="T:System.Fabric.UpgradeFailureReason"/>.</value>
        </member>
        <member name="P:System.Fabric.FabricUpgradeProgress.UpgradeDomainProgressAtFailure">
            <summary>
            Gets structured information about what actions were being performed by the system at the moment of upgrade failure.
            </summary>
            <value>The upgrade progress details. <see cref="T:System.Fabric.UpgradeDomainProgress"/>.</value>
        </member>
        <member name="T:System.Fabric.GetPropertyOperation">
            <summary>
            Represents a property operation that retrieves a property
            </summary>
        </member>
        <member name="T:System.Fabric.Health.ApplicationTypeHealthPolicyMap">
            <summary>
            Defines a policy map with entries for application type health policies, which is used during cluster health evaluation.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ApplicationTypeHealthPolicyMap.#ctor">
            <summary>
            Instantiates an <see cref="T:System.Fabric.Health.ApplicationTypeHealthPolicyMap"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ApplicationTypeHealthPolicyMap.Add(System.String,System.Byte)">
            <summary>
            Adds an entry in the map.
            </summary>
            <param name="appTypeName">The application type name.</param>
            <param name="value">The max percent unhealthy applications allowed for the application type. Must be between 0 and 100.</param>
        </member>
        <member name="T:System.Fabric.Health.ApplicationTypeApplicationsHealthEvaluation">
            <summary>
            Represents health evaluation for applications of an application type.
            </summary>
            <remarks><para>The application type applications evaluation can be returned when cluster health evaluation returns unhealthy aggregated health state, 
            either <see cref="F:System.Fabric.Health.HealthState.Error"/> or <see cref="F:System.Fabric.Health.HealthState.Warning"/>.
            It contains health evaluations for each unhealthy application type application that impacted current aggregated health state.</para></remarks>
        </member>
        <member name="P:System.Fabric.Health.ApplicationTypeApplicationsHealthEvaluation.ApplicationTypeName">
            <summary>
            Gets the application type name.
            </summary>
            <value>The application type name.</value>
        </member>
        <member name="P:System.Fabric.Health.ApplicationTypeApplicationsHealthEvaluation.UnhealthyEvaluations">
            <summary>
            Gets the list of unhealthy evaluations that led to the aggregated health state. Includes all the unhealthy <see cref="T:System.Fabric.Health.ApplicationHealthEvaluation"/> of this application type that impacted the aggregated health.
            </summary>
            <value>The list of unhealthy evaluations.</value>
        </member>
        <member name="P:System.Fabric.Health.ApplicationTypeApplicationsHealthEvaluation.MaxPercentUnhealthyApplications">
            <summary>
            Gets the maximum allowed percentage of unhealthy applications for the application type, specified as an entry in <see cref="T:System.Fabric.Health.ApplicationTypeHealthPolicyMap"/>.
            </summary>
            <value>The maximum allowed percentage of unhealthy applications for the application type.</value>
        </member>
        <member name="P:System.Fabric.Health.ApplicationTypeApplicationsHealthEvaluation.TotalCount">
            <summary>
            Gets the total number of applications of the application type found in the health store.
            </summary>
            <value>The total number of applications of the application type.</value>
        </member>
        <member name="P:System.Fabric.Health.ClusterHealthPolicy.ApplicationTypeHealthPolicyMap">
            <summary>
            Gets the map with MaxPercentUnhealthyApplications per application type name. 
            </summary>
            <value>The application type health policy map with MaxPercentUnhealthyApplications per application type name.</value>
            <remarks>If no policy is specified for an application type name, the default MaxPercentUnhealthyApplications is used for evaluation.</remarks>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.ApplicationTypeApplications">
            <summary>
            Indicates that the health evaluation is for the application type applications.
            </summary>
        </member>
        <member name="T:System.Fabric.Health.HealthEvent">
            <summary>
            A HealthEvent object is a structure which contains the health information that is used
            while reporting health on an entity via ReportHealth API
            </summary>
        </member>
        <member name="P:System.Fabric.Health.HealthEvent.SourceUtcTimestamp">
            <summary>
            The time when the health report was sent by the source. 
            </summary>
        </member>
        <member name="P:System.Fabric.Health.HealthEvent.LastModifiedUtcTimestamp">
            <summary>
            The time when the health report was receied and processed by the health store.
            </summary>
        </member>
        <member name="P:System.Fabric.Health.HealthEvent.IsExpired">
            <summary>
            Indicates if the health event is expired as determined by the TTL in the health information.
            </summary>
        </member>
        <member name="P:System.Fabric.Health.HealthEvent.HealthInformation">
            <summary>
            Reported health information.
            </summary>
        </member>
        <member name="T:System.Fabric.Health.HealthInformation">
            <summary>
            Contains the health information about the entity. This information is included in the health report. 
            It is also provided as part of the health event.
            </summary>
        </member>
        <member name="P:System.Fabric.Health.HealthInformation.SourceId">
            <summary>
            The Id of the source which creates the health information
            </summary>
        </member>
        <member name="P:System.Fabric.Health.HealthInformation.Property">
            <summary>
            The property that the health data is associated with
            </summary>
        </member>
        <member name="P:System.Fabric.Health.HealthInformation.HealthState">
            <summary>
            The health status
            </summary>
        </member>
        <member name="P:System.Fabric.Health.HealthInformation.Description">
            <summary>
            The description of the health information
            </summary>
        </member>
        <member name="P:System.Fabric.Health.HealthInformation.TimeToLive">
            <summary>
            Defines how long the report is valid 
            </summary>
        </member>
        <member name="P:System.Fabric.Health.HealthInformation.RemoveWhenExpired">
            <summary>
            Indicates that this information is not valid once it expires and it should not 
            be used in the computation of the aggregate health of the entity.
            </summary>
        </member>
        <member name="P:System.Fabric.Health.HealthInformation.SequenceNumber">
            <summary>
            Sequence number for the health information
            </summary>
        </member>
        <member name="T:System.Fabric.CodePackageActivationContext">
            <summary>
            This class contains information related to the currently activated code package
            This includes information from the service manifest as well as information
            about the currently activated code package (context id, work directory etc)
            
            This class is not available to Self-Hosted service
            </summary>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.Finalize">
            <summary>
            Performs cleanup operations on unmanaged resources held by the current object before the object is destroyed.
            </summary>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetServiceTypes">
            <summary>
            Returns the service type descriptions
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetServiceGroupTypes">
            <summary>
            Returns the service group type descriptions
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetApplicationPrincipals">
            <summary>
            Returns the application principals
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetEndpoints">
            <summary>
            Returns the service endpoint resources
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetEndpoint(System.String)">
            <summary>
            Get the endpoint corresponding to the resource name
            </summary>        
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetCodePackageNames">
            <summary>
            Returns the code package names
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetConfigurationPackageNames">
            <summary>
            Returns the configuration package names
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetDataPackageNames">
            <summary>
            Returns the data package names
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetCodePackageObject(System.String)">
            <summary>
            Get the code package corresponding to the package name
            </summary>        
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetConfigurationPackageObject(System.String)">
            <summary>
            Get the config package corresponding to the package name
            Throws KeyNotFoundException if the package is not found
            </summary>        
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetDataPackageObject(System.String)">
            <summary>
            Get the data package corresponding to the package name
            Throws KeyNotFoundException if the package is not found
            </summary>       
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetCodePackage(System.String)">
            <summary>
            Get the code package corresponding to the package name
            </summary>   
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetConfigurationPackage(System.String)">
            <summary>
            Get the config package corresponding to the package name
            Throws KeyNotFoundException if the package is not found
            </summary>        
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetDataPackage(System.String)">
            <summary>
            Get the data package corresponding to the package name
            Throws KeyNotFoundException if the package is not found
            </summary> 
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetServiceManifestName">
            <summary>
            returns the name of the ServiceManifest this code package instance is part of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetServiceManifestVersion">
            <summary>
            returns the version of the ServiceManifest this code package instance is part of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.Dispose">
            <summary>
            Disposes of the code package activation context.
            </summary>
        </member>
        <member name="P:System.Fabric.CodePackageActivationContext.WorkDirectory">
            <summary>
            The work directory associated with this activation context
            </summary>
        </member>
        <member name="P:System.Fabric.CodePackageActivationContext.LogDirectory">
            <summary>
            The Log directory for this code package
            </summary>
        </member>
        <member name="P:System.Fabric.CodePackageActivationContext.TempDirectory">
            <summary>
            The Temp directory for this code package
            </summary>
        </member>
        <member name="P:System.Fabric.CodePackageActivationContext.ContextId">
            <summary>
            The Context id
            This is the same for all the code packages in the same service manifest
            </summary>
        </member>
        <member name="P:System.Fabric.CodePackageActivationContext.CodePackageName">
            <summary>
            The name of the code package currently running
            </summary>
        </member>
        <member name="P:System.Fabric.CodePackageActivationContext.CodePackageVersion">
            <summary>
            The version of the code package currently running
            </summary>
        </member>
        <member name="P:System.Fabric.CodePackageActivationContext.ApplicationName">
            <summary>
            Name of the application this code package instance is part of
            </summary>
        </member>
        <member name="P:System.Fabric.CodePackageActivationContext.ApplicationTypeName">
            <summary>
            The name of ApplicationType of the application this code package instance is part of
            </summary>
        </member>
        <member name="P:System.Fabric.CodePackageActivationContext.NativeActivationContext">
            <summary>
            The native activation context
            </summary>
        </member>
        <member name="M:System.Fabric.IStatelessServiceFactory.CreateInstance(System.String,System.Uri,System.Byte[],System.Guid,System.Int64)">
            <summary>
            Return an instance of a service
            The framework will set the serviceTypeName, serviceName, initializationData and instanceId properties on the service
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.IStatefulServiceFactory.CreateReplica(System.String,System.Uri,System.Byte[],System.Guid,System.Int64)">
            <summary>
            Return an instance of a service
            The framework will set the serviceTypeName, serviceName, initializationData, partitionId and instanceId properties on the service
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.Hosting.IFabricHostEntryPoint.Start(System.String,System.String,System.String,System.String)">
            <summary>
            Called when the object has been instantiated in its own app domain
            All internal initialization can be done here
            <param name="hostEntryPointManagerUniqueId">A unique identifier for the host entry point manager. Useful for creating trace file names etc</param>
            </summary>
        </member>
        <member name="M:System.Fabric.Hosting.IFabricHostEntryPoint.ActivateCodePackage(System.String,System.String,System.IntPtr,System.IntPtr)">
            <summary>
            Activate a code package
            All service types associated with the code package should be registered at this point
            </summary>
            <param name="activationContextId">a unique identifier for this particular activation request. the same value will be passed into Deactivate</param>
            <param name="codePackageNameToActivate">the name of the code package to activate</param>
            <param name="nativeCodePackageActivationContext">the code package activation context as obtained from native code</param>
            <param name="nativeFabricRuntime">the raw IFabricRuntime that should be used for all operations pertaining to this code package</param>
        </member>
        <member name="M:System.Fabric.Hosting.IFabricHostEntryPoint.DeactivateCodePackage(System.String)">
            <summary>
            Deactivate a code package
            The code package id is the same as passed in to the Activate call
            The same IFabricRuntime should be used to unregister the factory that was used in the activate call
            The IFabricRuntime should be released at this point
            </summary>
            <param name="activationContextId"></param>
        </member>
        <member name="M:System.Fabric.Hosting.IFabricHostEntryPoint.Stop">
            <summary>
            Called before the appdomain hosting this entrypoint is unloaded
            Any active code packages should now be unloaded
            </summary>
        </member>
        <member name="P:System.Fabric.Hosting.IFabricHostEntryPoint.ActiveCodePackageCount">
            <summary>
            The number of code packages that are currently active
            </summary>
        </member>
        <member name="M:System.Fabric.FabricRuntime.#ctor(System.Fabric.CodePackageActivationContext,System.Action)">
            <summary>
            Called by FabricRuntime.Create
            </summary>
        </member>
        <member name="M:System.Fabric.Hosting.IHostEntryPointManager.EndDeactivate(System.IntPtr,System.Int32@,System.String@,System.String@)">
            <summary>
            
            </summary>
            <param name="appDomainId">the app domain id in which the context was running</param>
            <param name="codePackageDirectory">the directory of the code package for this activation context</param>
            <param name="workDirectory">the work directory for this activation context</param>
        </member>
        <member name="M:System.Fabric.PackageSharingPolicy.#ctor(System.String,System.Fabric.PackageSharingPolicyScope)">
            <summary>
            Creates PackageSharingPolicy object.
            </summary>
            <param name="packageName">Name of specific package that should be shared. </param>
            <param name="sharingScope">PackageSharingPolicyScope parameter to indicate whether Code, Config, Data or All packages should be shared. </param>
        </member>
        <member name="T:System.Fabric.ServicePartitionInformation">
            <summary>
            A ServicePartitionInformation object is a structure which contains information about a service partition
            </summary>
        </member>
        <member name="P:System.Fabric.ServicePartitionInformation.Id">
            <summary>
            Gets the partition id guid for this partition.
            </summary>
        </member>
        <member name="P:System.Fabric.ServicePartitionInformation.Kind">
            <summary>
            Gets the partition kind of this partition.
            </summary>
        </member>
        <member name="T:System.Fabric.Interop.InteropHelpers">
            <summary>
            All WF interop helpers used within System.Fabric
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_ERROR_CODE.FABRIC_E_INVALID_BACKUP_SETTING">
            <summary>
            Invalid backup setting. E.g. incremental backup option is not set upfront etc.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_ERROR_CODE.FABRIC_E_MISSING_FULL_BACKUP">
            <summary>
            Incremental backups can only be done after an initial full backup.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_ERROR_CODE.FABRIC_E_BACKUP_IN_PROGRESS">
            <summary>
            A backup is currently in progress.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_ERROR_CODE.FABRIC_E_BACKUP_DIRECTORY_NOT_EMPTY">
            <summary>
            The backup directory is not empty.
            </summary>
        </member>
        <member name="T:System.Fabric.Interop.NativeTypes.FABRIC_STORE_BACKUP_OPTION">
            <summary>
            Backup options for the store.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_STORE_BACKUP_OPTION.FABRIC_STORE_BACKUP_OPTION_FULL">
            <summary>
            A full backup.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_STORE_BACKUP_OPTION.FABRIC_STORE_BACKUP_OPTION_INCREMENTAL">
            <summary>
            Incremental backup. i.e. only the changes to the store since the last backup are backed up.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_STORE_BACKUP_OPTION.FABRIC_STORE_BACKUP_OPTION_TRUNCATE_LOGS_ONLY">
            <summary>
            Truncates the transaction logs of the store without creating a folder containing the backed up files.
            </summary>
        </member>
        <member name="T:System.Fabric.Interop.NativeTypes.FABRIC_ESE_LOCAL_STORE_SETTINGS_EX1">
            <summary>
            Extension settings for <see cref="T:System.Fabric.Interop.NativeTypes.FABRIC_ESE_LOCAL_STORE_SETTINGS"/>.
            </summary>
            <remarks>
            The extension pattern is to be followed if the original structure (in this case
            <see cref="T:System.Fabric.Interop.NativeTypes.FABRIC_ESE_LOCAL_STORE_SETTINGS"/>) has already shipped. Since we cannot change the
            structure layout, we provide this extension structure and populate the Reserved
            parameter in a <see cref="T:System.Fabric.Interop.NativeTypes.FABRIC_ESE_LOCAL_STORE_SETTINGS"/> object to point to this extension object.
            </remarks>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_ESE_LOCAL_STORE_SETTINGS_EX1.EnableIncrementalBackup">
            <summary>
            If enabled, allows use of the incremental backup option.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_ESE_LOCAL_STORE_SETTINGS_EX1.Reserved">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="T:System.Fabric.Interop.NativeTypes.FABRIC_STORE_BACKUP_INFO">
            <summary>
            Provides info about the backup created on the store.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_STORE_BACKUP_INFO.BackupFolder">
            <summary>
            The folder where the backup was created.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_STORE_BACKUP_INFO.BackupOption">
            <summary>
            The backup option used.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_STORE_BACKUP_INFO.Reserved">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="T:System.Fabric.Interop.SharedNativeObject`1.ReferenceCount">
            <summary>
            A utility class to count references/usage. In addition to the regular add/release, conditional add is also supported.
            The conditional add fails if the current count is zero.
            </summary>
        </member>
        <member name="M:System.Fabric.Interop.Utility.ReleaseFail(System.String,System.Object[])">
            <summary>
            Fail in release mode
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:System.Fabric.Interop.Utility.TryTranslateManagedExceptionToCOM(System.Exception)">
            <summary>
            Translates a managed exception to a COMException for native. We try to translate to an appropriate COMException when possible.
            The caller would use this for setting the Exception on Tasks with a more appropriate exception to send to native code.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Fabric.Interop.Utility.TryTranslateManagedExceptionToCOMAndThrow(System.Exception)">
            <summary>
            Translates a managed exception to rethrow to native. We try to translate to an appropriate COMException when possible.
            The caller would use this to re-throw the more appropriate exception to send to native code.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.Backup(System.String)">
            <summary>
            Creates a full backup of the key-value store. This method returns when the backup is completed.        
            </summary>
            <param name="backupDirectory">The directory where the backup is to be stored. This cannot be null, empty or contain just whitespace. UNC paths may also be provided.</param>
            <exception cref="T:System.ArgumentNullException">backupDirectory is <b>null</b></exception>
            <exception cref="T:System.ArgumentException">backupDirectory is empty or contains just whitespaces.</exception>
            <remarks>
            <para>
            This method is obsolete. Use <see cref="M:System.Fabric.KeyValueStoreReplica.BackupAsync(System.String,System.Fabric.StoreBackupOption,System.Func{System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task{System.Boolean}})"/> instead.</para>
            <para>
            Incremental backups are not supported after creating a full backup using this method. 
            Use <see cref="M:System.Fabric.KeyValueStoreReplica.BackupAsync(System.String,System.Fabric.StoreBackupOption,System.Func{System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task{System.Boolean}})"/> to create
            a full backup if subsequent incremental backups are to be created.
            </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.BackupAsync(System.String,System.Fabric.StoreBackupOption,System.Func{System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Asynchronously creates a backup of the key-value store.
            </summary>
            <param name="backupDirectory">
            The directory where the backup is to be stored. 
            If <b>backupOption</b> is <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly"/>, then this parameter should be null.
            Otherwise, this parameter cannot be null, empty or contain just whitespace. 
            UNC paths may also be provided.
            If the directory doesn't exist, it is created. If it exists and isn't empty, then incremental backup fails with
            <see cref="T:System.Fabric.FabricBackupDirectoryNotEmptyException"/>.
            </param>
            <param name="backupOption">The backup option.</param>
            <param name="postBackupAsyncFunc">
            The post backup asynchronous method that is invoked by Windows Fabric to allow the user to complete
            any post backup activity before returning control to the system.
            If <B>null</B> is passed in for this, incremental backups are disallowed.
            If the post-backup method returns false, then again, incremental backups are disallowed.
            </param>
            <returns>A task that represents the asynchronous backup operation.</returns>
            <exception cref="T:System.ArgumentNullException">backupDirectory is <b>null</b> when backupOption is not <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly"/>.</exception>
            <exception cref="T:System.ArgumentException">
            backupDirectory is empty or contains just whitespaces when backupOption is not <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly"/> or
            backupDirectory is not <b>null</b> when backupOption is <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly"/>.
            </exception>        
            <exception cref="T:System.Fabric.FabricBackupDirectoryNotEmptyException">
            When backupOption is <see cref="F:System.Fabric.StoreBackupOption.Incremental"/> and the backup directory already contains files or sub-directories.        
            </exception>
            <exception cref="T:System.Fabric.FabricBackupInProgressException">
            When a previously initiated backup is currently in progress.
            </exception>
            <remarks>
            The <b>postBackupAsyncFunc</b> is not invoked if there is an error during backup. Also, it is not invoked when 
            <b>backupOption</b> is <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly"/> since there is no further action needed
            from the user in this case to complete a single backup cycle.
            </remarks>
            <example>
            Below is an example of a simple implementation of <B>postBackupAsyncFunc</B>
            <code>
            private async Task&lt;bool&gt; SimplePostBackupHandler(StoreBackupInfo info)
            {
                bool result = await CopyBackupToAzureBlobStorage(info);
                return result;
            }
            </code>
            </example>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.BackupAsync(System.String,System.Fabric.StoreBackupOption,System.Func{System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates a backup of the key-value store.
            </summary>
            <param name="backupDirectory">
            The directory where the backup is to be stored. 
            If <b>backupOption</b> is <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly"/>, then this parameter should be null.
            Otherwise, this parameter cannot be null, empty or contain just whitespace. 
            UNC paths may also be provided.
            If the directory doesn't exist, it is created. If it exists and isn't empty, then incremental backup fails with
            <see cref="T:System.Fabric.FabricBackupDirectoryNotEmptyException"/>.
            </param>
            <param name="backupOption">The backup option.</param>
            <param name="postBackupAsyncFunc">
            The post backup asynchronous method that is invoked by Windows Fabric to allow the user to complete
            any post backup activity before returning control to the system.
            If <B>null</B> is passed in for this, incremental backups are disallowed.
            If the post-backup method returns false, then again, incremental backups are disallowed.
            </param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous backup operation.</returns>
            <exception cref="T:System.ArgumentNullException">backupDirectory is <b>null</b> when backupOption is not <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly"/>.</exception>
            <exception cref="T:System.ArgumentException">
            backupDirectory is empty or contains just whitespaces when backupOption is not <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly"/> or
            backupDirectory is not <b>null</b> when backupOption is <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly"/>.
            </exception>        
            <exception cref="T:System.Fabric.FabricBackupDirectoryNotEmptyException">
            When backupOption is <see cref="F:System.Fabric.StoreBackupOption.Incremental"/> and the backup directory already contains files or sub-directories.        
            </exception>
            <exception cref="T:System.Fabric.FabricBackupInProgressException">
            When a previously initiated backup is currently in progress.
            </exception>
            <remarks>
            The <b>postBackupAsyncFunc</b> is not invoked if there is an error during backup. Also, it is not invoked when 
            <b>backupOption</b> is <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly"/> since there is no further action needed
            from the user in this case to complete a single backup cycle.
            </remarks>
            <example>
            Below is an example of a simple implementation of <B>postBackupAsyncFunc</B>
            <code>
            private async Task&lt;bool&gt; SimplePostBackupHandler(StoreBackupInfo info)
            {
                bool result = await CopyBackupToAzureBlobStorage(info);
                return result;
            }
            </code>
            </example>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.RestoreAsync(System.String)">
            <summary>
            Asynchronously restores the key-value store replica.
            </summary>
            <param name="backupDirectory">
            The directory where the replica is to be restored from.
            This parameter cannot be null, empty or contain just whitespace. 
            UNC paths may also be provided.
            </param>        
            <returns>A task that represents the asynchronous restore operation.</returns>
            <exception cref="T:System.ArgumentNullException">backupDirectory is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">
            backupDirectory is empty or contains just whitespaces.
            </exception>        
            <exception cref="T:System.IO.DirectoryNotFoundException">backupDirectory does not exist.</exception>
            <remarks>
            It is recommended to not perform any write operations to the key-value store while 
            restore is underway since the updated data would be lost when the store is restored from
            the files in backupDirectory. 
            </remarks>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.RestoreAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously restores the key-value store replica.
            </summary>
            <param name="backupDirectory">
            The directory where the replica is to be restored from.
            This parameter cannot be null, empty or contain just whitespace. 
            UNC paths may also be provided.
            </param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous restore operation.</returns>
            <exception cref="T:System.ArgumentNullException">backupDirectory is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">
            backupDirectory is empty or contains just whitespaces.
            </exception>        
            <exception cref="T:System.IO.DirectoryNotFoundException">backupDirectory does not exist.</exception>
            <remarks>
            It is recommended to not perform any write operations to the key-value store while 
            restore is underway since the updated data would be lost when the store is restored from
            the files in backupDirectory. 
            </remarks>
        </member>
        <member name="M:System.Fabric.LocalEseStoreSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.LocalEseStoreSettings"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.LocalEseStoreSettings.LoadFrom(System.Fabric.CodePackageActivationContext,System.String,System.String)">
            <summary>
            Convenience method to create an instance of this class initialized with property values loaded from the application configuration package.
            </summary>
            <param name="codePackageActivationContext">The activation context under which this code is running. Retrieved from <see cref="T:System.Fabric.FabricRuntime"/>.</param>
            <param name="configPackageName">The name of the configuration package (specified in the Service Manifest) containing the settings to load.</param>
            <param name="sectionName">The name of the section in Settings.xml within the specified configuration package containing the settings to load.</param>
            <returns>The initialized settings object.</returns>
        </member>
        <member name="P:System.Fabric.LocalEseStoreSettings.EnableIncrementalBackup">
            <summary>
            Gets or sets a value indicating whether the incremental backup feature is enabled for use.
            </summary>
            <value>
            Returns <c>true</c> if incremental backup is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:System.Fabric.NamedPropertyMetadata">
            <summary>
            Contains the metadata associated with a resolved service property.
            </summary>
        </member>
        <member name="M:System.Fabric.NodeId.TryParse(System.String,System.Fabric.NodeId@)">
            <summary>
            Tries to parse a NodeId out of a given string; if succeeds, it returns true and the NodeId is in parsedNodeId
            </summary>
            <param name="from">The source string</param>
            <param name="parsedNodeId">The parsed NodeId object</param>
            <returns>A boolean indicating if the parse was successful</returns>
        </member>
        <member name="M:System.Fabric.NodeId.ConvertFromHexString(System.String)">
            <summary>
            Creates a new <code>WinfabricNodeId</code> from a hexadecimal string. The string must be of the format from ToString.
            </summary>
            <param name="hexValue">hexadecimal representation of the NodeId</param>
            <returns><code>WinFabricNodeId</code> generated from the string</returns>
            <exception cref="T:System.ArgumentException">thrown when the argument is an invalid hexadecimal representation</exception>
            <exception cref="T:System.FormatException">thrown when the argument is invalid hexadecimal</exception>
        </member>
        <member name="T:System.Fabric.PutCustomPropertyOperation">
            <summary>
            Represents a property operation that puts a property with custom type identifier specified.
            The custom type is information that is not processed by Windows Fabric, 
            but can be used by user to serialize/deserialize custom type objects.
            </summary>
        </member>
        <member name="T:System.Fabric.PutPropertyOperation">
            <summary>
            Represents a property operation that puts a property
            </summary>
        </member>
        <member name="T:System.Fabric.Query.PagedList`1">
            <summary>
            Represents a paged list that contains a list of items and a continuation token.
            </summary>
            <typeparam name="T">The type of the items returned by query.</typeparam>
            <remarks><para>The paged list is obtained from queries that have more results than can fit a message. 
            The next results can be obtained by executing the same query with the previous continuation token.</para></remarks>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.#ctor">
            <summary>
            Instantiates an empty PagedList class.
            </summary>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Instantiates a PagedList class with the items of another list.
            </summary>
            <param name="list">The list with items used to create the paged list.</param>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.IndexOf(`0)">
            <summary>
            Gets the index in this list for the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>The index in this list for the specified item. </returns>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item into this list at the specified index.
            </summary>
            <param name="index">The index where the item will be inserted.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index from this list. 
            </summary>
            <param name="index">The index where the item will be removed.</param>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.Add(`0)">
            <summary>
            Adds an item to this list.
            </summary>
            <param name="item">The item to add to the list.</param>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.Clear">
            <summary>
            Removes all items from this list.
            </summary>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.Contains(`0)">
            <summary>
            Specifies whether the list contains a specific item.
            </summary>
            <param name="item">The item to search.</param>
            <returns>true if the list contains a specific item; otherwise, false.</returns>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies items from this list to the specified array starting at the specified index.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">The array index.</param>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.Remove(`0)">
            <summary>
            Removes the specified item from this list. 
            </summary>
            <param name="item">The item to be removed.</param>
            <returns>true if the item is removed; otherwise, false.</returns>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.GetEnumerator">
            <summary>
            Gets an enumerator to items in this list. 
            </summary>
            <returns>The enumerator to items in this list. </returns>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator to items in this list. 
            </summary>
            <returns>The enumerator to items in this list. </returns>
        </member>
        <member name="P:System.Fabric.Query.PagedList`1.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The item at the specified index.</returns>
        </member>
        <member name="P:System.Fabric.Query.PagedList`1.ContinuationToken">
            <summary>
            The continuation token. Can be used by queries to get next pages of results.
            </summary>
            <value>Gets or sets the continuation token.</value>
        </member>
        <member name="P:System.Fabric.Query.PagedList`1.Count">
            <summary>
            Gets or sets the number of items in the list.
            </summary>
            <value>The number of items in the list.</value>
        </member>
        <member name="P:System.Fabric.Query.PagedList`1.IsReadOnly">
            <summary>
            Gets or sets a flag that indicated whether the list can be modified.
            </summary>
            <value>Flag indicating whether the list can be modified.</value>
        </member>
        <member name="M:System.Fabric.Query.ApplicationList.#ctor">
            <summary>
            Creates an application list.
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ClusterLoadInformation.ToString">
            <summary>
            Pretty print out details of <see cref="T:System.Fabric.Query.ClusterLoadInformation"/>.
            </summary>
            <example>
            LastBalancingStartTimeUtc : 11/9/2015 8:40:35 PM
            LastBalancingEndTimeUtc   : 11/9/2015 8:40:35 PM
            LoadMetricInformation     :
                LoadMetricName        : Metric1
                IsBalancedBefore      : True
                IsBalancedAfter       : True
                DeviationBefore       : 2
                DeviationAfter        : 2
                BalancingThreshold    : 1
                Action                : NoActionNeeded
                ActivityThreshold     : 3
                ClusterCapacity       : 100
                ClusterLoad           : 1
                ClusterRemainingCapacity : 0
                NodeBufferPercentage  : 0
                ClusterBufferedCapacity : 0
                ClusterRemainingBufferedCapacity : 0
                ClusterCapacityViolation : True
                MinNodeLoadValue      : 0
                MinNodeLoadNodeId     : 1ca9521d70301383417536df0c96f671
                MaxNodeLoadValue      : 1
                MaxNodeLoadNodeId     : cf68563e16a44f808e86197a9cf83de5
            </example>
        </member>
        <member name="T:System.Fabric.Query.UnplacedReplicaInformation">
            <summary>
            Contains information for an unplaced replica.
            </summary>
        </member>
        <member name="M:System.Fabric.Query.UnplacedReplicaInformation.#ctor(System.String,System.Guid,System.Collections.Generic.IList{System.String})">
            <summary> 
            Constructor that creates an object of UnplacedReplicaInformation.
            </summary>
            <param name="serviceName">The name of the service whose replica could not be placed. </param>
            <param name="partitionId">The Partition Id (as a Guid) of the service whose replica could not be placed. </param>
            <param name="reasonsList">The reasons (as a list of strings) why a service's replicas could not be placed. </param>
        </member>
        <member name="P:System.Fabric.Query.UnplacedReplicaInformation.ServiceName">
            <summary> 
            Gets the name of the service whose replica could not be placed.
            </summary>
            <value> The string to which ServiceName will be set. </value>
        </member>
        <member name="P:System.Fabric.Query.UnplacedReplicaInformation.PartitionId">
            <summary> 
            Gets the Partition Id (as a Guid) of the service whose replica could not be placed.
            </summary>
            <value> The Guid to which PartitionId will be set. </value>
        </member>
        <member name="P:System.Fabric.Query.UnplacedReplicaInformation.UnplacedReplicaReasons">
            <summary> 
            Gets the reasons (as a list of strings) why a service's replicas could not be placed.
            </summary>
            <value>The reasons why service replicas could not be placed.</value>
        </member>
        <member name="P:System.Fabric.Query.CodePackageEntryPoint.CodePackageInstanceId">
            <summary>
            Gets the code package instance id.
            </summary>
            <value>The code package instance id.</value>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceReplicaDetail.#ctor(System.Fabric.Query.ServiceKind)">
            <summary>
            Instantiates a <see cref="T:System.Fabric.Query.DeployedServiceReplicaDetail"/> object with specified service kind.
            </summary>
            <param name="serviceKind">The type of the service</param>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplicaDetail.ServiceKind">
            <summary>
            Gets the type of the service 
            </summary>
            <remarks>
            Based on the value of this property this object can be
            downcasted to DeployedStatefulServiceReplicaDetail or DeployedStatelessServiceInstanceDetail
            </remarks>
            <value>The service kind representing the type of the service this replica belongs to</value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplica.ServiceManifestVersion_">
            <summary>
            Internal property to access ServiceManifestVersion with #pragma warning disable around the accessor
            This is because even though the property is obsolete, product and unit test code still needs to validate it is correct
            </summary>
        </member>
        <member name="M:System.Fabric.Query.LoadMetricInformation.ToString">
            <summary>
            Pretty print out each field of <see cref="T:System.Fabric.Query.LoadMetricInformation"/>.
            </summary>
            <example>
                LoadMetricName        : Metric1
                IsBalancedBefore      : True
                IsBalancedAfter       : True
                DeviationBefore       : 2
                DeviationAfter        : 2
                BalancingThreshold    : 1
                Action                : NoActionNeeded
                ActivityThreshold     : 3
                ClusterCapacity       : 100
                ClusterLoad           : 1
                ClusterRemainingCapacity : 0
                NodeBufferPercentage  : 0
                ClusterBufferedCapacity : 0
                ClusterRemainingBufferedCapacity : 0
                ClusterCapacityViolation : True
                MinNodeLoadValue      : 0
                MinNodeLoadNodeId     : 1ca9521d70301383417536df0c96f671
                MaxNodeLoadValue      : 1
                MaxNodeLoadNodeId     : cf68563e16a44f808e86197a9cf83de5
            </example>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.Name">
            <summary>
            The name of the metric
            </summary>
            <value>Name property gets/sets the value of the string field, _name.</value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.IsBalancedBefore">
            <summary>
            Whether the cluster is balanced as of this metric before resource balancer run
            </summary>
            <value>IsBalancedBefore property gets/sets the value of the bool field, _isBalancedBefore.</value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.IsBalancedAfter">
            <summary>
            Whether the cluster is balanced as of this metric after resource balancer run
            </summary>
            <value>IsBalancedAfter property gets/sets the value of the bool field, _isBalancedAfter.</value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.DeviationBefore">
            <summary>
            The standard deviation of this metric before resource balancer run
            </summary>
            <value>DeviationBefore property gets/sets the value of the double field, _deviationBefore.</value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.DeviationAfter">
            <summary>
            The standard deviation of this metric after resource balancer run
            </summary>
            <value>DeviationAfter property gets/sets the value of the double field, _deviationAfter.</value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.BalancingThreshold">
            <summary>
            The threshold to throttle balancing for this metric when value of maxNodeLoad/minNodeLoad is lower than this value
            </summary>
            <value>BalancingThreshold property gets/sets the value of the double field, _balancingThreshold.</value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.Action">
            <summary>
            The current resource balancing action for this metric, possible values: Creation, Constraint Check, Fast Balancing and Slow Balancing
            </summary>
            <value>Action property gets/sets the value of the string field, _action.</value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.ActivityThreshold">
            <summary>
            The threshold to throttle balancing for this metric when value of maxNodeLoad is lower than this value
            </summary>
            <value>ActivityThreshold property gets/sets the value of the long field, _activityThreshold.</value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.ClusterCapacity">
            <summary>
            The sum of the capacity for all nodes with a capacity for this metric defined.
            If not defined the value will be -1.
            </summary>
            <value>ClusterCapacity property gets/sets the value of the long field, _clusterCapacity.</value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.ClusterLoad">
            <summary>
            The sum of the load for this metric from all nodes.
            </summary>
            <value>ClusterLoad property gets/sets the value of the long field, _clusterLoad.</value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.ClusterRemainingCapacity">
            <summary>
            The sum of all nodes remaining capacity for this metric. It equals ClusterCapacity - ClusterLoad
            </summary>
            <value>ClusterRemainingCapacity property gets/sets the value of the long field, _clusterRemainingCapacity.</value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.IsClusterCapacityViolation">
            <summary>
            Whether the cluster is over capacity for this metric. 
            </summary>
            <remarks>
            This is for overall cluster regradless of whether a single node
            is overcapacity or not. Also, it is only for unbufferred capacity.
            </remarks>
            <value>IsClusterCapacityViolation property gets/sets the value of the bool field, _isClusterCapacityViolation.</value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.NodeBufferPercentage">
            <summary>
            The reserved percentage of total node capacity for this metric
            </summary>
            <value>NodeBufferPercentage property gets/sets the value of the double field, _nodeBufferPercentage.</value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.ClusterBufferedCapacity">
            <summary>
            The reserved percentage of cluster total capacity for this metric
            </summary>
            <value>ClusterBufferedCapacity property gets/sets the value of the long field, _clusterBufferedCapacity.</value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.ClusterRemainingBufferedCapacity">
            <summary>
            The remaining percentage of cluster total capacity for this metric
            </summary>
            <value>ClusterRemainingBufferedCapacity property gets/sets the value of the long field, _clusterRemainingBufferedCapacity.</value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.MinNodeLoadValue">
            <summary>
            The minimum load on any node for this metric.
            </summary>
            <value>MinNodeLoadValue property gets/sets the value of the long field, _minNodeLoadValue.</value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.MinNodeLoadNodeId">
            <summary>
            The node id of the node with the minimum load for this metric
            </summary>
            <value>MinNodeLoadNodeId property gets/sets the value of the NodeId field, _minNodeLoadNodeId.</value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.MaxNodeLoadValue">
            <summary>
            The maximum load on any node for this metric.
            </summary>
            <value>MaxNodeLoadValue property gets/sets the value of the long field, _maxNodeLoadValue.</value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.MaxNodeLoadNodeId">
            <summary>
            The node id of the node with the maximum load for this metric
            </summary>
            <value>MaxNodeLoadNodeId property gets/sets the value of the NodeId field, _maxNodeLoadNodeId.</value>
        </member>
        <member name="M:System.Fabric.Query.NodeList.#ctor">
            <summary>
            Creates an empty node list.
            </summary>
        </member>
        <member name="P:System.Fabric.Query.NodeDeactivationResult.PendingSafetyChecks">
            <summary>
            Gets a list of safety checks that are currently failing.
            </summary>
            <value>The list of failing safety checks.</value>
        </member>
        <member name="P:System.Fabric.Query.Node.NodeDeactivationInfo">
            <summary>
            Gets the deactivation information for the node.
            </summary>
            <value>The node deactivation information.</value>
        </member>
        <member name="M:System.Fabric.Query.ServiceList.#ctor">
            <summary>
            Creates a service list.
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ServicePartitionList.#ctor">
            <summary>
            Creates a service partition list.
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ServiceReplicaList.#ctor">
            <summary>
            Creates a service replica list.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceReplicaStatus.Standby">
            <summary>
            The replica has restarted and it is being kept as a hot standby.
            </summary>
        </member>
        <member name="P:System.Fabric.Query.ServiceType.IsServiceGroup">
            <summary> 
            Flag represent whether the service is a service group.
            </summary>
            <value>The boolean indicates whether the service is a service group.</value>
        </member>
        <member name="P:System.Fabric.Query.StatefulServicePartition.PrimaryEpoch">
            <summary>
            Gets the epoch of the partition as seen by the replica
            </summary>
            <value>The epoch of the partition</value>
        </member>
        <member name="T:System.Fabric.ResolvedServicePartition">
            <summary>
            A ResolvedServicePartition contains the information 
            </summary>
        </member>
        <member name="T:System.Fabric.StatelessServicePartition">
            <summary>
            In Windows Fabric we have stateless as well as stateful services which are partitioned. Stateless Services are partitioned for sticky routing.
            In programming model we need to decide if we want to expose StatelessPartition as a concept to end users
            </summary>
        </member>
        <member name="T:System.Fabric.TokenServiceMetadata">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:System.Fabric.TokenServiceMetadata.#ctor(System.String,System.String,System.String)">
            <summary>
            For internal use only.
            </summary>
            <param name="metadata">The metadata.</param>
            <param name="serviceName">The service name.</param>
            <param name="serviceDnsName">The service Dns name.</param>
        </member>
        <member name="P:System.Fabric.TokenServiceMetadata.ServiceName">
            <summary>
            For internal use only.
            Gets or sets the service name.
            </summary>
            <value>The service name.</value>
        </member>
        <member name="P:System.Fabric.TokenServiceMetadata.ServiceDnsName">
            <summary>
            For internal use only.
            Gets or sets the service Dns name.
            </summary>
            <value>The service Dns name.</value>
        </member>
        <member name="P:System.Fabric.TokenServiceMetadata.Metadata">
            <summary>
            For internal use only.
            Gets or sets the metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="F:System.Fabric.TransactionIsolationLevel.ReadUncommitted">
            <summary>
            Indicates that volatile data can be read during the transaction. 
            </summary>
        </member>
        <member name="M:System.Fabric.UpgradeDomainStatus.ToString">
            <summary>
            Produces a string representation of the upgrade domain status.
            </summary>
            <returns>String representing the upgrade domain status.</returns>
        </member>
        <member name="T:System.Fabric.StoreBackupOption">
            <summary>
            The backup option for the key-value store.
            </summary>        
        </member>
        <member name="F:System.Fabric.StoreBackupOption.Full">
            <summary>
            A full backup of the key-value store.
            </summary>
        </member>
        <member name="F:System.Fabric.StoreBackupOption.Incremental">
            <summary>
            Incremental backup of the key-value store. i.e. only the log files created since the last 
            full or incremental backup will be backed up.
            </summary>
        </member>
        <member name="F:System.Fabric.StoreBackupOption.TruncateLogsOnly">
            <summary>
            Option to truncate the transaction logs of the key-value store without creating any backup files.        
            </summary>
            <remarks>
            This is useful in avoiding creation of backup files in secondary replicas when incremental backup is turned on.
            If incremental backup is turned on, then disk space fills up with transaction logs of the key-value store.
            To prevent this, frequent backups have to be created. However, creating backups on secondary replicas may not
            be useful for some key-value store services. These services also have to deal with discarding the backup
            directory. If this option is used, it cleans up the transaction logs without creating backup files.
            </remarks>
        </member>
        <member name="T:System.Fabric.StoreBackupInfo">
            <summary>
            Provides info about the backup created on the key-value store.
            </summary>
        </member>
        <member name="M:System.Fabric.StoreBackupInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:System.Fabric.StoreBackupInfo.BackupFolder">
            <summary>
            Gets or sets the folder where the backup was created. 
            </summary>
            <value>
            The backup folder.
            </value>
        </member>
        <member name="P:System.Fabric.StoreBackupInfo.BackupOption">
            <summary>
            Gets or sets the backup option used.
            </summary>
            <value>
            The backup option used.
            </value>
        </member>
        <member name="T:System.Fabric.Query.PagedListHelper">
            <summary>
            Extensions for paged list operations.
            </summary>
        </member>
        <member name="M:System.Fabric.Query.PagedListHelper.ToArray``1(System.Fabric.Query.PagedList{``0})">
            <summary>
            Returns an array with the items in the paged list.
            </summary>
            <typeparam name="T">The type of the list objects.</typeparam>
            <param name="list">The paged list.</param>
            <returns>The array.</returns>
        </member>
        <member name="T:System.Fabric.SafetyCheckKind">
            <summary>
            A Service Fabric enumeration that indicates the upgrade safety check performed.
            </summary>
        </member>
        <member name="F:System.Fabric.SafetyCheckKind.Invalid">
            <summary>
            Indicates that the upgrade safety check kind is invalid. This value is not used.
            </summary>
        </member>
        <member name="F:System.Fabric.SafetyCheckKind.EnsureSeedNodeQuorum">
            <summary>
            Indicates that if we bring down the node then this will result in global seed node quorum loss.
            </summary>
        </member>
        <member name="F:System.Fabric.SafetyCheckKind.EnsurePartitionQuorum">
            <summary>
            Indicates that there is some partition for which if we bring down the replica on the node, it will result in quorum loss for that partition.
            </summary>
        </member>
        <member name="F:System.Fabric.SafetyCheckKind.WaitForPrimaryPlacement">
            <summary>
            Indicates that there is some replica on the node that was moved out of this node. Service Fabric is now waiting for the primary to be moved back to this node.
            </summary>
        </member>
        <member name="F:System.Fabric.SafetyCheckKind.WaitForPrimarySwap">
            <summary>
            Indicates that Service Fabric is waiting for a primary replica to be moved out of the node.
            </summary>
        </member>
        <member name="F:System.Fabric.SafetyCheckKind.WaitForReconfiguration">
            <summary>
            Indicates that there is some replica on the node that is involved in a reconfiguration and Service Fabric is waiting for the reconfiguration to be complete.
            </summary>
        </member>
        <member name="F:System.Fabric.SafetyCheckKind.WaitForInBuildReplica">
            <summary>
            Indicates that there is either a replica on the node that is going through copy, or there is a primary replica on the node that is copying data to some other replica. In both cases, bringing down the replica on the node will abort the copy.
            </summary>
        </member>
        <member name="F:System.Fabric.SafetyCheckKind.EnsureAvailability">
            <summary>
            Indicates that there is either a stateless service partition on the node having exactly one instance, or there is a primary replica on the node for which the partition is quorum loss. In both cases, bringing down the replica will result in loss of availability.
            </summary>
        </member>
        <member name="T:System.Fabric.SafetyCheck">
            <summary>
            Represents a safety check that is currently being performed for a node.
            </summary>
        </member>
        <member name="M:System.Fabric.SafetyCheck.#ctor(System.Fabric.SafetyCheckKind)">
            <summary>
            Instantiates a <see cref="T:System.Fabric.SafetyCheck"/> object with the specified kind. 
            Can only be invoked from derived classes.
            </summary>
            <param name="kind">The safety check kind.</param>
        </member>
        <member name="P:System.Fabric.SafetyCheck.Kind">
            <summary>
            Gets the type of the safety check that is being performed.
            </summary>
            <value>The type of safety check that is being performed.</value>
        </member>
        <member name="T:System.Fabric.PartitionSafetyCheck">
            <summary>
            Represents the SafetyCheck for a partition.
            </summary>
        </member>
        <member name="P:System.Fabric.PartitionSafetyCheck.PartitionId">
            <summary>
            Gets the ID of the partition that is undergoing a safety check.
            </summary>
            <value>The ID of the partition that is undergoing a safety check.</value>
        </member>
        <member name="T:System.Fabric.SeedNodeSafetyCheck">
            <summary>
            The safety check that is currently being performed for seed nodes.
            </summary>
        </member>
        <member name="T:System.Fabric.UnknownSafetyCheck">
            <summary>
            The safety check that is not known to the current version of Service Fabric.
            </summary>
        </member>
    </members>
</doc>
