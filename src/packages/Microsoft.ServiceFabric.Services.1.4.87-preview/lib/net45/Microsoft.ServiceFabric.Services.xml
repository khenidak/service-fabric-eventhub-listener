<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.ServiceFabric.Services</name>
    </assembly>
    <members>
        <member name="T:Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver">
            <summary>
            Defines the interface for Service partition resolver.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver.ResolveAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Resolves the endpoint for the singleton partitioned service given by the service name.
            </summary>
            <param name="serviceName">Service name</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result from
            the Task is the <see cref="T:System.Fabric.ResolvedServicePartition"/> object, that
            contains the service endpoints.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver.ResolveAsync(System.Uri,System.String,System.Threading.CancellationToken)">
            <summary>
            Resolves the endpoint for the named partitioned service given by the service name and partition key.
            </summary>
            <param name="serviceName">Service name</param>
            <param name="partitionKey">Named partition key</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result from
            the Task is the <see cref="T:System.Fabric.ResolvedServicePartition"/> object, that
            contains the service endpoints.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver.ResolveAsync(System.Uri,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Resolves the endpoint for the Int64 partitioned service given by the service name and partition key.
            </summary>
            <param name="serviceName">Service name</param>
            <param name="partitionKey">Int64 partition key</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result from
            the Task is the <see cref="T:System.Fabric.ResolvedServicePartition"/> object, that
            contains the service endpoints.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver.ResolveAsync(System.Fabric.ResolvedServicePartition,System.Threading.CancellationToken)">
            <summary>
            Resolves the endpoint for a service with the given previous resolved service partition.
            </summary>
            <param name="previousRsp">Previous resolved service partition</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result from
            the Task is the <see cref="T:System.Fabric.ResolvedServicePartition"/> object, that
            contains the service endpoints.
            </returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate">
            <summary>
            Represents a delegate to create a FabricClient object
            </summary>
            <returns>FabricClient</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver">
            <summary>
            Implements the class that helps in determining the endpoint of a service. This class wraps the FabricClient's
            <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)"/>method, and implements a back-off/retry mechanism on errors from that method.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate,Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate)">
            <summary>
            Instantiates a ServicePartionResolver, invoking the first delegate to instantiate FabricClient.
            During partition resolution if FabricClient object gets disposed and second delegate is provided,
            it uses the second delegate to re-create the FabricClient. The second delegate provides a way to specify
            an alternate way to create FabricClient if FabricClient created with first delegates get disposed.
            </summary>
            <param name="createFabricClient">Delegate to create fabric client</param>
            <param name="recreateFabricClient">Delegate to create fabric client</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate)">
            <summary>
            Instantiates a ServicePartitionResolver, invoking the given delegate to instantiate FabricClient.
            </summary>
            <param name="createFabricClient">Delegate to create fabric client</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(System.String[])">
            <summary>
            Instantiates a ServicePartitionResolver, uses the given connectionEndpoints to create a new instance of FabricClient.
            </summary>
            <param name="connectionEndpoints">Array of management endpoints of the cluster</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(System.Fabric.FabricClientSettings,System.String[])">
            <summary>
            Instantiates a ServicePartitionResolver, uses the given FabricClient settings and the connectionEndpoints to create
            a new instance of FabricClient.
            </summary>
            <param name="settings">Fabric client settings</param>
            <param name="connectionEndpoints">Array of management endpoints of the cluster</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(System.Fabric.SecurityCredentials,System.String[])">
            <summary>
            Instantiates a ServicePartitionResolver, uses the given security credentials and the connectionEndpoints to create
            a new instance of FabricClient.
            </summary>
            <param name="credential">Security credentials for the fabric client</param>
            <param name="connectionEndpoints">Array of management endpoints of the cluster</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(System.Fabric.SecurityCredentials,System.Fabric.FabricClientSettings,System.String[])">
            <summary>
            Instantiates a ServicePartitionResolver, uses the given security credentials, FabricClient settings and the connectionEndpoints
            to create a new instance of FabricClient.
            </summary>
            <param name="credential">Security credentials for the fabric client</param>
            <param name="settings">Fabric client settings</param>
            <param name="connectionEndpoints">Array of management endpoints of the cluster</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ResolveAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Resolves the endpoint for a singleton partitioned service with the given service name.
            </summary>
            <param name="serviceName">Service name</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result from
            the Task is the <see cref="T:System.Fabric.ResolvedServicePartition"/> object, that
            contains the service endpoints.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ResolveAsync(System.Uri,System.String,System.Threading.CancellationToken)">
            <summary>
            Resolves the endpoint for a named partitioned service with the given service name.
            </summary>
            <param name="serviceName">Service name</param>
            <param name="partitionKey">Named partition key</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result from
            the Task is the <see cref="T:System.Fabric.ResolvedServicePartition"/> object, that
            contains the service endpoints.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ResolveAsync(System.Uri,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Resolves the endpoint for a Int64 partitioned service with the given service name.
            </summary>
            <param name="serviceName">Service name</param>
            <param name="partitionKey">Int64 partition key</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result from
            the Task is the <see cref="T:System.Fabric.ResolvedServicePartition"/> object, that
            contains the service endpoints.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ResolveAsync(System.Fabric.ResolvedServicePartition,System.Threading.CancellationToken)">
            <summary>
            Resolves the endpoint for the service using the given previous ResolvedServicePartition result
            </summary>
            <param name="previousRsp">Previous resolved service partition</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result from
            the Task is the <see cref="T:System.Fabric.ResolvedServicePartition"/> object, that
            contains the service endpoints.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.SetDefault(Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver)">
            <summary>
            Updates the default ServicePartitionResolver
            </summary>
            <param name="defaultServiceResolver"></param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.GetDefault">
            <summary>
            Gets the default ServicePartitionResolver
            </summary>
            <returns>Default <see cref="T:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver"/></returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ResolveTimeout">
            <summary>
            Gets or Sets the timeout for the ResolveServicePartition() call to the cluster.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.RetryBackoffInterval">
            <summary>
            Gets or Sets the Back-off/Retry interval, when the ResolveServicePartition() call fails.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientEventArgs">
            <summary>
            Specifies the arguments for the communication client connected/disconnected events handler.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientEventArgs`1">
            <summary>
            Specifies the arguments for the communication client connected/disconnected events handler.
            </summary>
            <typeparam name="TCommunicationClient">Type of communication client</typeparam>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientEventArgs`1.Client">
            <summary>
            Communication client for which the event is fired.
            </summary>
            <value>Communication client</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1">
            <summary>
            Provides the base implementation of ICommunicationClientFactory for creating communication clients to talk to service fabric services. Extend the
            CommunicationClientFactoryBase class to create communication clients for custom transport implementations. This class maintains a cache of communication
            clients and attempts to reuse the clients for requests to the same service endpoint.
            </summary>
            <typeparam name="TCommunicationClient">The type of communication client</typeparam>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1">
            <summary>
            Defines the interface that must be implemented to provide a factory for communication clients to talk to a service fabric service.
            </summary>
            <typeparam name="TCommunicationClient">Type of communication client</typeparam>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1.GetClientAsync(System.Uri,System.String,System.Threading.CancellationToken)">
            <summary>
            The service endpoint is of the form - {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}
            This method resolves the endpoints for the given singleton partitioned service and gets a CommunicationClient for the endpoint corresponding
            to the given listenerName.
            </summary>
            <param name="serviceUri">Service name</param>
            <param name="listenerName">Listener name</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            the CommunicationClient(<see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient"/>) object.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1.GetClientAsync(System.Uri,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            The service endpoint is of the form - {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}
            This method resolves the endpoints for the given named partitioned service and gets a CommunicationClient for the endpoint corresponding
            to the given listener name.
            </summary>
            <param name="serviceUri">Service Name</param>
            <param name="partitionKey">String partitionKey</param>
            <param name="listenerName">Listener name</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            the CommunicationClient(<see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient"/>) object.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1.GetClientAsync(System.Uri,System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            The service endpoint is of the form - {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}
            This method resolves the endpoints for the given Int64 partitioned service and gets a CommunicationClient for the endpoint corresponding
            to the given listener name.
            </summary>
            <param name="serviceUri">Service name</param>
            <param name="partitionKey">Int64 partition key</param>
            <param name="listenerName">Listener name</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            the CommunicationClient(<see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient"/>) object.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1.GetClientAsync(System.Fabric.ResolvedServicePartition,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets or Creates the CommunicationClient for the specified listener name by resolving based on the given previousRsp.
            </summary>
            <param name="previousRsp">Previous ResolvedServicePartition value</param>
            <param name="listenerName">Listener name</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            the CommunicationClient(<see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient"/>) object.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1.ReportOperationExceptionAsync(`0,System.Exception,System.String,System.Threading.CancellationToken)">
            <summary>
            Handles the exceptions that occur in the CommunicationClient when sending a message to the Service
            </summary>
            <param name="client">Communication client</param>
            <param name="exception">The exception that occurred when sending message to the service</param>
            <param name="listenerName">Listener name</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            a <see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl"/> object that determines
            how the retry policy for this exception.
            </returns>
        </member>
        <member name="E:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1.ClientConnected">
            <summary>
            Event handler that is fired when the Communication client connects to the service endpoint.
            </summary>
        </member>
        <member name="E:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1.ClientDisconnected">
            <summary>
            Event handler that is fired when the Communication client disconnects from the service endpoint.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1.#ctor(Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Services.Communication.Client.IExceptionHandler},System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the communication client factory.
            </summary>
            <param name="servicePartitionResolver">Optional ServicePartitionResolver</param>
            <param name="exceptionHandlers">Optional Custom exception handlers for the exceptions on the Client to Service communication channel</param>
            <param name="doNotRetryExceptionTypes">Optional Exception types on the Client to Service communication channel for which the requests should not be retried</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1.GetClientAsync(System.Uri,System.String,System.Threading.CancellationToken)">
            <summary>
            The service endpoint is of the form - {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}
            This method resolves the endpoints for the given singleton partitioned service and gets a CommunicationClient for the endpoint corresponding
            to the given listenerName.
            </summary>
            <param name="serviceUri">Service name</param>
            <param name="listenerName">Listener name</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            the CommunicationClient(<see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient"/>) object.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1.GetClientAsync(System.Uri,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            The service endpoint is of the form - {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}
            This method resolves the endpoints for the given named partitioned service and gets a CommunicationClient for the endpoint corresponding
            to the given listener name.
            </summary>
            <param name="serviceUri">Service Name</param>
            <param name="partitionKey">String partitionKey</param>
            <param name="listenerName">Listener name</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            the CommunicationClient(<see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient"/>) object.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1.GetClientAsync(System.Uri,System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            The service endpoint is of the form - {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}
            This method resolves the endpoints for the given Int64 partitioned service and gets a CommunicationClient for the endpoint corresponding
            to the given listener name.
            </summary>
            <param name="serviceUri">Service name</param>
            <param name="partitionKey">Int64 partition key</param>
            <param name="listenerName">Listener name</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            the CommunicationClient(<see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient"/>) object.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1.GetClientAsync(System.Fabric.ResolvedServicePartition,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets or Creates the CommunicationClient for the specified listener name by resolving based on the given previousRsp.
            </summary>
            <param name="previousRsp">Previous ResolvedServicePartition value</param>
            <param name="listenerName">Listener name</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            the CommunicationClient(<see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient"/>) object.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1.ReportOperationExceptionAsync(`0,System.Exception,System.String,System.Threading.CancellationToken)">
            <summary>
            Handles the exceptions that occur in the CommunicationClient when sending a message to the Service
            </summary>
            <param name="client">Communication client</param>
            <param name="exception">The exception that occurred when sending message to the service</param>
            <param name="listenerName">Listener name</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            a <see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl"/> object that determines
            how the retry policy for this exception.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1.ValidateClient(`0)">
            <summary>
            Returns true if the client is still valid. Connection oriented transports can use this method to indicate that the client is no longer
            connected to the service.
            </summary>
            <param name="client">the communication client</param>
            <returns>true if the client is valid, false otherwise</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1.ValidateClient(System.String,`0)">
            <summary>
            Returns true if the client is still valid and connected to the endpoint specified in the parameter.
            </summary>
            <param name="endpoint">the endpoint to which the </param>
            <param name="client">the communication client</param>
            <returns>true if the client is valid, false otherwise</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1.OnHandleException(System.Exception,Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingResult@)">
            <summary>
            Override this method to handle exceptions that occur in the CommunicationClient when sending a message to the Service. This method is called from
            ReportOperationExceptionAsync() and can be overridden to provide additional transport specific exception handling. If this method
            returns true, then the ExceptionHandlingResult is used to determine the retry policy and also if this is a transient error on the communication
            channel.
            </summary>
            <param name="e">The exception that occurred when sending message to the service</param>
            <param name="result">If the return value is true, this gives the result from the derived class handling the exception</param>
            <returns>true if the derived class handled this exception, false otherwise</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1.CreateClientAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a communication client for the given endpoint address.
            </summary>
            <param name="endpoint">Endpoint address where the service is listening</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The communication client that was created</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1.AbortClient(`0)">
            <summary>
            Aborts the given client
            </summary>
            <param name="client">Communication client</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1.ServiceResolver">
            <summary>
            Gets the ServicePartitionResolver used by the client factory for resolving the service endpoint.
            </summary>
            <value>ServicePartitionResolver</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1.ExceptionHandlers">
            <summary>
            Gets the custom exception handlers for handling exceptions on the client to service communication channel.
            </summary>
            <value>List of Exception handlers</value>
        </member>
        <member name="E:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1.ClientConnected">
            <summary>
            Event handler that is fired when the Communication client connects to the service endpoint.
            </summary>
        </member>
        <member name="E:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1.ClientDisconnected">
            <summary>
            Event handler that is fired when the Communication client disconnects from the service endpoint.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.IExceptionHandler">
            <summary>
            Defines the interface for a custom exception handler, used to handle exceptions
            in the communication between client and service
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.IExceptionHandler.HandleException(System.Exception,Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingResult@)">
            <summary>
            Method that examines the exception and determines how that exception can be handled
            </summary>
            <param name="e">Exception</param>
            <param name="result">Result of the exception handling</param>
            <returns>true if the exception is handled by the implementation, false otherwise</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingResult">
            <summary>
            Specifies the base class for the result from handling an exception 
            during client to service communication.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult">
            <summary>
            Specifies the exception handling result when the request from client to service can be retried
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult.#ctor">
            <summary>
            Instantiates the ExceptionHandlingRetryResult
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult.IsTransient">
            <summary>
            Transient retriable exceptions are those where the communication channel from client
            to service still exists.
            Non transient retriable exceptions are those where we need to re-resolve the service endpoint
            before we retry.
            </summary>
            <value>
            true indicates that this is a transient retriable exception.
            false indicates that this is a non transient retriable exception.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult.ExceptionId">
            <summary>
            String that uniquely identifies the exception type.
            </summary>
            <value>
            Unique id for this exception. 
            This id is used to keep track of the number of times this exception is retried
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult.MaxRetryCount">
            <summary>
            Maximum number of times this exception type needs to be retried before giving up.
            The default value is 10.
            </summary>
            <value>Max retry count</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult.RetryDelay">
            <summary>
            The operation should be retried after this delay.
            </summary>
            <value>Time delay after which the operation should be retried</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingThrowResult">
            <summary>
            Specifies the exception handling result when the request from client to service cannot be retried
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingThrowResult.ExceptionToThrow">
            <summary>
            The exception that should be thrown to the client.
            </summary>
            <value>Exception to throw</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient">
            <summary>
            Defines the interface that represents the communication client for reliable services.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient.ResolvedServicePartition">
            <summary>
            Gets or Sets the Resolved service partition which was used when this client was created.
            </summary>
            <value><see cref="T:System.Fabric.ResolvedServicePartition"/> object</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory">
            <summary>
            Defines the interface that must be implemented to provide a factory for communication clients to talk to a service fabric service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory.GetClientAsync(System.Uri,System.String,System.Threading.CancellationToken)">
            <summary>
            The service endpoint is of the form - {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}
            This method resolves the endpoints for the given singleton partitioned service and gets a CommunicationClient for the endpoint corresponding
            to the given listenerName.
            </summary>
            <param name="serviceUri">Service name</param>
            <param name="listenerName">Listener name</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            the CommunicationClient(<see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient"/>) object.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory.GetClientAsync(System.Uri,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            The service endpoint is of the form - {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}
            This method resolves the endpoints for the given named partitioned service and gets a CommunicationClient for the endpoint corresponding
            to the given listener name.
            </summary>
            <param name="serviceUri">Service Name</param>
            <param name="partitionKey">String partitionKey</param>
            <param name="listenerName">Listener name</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            the CommunicationClient(<see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient"/>) object.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory.GetClientAsync(System.Uri,System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            The service endpoint is of the form - {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}
            This method resolves the endpoints for the given Int64 partitioned service and gets a CommunicationClient for the endpoint corresponding
            to the given listener name.
            </summary>
            <param name="serviceUri">Service name</param>
            <param name="partitionKey">Int64 partition key</param>
            <param name="listenerName">Listener name</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            the CommunicationClient(<see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient"/>) object.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory.GetClientAsync(System.Fabric.ResolvedServicePartition,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets or Creates the CommunicationClient for the specified listener name by resolving based on the given previousRsp.
            </summary>
            <param name="previousRsp">Previous ResolvedServicePartition value</param>
            <param name="listenerName">Listener name</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            the CommunicationClient(<see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient"/>) object.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory.ReportOperationExceptionAsync(Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient,System.Exception,System.String,System.Threading.CancellationToken)">
            <summary>
            Handles the exceptions that occur in the CommunicationClient when sending a message to the Service
            </summary>
            <param name="client">Communication client</param>
            <param name="exception">The exception that occurred when sending message to the service</param>
            <param name="listenerName">Listener name</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            a <see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl"/> object that determines
            how the retry policy for this exception.
            </returns>
        </member>
        <member name="E:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory.ClientConnected">
            <summary>
            Event handler that is fired when the Communication client connects to the service endpoint.
            </summary>
        </member>
        <member name="E:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory.ClientDisconnected">
            <summary>
            Event handler that is fired when the Communication client disconnects from the service endpoint.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.IServicePartitionClient`1">
            <summary>
            Defines the interface for the client that can communicate with replicas of a particular service partition.
            </summary>
            <typeparam name="TCommunicationClient">Type of ICommunicationClient</typeparam>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.IServicePartitionClient`1.TryGetLastResolvedServicePartition(System.Fabric.ResolvedServicePartition@)">
            <summary>
            Gets the resolved service partition that was set on the client.
            </summary>
            <param name="resolvedServicePartition">previous ResolvedServicePartition</param>
            <returns>true if a ResolvedServicePartition was set</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.IServicePartitionClient`1.ServiceUri">
            <summary>
            Gets the name of the service
            </summary>
            <value>Name of the service</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.IServicePartitionClient`1.PartitionKind">
            <summary>
            Gets the partition kind of the service
            </summary>
            <value>Partition kind</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.IServicePartitionClient`1.PartitionKey">
            <summary>
            Gets the partition key. This can be casted to the right type based on the PartitionKind member.
            </summary>
            <value>Partition key</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.IServicePartitionClient`1.Factory">
            <summary>
            Gets the communication client factory
            </summary>
            <value>Communication client factory</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl">
            <summary>
            Specifies the retry policy for the exceptions got on the communication from client to service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl.ShouldRetry">
            <summary>
            Indicates whether the operation should be retried or not.
            </summary>
            <value>true if the operation should be retried, false if the exception should be thrown to the user</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl.RetryDelay">
            <summary>
            The operation should be retried after this delay if the ShouldRetry is true.
            </summary>
            <value>Time delay after which the operation should be retried</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl.ExceptionId">
            <summary>
            String that uniquely identifies the exception type.
            </summary>
            <value>Unique id for this exception. 
            This id is used to keep track of the number of times this exception is retried</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl.MaxRetryCount">
            <summary>
            Max number of times this operation should be retried if the ShouldRetry is true
            </summary>
            <value>Max retry count</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl.Exception">
            <summary>
            Exception to report for the operation, if ShouldRetry is false. 
            By default this is the same exception as the reported exception, however in some cases the Factory may choose to trasform the reported exception to a more meaningful exception.
            </summary>
            <value>Exception</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1">
            <summary>
            Specifies an instance of the communication client that can communicate with the replicas of a particular partition.
            </summary>
            <typeparam name="TCommunicationClient">type of Communication client</typeparam>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1.#ctor(Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory{`0},System.Uri)">
            <summary>
            Instantiates the ServicePartition client with the given communication client factory 
            to communicate with the given Singleton partitioned service.
            </summary>
            <param name="factory">Communication client factory</param>
            <param name="serviceName">Service name</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1.#ctor(Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory{`0},System.Uri,System.String)">
            <summary>
            Instantiates the ServicePartition client with the given communication client factory
            to communicate with the given named partitioned service.
            </summary>
            <param name="factory">Communication client factory</param>
            <param name="serviceName">Service name</param>
            <param name="partitionKey">Named partition key</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1.#ctor(Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory{`0},System.Uri,System.Int64)">
            <summary>
            Instantiates the ServicePartition client with the given communication client factory
            to communicate with the given Int64 partitioned service.
            </summary>
            <param name="factory">Communication client factory</param>
            <param name="serviceName">Service name</param>
            <param name="partitionKey">Int64 partition key</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1.TryGetLastResolvedServicePartition(System.Fabric.ResolvedServicePartition@)">
            <summary>
            Gets the resolved service partition that was set on the client.
            </summary>
            <param name="resolvedServicePartition">previous ResolvedServicePartition</param>
            <returns>true if a ResolvedServicePartition was set</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1.InvokeWithRetryAsync``1(System.Func{`0,System.Threading.Tasks.Task{``0}},System.Type[])">
            <summary>
            Invokes the given Function, retrying for exceptions thrown other than the exceptions in the doNotRetryExceptionTypes.
            For exceptions that are not in doNotRetryExceptionTypes, CommunicationClientFactory's ReportOperationExceptionAsync() method 
            controls if the exception should be retried or not.
            </summary>
            <typeparam name="TResult">Result from the function being invoked</typeparam>
            <param name="func">Function being invoked</param>
            <param name="doNotRetryExceptionTypes">Exceptions for which the service partition client should not retry</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            the result from the function given in the argument.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1.InvokeWithRetryAsync``1(System.Func{`0,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Type[])">
            <summary>
            Invokes the given Function, retrying for exceptions thrown other than the exceptions in the doNotRetryExceptionTypes.
            For exceptions that are not in doNotRetryExceptionTypes, CommunicationClientFactory's ReportOperationExceptionAsync() method 
            controls if the exception should be retried or not.
            </summary>
            <typeparam name="TResult">Result from the function being invoked</typeparam>
            <param name="func">Function being invoked</param>
            <param name="cancellationToken">Cancellation token</param>
            <param name="doNotRetryExceptionTypes">Exceptions for which the service partition client should not retry</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            the result from the function given in the argument.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1.InvokeWithRetryAsync(System.Func{`0,System.Threading.Tasks.Task},System.Type[])">
            <summary>
            Invokes the given Function, retrying for exceptions thrown other than the exceptions in the doNotRetryExceptionTypes.
            For exceptions that are not in doNotRetryExceptionTypes, CommunicationClientFactory's ReportOperationExceptionAsync() method 
            controls if the exception should be retried or not.
            </summary>
            <param name="func">Function being invoked</param>
            <param name="doNotRetryExceptionTypes">Exceptions for which the service partition client should not retry</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1.InvokeWithRetryAsync(System.Func{`0,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Type[])">
            <summary>
            Invokes the given Function, retrying for exceptions thrown other than the exceptions in the doNotRetryExceptionTypes.
            For exceptions that are not in doNotRetryExceptionTypes, CommunicationClientFactory's ReportOperationExceptionAsync() method 
            controls if the exception should be retried or not.
            </summary>
            <param name="func">Function being invoked</param>
            <param name="cancellationToken">Cancellation token</param>
            <param name="doNotRetryExceptionTypes">Exceptions for which the service partition client should not retry</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1.InvokeWithRetry``1(System.Func{`0,``0},System.Type[])">
            <summary>
            Invokes the given Function, retrying for exceptions thrown other than the exceptions in the doNotRetryExceptionTypes.
            For exceptions that are not in doNotRetryExceptionTypes, CommunicationClientFactory's ReportOperationExceptionAsync() method 
            controls if the exception should be retried or not.
            </summary>
            <typeparam name="TResult">Result from the function being invoked</typeparam>
            <param name="func">Function being invoked</param>
            <param name="doNotRetryExceptionTypes">Exceptions for which the service partition client should not retry</param>
            <returns>Result from the function given in the argument</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1.InvokeWithRetry(System.Action{`0},System.Type[])">
            <summary>
            Invokes the given Function, retrying for exceptions thrown other than the exceptions in the doNotRetryExceptionTypes.
            For exceptions that are not in doNotRetryExceptionTypes, CommunicationClientFactory's ReportOperationExceptionAsync() method 
            controls if the exception should be retried or not.
            </summary>
            <param name="func">Function being invoked</param>
            <param name="doNotRetryExceptionTypes">Exceptions for which the service partition client should not retry</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1.ListenerName">
            <summary>
            The endpoints of the service are of the form {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}
            If there are multiple communication listeners in the service, this property identifies the endpoint
            to which the communication client needs to connect to.
            </summary>
            <value>Listener name</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1.Factory">
            <summary>
            Gets the communication client factory
            </summary>
            <value>Communication client factory</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1.ServiceUri">
            <summary>
            Gets the name of the service
            </summary>
            <value>Name of the service</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1.PartitionKind">
            <summary>
            Gets the partition kind of the service
            </summary>
            <value>Partition kind</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1.PartitionKey">
            <summary>
            Gets the partition key. This can be casted to the right type based on the PartitionKind member.
            </summary>
            <value>Partition key</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.RemoteExceptionInformation">
            <summary>
            Fault type used by Service Remoting to transfer the exception details from the Service Replica to the client.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.RemoteExceptionInformation.#ctor(System.Byte[])">
            <summary>
            Instantiates the RemoteExceptionInformation object with the data
            </summary>
            <param name="data"> Data to be sent to the client</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.RemoteExceptionInformation.FromException(System.Exception)">
            <summary>
            Factory method that constructs the RemoteExceptionInformation from an exception.
            </summary>
            <param name="exception">Exception</param>
            <returns>RemoteExceptionInformation</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.RemoteExceptionInformation.ToException(Microsoft.ServiceFabric.Services.Communication.RemoteExceptionInformation,System.Exception@)">
            <summary>
            Gets the exception from the RemoteExceptionInformation
            </summary>
            <param name="remoteExceptionInformation">RemoteExceptionInformation</param>
            <param name="result">Exception from the remote side</param>
            <returns>true if there was a valid exception, false otherwise</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.RemoteExceptionInformation.Data">
            <summary>
            Serialized exception details
            </summary>
            <value>Data in the exception</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener">
            <summary>
            Defines the base interface and the state machine contract for the communication listener 
            for a Service Fabric Service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener.OpenAsync(System.Threading.CancellationToken)">
            <summary>
            This method causes the communication listener to be opened. Once the Open
            completes, the communication listener becomes usable - accepts and sends messages.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            the endpoint string.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener.CloseAsync(System.Threading.CancellationToken)">
            <summary>
            This method causes the communication listener to close. Close is a terminal state and 
            this method allows the communication listener to transition to this state in a
            graceful manner.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener.Abort">
            <summary>
            This method causes the communication listener to close. Close is a terminal state and
            this method causes the transition to close ungracefully. Any outstanding operations
            (including close) should be canceled when this method is called.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Runtime.ServiceInstanceListener">
            <summary>
            Represents the communication listener and its properties for a Stateless Service Instance.
            Endpoints given out by the communication listener are associated with name of the communication listener.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Communication.Runtime.ServiceInstanceListener.DefaultName">
            <summary>
            The default name used when the ServiceInstanceListener is not given a name.
            </summary>
            <value>Default name of the Service instance listener</value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Runtime.ServiceInstanceListener.#ctor(System.Func{System.Fabric.StatelessServiceInitializationParameters,Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener},System.String)">
            <summary>
            Creates the ServiceInstanceListener
            </summary>
            <param name="createCommunicationListener">Factory method for creating the communication listener</param>
            <param name="name">Name of the communication listener. This parameter is optional, if the service has only one communication listener</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Runtime.ServiceInstanceListener.Name">
            <summary>
            Name of the communication listener.
            </summary>
            <value>Name</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Runtime.ServiceInstanceListener.CreateCommunicationListener">
            <summary>
            Factory method for creating the communication listener.
            </summary>
            <value>Factory method</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Runtime.ServiceReplicaListener">
            <summary>
            Represents the communication listener and its properties for a Stateful Service Replica.
            Endpoints given out by the communication listener are associated with name of the communication listener.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Communication.Runtime.ServiceReplicaListener.DefaultName">
            <summary>
            The default name used when the ServiceReplicaListener is not given a name.
            </summary>
            <value>Default name of the Service instance listener</value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Runtime.ServiceReplicaListener.#ctor(System.Func{System.Fabric.StatefulServiceInitializationParameters,Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener},System.String,System.Boolean)">
            <summary>
            Creates the ServiceReplicaListener
            </summary>
            <param name="createCommunicationListener">Factory method for creating the communication listener</param>
            <param name="name">Name of the communication listener. This parameter is optional, if the service has only one communication listener</param>
            <param name="listenOnSecondary">Specifies if the communication listener needs to be opened when the replica becomes Active secondary. THis parameter is optional</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Runtime.ServiceReplicaListener.Name">
            <summary>
            Name of the communication listener.
            </summary>
            <value>Name</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Runtime.ServiceReplicaListener.ListenOnSecondary">
            <summary>
            Indicates if this communication listener should be opened when the stateful service replica 
            becomes an ActiveSecondary. When this member is not set(or set to false), the communication listener
            is opened only when the replica becomes Primary.
            </summary>
            <value>Boolean value that indicates if this communication listener should be opened when the replica is ActiveSecondary</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Runtime.ServiceReplicaListener.CreateCommunicationListener">
            <summary>
            Factory method for creating the communication listener.
            </summary>
            <value>Factory method</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Wcf.Client.WcfCommunicationClient`1">
            <summary>
            WCF based implementation of ICommunicationClient
            </summary>
            <typeparam name="TChannel">WCF service contract</typeparam>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Wcf.Client.WcfCommunicationClient`1.Channel">
            <summary>
            Gets the WCF channel for the specified contract that this communication client uses.
            </summary>
            <value>WCF channel</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Wcf.Client.WcfCommunicationClient`1.ResolvedServicePartition">
            <summary>
            Gets or Sets the Resolved service partition which was used when this client was created.
            </summary>
            <value><see cref="T:System.Fabric.ResolvedServicePartition"/> object</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Wcf.Client.WcfCommunicationClientFactory`1">
            <summary>
            WCF implementation of the Communication client factory
            </summary>
            <typeparam name="TChannel">WCF based service contract</typeparam>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Wcf.Client.WcfCommunicationClientFactory`1.#ctor(Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver,System.ServiceModel.Channels.Binding,System.Object,System.Collections.Generic.IList{Microsoft.ServiceFabric.Services.Communication.Client.IExceptionHandler},System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Instantiates the WcfCommunicationClientFactory with the given parameters.
            </summary>
            <param name="servicePartitionResolver">Service partition resolver</param>
            <param name="binding">WCF binding to use</param>
            <param name="callback">Callback channel to use</param>
            <param name="exceptionHandlers">List of exception handler</param>
            <param name="doNotRetryExceptionTypes">List of exceptions where the request should not be retried</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Wcf.Client.WcfCommunicationClientFactory`1.CreateWcfCommunicationClient(`0)">
            <summary>
            Factory method to create WCF communication clients.
            </summary>
            <param name="channel">Service contract</param>
            <returns>The communication client that was created</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Wcf.Client.WcfCommunicationClientFactory`1.CreateClientAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a communication client for the given endpoint address.
            </summary>
            <param name="endpoint">Endpoint address where the service is listening</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The communication client that was created</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Wcf.Client.WcfCommunicationClientFactory`1.ValidateClient(Microsoft.ServiceFabric.Services.Communication.Wcf.Client.WcfCommunicationClient{`0})">
            <summary>
            Returns true if the client is still valid. Connection oriented transports can use this method to indicate that the client is no longer
            connected to the service.
            </summary>
            <param name="client">WCF communication client</param>
            <returns>true if the client is valid, false otherwise</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Wcf.Client.WcfCommunicationClientFactory`1.ValidateClient(System.String,Microsoft.ServiceFabric.Services.Communication.Wcf.Client.WcfCommunicationClient{`0})">
            <summary>
            Returns true if the client is still valid and connected to the endpoint specified in the parameter.
            </summary>
            <param name="endpoint">endpoint string</param>
            <param name="client">WCF communication client</param>
            <returns>true if the client is valid, false otherwise</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Wcf.Client.WcfCommunicationClientFactory`1.AbortClient(Microsoft.ServiceFabric.Services.Communication.Wcf.Client.WcfCommunicationClient{`0})">
            <summary>
            Aborts the given client
            </summary>
            <param name="client">Communication client</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Wcf.Client.WcfCommunicationClientFactory`1.OnHandleException(System.Exception,Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingResult@)">
            <summary>
            Handles the exceptions that are WCF channel specific and sets the appropriate ExceptionHandlingResult.
            </summary>
            <param name="e">The exception that occurred when sending message to the service</param>
            <param name="result">If the return value is true, this gives the result from the derived class handling the exception</param>
            <returns>true if the exception is handled, false otherwise</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Wcf.Client.WcfCommunicationClientFactory`1.MaxRetryBackoffIntervalOnTransientErrors">
            <summary>
            Gets or Sets the time back off interval for retrying for transient errors
            in the communication between client and service
            </summary>
            <value>Back off retry interval</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Wcf.Client.WcfCommunicationClientFactory`1.MaxRetryBackoffIntervalOnNonTransientErrors">
            <summary>
            Gets or Sets the time back off interval for retrying for non transient errors
            in the communication between client and service. Non transient errors require
            the endpoint to be updated by re-resolving before retrying.
            </summary>
            <value>Back off retry interval</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Wcf.Client.WcfCommunicationClientFactory`1.OperationTimeout">
            <summary>
            Gets or Sets the timeout interval for requests on the communication channel.
            </summary>
            <value>Operation timeout</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Wcf.Runtime.WcfCommunicationListener">
            <summary>
            This class provides the WCF based communication listener implementation.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Wcf.Runtime.WcfCommunicationListener.#ctor(System.Fabric.ServiceInitializationParameters,System.Type,System.Type)">
            <summary>
            Instantiates a WcfCommunicationListener using the given initialization parameters.
            </summary>
            <param name="serviceInitializationParameters">Service initialization parameters</param>
            <param name="communicationInterfaceType">Communication contract</param>
            <param name="communicationImplementationType">Communication implementation</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Wcf.Runtime.WcfCommunicationListener.#ctor(System.Fabric.ServiceInitializationParameters,System.Type,System.Object)">
            <summary>
            Instantiates a WcfCommunicationListener using the given initialization parameters.
            </summary>
            <param name="serviceInitializationParameters">Service initialization parameters</param>
            <param name="communicationInterfaceType">Communication contract</param>
            <param name="service">Service object</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Wcf.Runtime.WcfCommunicationListener.OpenAsync(System.Threading.CancellationToken)">
            <summary>
            This method causes the communication listener to be opened. Once the Open
            completes, the communication listener becomes usable - accepts and sends messages.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            the endpoint string.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Wcf.Runtime.WcfCommunicationListener.CloseAsync(System.Threading.CancellationToken)">
            <summary>
            This method causes the communication listener to close. Close is a terminal state and 
            this method allows the communication listener to transition to this state in a
            graceful manner.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Wcf.Runtime.WcfCommunicationListener.Abort">
            <summary>
            This method causes the communication listener to close. Close is a terminal state and
            this method causes the transition to close ungracefully. Any outstanding operations
            (including close) should be canceled when this method is called.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Wcf.Runtime.WcfCommunicationListener.AddEndpoint(System.ServiceModel.ServiceHost,System.Type)">
            <summary>
            Adds the ServiceEndpoint to the ServiceHost. The default implementation uses the EndpointResourceName member
            to lookup the endpoint port to use.
            </summary>
            <param name="serviceHost">The service host for which the service endpoint needs to be added</param>
            <param name="serviceContractType">The service contract type.</param>
            <returns>WCF service endpoint</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Wcf.Runtime.WcfCommunicationListener.Host">
            <summary>
            Gets the WCF service host that hosts the WCF service endpoint
            </summary>
            <value>WCF service host</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Wcf.Runtime.WcfCommunicationListener.Endpoint">
            <summary>
            Gets the WCF service endpoint.
            </summary>
            <value>WCF service endpoint</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Wcf.Runtime.WcfCommunicationListener.Binding">
            <summary>
            Gets or Sets the WCF binding for the communication listener.
            </summary>
            <value>WCF endpoint binding</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Wcf.Runtime.WcfCommunicationListener.EndpointResourceName">
            <summary>
            Gets or Sets the EndpointResourceName. EndpointResourceName is used to identify the endpoint that should be 
            used for the communication listener from the endpoints got from the CodePackageActivationContext(CodePackageActivationContext.GetEndpoints()).
            </summary>
            <value>EndpointResourceName</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Wcf.WcfUtil">
            <summary>
            Utility class for WCF communication
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Communication.Wcf.WcfUtil.DefaultTcpClientBinding">
            <summary>
            Gets the default binding to use for the WCF based client channels created. 
            </summary>
            <value>Default WCF client binding</value>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Communication.Wcf.WcfUtil.DefaultTcpListenBinding">
            <summary>
            Gets the default binding to use for WCF based CommunicationListeners used in ReliableServices
            </summary>
            <value>Default WCF listen binding</value>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Communication.Wcf.WcfUtil.DefaultMaxReceivedMessageSize">
            <summary>
            Gets the default MaxMessageSize for use in WCF based clients and CommunicationListeners.
            </summary>
            <value>Default max message size</value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Wcf.WcfUtil.CreateDefaultTcpListenBinding">
            <summary>
            Creates the default listen binding
            </summary>
            <returns>Binding</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Wcf.WcfUtil.CreateDefaultTcpClientBinding">
            <summary>
            Creates the default client binding
            </summary>
            <returns>Binding</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Wcf.WcfUtil.CreateTcpListenBinding(System.Int64)">
            <summary>
            Creates a WCF binding to use with the CommunicationListener with the specified max message size.
            </summary>
            <param name="maxReceivedMessageSize">The Max message size to use in the binding</param>
            <returns>Binding</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Wcf.WcfUtil.CreateTcpClientBinding(System.Int64)">
            <summary>
            Creates a WCF binding to use with the clients with the specified max message size.
            </summary>
            <param name="maxReceivedMessageSize">The Max message size to use in the binding</param>
            <returns>Binding</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxyActivator">
            <summary>
            Defines the ServiceProxyActivator used by the remoting code generation to activate
            the ServiceProxy object.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxyActivator.CreateInstance">
            <summary>
            Creates an instance of the ServiceProxy
            </summary>
            <returns>Service proxy</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceRemotingClient">
            <summary>
            Defines the interface that must be implemented to provide a client for Service Remoting communication.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceRemotingClient.RequestResponseAsync(Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders,System.Byte[])">
            <summary>
            Sends a message to the service and gets a response back.
            </summary>
            <param name="messageHeaders">Message headers</param>
            <param name="requestBody">Message body</param>
            <returns>Response body</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceRemotingClient.SendOneWay(Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders,System.Byte[])">
            <summary>
            Sends a one-way message to the service
            </summary>
            <param name="messageHeaders">Message headers</param>
            <param name="requestBody">Message body</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceRemotingClientFactory">
            <summary>
            Defines the interface that must be implemented for providing the remoting communication client factory.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy">
            <summary>
            This is the base Client side interface for Remoting. The framework provides the
            Remoting infrastructure for all the service contracts inheriting from IService through
            ServiceRemotingListener and ServiceProxy.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy.ServiceInterfaceType">
            <summary>
            The interface type that is being remoted.
            </summary>
            <value>Service interface type</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy.ServicePartitionClient">
            <summary>
            The service partition client used to send requests to the service.
            </summary>
            <value>ServicePartitionClient used by the ServiceProxy</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy">
            <summary>
            Provides the base implementation for the Remoting client - IServiceProxy
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.Create``1(System.Uri,System.String,System.Func{Microsoft.ServiceFabric.Services.Remoting.IServiceRemotingCallbackClient,Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingSettings,Microsoft.ServiceFabric.Services.Remoting.Client.IServiceRemotingClientFactory})">
            <summary>
            Creates a service proxy for the Interface - TServiceInterface that is implemented by the given ServiceName.
            </summary>
            <typeparam name="TServiceInterface">Interface that is being remoted</typeparam>
            <param name="serviceName">Service Name</param>
            <param name="listenerName">This parameter is Optional if the service has a single communication listener. The endpoints from the service
            are of the form {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}. When the service exposes multiple endpoints, this parameter
            identifies which of those endpoints to use for the remoting communication.
            </param>
            <param name="communicationClientFactory">This parameter is Optional. It is required if the service uses any custom transport for the remoting communication 
            other than the one provided with the runtime.</param>
            <returns>The interface that is being remoted</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.Create``1(System.Int64,System.Uri,System.String,System.Func{Microsoft.ServiceFabric.Services.Remoting.IServiceRemotingCallbackClient,Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingSettings,Microsoft.ServiceFabric.Services.Remoting.Client.IServiceRemotingClientFactory})">
            <summary>
            Creates a service proxy for the Interface - TServiceInterface that is implemented by the given ServiceName.
            </summary>
            <typeparam name="TServiceInterface">Interface that is being remoted</typeparam>
            <param name="partitionKey">The partition key for the Int64 partitioned service</param>
            <param name="serviceName">Service Name</param>
            <param name="listenerName">This parameter is Optional if the service has a single communication listener. The endpoints from the service
            are of the form {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}. When the service exposes multiple endpoints, this parameter
            identifies which of those endpoints to use for the remoting communication.
            </param>
            <param name="communicationClientFactory">This parameter is Optional. It is required if the service uses any custom transport for the remoting communication 
            other than the one provided with the runtime.</param>
            <returns>The interface that is being remoted</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.Create``1(System.String,System.Uri,System.String,System.Func{Microsoft.ServiceFabric.Services.Remoting.IServiceRemotingCallbackClient,Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingSettings,Microsoft.ServiceFabric.Services.Remoting.Client.IServiceRemotingClientFactory})">
            <summary>
            Creates a service proxy for the Interface - TServiceInterface that is implemented by the given ServiceName.
            </summary>
            <typeparam name="TServiceInterface">Interface that is being remoted</typeparam>
            <param name="partitionKey">The named partition for the service</param>
            <param name="serviceName">Service Name</param>
            <param name="listenerName">This parameter is Optional if the service has a single communication listener. The endpoints from the service
            are of the form {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}. When the service exposes multiple endpoints, this parameter
            identifies which of those endpoints to use for the remoting communication.
            </param>
            <param name="communicationClientFactory">This parameter is Optional. It is required if the service uses any custom transport for the remoting communication 
            other than the one provided with the runtime.</param>
            <returns>The interface that is being remoted</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.InvokeAsync(System.Int32,System.Int32,System.Object)">
            <summary>
            Used by the remoting code generation, to send the message for the specific remote method
            </summary>
            <param name="interfaceId">Remote interface id</param>
            <param name="methodId">Remote method id</param>
            <param name="requestBody">Request body</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the task is
            the response from the service
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.ContinueWithResult``1(System.Int32,System.Threading.Tasks.Task{System.Object})">
            <summary>
            Used by the remoting code generation.
            </summary>
            <typeparam name="TRetval">Type of return value</typeparam>
            <param name="methodId">Method id</param>
            <param name="task">Task</param>
            <returns>Return value</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.ContinueWith(System.Threading.Tasks.Task{System.Object})">
            <summary>
            Used by remoting code generation
            </summary>
            <param name="task">task</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.GetReturnValue(System.Int32,System.Object)">
            <summary>
            Implemented by the remoting code generation.
            </summary>
            <param name="methodId">Remote method id</param>
            <param name="responseBody">Response body</param>
            <returns>Return value</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.ServiceInterfaceType">
            <summary>
            The interface type that is being remoted.
            </summary>
            <value>Service interface type</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.ServicePartitionClient">
            <summary>
            The service partition client used to send requests to the service.
            </summary>
            <value>ServicePartitionClient used by the ServiceProxy</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.IServiceRemotingCallbackClient">
            <summary>
            Defines the interface that must be implemented for providing callback mechanism from the remoting listener to the client.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.IServiceRemotingCallbackClient.RequestResponseAsync(Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders,System.Byte[])">
            <summary>
            Sends a message to the client and gets the response.
            </summary>
            <param name="messageHeaders">Message headers</param>
            <param name="requestBody">Message body</param>
            <returns>Response body</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.IServiceRemotingCallbackClient.OneWayMessage(Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders,System.Byte[])">
            <summary>
            Sends a one way message to the client.
            </summary>
            <param name="messageHeaders">Message headers</param>
            <param name="requestBody">Message body</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceRemotingPartitionClient">
            <summary>
            Specifies the Service partition client for Remoting communication
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceRemotingPartitionClient.#ctor(Microsoft.ServiceFabric.Services.Remoting.Client.IServiceRemotingClientFactory,System.Uri)">
            <summary>
            Instantiates a ServiceRemoting partition client for a singleton partitioned service with
            the given name
            </summary>
            <param name="clientFactory">Remoting client factory</param>
            <param name="serviceName">Service name</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceRemotingPartitionClient.#ctor(Microsoft.ServiceFabric.Services.Remoting.Client.IServiceRemotingClientFactory,System.Uri,System.Int64)">
            <summary>
            Instantiates a ServiceRemoting partition client for a Int64 partitioned service with
            the given name
            </summary>
            <param name="clientFactory">Remoting client factory</param>
            <param name="serviceName">Service name</param>
            <param name="partitionKey">Int64 partition key</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceRemotingPartitionClient.#ctor(Microsoft.ServiceFabric.Services.Remoting.Client.IServiceRemotingClientFactory,System.Uri,System.String)">
            <summary>
            Instantiates a ServiceRemoting partition client for a named partitioned service with
            the given name
            </summary>
            <param name="clientFactory">Remoting client factory</param>
            <param name="serviceName">Service name</param>
            <param name="partitionKey">Named partition key</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.IService">
            <summary>
            This is the base Service side interface for Remoting. The framework provides the
            Remoting infrastructure for all the service contracts inheriting from IService through
            ServiceRemotingListener and ServiceProxy.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingMessageHandler">
            <summary>
            Defines the interface that must be implemented by the ServiceRemotingListener to receive messages from the
            remoting transport.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingMessageHandler.RequestResponseAsync(Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingRequestContext,Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders,System.Byte[])">
            <summary>
            Handles a message from the client that requires a response from the service.
            </summary>
            <param name="requestContext">Request context - contains additional information about the request</param>
            <param name="messageHeaders">Request message headers</param>
            <param name="requestBody">Request message body</param>
            <returns>Response body</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingMessageHandler.HandleOneWay(Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingRequestContext,Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders,System.Byte[])">
            <summary>
            Handles a one way message from the client.
            </summary>
            <param name="requestContext">Request context - contains additional information about the request</param>
            <param name="messageHeaders">Request message headers</param>
            <param name="requestBody">Request message body</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingRequestContext">
            <summary>
            Defines the interface that must be implemented to provide the request context for the IServiceRemotingMessageHandler.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingRequestContext.GetCallbackClient">
            <summary>
            Gets the client channel interface to use in cases where service wants to initiate calls to the client.
            </summary>
            <returns>Remoting callback client</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceMethodDispatcherBase">
            <summary>
            Specifies the base class for ServiceMethodDispatcher, used by service remoting to dispatch requests from the client
            to the right interface and method of the service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceMethodDispatcherBase.Initialize(System.Int32,System.Collections.Generic.IEnumerable{System.Type},System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes the dispatcher with the given parameters
            </summary>
            <param name="id">Interface id</param>
            <param name="requestBodyTypes">Types in request body</param>
            <param name="responseBodyTypes">Types in response body</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceMethodDispatcherBase.Microsoft#ServiceFabric#Services#Remoting#Runtime#IServiceMethodDispatcher#DeserializeRequestMessageBody(System.Byte[])">
            <summary>
            De-serializes the specified bytes into the message body
            </summary>
            <param name="requestMsgBodyBytes">Bytes</param>
            <returns>Remoting message body</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceMethodDispatcherBase.Microsoft#ServiceFabric#Services#Remoting#Runtime#IServiceMethodDispatcher#SerializeResponseMessageBody(Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageBody)">
            <summary>
            Serializes the message body into byte array
            </summary>
            <param name="responseMsgBody"></param>
            <returns>byte array</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceMethodDispatcherBase.ContinueWithResult``1(System.Int32,System.Threading.Tasks.Task{``0})">
            <summary>
            Internal - used by Service remoting
            </summary>
            <typeparam name="TRetval">Return value</typeparam>
            <param name="methodId">method id</param>
            <param name="task">continuation task</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceMethodDispatcherBase.ContinueWith(System.Threading.Tasks.Task)">
            <summary>
            Internal - used by Service remoting
            </summary>
            <param name="task">continuation task</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceMethodDispatcherBase.OnDispatchAsync(System.Int32,System.Object,System.Object)">
            <summary>
            Internal - used by Service remoting
            </summary>
            <param name="methodId">method id</param>
            <param name="serviceImplementation">service implementation</param>
            <param name="requestBody">request body</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceMethodDispatcherBase.CreateResponseBody(System.Int32,System.Object)">
            <summary>
            Internal - used by service remoting
            </summary>
            <param name="methodId">method id</param>
            <param name="retVal">return value</param>
            <returns>object</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceMethodDispatcherBase.InterfaceId">
            <summary>
            Interface id
            </summary>
            <value>Interface id</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingListener`1">
            <summary>
            Implements remoting for the interfaces inheriting from IService and implemented by TServiceImplementation.
            </summary>
            <typeparam name="TServiceImplementation">The service that implements the remoting interfaces</typeparam>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingListener`1.#ctor(System.Fabric.ServiceInitializationParameters,`0)">
            <summary>
            Initializes a new instance of the ServiceRemotingListener with the specified service object to be remoted.
            </summary>
            <param name="serviceInitializationParameters">Service Initialization parameters for the communication listener</param>
            <param name="serviceImplementation">The service object that implements one or more interfaces that inherit from IService</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingListener`1.#ctor(System.Fabric.ServiceInitializationParameters,`0,Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingListenerSettings)">
            <summary>
            Initializes a new instance of the ServiceRemotingListener with the specified settings and service object to be remoted.
            </summary>
            <param name="serviceInitializationParameters">Service Initialization parameters for the communication listener</param>
            <param name="serviceImplementation">The service object that implements one or more interfaces that inherit from IService</param>
            <param name="serviceRemotingListenerSettings">Remoting listener settings</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingListener`1.#ctor(System.Fabric.ServiceInitializationParameters,`0,Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingListenerSettings,System.Func{System.Fabric.ServiceInitializationParameters,Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingListenerSettings,Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingMessageHandler,Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener})">
            <summary>
            Initializes a new instance of the ServiceRemotingListener with the specified settings and service object to be remoted.
            </summary>
            <param name="serviceInitializationParameters">Service Initialization parameters for the communication listener</param>
            <param name="serviceImplementation">The service object that implements one or more interfaces that inherit from IService</param>
            <param name="serviceRemotingListenerSettings">Remoting listener settings</param>
            <param name="innerCommunicationListenerFactory">The custom transport to use</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingListener`1.OpenAsync(System.Threading.CancellationToken)">
            <summary>
            This method causes the communication listener to be opened. Once the Open
            completes, the communication listener becomes usable - accepts and sends messages.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            the endpoint string.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingListener`1.CloseAsync(System.Threading.CancellationToken)">
            <summary>
            This method causes the communication listener to close. Close is a terminal state and 
            this method allows the communication listener to transition to this state in a
            graceful manner.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingListener`1.Abort">
            <summary>
            This method causes the communication listener to close. Close is a terminal state and
            this method causes the transition to close ungracefully. Any outstanding operations
            (including close) should be canceled when this method is called.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingListenerSettings">
            <summary>
            Specifies the settings for the ServiceRemotingListener
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingSettings">
            <summary>
            Specifies the settings for Remoting communication.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingSettings.#ctor">
            <summary>
            Instantiates the ServiceRemotingSettings object.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingSettings.MaxMessageSize">
            <summary>
            Specifies the max message size for the requests. The default value is 4MB.
            </summary>
            <value>Max message size</value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingListenerSettings.#ctor">
            <summary>
            Instantiates a new ServiceRemotingListenerSettings object.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingListenerSettings.EndpointResourceName">
            <summary>
            Gets or Sets the EndpointResourceName. EndpointResourceName is used to identify the endpoint that should be used for the remoting listener 
            from the endpoints got from the CodePackageActivationContext(CodePackageActivationContext.GetEndpoints()).
            </summary>
            <value>Endpoint resource name</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders">
            <summary>
            Specifies the headers that are sent along with a ServiceRemoting message.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders.#ctor">
            <summary>
            Instantiates a new instance of the ServiceRemotingMessageHeaders
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders.AddHeader(System.String,System.Byte[])">
            <summary>
            Adds a new header with the specified name and value.
            Throws FabricElementAlreadyExistsException if a header with the same name already exists.
            </summary>
            <param name="headerName">Header Name</param>
            <param name="headerValue">header value</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders.TryGetHeaderValue(System.String,System.Byte[]@)">
            <summary>
            Gets the header with the specified name
            </summary>
            <param name="headerName">Header Name</param>
            <param name="headerValue">Header value</param>
            <returns>true if a header with that name exists, false otherwise</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders.Serialize(System.Runtime.Serialization.DataContractSerializer,Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders)">
            <summary>
            Serializes the headers to a byte array
            </summary>
            <param name="serializer">Serializer</param>
            <param name="msg">Headers</param>
            <returns>The serialized byte array</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders.Deserialize(System.Runtime.Serialization.DataContractSerializer,System.Byte[])">
            <summary>
            De-serializes the byte array to a ServiceRemotingMessageHeaders object
            </summary>
            <param name="serializer">Deserializer</param>
            <param name="buffer">buffer</param>
            <returns>De-serialized headers</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders.MethodId">
            <summary>
            The methodId of the remote method
            </summary>
            <value>Method id</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders.InterfaceId">
            <summary>
            The interface id of the remote interface.
            </summary>
            <value>Interface id</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingSettingsAttribute">
            <summary>
            Configures Communication channel properties for the Remoted Service Communication.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingSettingsAttribute.Get(System.Reflection.Assembly)">
            <summary>
            Creates an instance of ServiceRemotingSettings from the assembly attribute
            </summary>
            <param name="assembly">The assembly whose attributes must be examined</param>
            <returns>ServiceRemotingSettings</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingSettingsAttribute.MaxMessageSize">
            <summary>
            Gets or sets MaxMessageSize for Communication channel.
            </summary>
            <value>Max message size</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Runtime.StatefulService">
            <summary>
            Reliable service base class which provides an <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase">
            <summary>
            Specifies the base class for a StatefulService
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.TraceType">
            <summary>
            Trace string - for internal use
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.BackOffInterval">
            <summary>
            Back off interval.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.TraceId">
            <summary>
            Trace identifier - for internal use
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.cancellationTokenSource">
            <summary>
            Cancellation token source for the runAsync method.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.runTask">
            <summary>
            Task associated with the runAsync method.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.previouslyFaulted">
            <summary>
            Flag used to guard against retrying StatefulServiceReplica.ChangeRoleAsync 
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.System#Fabric#IStatefulServiceReplica#Initialize(System.Fabric.StatefulServiceInitializationParameters)">
            <summary>
            This is the very first method called by the framework
            Provides all the initialization information
            No complex processing should be done here
            All heavy lifting should be done in Open
            </summary>
            <param name="initializationParameters">Initialization parameters.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.System#Fabric#IStatefulServiceReplica#OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)">
            <summary>
            OpenAsync is called when the replica is going to be actually used
            </summary>
            <param name="openMode">Open mode.</param>
            <param name="partition">Service partition</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.System#Fabric#IStatefulServiceReplica#ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)">
            <summary>
            ChangeRole is called whenever the replica role is being changed.
            </summary>
            <param name="newRole">The new role of the replica.</param>
            <param name="cancellationToken">The cancellation token to cancel this async call.</param>
            <returns>Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.System#Fabric#IStatefulServiceReplica#CloseAsync(System.Threading.CancellationToken)">
            <summary>
            CloseAsync is called when the replica is going to be closed
            </summary>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.System#Fabric#IStatefulServiceReplica#Abort">
            <summary>
            Abort is called when the replica is being forcibly closed
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.CreateServiceReplicaListeners">
            <summary>
            Override this method to supply the communication listeners for the service replica. The endpoints returned by the communication listener's
            are stored as a JSON string of ListenerName, Endpoint string pairs like 
            {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}
            </summary>
            <returns>List of ServiceReplicaListeners</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.CreateStateProviderReplica">
            <summary>
            Override this method to supply the state provider for this replica.  Called during Initialize to populate the <see cref="P:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.StateProviderReplica"/> property.
            </summary>
            <returns>State provider replica</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.RunAsync(System.Threading.CancellationToken)">
            <summary>
            Services that want to implement a processing loop which runs when it is primary and has write status,
            just override this method with their logic.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.OnInitialize(System.Fabric.StatefulServiceInitializationParameters)">
            <summary>
            This method is called as the final step before completing <see cref="M:System.Fabric.IStatefulServiceReplica.Initialize(System.Fabric.StatefulServiceInitializationParameters)"/>.
            Override this method to be notified that Initialize has completed for this replica's internal components.
            </summary>
            <remarks>Implementations of this method must not block.</remarks>
            <param name="initializationParameters">Initialization parameters provided to <see cref="M:System.Fabric.IStatefulServiceReplica.Initialize(System.Fabric.StatefulServiceInitializationParameters)"/></param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.OnOpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)">
            <summary>
            This method is called as the final step before completing <see cref="M:System.Fabric.IStatefulServiceReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)"/>.
            Override this method to be notified that Open has completed for this replica's internal components.
            </summary>
            <param name="openMode">Open mode provided to <see cref="M:System.Fabric.IStatefulServiceReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)"/></param>
            <param name="partition">Partition provided to <see cref="M:System.Fabric.IStatefulServiceReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)"/></param>
            <param name="cancellationToken">Cancellation token provided to <see cref="M:System.Fabric.IStatefulServiceReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)"/>, and which to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.OnChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)">
            <summary>
            This method is called as the final step before completing <see cref="M:System.Fabric.IStatefulServiceReplica.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)"/>.
            Override this method to be notified that ChangeRole has completed for this replica's internal components.
            </summary>
            <param name="newRole">New role provided to <see cref="M:System.Fabric.IStatefulServiceReplica.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)"/></param>
            <param name="cancellationToken">Cancellation token provided to <see cref="M:System.Fabric.IStatefulServiceReplica.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)"/>, and which to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.OnCloseAsync(System.Threading.CancellationToken)">
            <summary>
            This method is called as the final step before completing <see cref="M:System.Fabric.IStatefulServiceReplica.CloseAsync(System.Threading.CancellationToken)"/>.
            Override this method to be notified that Close has completed for this replica's internal components.
            </summary>
            <param name="cancellationToken">Cancellation token provided to <see cref="M:System.Fabric.IStatefulServiceReplica.CloseAsync(System.Threading.CancellationToken)"/>, and which to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.OnAbort">
            <summary>
            Notification that the service is being aborted.  RunAsync MAY be running concurrently
            with the execution of this method, as cancellation is not awaited on the abort path.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.ExecuteRunAsync(System.Threading.CancellationToken)">
            <summary>
            The change role to primary async.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.CommunicationListeners">
            <summary>
            Gets the communication listeners currently used by the service.
            </summary>
            <value>list of communication listeners</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.StateProviderReplica">
            <summary>
            Gets the StateProviderReplica
            </summary>
            <value>StateProviderReplica</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.ServicePartition">
            <summary>
            Gets the Service partition
            </summary>
            <value>Stateful service partition</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.ServiceInitializationParameters">
            <summary>
            Gets the initialization parameters passed to the Service replica.
            </summary>
            <value>Stateful service initialization parameters</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.Address">
            <summary>
            Gets the current endpoints listened to by the service replica
            </summary>
            <value>Endpoints</value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulService.#ctor">
            <summary>
            Creates a new StatefulService
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulService.CreateReliableStateManager">
            <summary>
            Override this to create a ReliableStateManager with non-default options.  The value returned from this method
            will be used to set the <see cref="P:Microsoft.ServiceFabric.Services.Runtime.StatefulService.StateManager"/> property.
            </summary>
            <returns>The reliable state manager for this replica.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulService.CreateStateProviderReplica">
            <summary>
            Override this method to supply the state provider for this replica.  Called during Initialize to populate the <see cref="P:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.StateProviderReplica"/> property.
            </summary>
            <returns>State provider replica</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulService.OnCloseAsync(System.Threading.CancellationToken)">
            <summary>
            This method is called as the final step before completing <see cref="M:System.Fabric.IStatefulServiceReplica.CloseAsync(System.Threading.CancellationToken)"/>.
            Override this method to be notified that Close has completed for this replica's internal components.
            </summary>
            <param name="cancellationToken">Cancellation token provided to <see cref="M:System.Fabric.IStatefulServiceReplica.CloseAsync(System.Threading.CancellationToken)"/>, and which to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulService.OnChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)">
            <summary>
            This method is called as the final step before completing <see cref="M:System.Fabric.IStatefulServiceReplica.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)"/>.
            Override this method to be notified that ChangeRole has completed for this replica's internal components.
            </summary>
            <param name="newRole">New role provided to <see cref="M:System.Fabric.IStatefulServiceReplica.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)"/></param>
            <param name="cancellationToken">Cancellation token provided to <see cref="M:System.Fabric.IStatefulServiceReplica.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)"/>, and which to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulService.OnOpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)">
            <summary>
            This method is called as the final step before completing <see cref="M:System.Fabric.IStatefulServiceReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)"/>.
            Override this method to be notified that Open has completed for this replica's internal components.
            </summary>
            <param name="openMode">Open mode provided to <see cref="M:System.Fabric.IStatefulServiceReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)"/></param>
            <param name="partition">Partition provided to <see cref="M:System.Fabric.IStatefulServiceReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)"/></param>
            <param name="cancellationToken">Cancellation token provided to <see cref="M:System.Fabric.IStatefulServiceReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)"/>, and which to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulService.OnInitialize(System.Fabric.StatefulServiceInitializationParameters)">
            <summary>
            This method is called as the final step before completing <see cref="M:System.Fabric.IStatefulServiceReplica.Initialize(System.Fabric.StatefulServiceInitializationParameters)"/>.
            Override this method to be notified that Initialize has completed for this replica's internal components.
            </summary>
            <remarks>Implementations of this method must not block.</remarks>
            <param name="initializationParameters">Initialization parameters provided to <see cref="M:System.Fabric.IStatefulServiceReplica.Initialize(System.Fabric.StatefulServiceInitializationParameters)"/></param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulService.OnAbort">
            <summary>
            Notification that the service is being aborted.  RunAsync MAY be running concurrently
            with the execution of this method, as cancellation is not awaited on the abort path.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Runtime.StatefulService.StateManager">
            <summary>
            Gets or sets this replica's state manager.
            </summary>
            <value>The state manager.</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Runtime.StatelessService">
            <summary>
            Specifies the base class for StatelessService
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Runtime.StatelessServiceBase">
            <summary>
            Specifies the base class for Stateless Service
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Runtime.StatelessServiceBase.TraceType">
            <summary>
            Trace string - for internal use
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Runtime.StatelessServiceBase.TraceId">
            <summary>
            Trace identifier - for internal use
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Runtime.StatelessServiceBase.cancellationTokenSource">
            <summary>
            Cancellation token source for the runAsync method.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Runtime.StatelessServiceBase.runTask">
            <summary>
            Task associated with the runAsync method.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatelessServiceBase.System#Fabric#IStatelessServiceInstance#Initialize(System.Fabric.StatelessServiceInitializationParameters)">
            <summary>
            This is the very first method called by the framework
            Provides all the initialization information
            No complex processing should be done here
            All heavy lifting should be done in Open
            </summary>
            <param name="initializationParameters">Initialization parameters.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatelessServiceBase.System#Fabric#IStatelessServiceInstance#OpenAsync(System.Fabric.IStatelessServicePartition,System.Threading.CancellationToken)">
            <summary>
            OpenAsync is called when the instance is going to be actually used
            </summary>
            <param name="partition">Service partition</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatelessServiceBase.System#Fabric#IStatelessServiceInstance#CloseAsync(System.Threading.CancellationToken)">
            <summary>
            CloseAsync is called when the instance is going to be closed
            </summary>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatelessServiceBase.System#Fabric#IStatelessServiceInstance#Abort">
            <summary>
            Abort is called when the instance is being forcibly closed
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatelessServiceBase.CreateServiceInstanceListeners">
            <summary>
            Override this method to supply the communication listeners for the service instance. The endpoints returned by the communication listener's
            are stored as a JSON string of ListenerName, Endpoint string pairs like 
            {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}
            </summary>
            <returns>List of ServiceInstanceListeners</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatelessServiceBase.RunAsync(System.Threading.CancellationToken)">
            <summary>
            Services that want to implement a background task which runs when it is opened,
            just override this method with their logic.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatelessServiceBase.OnInitialize(System.Fabric.StatelessServiceInitializationParameters)">
            <summary>
            This method is called as the final step before completing <see cref="M:System.Fabric.IStatelessServiceInstance.Initialize(System.Fabric.StatelessServiceInitializationParameters)"/>.
            Override this method to be notified that Initialize has completed for this instance's internal components.
            </summary>
            <remarks>Implementations of this method must not block.</remarks>
            <param name="initializationParameters">Initialization parameters provided to <see cref="M:System.Fabric.IStatelessServiceInstance.Initialize(System.Fabric.StatelessServiceInitializationParameters)"/></param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatelessServiceBase.OnOpenAsync(System.Fabric.IStatelessServicePartition,System.Threading.CancellationToken)">
            <summary>
            This method is called as the final step before completing <see cref="M:System.Fabric.IStatelessServiceInstance.OpenAsync(System.Fabric.IStatelessServicePartition,System.Threading.CancellationToken)"/>.
            Override this method to be notified that Open has completed for this instance's internal components.
            </summary>
            <param name="partition">Partition provided to <see cref="M:System.Fabric.IStatelessServiceInstance.OpenAsync(System.Fabric.IStatelessServicePartition,System.Threading.CancellationToken)"/></param>
            <param name="cancellationToken">Cancellation token provided to <see cref="M:System.Fabric.IStatelessServiceInstance.OpenAsync(System.Fabric.IStatelessServicePartition,System.Threading.CancellationToken)"/>, and which to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatelessServiceBase.OnCloseAsync(System.Threading.CancellationToken)">
            <summary>
            This method is called as the final step before completing <see cref="M:System.Fabric.IStatelessServiceInstance.CloseAsync(System.Threading.CancellationToken)"/>.
            Override this method to be notified that Close has completed for this instance's internal components.
            </summary>
            <param name="cancellationToken">Cancellation token provided to <see cref="M:System.Fabric.IStatelessServiceInstance.CloseAsync(System.Threading.CancellationToken)"/>, and which to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatelessServiceBase.OnAbort">
            <summary>
            Notification that the service is being aborted.  RunAsync MAY be running concurrently
            with the execution of this method, as cancellation is not awaited on the abort path.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Runtime.StatelessServiceBase.CommunicationListeners">
            <summary>
            Gets the communication listeners currently used by the service.
            </summary>
            <value>list of communication listeners</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Runtime.StatelessServiceBase.ServicePartition">
            <summary>
            Gets the Service partition
            </summary>
            <value>Stateless service partition</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Runtime.StatelessServiceBase.ServiceInitializationParameters">
            <summary>
            Gets the initialization parameters passed to the Service instance.
            </summary>
            <value>Stateless service initialization parameters</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Runtime.StatelessServiceBase.Address">
            <summary>
            Gets the current endpoints listened to by the service instance
            </summary>
            <value>Endpoints</value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatelessService.OnCloseAsync(System.Threading.CancellationToken)">
            <summary>
            This method is called as the final step before completing <see cref="M:System.Fabric.IStatelessServiceInstance.CloseAsync(System.Threading.CancellationToken)"/>.
            Override this method to be notified that Close has completed for this instance's internal components.
            </summary>
            <param name="cancellationToken">Cancellation token provided to <see cref="M:System.Fabric.IStatelessServiceInstance.CloseAsync(System.Threading.CancellationToken)"/>, and which to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatelessService.OnInitialize(System.Fabric.StatelessServiceInitializationParameters)">
            <summary>
            This method is called as the final step before completing <see cref="M:System.Fabric.IStatelessServiceInstance.Initialize(System.Fabric.StatelessServiceInitializationParameters)"/>.
            Override this method to be notified that Initialize has completed for this instance's internal components.
            </summary>
            <remarks>Implementations of this method must not block.</remarks>
            <param name="initializationParameters">Initialization parameters provided to <see cref="M:System.Fabric.IStatelessServiceInstance.Initialize(System.Fabric.StatelessServiceInitializationParameters)"/></param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatelessService.OnOpenAsync(System.Fabric.IStatelessServicePartition,System.Threading.CancellationToken)">
            <summary>
            This method is called as the final step before completing <see cref="M:System.Fabric.IStatelessServiceInstance.OpenAsync(System.Fabric.IStatelessServicePartition,System.Threading.CancellationToken)"/>.
            Override this method to be notified that Open has completed for this instance's internal components.
            </summary>
            <param name="partition">Partition provided to <see cref="M:System.Fabric.IStatelessServiceInstance.OpenAsync(System.Fabric.IStatelessServicePartition,System.Threading.CancellationToken)"/></param>
            <param name="cancellationToken">Cancellation token provided to <see cref="M:System.Fabric.IStatelessServiceInstance.OpenAsync(System.Fabric.IStatelessServicePartition,System.Threading.CancellationToken)"/>, and which to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatelessService.OnAbort">
            <summary>
            Notification that the service is being aborted.  RunAsync MAY be running concurrently
            with the execution of this method, as cancellation is not awaited on the abort path.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.ServiceNameFormat">
            <summary>
            Specifies the default way for generating resource names for services.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.ServiceNameFormat.GetEndpointName(System.Type)">
            <summary>
            Gets the default endpoint resource name for the given service type
            </summary>
            <param name="serviceInterfaceType">Service type name</param>
            <returns>Endpoint name</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.ServiceTypeInformation">
            <summary>
            Specifies the class used by the ServiceRemoting to lookup the interfaces implemented
            by the service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.ServiceTypeInformation.Get(System.Type)">
            <summary>
            Factory method that constructs a ServiceTypeInformation object from the given type
            </summary>
            <param name="type">Type to examine</param>
            <returns>ServiceTypeInformation</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.ServiceTypeInformation.TryGet(System.Type,Microsoft.ServiceFabric.Services.ServiceTypeInformation@)">
            <summary>
            Factory method that constructs a ServiceTypeInformation object from the given type
            </summary>
            <param name="type">Type to examine</param>
            <param name="typeInformation">The constructed ServiceTypeInformation</param>
            <returns>true if there are valid interfaces of type IService, false otherwise</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.ServiceTypeInformation.InterfaceTypes">
            <summary>
            The interface types implemented
            </summary>
            <value>List of interface types</value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Common.IdUtil.HashCombine(System.Int32,System.Int32)">
            <summary>
            This is how VB Anonymous Types combine hash values for fields.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.SR">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorServiceInterfaceMethodHasVaArgs">
            <summary>
              Looks up a localized string similar to Method {0} of interface {1} has variable length parameter. It is not supported.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorServiceInterfaceMethodIsGeneric">
            <summary>
              Looks up a localized string similar to Method {0} of interface {1} is using generics. It is not supported.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorServiceInterfaceMethodIsOverloaded">
            <summary>
              Looks up a localized string similar to Method {0} of interface {1} is overloaded. It is not supported.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorServiceInterfaceMethodNotReturningTask">
            <summary>
              Looks up a localized string similar to Method {0} of interface {1} doesnt return Task or Task&lt;T&gt;. It is not supported.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorServiceMethodDispatcher_InterfaceNotFound">
            <summary>
              Looks up a localized string similar to Interface id {0} is not implemented by object {1}.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorServiceMethodHasOutRefOptionalParameter">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; of interface {1} has out/ref/optional parameter {2}. This is not supported.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorServiceMethodHasVaArgParameter">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; of interface {1} has variable length parameter {2}. This is not supported.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.event_StatefulRunAsyncCancellation">
            <summary>
              Looks up a localized string similar to RunAsync has been cancelled for a stateful service replica.  The cancellation will be considered &apos;slow&apos; if RunAsync does not halt execution within {6} milliseconds.  Application Type Name: {0}, Application Name: {1}, Service Type Name: {2}, Service Name: {3}, Partition Id: {4}, Replica Id: {5}.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.event_StatefulRunAsyncCompletion">
            <summary>
              Looks up a localized string similar to RunAsync has successfully completed for a stateful service replica.  Application Type Name: {0}, Application Name: {1}, Service Type Name: {2}, Service Name: {3}, Partition Id: {4}, Replica Id: {5}, WasCancelled: {6}.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.event_StatefulRunAsyncFailure">
            <summary>
              Looks up a localized string similar to RunAsync has failed for a stateful service replica.  Application Type Name: {0}, Application Name: {1}, Service Type Name: {2}, Service Name: {3}, Partition Id: {4}, Replica Id: {5}, WasCancelled: {6}, Exception: {7}.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.event_StatefulRunAsyncInvocation">
            <summary>
              Looks up a localized string similar to RunAsync has been invoked for a stateful service replica.  Application Type Name: {0}, Application Name: {1}, Service Type Name: {2}, Service Name: {3}, Partition Id: {4}, Replica Id: {5}.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.event_StatefulRunAsyncSlowCancellation">
            <summary>
              Looks up a localized string similar to RunAsync was slow to respect the cancellation token and halt execution for a stateful service replica.  Application Type Name: {0}, Application Name: {1}, Service Type Name: {2}, Service Name: {3}, Partition Id: {4}, Replica Id: {5}, Time to Cancel: {6} milliseconds, Slow Cancellation Timeout: {7} milliseconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.event_StatelessRunAsyncCancellation">
            <summary>
              Looks up a localized string similar to RunAsync has been cancelled for a stateless service instance.  The cancellation will be considered &apos;slow&apos; if RunAsync does not halt execution within {6} milliseconds.  Application Type Name: {0}, Application Name: {1}, Service Type Name: {2}, Service Name: {3}, Partition Id: {4}, Instance Id: {5}.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.event_StatelessRunAsyncCompletion">
            <summary>
              Looks up a localized string similar to RunAsync has successfully completed for a stateless service instance.  Application Type Name: {0}, Application Name: {1}, Service Type Name: {2}, Service Name: {3}, Partition Id: {4}, Instance Id: {5}, WasCancelled: {6}.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.event_StatelessRunAsyncFailure">
            <summary>
              Looks up a localized string similar to RunAsync has failed for a stateless service instance.  Application Type Name: {0}, Application Name: {1}, Service Type Name: {2}, Service Name: {3}, Partition Id: {4}, Instance Id: {5}, WasCancelled: {6}, Exception: {7}.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.event_StatelessRunAsyncInvocation">
            <summary>
              Looks up a localized string similar to RunAsync has been invoked for a stateless service instance.  Application Type Name: {0}, Application Name: {1}, Service Type Name: {2}, Service Name: {3}, Partition Id: {4}, Instance Id: {5}.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.event_StatelessRunAsyncSlowCancellation">
            <summary>
              Looks up a localized string similar to RunAsync was slow to respect the cancellation token and halt execution for a stateless service instance.  Application Type Name: {0}, Application Name: {1}, Service Type Name: {2}, Service Name: {3}, Partition Id: {4}, Instance Id: {5}, Time to Cancel: {6} milliseconds, Slow Cancellation Timeout: {7} milliseconds.
            </summary>
        </member>
    </members>
</doc>
