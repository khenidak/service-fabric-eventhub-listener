<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.ServiceFabric.Services</name>
    </assembly>
    <members>
        <member name="T:Microsoft.ServiceFabric.Services.SR">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorClientCallbackChannelNotFound">
            <summary>
              Looks up a localized string similar to CallBack Channel Not Found for this ClientId  : &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorCommunicationTargetSelectorEndpointNotFound">
            <summary>
              Looks up a localized string similar to No endpoint found for the service &apos;{0}&apos; partition &apos;{1}&apos; that matches the specified TargetReplicaSelector : &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorCommunicationTargetSelectorInvalidStateful">
            <summary>
              Looks up a localized string similar to The value &apos;{0}&apos; of targetReplicaSelector argument is not a valid for a stateful service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorCommunicationTargetSelectorInvalidStateless">
            <summary>
              Looks up a localized string similar to The value &apos;{0}&apos; of targetReplicaSelector argument is not valid for a stateless service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorEndpointAlreadyExists">
            <summary>
              Looks up a localized string similar to Endpoint with Name &apos;{0}&apos; already exists..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorHeaderAlreadyExists">
            <summary>
              Looks up a localized string similar to Header with name &apos;{0}&apos; already exists.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorInterfaceNotImplemented">
            <summary>
              Looks up a localized string similar to Interface id &apos;{0}&apos; is not implemented by object &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorInvalidAddress">
            <summary>
              Looks up a localized string similar to Client is trying to connect to invalid address {0}..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorInvalidPartitionEndpointAddress">
            <summary>
              Looks up a localized string similar to The EndpointAddress &apos;{0}&apos; for partition &apos;{1}&apos; is not in a format understood by the client.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorMethodNotImplemented">
            <summary>
              Looks up a localized string similar to The object of type &apos;{0}&apos; does support the method &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorNoServiceInterfaceFound">
            <summary>
              Looks up a localized string similar to The service type &apos;{0}&apos; does not implement any service interfaces. A service interface is the one that derives from &apos;{1}&apos; type..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorNotAService">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; is not a Service. A service type must derive from either &apos;{1}&apos; or &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorNotAServiceInterface_DerivationCheck1">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; is not an service interface as it does not derive from the interface &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorNotAServiceInterface_DerivationCheck2">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; is not an service interface as it derive from a non service interface &apos;{1}&apos;. All service interfaces must derive from &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorNotAServiceInterface_InterfaceCheck">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; is not a service interface as it is not an interface. .
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorPartitionNamedEndpointNotFound">
            <summary>
              Looks up a localized string similar to NamedEndpoint &apos;{0}&apos; not found in the address &apos;{1}&apos; for partition &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorParttionInstanceInvalidAddress">
            <summary>
              Looks up a localized string similar to The primary or stateless instance for the partition &apos;{0}&apos; has invalid address, this means that right address from the replica/instance is not registered in the system..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorRemotedInterfaceIsGeneric">
            <summary>
              Looks up a localized string similar to The  {0} interface &apos;{1}&apos; is using generics. Generic interfaces cannot be remoted..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorRemotedMethodCancellationTokenOutOfOrder">
            <summary>
              Looks up a localized string similar to Method &apos;{1}&apos; of {0} interface &apos;{2}&apos; has &apos;{4}&apos; parameter &apos;{3}&apos;, and it is not the last parameter. If a method of the {0} interface has parameter of type &apos;{4}&apos; it must be the last parameter..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorRemotedMethodDoesNotReturnTask">
            <summary>
              Looks up a localized string similar to Method &apos;{1}&apos; of {0} interface &apos;{2}&apos; does not return Task or Task&lt;&gt;. The {0} interface methods must be async and must return either Task or Task&lt;&gt;..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorRemotedMethodDoesNotReturnVoid">
            <summary>
              Looks up a localized string similar to Method &apos;{1}&apos; of {0} interface &apos;{2}&apos; returns &apos;{3}&apos;. The {0} interface methods must have a return of type &apos;{4}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorRemotedMethodHasGenerics">
            <summary>
              Looks up a localized string similar to Method &apos;{1}&apos; of {0} interface &apos;{2}&apos; is using generics. The {0} interface methods cannot use generics..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorRemotedMethodHasOutRefOptionalParameter">
            <summary>
              Looks up a localized string similar to Method &apos;{1}&apos; of {0} interface &apos;{2}&apos; has out/ref/optional parameter &apos;{3}&apos;. The {0} interface methods must not have out, ref or optional parameters..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorRemotedMethodHasVaArgParameter">
            <summary>
              Looks up a localized string similar to Method &apos;{1}&apos; of {0} interface &apos;{2}&apos; has variable length parameter &apos;{3}&apos;. The {0} interface methods must not have variable length parameters..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorRemotedMethodHasVaArgs">
            <summary>
              Looks up a localized string similar to Method &apos;{1}&apos; of {0} interface &apos;{2}&apos; is using a variable argument list. The {0} interface methods cannot have a variable argument list..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorRemotedMethodsIsOverloaded">
            <summary>
              Looks up a localized string similar to Method &apos;{1}&apos; of {0} interface &apos;{2}&apos; is overloaded. The {0} interface methods cannot be overloaded..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorServiceDoesNotExist">
            <summary>
              Looks up a localized string similar to Service &apos;{0}&apos; doesnot exist.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorServiceMethodDispatcher_InterfaceNotFound">
            <summary>
              Looks up a localized string similar to Interface id {0} is not implemented by object {1}.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.event_StatefulRunAsyncCancellation">
            <summary>
              Looks up a localized string similar to RunAsync has been cancelled for a stateful service replica.  The cancellation will be considered &apos;slow&apos; if RunAsync does not halt execution within {6} milliseconds.  Application Type Name: {0}, Application Name: {1}, Service Type Name: {2}, Service Name: {3}, Partition Id: {4}, Replica Id: {5}.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.event_StatefulRunAsyncCompletion">
            <summary>
              Looks up a localized string similar to RunAsync has successfully completed for a stateful service replica.  Application Type Name: {0}, Application Name: {1}, Service Type Name: {2}, Service Name: {3}, Partition Id: {4}, Replica Id: {5}, WasCancelled: {6}.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.event_StatefulRunAsyncFailure">
            <summary>
              Looks up a localized string similar to RunAsync has failed for a stateful service replica.  Application Type Name: {0}, Application Name: {1}, Service Type Name: {2}, Service Name: {3}, Partition Id: {4}, Replica Id: {5}, WasCancelled: {6}, Exception: {7}.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.event_StatefulRunAsyncInvocation">
            <summary>
              Looks up a localized string similar to RunAsync has been invoked for a stateful service replica.  Application Type Name: {0}, Application Name: {1}, Service Type Name: {2}, Service Name: {3}, Partition Id: {4}, Replica Id: {5}.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.event_StatefulRunAsyncSlowCancellation">
            <summary>
              Looks up a localized string similar to RunAsync was slow to respect the cancellation token and halt execution for a stateful service replica.  Application Type Name: {0}, Application Name: {1}, Service Type Name: {2}, Service Name: {3}, Partition Id: {4}, Replica Id: {5}, Time to Cancel: {6} milliseconds, Slow Cancellation Timeout: {7} milliseconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.event_StatelessRunAsyncCancellation">
            <summary>
              Looks up a localized string similar to RunAsync has been cancelled for a stateless service instance.  The cancellation will be considered &apos;slow&apos; if RunAsync does not halt execution within {6} milliseconds.  Application Type Name: {0}, Application Name: {1}, Service Type Name: {2}, Service Name: {3}, Partition Id: {4}, Instance Id: {5}.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.event_StatelessRunAsyncCompletion">
            <summary>
              Looks up a localized string similar to RunAsync has successfully completed for a stateless service instance.  Application Type Name: {0}, Application Name: {1}, Service Type Name: {2}, Service Name: {3}, Partition Id: {4}, Instance Id: {5}, WasCancelled: {6}.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.event_StatelessRunAsyncFailure">
            <summary>
              Looks up a localized string similar to RunAsync has failed for a stateless service instance.  Application Type Name: {0}, Application Name: {1}, Service Type Name: {2}, Service Name: {3}, Partition Id: {4}, Instance Id: {5}, WasCancelled: {6}, Exception: {7}.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.event_StatelessRunAsyncInvocation">
            <summary>
              Looks up a localized string similar to RunAsync has been invoked for a stateless service instance.  Application Type Name: {0}, Application Name: {1}, Service Type Name: {2}, Service Name: {3}, Partition Id: {4}, Instance Id: {5}.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.event_StatelessRunAsyncSlowCancellation">
            <summary>
              Looks up a localized string similar to RunAsync was slow to respect the cancellation token and halt execution for a stateless service instance.  Application Type Name: {0}, Application Name: {1}, Service Type Name: {2}, Service Name: {3}, Partition Id: {4}, Instance Id: {5}, Time to Cancel: {6} milliseconds, Slow Cancellation Timeout: {7} milliseconds.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientCache`1">
            <summary>
            This is the cache used by CommunicationClientFactory base class to store the communication channel's
            for the replicas or instances of a partition. 
            This is a 2 level cache of Partition Id->Endpoint Address->Client channel. The client channels are
            maintained as a weak reference and the cache entries whose weak references are not alive are cleaned
            up periodically.
            </summary>
            <typeparam name="TCommunicationClient"></typeparam>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientCacheEntry`1">
            <summary>
            This represents the cache entry that stores the communication channel to an endpoint of a replica or instance.
            </summary>
            <typeparam name="TCommunicationClient"></typeparam>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientCacheEntry`1.IsInCache">
            <summary>
            The IsInCache and IsCommunicationClientValid properties are used to synchronize the code using
            the cache client entry and the cache clean up code - to ensure that a valid client isn't cleaned up
            and also a client entry that is removed from cache is not used by the communication factory.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientCacheEntry`1.Semaphore">
            <summary>
            This lock protects the members of the cache entry. Users of the this object
            should acquire this lock before accessing the properties of the object.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector">
            <summary>
            This enumeration specifies how the target replica or instance should be chosen
            when creating a communication channel for a particular partition.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector.Default">
            <summary>
            This specifies the default option for this enum.
            If the service partition is stateful, this indicates that communication channel
            should be established to the primary replica.
            If the service partition is stateless, this indicates that the communication channel
            should be established to a random stateless instance.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector.RandomReplica">
            <summary>
            For stateful service partitions, this indicates that communication channel can be
            established for to any replica chosen in random - (i.e) primary or secondary.
            This is not valid for stateless service partitions
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector.RandomSecondaryReplica">
            <summary>
            For stateful service partitions, this indicates that communication channel can be
            established for to any secondary replica chosen in random.
            This is not valid for stateless service partitions
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceRemotingPartitionClient">
            <summary>
            Defines the interface for the client that communicate over remoting to a particular replica of a service partition.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.IServicePartitionClient`1">
            <summary>
            Defines the interface for the client that can communicate with replicas of a particular service partition.
            </summary>
            <typeparam name="TCommunicationClient">Type of ICommunicationClient</typeparam>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.IServicePartitionClient`1.TryGetLastResolvedServicePartition(System.Fabric.ResolvedServicePartition@)">
            <summary>
            Gets the resolved service partition that was set on the client.
            </summary>
            <param name="resolvedServicePartition">previous ResolvedServicePartition</param>
            <returns>true if a ResolvedServicePartition was set</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.IServicePartitionClient`1.ServiceUri">
            <summary>
            Gets the name of the service
            </summary>
            <value>Name of the service</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.IServicePartitionClient`1.PartitionKey">
            <summary>
            Gets the key of the partition the client is communicating with. 
            </summary>
            <value>Partition key</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.IServicePartitionClient`1.Factory">
            <summary>
            Gets the communication client factory
            </summary>
            <value>Communication client factory</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceRemotingExceptionHandler">
            <summary>
            This class provide handling of exceptions encountered in communicating with 
            a service fabric service over remoted interfaces. 
            </summary>
            <remarks>
            The exceptions are handled as per the description below:
            <list type="table">
            <item>
            <description>
                The following exceptions indicate service failover. These exceptions are handled by returning <see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult"/> from the 
                <see cref="M:Microsoft.ServiceFabric.Services.Communication.Client.IExceptionHandler.TryHandleException(Microsoft.ServiceFabric.Services.Communication.Client.ExceptionInformation,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingResult@)"/> method.
                The <see cref="P:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult.IsTransient"/> property of the <see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult"/> is set to false, 
                the <see cref="P:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult.RetryDelay"/>  property is set to a random value up to <see cref="P:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings.MaxRetryBackoffIntervalOnNonTransientErrors"/> 
                and <see cref="P:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult.MaxRetryCount"/> property is set to <see cref="F:System.Int32.MaxValue"/>.
                <list type="bullet">
                    <item><description><see cref="T:System.Fabric.FabricNotPrimaryException"/>when the target replica is <see cref="F:Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector.PrimaryReplica"/>.</description></item>
                    <item><description><see cref="T:System.Fabric.FabricNotReadableException"/></description> </item>
                </list>
            </description>
            </item>
            <item>
            <description>
                The following exceptions indicate transient error conditions and handled by returning <see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult"/> from the 
                <see cref="M:Microsoft.ServiceFabric.Services.Communication.Client.IExceptionHandler.TryHandleException(Microsoft.ServiceFabric.Services.Communication.Client.ExceptionInformation,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingResult@)"/> method.
                The <see cref="P:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult.IsTransient"/> property of the <see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult"/> is set to true, 
                the <see cref="P:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult.RetryDelay"/>  property is set to a random value up to <see cref="P:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings.MaxRetryBackoffIntervalOnTransientErrors"/> 
                and <see cref="P:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult.MaxRetryCount"/> property is set to <see cref="F:System.Int32.MaxValue"/>.
                <list type="bullet">
                    <item><description><see cref="T:System.Fabric.FabricTransientException"/></description> </item>
                </list>
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.IExceptionHandler">
            <summary>
            Defines the interface for handling the exceptions encountered in communicating with service fabric services. 
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.IExceptionHandler.TryHandleException(Microsoft.ServiceFabric.Services.Communication.Client.ExceptionInformation,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingResult@)">
            <summary>
            Method that examines the exception and determines how that exception can be handled. 
            </summary>
            <param name="exceptionInformation">Information about the exception</param>
            <param name="retrySettings">The operation retry preferences.</param>
            <param name="result">Result of the exception handling</param>
            <returns>true if the exception is handled, false otherwise</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceRemotingExceptionHandler.#ctor">
            <summary>
            Constructs a ServiceRemotingExceptionHandler with a default trace id.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceRemotingExceptionHandler.#ctor(System.String)">
            <summary>
            Constructs a ServiceRemotingExceptionHandler with a specified trace id.
            </summary>
            <param name="traceId">
                Id to use in diagnostics traces from this component.
            </param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingProviderAttribute">
            <summary>
            This is a base type for attribute that sets the default service remoting provider to use for 
            remoting the service interfaces defined and used in the assembly.
            </summary>
            <remarks>
                <para>
                On service side, implementation of this attribute is looked up by
                <see cref="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingExtensions.CreateServiceRemotingListener``1(``0,System.Fabric.StatefulServiceContext)"/> and
                <see cref="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingExtensions.CreateServiceRemotingListener``1(``0,System.Fabric.StatelessServiceContext)"/> 
                methods on the runtime to create a default <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingListener"/> for the stateful and stateless services. 
                </para>
                <para>
                On client side, implementation of this attribute is looked up by 
                <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxyFactory"/> constructor to create a default
                <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceRemotingClientFactory"/> when it is not specified.
                </para>
                <para>
                Note that on client side
                <see cref="M:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.Create``1(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector,System.String)"/> 
                method create a default <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxyFactory"/> once and hence the provider lookup happens
                only for the first time, after which the same provider is used.
                </para>
                <para>
                The order in which this attribute is looked up is as follows:
                <list type="number">
                    <item>
                        In the entry <see cref="T:System.Reflection.Assembly"/> obtained by calling method <see cref="M:System.Reflection.Assembly.GetEntryAssembly"/> 
                    </item>
                    <item>
                        In the <see cref="T:System.Reflection.Assembly"/> that defines the remote interface for which listener or proxy is being created. 
                    </item>
                </list>
                </para>
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingProviderAttribute.CreateServiceRemotingListener(System.Fabric.ServiceContext,Microsoft.ServiceFabric.Services.Remoting.IService)">
            <summary>
            Creates a service remoting listener for remoting the service interface.
            </summary>
            <param name="serviceContext">The context of the service for which the remoting listener is being constructed.</param>
            <param name="serviceImplementation">The service implementation object.</param>
            <returns>An <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingListener"/> for the specified service.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingProviderAttribute.CreateServiceRemotingClientFactory(Microsoft.ServiceFabric.Services.Remoting.IServiceRemotingCallbackClient)">
            <summary>
            Creates a service remoting client factory that can be used by the 
            <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxyFactory"/> to create a proxy for the remoted interface of the service.
            </summary>
            <param name="callbackClient">Client implementation where the callbacks should be dispatched.</param>
            <returns>An <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceRemotingClientFactory"/>.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.ServiceNameFormat">
            <summary>
            This class provides the logic for deriving the names of various items within the manifest from the code. 
            It is used by framework components when names are not specified in the API and the framework types have
            to default it to a meaningful name derived from the service type.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.ServiceNameFormat.GetEndpointName(System.Type)">
            <summary>
            Gets the default endpoint resource name for the given service type
            </summary>
            <param name="serviceInterfaceType">Service interface type name.</param>
            <returns>The name of the endpoint resource.</returns>
            <remarks>
            <list type="bullet">
                <item>
                    If the type name is <code>IMyService</code>, this method returns <code>MyServiceEndpoint</code> as the name of the endpoint resource.
                </item>
                <item>
                    If the type name is <code>Foo</code>, this method returns <code>FooServiceEndpoint</code> as the name of the endpoint resource.
                </item>
            </list>
            </remarks>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver">
            <summary>
            Defines the interface for Service partition resolver.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Client.ServicePartitionKey">
            <summary>
            Defines a key to address a service partition.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionKey.#ctor">
            <summary>
            Create a ServicePartitionKey for singleton partitioned service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionKey.#ctor(System.Int64)">
            <summary>
            Create a ServicePartitionKey for uniform int64 partitioned service.
            </summary>
            <param name="partitionKey">Value of the int64 partition key</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionKey.#ctor(System.String)">
            <summary>
            Create a ServicePartitionKey for named partitioned services.
            </summary>
            <param name="partitionKey">Value of the named partition key</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Client.ServicePartitionKey.Kind">
            <summary>
            Kind of the partition this key applies to.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Client.ServicePartitionKey.Value">
            <summary>
            The value of the partition key. This value can be casted to the right type based on the value of the Kind property.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate">
            <summary>
            Represents a delegate to create a FabricClient object
            </summary>
            <returns>FabricClient</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver">
            <summary>
            Implements the class that helps in determining the endpoint of a service. This class wraps the FabricClient's
            <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)"/>method, and implements a back-off/retry mechanism on errors from that method.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate,Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate)">
            <summary>
            Instantiates a ServicePartionResolver, invoking the first delegate to instantiate FabricClient.
            During partition resolution if FabricClient object gets disposed and second delegate is provided,
            it uses the second delegate to re-create the FabricClient. The second delegate provides a way to specify
            an alternate way to create FabricClient if FabricClient created with first delegates get disposed.
            </summary>
            <param name="createFabricClient">Delegate to create fabric client</param>
            <param name="recreateFabricClient">Delegate to create fabric client</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate)">
            <summary>
            Instantiates a ServicePartitionResolver, invoking the given delegate to instantiate FabricClient.
            </summary>
            <param name="createFabricClient">Delegate to create fabric client</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(System.String[])">
            <summary>
            Instantiates a ServicePartitionResolver, uses the given connectionEndpoints to create a new instance of FabricClient.
            </summary>
            <param name="connectionEndpoints">Array of management endpoints of the cluster</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(System.Fabric.FabricClientSettings,System.String[])">
            <summary>
            Instantiates a ServicePartitionResolver, uses the given FabricClient Settings and the connectionEndpoints to create
            a new instance of FabricClient.
            </summary>
            <param name="settings">Fabric client Settings</param>
            <param name="connectionEndpoints">Array of management endpoints of the cluster</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(System.Fabric.SecurityCredentials,System.String[])">
            <summary>
            Instantiates a ServicePartitionResolver, uses the given security credentials and the connectionEndpoints to create
            a new instance of FabricClient.
            </summary>
            <param name="credential">Security credentials for the fabric client</param>
            <param name="connectionEndpoints">Array of management endpoints of the cluster</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(System.Fabric.SecurityCredentials,System.Fabric.FabricClientSettings,System.String[])">
            <summary>
            Instantiates a ServicePartitionResolver, uses the given security credentials, FabricClient Settings and the connectionEndpoints
            to create a new instance of FabricClient.
            </summary>
            <param name="credential">Security credentials for the fabric client</param>
            <param name="settings">Fabric client Settings</param>
            <param name="connectionEndpoints">Array of management endpoints of the cluster</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ResolveAsync(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,System.Threading.CancellationToken)">
            <summary>
            Resolves a partition of the specified service.
            </summary>
            <param name="serviceUri">Uri of the service to resolve</param>
            <param name="partitionKey">Key that identifies the partition to resolve</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result from
            the Task is the <see cref="T:System.Fabric.ResolvedServicePartition"/> object, that contains the information
            about the resolved service partition including the service endpoints.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ResolveAsync(System.Fabric.ResolvedServicePartition,System.Threading.CancellationToken)">
            <summary>
            Resolves the endpoint for the service using the given previous ResolvedServicePartition result
            </summary>
            <param name="previousRsp">Previous resolved service partition</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result from
            the Task is the <see cref="T:System.Fabric.ResolvedServicePartition"/> object, that
            contains the service endpoints.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.SetDefault(Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver)">
            <summary>
            Updates the default ServicePartitionResolver
            </summary>
            <param name="defaultServiceResolver"></param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.GetDefault">
            <summary>
            Gets the default ServicePartitionResolver
            </summary>
            <returns>Default <see cref="T:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver"/></returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Common.IdUtil.HashCombine(System.Int32,System.Int32)">
            <summary>
            This is how VB Anonymous Types combine hash values for fields.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.RemoteExceptionInformation">
            <summary>
            Fault type used by Service Remoting to transfer the exception details from the Service Replica to the client.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.RemoteExceptionInformation.#ctor(System.Byte[])">
            <summary>
            Instantiates the RemoteExceptionInformation object with the data
            </summary>
            <param name="data"> Data to be sent to the client</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.RemoteExceptionInformation.FromException(System.Exception)">
            <summary>
            Factory method that constructs the RemoteExceptionInformation from an exception.
            </summary>
            <param name="exception">Exception</param>
            <returns>RemoteExceptionInformation</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.RemoteExceptionInformation.ToException(Microsoft.ServiceFabric.Services.Communication.RemoteExceptionInformation,System.Exception@)">
            <summary>
            Gets the exception from the RemoteExceptionInformation
            </summary>
            <param name="remoteExceptionInformation">RemoteExceptionInformation</param>
            <param name="result">Exception from the remote side</param>
            <returns>true if there was a valid exception, false otherwise</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.RemoteExceptionInformation.Data">
            <summary>
            Serialized exception details
            </summary>
            <value>Data in the exception</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientEventArgs">
            <summary>
            Specifies the arguments for the communication client connected/disconnected events handler.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientEventArgs`1">
            <summary>
            Specifies the arguments for the communication client connected/disconnected events handler.
            </summary>
            <typeparam name="TCommunicationClient">Type of communication client</typeparam>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientEventArgs`1.Client">
            <summary>
            Communication client for which the event is fired.
            </summary>
            <value>Communication client</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1">
            <summary>
            Provides the base implementation of ICommunicationClientFactory for creating communication clients to talk to service fabric services. Extend the
            CommunicationClientFactoryBase class to create communication clients for custom transport implementations. This class maintains a cache of communication
            clients and attempts to reuse the clients for requests to the same service endpoint.
            </summary>
            <typeparam name="TCommunicationClient">The type of communication client</typeparam>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1">
            <summary>
            Defines the interface that must be implemented to provide a factory for communication clients to talk to a service fabric service.
            </summary>
            <typeparam name="TCommunicationClient">Type of communication client</typeparam>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1.GetClientAsync(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector,System.String,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,System.Threading.CancellationToken)">
            <summary>
            Resolves a partition of the specified service containing one or more communication listeners and returns a client to communicate 
            to the endpoint corresponding to the given listenerName. 
            
            The endpoint of the service is of the form - {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}
            </summary>
            <param name="serviceUri">Uri of the service to resolve</param>
            <param name="partitionKey">Key that identifies the partition to resolve</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            the CommunicationClient(<see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient"/>) object.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1.GetClientAsync(System.Fabric.ResolvedServicePartition,Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector,System.String,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,System.Threading.CancellationToken)">
            <summary>
            Re-resolves a partition of the specified service containing one or more communication listeners and returns a client to communicate 
            to the endpoint corresponding to the given listenerName. 
            
            The endpoint of the service is of the form - {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}
            </summary>
            <param name="previousRsp">Previous ResolvedServicePartition value</param>
            <param name="listenerName">Listener name</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            the CommunicationClient(<see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient"/>) object.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1.ReportOperationExceptionAsync(`0,Microsoft.ServiceFabric.Services.Communication.Client.ExceptionInformation,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,System.Threading.CancellationToken)">
            <summary>
            Handles the exceptions that occur in the CommunicationClient when sending a message to the Service
            </summary>
            <param name="client">Communication client</param>
            <param name="exceptionInformation">Information about exception that happened while communicating with the service.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            a <see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl"/> object that provides information on retry policy for this exception.
            </returns>
        </member>
        <member name="E:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1.ClientConnected">
            <summary>
            Event handler that is fired when the Communication client connects to the service endpoint.
            </summary>
        </member>
        <member name="E:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1.ClientDisconnected">
            <summary>
            Event handler that is fired when the Communication client disconnects from the service endpoint.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1.#ctor(Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Services.Communication.Client.IExceptionHandler},System.String)">
            <summary>
            Initializes a new instance of the communication client factory.
            </summary>
            <param name="servicePartitionResolver">Optional ServicePartitionResolver</param>
            <param name="exceptionHandlers">Optional Custom exception handlers for the exceptions on the Client to Service communication channel</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1.GetClientAsync(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector,System.String,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,System.Threading.CancellationToken)">
            <summary>
            Resolves a partition of the specified service containing one or more communication listeners and returns a client to communicate 
            to the endpoint corresponding to the given listenerName. 
            
            The endpoint of the service is of the form - {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}
            </summary>
            <param name="serviceUri">Uri of the service to resolve</param>
            <param name="partitionKey">Key that identifies the partition to resolve</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            the CommunicationClient(<see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient"/>) object.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1.GetClientAsync(System.Fabric.ResolvedServicePartition,Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector,System.String,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,System.Threading.CancellationToken)">
            <summary>
            Gets or Creates the CommunicationClient for the specified listener name by resolving based on the given previousRsp.
            </summary>
            <param name="previousRsp">Previous ResolvedServicePartition value</param>
            <param name="listenerName">Listener name</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            the CommunicationClient(<see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient"/>) object.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1.ReportOperationExceptionAsync(`0,Microsoft.ServiceFabric.Services.Communication.Client.ExceptionInformation,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,System.Threading.CancellationToken)">
            <summary>
            Handles the exceptions that occur in the CommunicationClient when sending a message to the Service
            </summary>
            <param name="client">Communication client</param>
            <param name="exceptionInformation">Information about the exception that occurred when communicating with the service.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            a <see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl"/> object that determines
            how the retry policy for this exception.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1.ValidateClient(`0)">
            <summary>
            Returns true if the client is still valid. Connection oriented transports can use this method to indicate that the client is no longer
            connected to the service.
            </summary>
            <param name="client">the communication client</param>
            <returns>true if the client is valid, false otherwise</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1.ValidateClient(System.String,`0)">
            <summary>
            Returns true if the client is still valid and connected to the endpoint specified in the parameter.
            </summary>
            <param name="endpoint">the endpoint to which the </param>
            <param name="client">the communication client</param>
            <returns>true if the client is valid, false otherwise</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1.CreateClientAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a communication client for the given endpoint address.
            </summary>
            <param name="endpoint">Endpoint address where the service is listening</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The communication client that was created</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1.AbortClient(`0)">
            <summary>
            Aborts the given client
            </summary>
            <param name="client">Communication client</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1.ServiceResolver">
            <summary>
            Gets the ServicePartitionResolver used by the client factory for resolving the service endpoint.
            </summary>
            <value>ServicePartitionResolver</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1.ExceptionHandlers">
            <summary>
            Gets the custom exception handlers for handling exceptions on the client to service communication channel.
            </summary>
            <value>List of Exception handlers</value>
        </member>
        <member name="E:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1.ClientConnected">
            <summary>
            Event handler that is fired when the Communication client connects to the service endpoint.
            </summary>
        </member>
        <member name="E:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1.ClientDisconnected">
            <summary>
            Event handler that is fired when the Communication client disconnects from the service endpoint.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingResult">
            <summary>
            Specifies the base class for the result from handling an exception 
            during client to service communication.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult">
            <summary>
            Specifies the exception handling result when the request from client to service can be retried
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult.IsTransient">
            <summary>
            Transient retriable exceptions are those where the communication channel from client
            to service still exists.
            Non transient retriable exceptions are those where we need to re-resolve the service endpoint
            before we retry.
            </summary>
            <value>
            true indicates that this is a transient retriable exception.
            false indicates that this is a non transient retriable exception.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult.ExceptionId">
            <summary>
            String that uniquely identifies the exception type.
            </summary>
            <value>
            Unique id for this exception. 
            This id is used to keep track of the number of times this exception is retried
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult.MaxRetryCount">
            <summary>
            Maximum number of times this exception type needs to be retried before giving up.
            The default value is int.MaxValue
            </summary>
            <value>Max retry count</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult.RetryDelay">
            <summary>
            The operation should be retried after this delay.
            </summary>
            <value>Time delay after which the operation should be retried</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingThrowResult">
            <summary>
            Specifies the exception handling result when the request from client to service cannot be retried
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingThrowResult.ExceptionToThrow">
            <summary>
            The exception that should be thrown to the client.
            </summary>
            <value>Exception to throw</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient">
            <summary>
            Defines the interface that represents the communication client for reliable services.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient.ResolvedServicePartition">
            <summary>
            Gets or Sets the Resolved service partition which was used when this client was created.
            </summary>
            <value><see cref="T:System.Fabric.ResolvedServicePartition"/> object</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient.ListenerName">
            <summary>
            Gets or Sets the name of the listener in the replica or instance to which the client is
            connected to.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient.Endpoint">
            <summary>
            Gets or Sets the service endpoint to which the client is connected to.
            </summary>
            <value><see cref="T:System.Fabric.ResolvedServiceEndpoint"/></value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl">
            <summary>
            Specifies the retry policy for the exceptions got on the communication from client to service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl.ShouldRetry">
            <summary>
            Indicates whether the operation should be retried or not.
            </summary>
            <value>true if the operation should be retried, false if the exception should be thrown to the user</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl.IsTransient">
            <summary>
            If the ShouldRetry property is true, this property indicates if the communication channel between
            the client and service is still valid.
            Transient retriable exceptions are those where the communication channel from client
            to service still exists.
            Non transient retriable exceptions are those where we need to re-resolve the service endpoint
            before we retry.
            </summary>
            <value>
            true indicates that this is a transient retriable exception.
            false indicates that this is a non transient retriable exception.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl.RetryDelay">
            <summary>
            The operation should be retried after this delay if the ShouldRetry is true.
            </summary>
            <value>Time delay after which the operation should be retried</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl.ExceptionId">
            <summary>
            String that uniquely identifies the exception type.
            </summary>
            <value>Unique id for this exception. 
            This id is used to keep track of the number of times this exception is retried</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl.MaxRetryCount">
            <summary>
            Max number of times this operation should be retried if the ShouldRetry is true
            </summary>
            <value>Max retry count</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl.Exception">
            <summary>
            Exception to report for the operation, if ShouldRetry is false. 
            By default this is the same exception as the reported exception, however in some cases the Factory may choose to trasform the reported exception to a more meaningful exception.
            </summary>
            <value>Exception</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1">
            <summary>
            Specifies an instance of the communication client that can communicate with the replicas of a particular partition.
            </summary>
            <typeparam name="TCommunicationClient">type of Communication client</typeparam>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1.TryGetLastResolvedServicePartition(System.Fabric.ResolvedServicePartition@)">
            <summary>
            Gets the resolved service partition that was set on the client.
            </summary>
            <param name="resolvedServicePartition">previous ResolvedServicePartition</param>
            <returns>true if a ResolvedServicePartition was set</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1.InvokeWithRetryAsync``1(System.Func{`0,System.Threading.Tasks.Task{``0}},System.Type[])">
            <summary>
            Invokes the given Function, retrying for exceptions thrown other than the exceptions in the doNotRetryExceptionTypes.
            For exceptions that are not in doNotRetryExceptionTypes, CommunicationClientFactory's ReportOperationExceptionAsync() method 
            controls if the exception should be retried or not.
            </summary>
            <typeparam name="TResult">Result from the function being invoked</typeparam>
            <param name="func">Function being invoked</param>
            <param name="doNotRetryExceptionTypes">Exceptions for which the service partition client should not retry</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            the result from the function given in the argument.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1.InvokeWithRetryAsync``1(System.Func{`0,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Type[])">
            <summary>
            Invokes the given Function, retrying for exceptions thrown other than the exceptions in the doNotRetryExceptionTypes.
            For exceptions that are not in doNotRetryExceptionTypes, CommunicationClientFactory's ReportOperationExceptionAsync() method 
            controls if the exception should be retried or not.
            </summary>
            <typeparam name="TResult">Result from the function being invoked</typeparam>
            <param name="func">Function being invoked</param>
            <param name="cancellationToken">Cancellation token</param>
            <param name="doNotRetryExceptionTypes">Exceptions for which the service partition client should not retry</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            the result from the function given in the argument.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1.InvokeWithRetryAsync(System.Func{`0,System.Threading.Tasks.Task},System.Type[])">
            <summary>
            Invokes the given Function, retrying for exceptions thrown other than the exceptions in the doNotRetryExceptionTypes.
            For exceptions that are not in doNotRetryExceptionTypes, CommunicationClientFactory's ReportOperationExceptionAsync() method 
            controls if the exception should be retried or not.
            </summary>
            <param name="func">Function being invoked</param>
            <param name="doNotRetryExceptionTypes">Exceptions for which the service partition client should not retry</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1.InvokeWithRetryAsync(System.Func{`0,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Type[])">
            <summary>
            Invokes the given Function, retrying for exceptions thrown other than the exceptions in the doNotRetryExceptionTypes.
            For exceptions that are not in doNotRetryExceptionTypes, CommunicationClientFactory's ReportOperationExceptionAsync() method 
            controls if the exception should be retried or not.
            </summary>
            <param name="func">Function being invoked</param>
            <param name="cancellationToken">Cancellation token</param>
            <param name="doNotRetryExceptionTypes">Exceptions for which the service partition client should not retry</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1.InvokeWithRetry``1(System.Func{`0,``0},System.Type[])">
            <summary>
            Invokes the given Function, retrying for exceptions thrown other than the exceptions in the doNotRetryExceptionTypes.
            For exceptions that are not in doNotRetryExceptionTypes, CommunicationClientFactory's ReportOperationExceptionAsync() method 
            controls if the exception should be retried or not.
            </summary>
            <typeparam name="TResult">Result from the function being invoked</typeparam>
            <param name="func">Function being invoked</param>
            <param name="doNotRetryExceptionTypes">Exceptions for which the service partition client should not retry</param>
            <returns>Result from the function given in the argument</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1.InvokeWithRetry(System.Action{`0},System.Type[])">
            <summary>
            Invokes the given Function, retrying for exceptions thrown other than the exceptions in the doNotRetryExceptionTypes.
            For exceptions that are not in doNotRetryExceptionTypes, CommunicationClientFactory's ReportOperationExceptionAsync() method 
            controls if the exception should be retried or not.
            </summary>
            <param name="func">Function being invoked</param>
            <param name="doNotRetryExceptionTypes">Exceptions for which the service partition client should not retry</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1.Factory">
            <summary>
            Gets the communication client factory
            </summary>
            <value>Communication client factory</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1.ServiceUri">
            <summary>
            Gets the name of the service
            </summary>
            <value>Name of the service</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1.PartitionKey">
            <summary>
            Gets the partition key.
            </summary>
            <value>Partition key</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.FabricTransport.Common.NativeServiceCommunication.IFabricCommunicationMessageHandler">
                
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.FabricTransport.Common.FabricTransportSettings">
            <summary>
            Settings that configures the  FabricTransport communication.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.FabricTransport.Common.FabricTransportSettings.#ctor">
            <summary>
            Creates a new FabricTransportSettings with default Values.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.FabricTransport.Common.FabricTransportSettings.LoadFrom(System.String)">
            <summary>
            Loads the FabricTransport settings from a section specified in the service settings configuration file - settings.xml and for the Client Side Settings, 
            it will be load from the section  in the "ClientExeName.Settings.xml" present in Client Exe directory.
            </summary>
            <param name="sectionName">Name of the section within the configuration file. If empty or null, the default name("TransportSettings") is presumed</param>
            <returns>FabricTransportSettings</returns>
            <remarks>
            The following are the parameter names that should be provided in the configuration file,to be recognizable by service fabric to load the transport settings.
                
                1. MaxQueueSize - <see cref="P:Microsoft.ServiceFabric.Services.Communication.FabricTransport.Common.FabricTransportSettings.MaxQueueSize"/>value in long.
                2. MaxMessageSize - <see cref="P:Microsoft.ServiceFabric.Services.Communication.FabricTransport.Common.FabricTransportSettings.MaxMessageSize"/>value in bytes.
                3. MaxConcurrentCalls - <see cref="P:Microsoft.ServiceFabric.Services.Communication.FabricTransport.Common.FabricTransportSettings.MaxConcurrentCalls"/>value in long.
                4. SecurityCredentials - <see cref="P:Microsoft.ServiceFabric.Services.Communication.FabricTransport.Common.FabricTransportSettings.SecurityCredentials"/> value.
                5. OperationTimeoutInSeconds - <see cref="P:Microsoft.ServiceFabric.Services.Communication.FabricTransport.Common.FabricTransportSettings.OperationTimeout"/> value in seconds.
                6. KeepAliveTimeoutInSeconds - <see cref="P:Microsoft.ServiceFabric.Services.Communication.FabricTransport.Common.FabricTransportSettings.KeepAliveTimeout"/> value in seconds.
            </remarks>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.FabricTransport.Common.FabricTransportSettings.OperationTimeout">
            <summary>
            Operation Timeout  which governs the whole process of sending a message, including receiving a reply message for a request/reply service operation.
             This timeout also applies when sending reply messages from a callback contract method.
            </summary>
            <value>OperationTimeout as <see cref="T:System.TimeSpan"/></value>
            <remarks>Default Value for Operation Timeout is set as TimeSpan.MaxValue</remarks>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.FabricTransport.Common.FabricTransportSettings.KeepAliveTimeout">
            <summary>
            KeepAliveTimeout is provides a way to configure  Tcp keep-alive option.
            </summary>
            <value>KeepAliveTimeout as <see cref="T:System.TimeSpan"/></value>
            <remarks>Default Value for KeepAliveTimeout Timeout is set as TimeSpan.Zero. which indicates we disable the tcp keepalive option.
            If you are using loadbalancer , you may need to configure this in order to avoid  the loadbalancer to close the connection after certain time </remarks>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.FabricTransport.Common.FabricTransportSettings.MaxMessageSize">
            <summary>
            MaxMessageSize represents  the maximum size for a message that can be received on a channel configured with this setting.
            </summary>
            <value>Maximum size of the message in bytes.
            </value>
            <remarks>
            Default Value for MaxMessageSize used is 4194304 bytes
            </remarks>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.FabricTransport.Common.FabricTransportSettings.MaxQueueSize">
            <summary>
            The maximum size, of a queue that stores messages while they are processed for an endpoint configured with this setting. 
            </summary>
            <value> Max Size for a Queue that recieves messages from the channel 
            </value>
            <remarks>
            Default value is 10,000 messages</remarks>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.FabricTransport.Common.FabricTransportSettings.MaxConcurrentCalls">
            <summary>
            MaxConcurrentCalls represents maximum number of messages actively service processes at one time.
             </summary>
             <value>
            MaxConcurrentCalls is  the upper limit of active messages in the service.
             </value>
             <remarks>
                Defaults  value for the MaxConcurrentCalls is to the Number of processors.
             </remarks>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.FabricTransport.Common.FabricTransportSettings.SecurityCredentials">
             <summary>
             Security credentials for securing the communication 
             </summary>
             <value>SecurityCredentials as  <see cref="T:System.Fabric.SecurityCredentials"/>
             </value>
             <remarks>
             Default Value for SecurityCredentials is None
             SecurityCredential can be of type x509SecurityCredentail <seealso cref="T:System.Fabric.X509Credentials"/>or
              WindowsCredentials <seealso cref="T:System.Fabric.WindowsCredentials"/>
            </remarks>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.FabricTransport.Runtime.FabricTransportListenerSettings">
             <summary>
            Settings that configures the  FabricTransport Listener.
             </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.FabricTransport.Runtime.FabricTransportListenerSettings.LoadFrom(System.String)">
            <summary>
            Loads the FabricTransport settings from a section specified in the service settings configuration file - settings.xml and for the Client Side Settings, 
            it will be load from the section  in the "ClientExeName.Settings.xml" present in Client Exe directory.
            </summary>
            <param name="sectionName">Name of the section within the configuration file. If empty or null, the default name("TransportSettings") is presumed</param>
            <returns>FabricTransportListenerSettings</returns>
            <remarks>
            The following are the parameter names that should be provided in the configuration file,to be recognizable by service fabric to load the transport settings.
                
                1. MaxQueueSize - <see cref="P:Microsoft.ServiceFabric.Services.Communication.FabricTransport.Common.FabricTransportSettings.MaxQueueSize"/>value in long.
                2. MaxMessageSize - <see cref="P:Microsoft.ServiceFabric.Services.Communication.FabricTransport.Common.FabricTransportSettings.MaxMessageSize"/>value in bytes.
                3. MaxConcurrentCalls - <see cref="P:Microsoft.ServiceFabric.Services.Communication.FabricTransport.Common.FabricTransportSettings.MaxConcurrentCalls"/>value in long.
                4. SecurityCredentials - <see cref="P:Microsoft.ServiceFabric.Services.Communication.FabricTransport.Common.FabricTransportSettings.SecurityCredentials"/> value.
                5. OperationTimeoutInSeconds - <see cref="P:Microsoft.ServiceFabric.Services.Communication.FabricTransport.Common.FabricTransportSettings.OperationTimeout"/> value in seconds.
                6. KeepAliveTimeoutInSeconds - <see cref="P:Microsoft.ServiceFabric.Services.Communication.FabricTransport.Common.FabricTransportSettings.KeepAliveTimeout"/> value in seconds.
            </remarks>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.FabricTransport.Runtime.FabricTransportListenerSettings.EndpointResourceName">
            <summary>
            EndpointResourceName is name of the endpoint resource specified in ServiceManifest .This is used to obtain the port number on which to
            service will listen. 
            </summary>
            <value>
            EndpointResourceName is  name of the  endpoint resource defined in the service manifest.
            </value>
            <remarks>
            Default value of EndpointResourceName  is "ServiceEndpoint" </remarks>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener">
            <summary>
            Defines the base interface and the state machine contract for the communication listener 
            for a Service Fabric Service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener.OpenAsync(System.Threading.CancellationToken)">
            <summary>
            This method causes the communication listener to be opened. Once the Open
            completes, the communication listener becomes usable - accepts and sends messages.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            the endpoint string.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener.CloseAsync(System.Threading.CancellationToken)">
            <summary>
            This method causes the communication listener to close. Close is a terminal state and 
            this method allows the communication listener to transition to this state in a
            graceful manner.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener.Abort">
            <summary>
            This method causes the communication listener to close. Close is a terminal state and
            this method causes the transition to close ungracefully. Any outstanding operations
            (including close) should be canceled when this method is called.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Runtime.ServiceInstanceListener">
            <summary>
            Represents the communication listener and its properties for a Stateless Service Instance.
            Endpoints given out by the communication listener are associated with name of the communication listener.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Communication.Runtime.ServiceInstanceListener.DefaultName">
            <summary>
            The default name used when the ServiceInstanceListener is not given a name.
            </summary>
            <value>Default name of the Service instance listener</value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Runtime.ServiceInstanceListener.#ctor(System.Func{System.Fabric.StatelessServiceContext,Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener},System.String)">
            <summary>
            Creates the ServiceInstanceListener
            </summary>
            <param name="createCommunicationListener">Factory method for creating the communication listener</param>
            <param name="name">Name of the communication listener. This parameter is optional, if the service has only one communication listener</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Runtime.ServiceInstanceListener.Name">
            <summary>
            Name of the communication listener.
            </summary>
            <value>Name</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Runtime.ServiceInstanceListener.CreateCommunicationListener">
            <summary>
            Factory method for creating the communication listener.
            </summary>
            <value>Factory method</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Runtime.ServiceReplicaListener">
            <summary>
            Represents the communication listener and its properties for a Stateful Service Replica.
            Endpoints given out by the communication listener are associated with name of the communication listener.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Communication.Runtime.ServiceReplicaListener.DefaultName">
            <summary>
            The default name used when the ServiceReplicaListener is not given a name.
            </summary>
            <value>Default name of the Service instance listener</value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Runtime.ServiceReplicaListener.#ctor(System.Func{System.Fabric.StatefulServiceContext,Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener},System.String,System.Boolean)">
            <summary>
            Creates the ServiceReplicaListener
            </summary>
            <param name="createCommunicationListener">Factory method for creating the communication listener</param>
            <param name="name">Name of the communication listener. This parameter is optional, if the service has only one communication listener</param>
            <param name="listenOnSecondary">Specifies if the communication listener needs to be opened when the replica becomes Active secondary. THis parameter is optional</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Runtime.ServiceReplicaListener.Name">
            <summary>
            Name of the communication listener.
            </summary>
            <value>Name</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Runtime.ServiceReplicaListener.ListenOnSecondary">
            <summary>
            Indicates if this communication listener should be opened when the stateful service replica 
            becomes an ActiveSecondary. When this member is not set(or set to false), the communication listener
            is opened only when the replica becomes Primary.
            </summary>
            <value>Boolean value that indicates if this communication listener should be opened when the replica is ActiveSecondary</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Runtime.ServiceReplicaListener.CreateCommunicationListener">
            <summary>
            Factory method for creating the communication listener.
            </summary>
            <value>Factory method</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.IService">
            <summary>
            This is the marker interface for enabling interface Remoting for services. 
            An <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingListener"/> provides remoting 
            for all interfaces implemented by the service that derive from this interface. The remoted interfaces can be 
            accessed via <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy"/> on the client side.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.IServiceRemotingCallbackClient">
            <summary>
            Defines the interface that must be implemented for providing callback mechanism from the remoting listener to the client.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.IServiceRemotingCallbackClient.RequestResponseAsync(Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders,System.Byte[])">
            <summary>
            Sends a message to the client and gets the response.
            </summary>
            <param name="messageHeaders">Message headers</param>
            <param name="requestBody">Message body</param>
            <returns>Response body</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.IServiceRemotingCallbackClient.OneWayMessage(Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders,System.Byte[])">
            <summary>
            Sends a one way message to the client.
            </summary>
            <param name="messageHeaders">Message headers</param>
            <param name="requestBody">Message body</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders">
            <summary>
            Specifies the headers that are sent along with a ServiceRemoting message.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders.#ctor">
            <summary>
            Instantiates a new instance of the ServiceRemotingMessageHeaders
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders.AddHeader(System.String,System.Byte[])">
            <summary>
            Adds a new header with the specified name and value.
            Throws FabricElementAlreadyExistsException if a header with the same name already exists.
            </summary>
            <param name="headerName">Header Name</param>
            <param name="headerValue">header value</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders.TryGetHeaderValue(System.String,System.Byte[]@)">
            <summary>
            Gets the header with the specified name
            </summary>
            <param name="headerName">Header Name</param>
            <param name="headerValue">Header value</param>
            <returns>true if a header with that name exists, false otherwise</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders.Serialize(System.Runtime.Serialization.DataContractSerializer,Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders)">
            <summary>
            Serializes the headers to a byte array
            </summary>
            <param name="serializer">Serializer</param>
            <param name="msg">Headers</param>
            <returns>The serialized byte array</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders.Deserialize(System.Runtime.Serialization.DataContractSerializer,System.Byte[])">
            <summary>
            De-serializes the byte array to a ServiceRemotingMessageHeaders object
            </summary>
            <param name="serializer">Deserializer</param>
            <param name="buffer">buffer</param>
            <returns>De-serialized headers</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders.MethodId">
            <summary>
            The methodId of the remote method
            </summary>
            <value>Method id</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders.InterfaceId">
            <summary>
            The interface id of the remote interface.
            </summary>
            <value>Interface id</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders.InvocationId">
            <summary>
            Identifier for the remote method invocation
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Builder.CodeBuilderAttribute.#ctor">
            <summary>
            Initializes a new instance of the ActorCodeBuilderAttribute class.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.Builder.CodeBuilderAttribute.EnableDebugging">
            <summary>
            Gets or sets enable debugging flag for the attribute to be used by auto code generation.
            </summary>
            <value><see cref="T:System.Boolean"/> to get or set enable debugging flag for the attribute to be used by auto code generation.</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Builder.IProxyActivator">
            <summary>
            Defines the interface implemented by generated code to create proxy objects.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Builder.MethodDispatcherBase">
            <summary>
            The base class used by remoting code generator to generate the type that dispatches requests from the client to the 
            right interface and method of the remoted object.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Builder.MethodDispatcherBase.ContinueWithResult``1(System.Int32,System.Threading.Tasks.Task{``0})">
            <summary>
            Internal - used by Service remoting
            </summary>
            <typeparam name="TRetval">Return value</typeparam>
            <param name="methodId">method id</param>
            <param name="task">continuation task</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Builder.MethodDispatcherBase.ContinueWith(System.Threading.Tasks.Task)">
            <summary>
            Internal - used by Service remoting
            </summary>
            <param name="task">continuation task</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Builder.MethodDispatcherBase.OnDispatchAsync(System.Int32,System.Object,System.Object,System.Threading.CancellationToken)">
            <summary>
            This method is implemented by the generated method dispatcher to dispatch request to the specified methodId of the 
            interface implemented by the remoted object.
            </summary>
            <param name="methodId">Id of the method.</param>
            <param name="remotedObject">The remoted object instance.</param>
            <param name="requestBody">Request body</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. 
            The result of the task is the return value from the method.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Builder.MethodDispatcherBase.OnDispatch(System.Int32,System.Object,System.Object)">
            <summary>
            This method is implemented by the generated method dispatcher to dispatch one way messages to the specified methodId of the 
            interface implemented by the remoted object.
            </summary>
            <param name="methodId">Id of the method.</param>
            <param name="remotedObject">The remoted object instance.</param>
            <param name="messageBody">message body</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Builder.MethodDispatcherBase.CreateResponseBody(System.Int32,System.Object)">
            <summary>
            This method is implemented by the generated method dispatcher to create the response from the specified return value 
            as a result of dispatching the method to the remored object. 
            </summary>
            <param name="methodId">Id of the method.</param>
            <param name="retval">The returned value from the method.</param>
            <returns>A <see cref="T:System.Object">Object</see> that represents the response body to be sent back to the client.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase">
            <summary>
            The base class used by remoting code generator to generate the proxy for the remoted interfaces.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.#ctor">
            <summary>
            Initializes a new instance of the ProxyBase class.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.Invoke(System.Int32,System.Int32,System.Object)">
            <summary>
            Called by the generated proxy class to send the message to the remote object.
            </summary>
            <param name="interfaceId">Id of the remote interface.</param>
            <param name="methodId">Id of the remote method to be invokved.</param>
            <param name="requestMsgBodyValue">Message body to be sent to remote object.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.InvokeAsync(System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)">
            <summary>
            Called by the generated proxy class to send the request to the remote object and get the response back.
            </summary>
            <param name="interfaceId">Id of the remote interface.</param>
            <param name="methodId">Id of the remote method to be invokved.</param>
            <param name="requestMsgBodyValue">Request body.</param>
            <returns>A task that represents the asynchronous operation async call to remote object.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWithResult``1(System.Int32,System.Int32,System.Threading.Tasks.Task{System.Object})">
            <summary>
            Called by the generated proxy class to get the result from the response body.
            </summary>
            <typeparam name="TRetval"><see cref="T:System.Type"/> of the remote method return value.</typeparam>
            <param name="interfaceId">Interface Id for the remoted interface.</param>
            <param name="methodId">Method Id for the remote method.</param>
            <param name="task">A task that represents the asynchronous operation for remote method call.</param>
            <returns>A task that represents the asynchronous operation for remote method call.
            The value of the TRetval contains the remote method return value. </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWith(System.Threading.Tasks.Task{System.Object})">
            <summary>
            Called by the generated proxy class to continue after getting the response body that does not have value.
            </summary>
            <param name="task">A task that represents the asynchronous operation for remote method call.</param>
            <returns>A task that represents the asynchronous operation for remote method call.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.GetReturnValue(System.Int32,System.Int32,System.Object)">
            <summary>
            Implemented by the derived class to type cast the response body and extract the value from it.
            </summary>
            <param name="interfaceId">Interface Id for the actor interface.</param>
            <param name="methodId">Method Id for the actor method.</param>
            <param name="responseBody">Response body.</param>
            <returns>Return value of method call as <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy">
            <summary>
            This is the base Client side interface for Remoting. The framework provides the
            Remoting infrastructure for all the service contracts inheriting from IService through
            ServiceRemotingListener and ServiceProxy.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy.ServiceInterfaceType">
            <summary>
            The interface type that is being remoted.
            </summary>
            <value>Service interface type</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy.ServicePartitionClient">
            <summary>
            The service partition client used to send requests to the service.
            </summary>
            <value>ServicePartitionClient used by the ServiceProxy</value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxyFactory.CreateServiceProxy``1(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector,System.String)">
            <summary>
            Creates a proxy to communicate to the specified service using the remoted interface TServiceInterface that 
            the service implements.
            <typeparam name="TServiceInterface">Interface that is being remoted</typeparam>
            <param name="serviceUri">Uri of the Service.</param>
            <param name="partitionKey">The Partition key that determines which service partition is responsible for handling requests from this service proxy</param>
            <param name="targetReplicaSelector">Determines which replica or instance of the service partition the client should connect to.</param>
            <param name="listenerName">This parameter is Optional if the service has a single communication listener. The endpoints from the service
            are of the form {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}. When the service exposes multiple endpoints, this parameter
            identifies which of those endpoints to use for the remoting communication.
            </param>
            <returns>The proxy that implement the interface that is being remoted. The returned object also implement <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy"/> interface.</returns>
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceRemotingClient">
            <summary>
            Defines the interface that must be implemented to provide a client for Service Remoting communication.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceRemotingClient.RequestResponseAsync(Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders,System.Byte[])">
            <summary>
            Sends a message to the service and gets a response back.
            </summary>
            <param name="messageHeaders">Message headers</param>
            <param name="requestBody">Message body</param>
            <returns>Response body</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceRemotingClient.SendOneWay(Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders,System.Byte[])">
            <summary>
            Sends a one-way message to the service
            </summary>
            <param name="messageHeaders">Message headers</param>
            <param name="requestBody">Message body</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceRemotingClientFactory">
            <summary>
            Defines the interface that must be implemented for providing the remoting communication client factory.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy">
            <summary>
            Provides the base implementation for the proxy to the remoted IService interfaces.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.Create``1(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector,System.String)">
            <summary>
            Creates a proxy to communicate to the specified service using the remoted interface TServiceInterface that 
            the service implements.
            <typeparam name="TServiceInterface">Interface that is being remoted</typeparam>
            <param name="serviceUri">Uri of the Service.</param>
            <param name="partitionKey">The Partition key that determines which service partition is responsible for handling requests from this service proxy</param>
            <param name="targetReplicaSelector">Determines which replica or instance of the service partition the client should connect to.</param>
            <param name="listenerName">This parameter is Optional if the service has a single communication listener. The endpoints from the service
            are of the form {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}. When the service exposes multiple endpoints, this parameter
            identifies which of those endpoints to use for the remoting communication.
            </param>
            <returns>The proxy that implement the interface that is being remoted. The returned object also implement <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy"/> interface.</returns>
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.ServiceInterfaceType">
            <summary>
            The interface type that is being remoted.
            </summary>
            <value>Service interface type</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.ServicePartitionClient">
            <summary>
            The service partition client used to send requests to the service.
            </summary>
            <value>ServicePartitionClient used by the ServiceProxy</value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxyFactory.CreateServiceProxy``1(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector,System.String)">
            <summary>
            Creates a proxy to communicate to the specified service using the remoted interface TServiceInterface that 
            the service implements.
            <typeparam name="TServiceInterface">Interface that is being remoted</typeparam>
            <param name="serviceUri">Uri of the Service.</param>
            <param name="partitionKey">The Partition key that determines which service partition is responsible for handling requests from this service proxy</param>
            <param name="targetReplicaSelector">Determines which replica or instance of the service partition the client should connect to.</param>
            <param name="listenerName">This parameter is Optional if the service has a single communication listener. The endpoints from the service
            are of the form {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}. When the service exposes multiple endpoints, this parameter
            identifies which of those endpoints to use for the remoting communication.
            </param>
            <returns>The proxy that implement the interface that is being remoted. The returned object also implement <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy"/> interface.</returns>
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceRemotingPartitionClient">
            <summary>
            Specifies the Service partition client for Remoting communication
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Client.FabricTransportServiceRemotingClientFactory">
            <summary>
            An <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceRemotingClientFactory"/> that uses
            Fabric TCP transport to create <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceRemotingClient"/> that communicate with stateless
            and stateful services over interfaces that are remoted via 
            <see cref="T:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Runtime.FabricTransportServiceRemotingListener"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Client.FabricTransportServiceRemotingClientFactory.#ctor(Microsoft.ServiceFabric.Services.Communication.FabricTransport.Common.FabricTransportSettings,Microsoft.ServiceFabric.Services.Remoting.IServiceRemotingCallbackClient,Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Services.Communication.Client.IExceptionHandler},System.String)">
            <summary>
                Constructs a fabric transport based service remoting client factory.
            </summary>
            <param name="fabricTransportSettings">
                The settings for the fabric transport. If the settings are not provided or null, default settings 
                with no security.
            </param>
            <param name="callbackClient">
                The callback client that receives the callbacks from the service.
            </param>
            <param name="servicePartitionResolver">
                Service partition resolver to resolve the service endpoints. If not specified, a default 
                service partition resolver returned by <see cref="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.GetDefault"/> is used.
            </param>
            <param name="exceptionHandlers">
                Exception handlers to handle the exceptions encountered in communicating with the service.
            </param>
            <param name="traceId">
                Id to use in diagnostics traces from this component.
            </param>
            <remarks>
                This factory uses an internal fabric transport exception handler to handle exceptions at the fabric TCP transport 
                level and a <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceRemotingExceptionHandler"/>, in addition to the exception handlers supplied to the 
                constructor. 
            </remarks>
        </member>
        <member name="E:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Client.FabricTransportServiceRemotingClientFactory.ClientConnected">
            <summary>
            Event handler that is fired when a client is connected to the service endpoint.
            </summary>
        </member>
        <member name="E:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Client.FabricTransportServiceRemotingClientFactory.ClientDisconnected">
            <summary>
            Event handler that is fired when a client is disconnected from the service endpoint.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Runtime.FabricTransportServiceRemotingListener">
            <summary>
            An <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingListener"/> that uses
            a Fabric TCP Transport to provide interface remoting for stateless and stateful services.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingListener">
            <summary>
            Defines a base communication interface that enables interface remoting for 
            stateless and stateful services.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Runtime.FabricTransportServiceRemotingListener.#ctor(System.Fabric.ServiceContext,Microsoft.ServiceFabric.Services.Remoting.IService)">
            <summary>
            Constructs a Fabric Transport based service remoting listener.
            </summary>
            <param name="serviceContext">The context of the service for which the remoting listener is being constructed.</param>
            <param name="serviceImplementation">The service implementation object.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Runtime.FabricTransportServiceRemotingListener.#ctor(System.Fabric.ServiceContext,Microsoft.ServiceFabric.Services.Remoting.IService,System.String)">
            <summary>
            Constructs a Fabric Transport based service remoting listener.
            </summary>
            <param name="serviceContext">The context of the service for which the remoting listener is being constructed.</param>
            <param name="serviceImplementation">The service implementation object.</param>
            <param name="listenerSettingsConfigSectionName">The name of the configuration section in the configuration package named
            "Config" in the service manifest that defines the settings for the listener. 
            </param> 
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Runtime.FabricTransportServiceRemotingListener.#ctor(System.Fabric.ServiceContext,Microsoft.ServiceFabric.Services.Remoting.IService,Microsoft.ServiceFabric.Services.Communication.FabricTransport.Runtime.FabricTransportListenerSettings)">
            <summary>
            Constructs a Fabric Transport based service remoting listener that uses the specified settings.
            </summary>
            <param name="serviceContext">The context of the service for which the remoting listener is being constructed.</param>
            <param name="serviceImplementation">The service implementation object.</param>
            <param name="listenerSettings">the settings for the listener.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Runtime.FabricTransportServiceRemotingListener.#ctor(System.Fabric.ServiceContext,Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingMessageHandler)">
            <summary>
            Constructs a Fabric Transport based service remoting listener.
            </summary>
            <param name="serviceContext">The context of the service for which the remoting listener is being constructed.</param>
            <param name="messageHandler">The handler for receiving and processing remoting messages. As the messages are received
            the listener delivers the messages to the handler.
            </param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Runtime.FabricTransportServiceRemotingListener.#ctor(System.Fabric.ServiceContext,Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingMessageHandler,System.String)">
            <summary>
            Constructs a Fabric Transport based service remoting listener.
            </summary>
            <param name="serviceContext">The context of the service for which the remoting listener is being constructed.</param>
            <param name="messageHandler">The handler for receiving and processing remoting messages. As the messages are received
            the listener delivers the messages to the handler.
            </param>
            <param name="listenerSettingsConfigSectionName">The name of the configuration section in the configuration package named
            "Config" in the service manifest that defines the settings for the listener. 
            </param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Runtime.FabricTransportServiceRemotingListener.#ctor(System.Fabric.ServiceContext,Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingMessageHandler,Microsoft.ServiceFabric.Services.Communication.FabricTransport.Runtime.FabricTransportListenerSettings)">
            <summary>
            Constructs a Fabric Transport based service remoting listener.
            </summary>
            <param name="serviceContext">The context of the service for which the remoting listener is being constructed.</param>
            <param name="messageHandler">The handler for receiving and processing remoting messages. As the messages are received
            the listener delivers the messages to the handler.
            </param>
            <param name="listenerSettings">the settings for the listener.</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingRequestContext">
            <summary>
            Defines the interface that must be implemented to provide the request context for the IServiceRemotingMessageHandler.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingRequestContext.GetCallbackClient">
            <summary>
            Gets the client channel interface to use in cases where service wants to initiate calls to the client.
            </summary>
            <returns>Remoting callback client</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingMessageHandler">
            <summary>
            Defines the interface that must be implemented by the ServiceRemotingListener to receive messages from the
            remoting transport.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingMessageHandler.RequestResponseAsync(Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingRequestContext,Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders,System.Byte[])">
            <summary>
            Handles a message from the client that requires a response from the service.
            </summary>
            <param name="requestContext">Request context - contains additional information about the request</param>
            <param name="messageHeaders">Request message headers</param>
            <param name="requestBody">Request message body</param>
            <returns>Response body</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingMessageHandler.HandleOneWay(Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingRequestContext,Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders,System.Byte[])">
            <summary>
            Handles a one way message from the client.
            </summary>
            <param name="requestContext">Request context - contains additional information about the request</param>
            <param name="messageHeaders">Request message headers</param>
            <param name="requestBody">Request message body</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingCancellationHelper">
            <summary>
            Helper class that provides cancellation support for remote method dispatching
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingCancellationTracker">
            <summary>
            Helper class for maintaining cancellation tokens associated with the method calls being dispatched.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingCancellationTracker.methodCallTrackerDictionary">
            <summary>
            Maintains the information about the method calls that are in-flight.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingCancellationTracker.GetOrAddCancellationTokenSource(System.Int32,System.String)">
            <summary>
            Returns the cancellation token associated with the specified callId. A new token one is created if the
            callId is not tracked already.
            </summary>
            <param name="methodId"></param>
            <param name="callId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingCancellationTracker.TryGetCancellationTokenSource(System.Int32,System.String)">
            <summary>
            Gets a cancellation token if it exists for the specified callId
            </summary>
            <param name="methodId"></param>
            <param name="callId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingCancellationTracker.TryRemoveCancellationTokenSource(System.Int32,System.String)">
            <summary>
            Removes the cancellation token associated with the callId specified
            </summary>
            <param name="methodId"></param>
            <param name="callId"></param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingCancellationTracker.MethodCallTracker">
            <summary>
            Maintains the information related to the currently inflight calls for a service Method - identified by the methodId property.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingCancellationTracker.MethodCallTracker.TryRemoveCancellationToken(System.String)">
            <summary>
            
            </summary>
            <param name="callId">method call identifier, for </param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.CancellationTokenResult">
            <summary>
            This wrapper object is used to get the result of querying the cancellation token for a
            particular method call via Async api's
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingExtensions">
            <summary>
            This class adds extensions methods to create <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingListener"/>
            for remoting methods of the service interfaces that are derived from 
            <see cref="T:Microsoft.ServiceFabric.Services.Remoting.IService"/> interface.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingExtensions.CreateServiceRemotingListener``1(``0,System.Fabric.StatefulServiceContext)">
            <summary>
            An extension method that creates an <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingListener"/>
            for a stateful service implementation.
            </summary>
            <typeparam name="TStatefulService">Type constraint on the service implementation. The service implementation must
            derive from <see cref="T:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase"/> and implement one or more
            interfaces that derive from <see cref="T:Microsoft.ServiceFabric.Services.Remoting.IService"/> interface.</typeparam>
            <param name="serviceImplementation">A stateful service implementation.</param>
            <param name="serviceContext">The context under which the service is operating.</param>
            <returns>A <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingListener"/> communication
            listener that remotes the interfaces deriving from <see cref="T:Microsoft.ServiceFabric.Services.Remoting.IService"/> interface.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceRemotingExtensions.CreateServiceRemotingListener``1(``0,System.Fabric.StatelessServiceContext)">
            <summary>
            An extension method that creates an <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingListener"/>
            for a stateless service implementation.
            </summary>
            <typeparam name="TStatelessService">Type constraint on the service implementation. The service implementation must
            derive from <see cref="T:Microsoft.ServiceFabric.Services.Runtime.StatelessService"/> and implement one or more
            interfaces that derive from <see cref="T:Microsoft.ServiceFabric.Services.Remoting.IService"/> interface.</typeparam>
            <param name="serviceImplementation">A stateless service implementation.</param>
            <param name="serviceContext">The context under which the service is operating.</param>
            <returns>A <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingListener"/> communication
            listener that remotes the interfaces deriving from <see cref="T:Microsoft.ServiceFabric.Services.Remoting.IService"/> interface.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceTypeInformation">
            <summary>
            Specifies the class used by the ServiceRemoting to lookup the interfaces implemented
            by the service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceTypeInformation.#ctor">
            <summary>
            Initializes a new instance of the ServiceTypeInformation class.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceTypeInformation.TryGet(System.Type,Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceTypeInformation@)">
            <summary>
            Factory method that constructs a ServiceTypeInformation object from the given type
            </summary>
            <param name="serviceType">Type to examine</param>
            <param name="serviceTypeInformation">The constructed ServiceTypeInformation</param>
            <returns>true if the specified serviceType is a service, false otherwise</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceTypeInformation.Get(System.Type)">
            <summary>
            Factory method that constructs a ServiceTypeInformation object from the given type
            </summary>
            <param name="serviceType">Type to examine</param>
            <returns>ServiceTypeInformation</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceTypeInformation.IsService(System.Type)">
            <summary>
            Checks if the specified type is a stateless or stateful service.
            </summary>
            <param name="serviceType">Input type to check.</param>
            <returns>true if the specified type derives from <see cref="T:Microsoft.ServiceFabric.Services.Runtime.StatelessService"/> or 
            <see cref="T:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase"/></returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceTypeInformation.InterfaceTypes">
            <summary>
            The interface types implemented
            </summary>
            <value>List of interface types</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceTypeInformation.ImplementationType">
            <summary>
            Gets type of the class implementing the service interface.
            </summary>
            <value><see cref="T:System.Type"/> of the class implementing the service interface.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Remoting.Runtime.ServiceTypeInformation.IsAbstract">
            <summary>
            Gets if class implementing service interface is abstract.
            </summary>
            <value>true if class implementing service interface is abstract, otherwise false.</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Runtime.StatefulService">
            <summary>
            Represents base class for Microsoft Service Fabric based stateful reliable service
            which provides an <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/> to manage service's state. 
            Derive from this class to implement a Microsoft Service Fabric based stateful reliable service.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase">
            <summary>
            Represents base class for Microsoft Service Fabric based stateful reliable service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.#ctor(System.Fabric.StatefulServiceContext,Microsoft.ServiceFabric.Data.IStateProviderReplica)">
            <summary>
            Creates a new StatefulService.
            </summary>
            <param name="serviceContext">
            A <see cref="T:System.Fabric.StatefulServiceContext"/> that describes the service context.
            </param>
            <param name="stateProviderReplica">
            A <see cref="T:Microsoft.ServiceFabric.Data.IStateProviderReplica"/> that represents a reliable state provider replica.
            </param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.GetAddresses">
            <summary>
            Gets list of all the addresses for this service replica
            as (ListenerName, Endpoint) key-value pair.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/> containing list of addresses as
            (ListenerName, Endpoint) key-value pair.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.CreateServiceReplicaListeners">
            <summary>
            Override this method to supply the communication listeners for the service replica. The endpoints returned by the communication listener's
            are stored as a JSON string of ListenerName, Endpoint string pairs like 
            {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}
            </summary>
            <returns>List of ServiceReplicaListeners</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.OnOpenAsync(System.Fabric.ReplicaOpenMode,System.Threading.CancellationToken)">
            <summary>
            This method is called as the final step of opening the service.
            Override this method to be notified that Open has completed for this replica's internal components.
            </summary>
            <param name="openMode"><see cref="T:System.Fabric.ReplicaOpenMode"/> for this service replica.</param>
            <param name="cancellationToken">Cancellation token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.OnChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)">
            <summary>
            This method is called as the final step before completing <see cref="M:System.Fabric.IStatefulServiceReplica.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)"/>.
            Override this method to be notified that ChangeRole has completed for this replica's internal components.
            </summary>
            <param name="newRole">New <see cref="T:System.Fabric.ReplicaRole"/> for this service replica.</param>
            <param name="cancellationToken">Cancellation token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.RunAsync(System.Threading.CancellationToken)">
            <summary>
            Services that want to implement a processing loop which runs when it is primary and has write status,
            just override this method with their logic.
            </summary>
            <param name="cancellationToken">Cancellation token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.OnCloseAsync(System.Threading.CancellationToken)">
            <summary>
            This method is called as the final step of closing the service.
            Override this method to be notified that Close has completed for this replica's internal components.
            </summary>
            <param name="cancellationToken">Cancellation token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.OnAbort">
            <summary>
            Notification that the service is being aborted.  RunAsync MAY be running concurrently
            with the execution of this method, as cancellation is not awaited on the abort path.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.OnDataLossAsync(Microsoft.ServiceFabric.Data.RestoreContext,System.Threading.CancellationToken)">
            <summary>
            This method is called during suspected data-loss. Override this method to
            restore the service in case of data-loss.
            </summary>
            <param name="restoreCtx">
            A <see cref="T:Microsoft.ServiceFabric.Data.RestoreContext"/> to be used to restore the service.</param>
            <param name="cancellationToken">Cancellation token to monitor for cancellation requests.</param>
            <returns>
            A Task that represents the asynchronous restore operation.
            True indicates that the state has been restored.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.BackupAsync(Microsoft.ServiceFabric.Data.BackupDescription)">
            <summary>
            Performs a backup of all reliable state managed by this <see cref="T:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase"/>.
            </summary>
            <param name="backupDescription">A <see cref="T:Microsoft.ServiceFabric.Data.BackupDescription"/> describing the backup request.</param>
            <returns>Task that represents the asynchronous backup operation.</returns>
            <remarks>
            A backup will be performed with a one-hour timeout.
            Boolean returned by the backupCallback indicate whether the service was able to successfully move the backup folder to an external location.
            If false is returned, BackupAsync throws InvalidOperationException with the relevant message indicating backupCallback returned false.
            Also, backup will be marked as unsuccessful.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.BackupAsync(Microsoft.ServiceFabric.Data.BackupDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Performs a backup of all reliable state managed by this <see cref="T:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase"/>.
            </summary>
            <param name="backupDescription">A <see cref="T:Microsoft.ServiceFabric.Data.BackupDescription"/> describing the backup request.</param>
            <param name="timeout">The timeout for this operation.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>Task that represents the asynchronous backup operation.</returns>
            <remarks>
            Boolean returned by the backupCallback indicate whether the service was able to successfully move the backup folder to an external location.
            If false is returned, BackupAsync throws InvalidOperationException with the relevant message indicating backupCallback returned false.
            Also, backup will be marked as unsuccessful.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.OnDataLossAsync(System.Threading.CancellationToken)">
            <summary>
            This method is called during suspected data-loss.
            </summary>
            <param name="cancellationToken"></param>
            <returns>
            Task that represents the asynchronous operation.
            True indicates that the state has been restored.
            </returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.Context">
            <summary>
            Gets the service context that this stateful service is operating under. It provides
            information like ReplicaId, PartitionId, ServiceName etc.
            </summary>
            <value>
            A <see cref="T:System.Fabric.StatefulServiceContext"/> that describes the service context.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.Partition">
            <summary>
            Service partition to which current service replica belongs. 
            </summary>
            <value>
            An <see cref="T:System.Fabric.IStatefulServicePartition"/> that represents the 
            partition to which this service replica belongs.
            </value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulService.#ctor(System.Fabric.StatefulServiceContext)">
            <summary>
            Creates a new StatefulService with default ReliableStateManager.
            </summary>
            <param name="serviceContext">
            A <see cref="T:System.Fabric.StatefulServiceContext"/> that describes the service context.
            </param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulService.#ctor(System.Fabric.StatefulServiceContext,Microsoft.ServiceFabric.Data.IReliableStateManagerReplica)">
            <summary>
            Creates a new StatefulService. 
            Override this to create a new StatefulService with non-default state manager replica.
            </summary>
            <param name="serviceContext">
            A <see cref="T:System.Fabric.StatefulServiceContext"/> that describes the service context.
            </param>
            <param name="reliableStateManagerReplica">
            A <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManagerReplica"/> that represents a reliable state provider replica.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Runtime.StatefulService.StateManager">
            <summary>
            Gets or sets this replica's state manager.
            </summary>
            <value>The state manager.</value>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceReplicaAdapter.executeRunAsyncTask">
            <summary>
            This task wraps the actual RunAsync task. All the exceptions
            escaping from actual RunAsync are handled inside the task itself.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceReplicaAdapter.ExecuteRunAsync(System.Threading.CancellationToken)">
            <summary>
            We handle all the exceptions coming from actual RunAsync here.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceReplicaAdapter.CancelRunAsync">
            <summary>
            This gets called in three cases:
            
            1) When replica is changing role from primary to secondary.
            2) When replica is being closed.
            3) When replica is being aborted.
            
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceReplicaAdapter.Test_CommunicationListeners">
            <summary>
            This is exposed only for testing use
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Runtime.StatelessService">
            <summary>
            Represents Microsoft Service Fabric based stateless reliable service base class. 
            Derive from this class to implement a Microsoft Service Fabric based stateless reliable service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatelessService.#ctor(System.Fabric.StatelessServiceContext)">
            <summary>
            Creates a new <see cref="T:Microsoft.ServiceFabric.Services.Runtime.StatelessService"/> instance.
            </summary>
            <param name="serviceContext">
            A <see cref="T:System.Fabric.StatelessServiceContext"/> that describes the service context.
            </param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatelessService.GetAddresses">
            <summary>
            Gets list of all the addresses for this service instance
            as (ListenerName, Endpoint) key-value pair.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/> containing list of addresses as
            (ListenerName, Endpoint) key-value pair.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatelessService.CreateServiceInstanceListeners">
            <summary>
            Override this method to supply the communication listeners for the service instance. The endpoints returned by the communication listener's
            are stored as a JSON string of ListenerName, Endpoint string pairs like 
            {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}
            </summary>
            <returns>List of ServiceInstanceListeners</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatelessService.OnOpenAsync(System.Threading.CancellationToken)">
            <summary>
            This method is called as the final step of opening the service.
            Override this method to be notified that Open has completed for this instance's internal components.
            </summary>
            <param name="cancellationToken">Cancellation token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatelessService.RunAsync(System.Threading.CancellationToken)">
            <summary>
            Services that want to implement a background task which runs when it is opened,
            just override this method with their logic.
            </summary>
            <param name="cancellationToken">Cancellation token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatelessService.OnCloseAsync(System.Threading.CancellationToken)">
            <summary>
            This method is called as the final step of closing the service.
            Override this method to be notified that Close has completed for this instance's internal components.
            </summary>
            <param name="cancellationToken">Cancellation token provided to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatelessService.OnAbort">
            <summary>
            Notification that the service is being aborted.  RunAsync MAY be running concurrently
            with the execution of this method, as cancellation is not awaited on the abort path.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Runtime.StatelessService.Context">
            <summary>
            Gets the service context that this stateless service is operating under. It provides
            information like InstanceId, PartitionId, ServiceName etc.
            </summary>
            <value>
            A <see cref="T:System.Fabric.StatelessServiceContext"/> that describes the service context.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Runtime.StatelessService.Partition">
            <summary>
            Service partition to which current service instance belongs. 
            </summary>
            <value>
            An <see cref="T:System.Fabric.IStatelessServicePartition"/> that represents the 
            partition to which this service replica belongs.
            </value>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Runtime.StatelessServiceInstanceAdapter.executeRunAsyncTask">
            <summary>
            This task wraps the actual RunAsync task. All the exceptions
            escaping from actual RunAsync are handled inside the task itself.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatelessServiceInstanceAdapter.ExecuteRunAsync(System.Threading.CancellationToken)">
            <summary>
            We handle all the exceptions coming from actual RunAsync here.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatelessServiceInstanceAdapter.CancelRunAsync">
            <summary>
            This gets called in two cases:
            
            1) When replica is being closed.
            2) When replica is being aborted.
            
            </summary>
        </member>
    </members>
</doc>
