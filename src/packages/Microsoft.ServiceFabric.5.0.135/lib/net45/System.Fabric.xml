<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Fabric</name>
    </assembly>
    <members>
        <member name="T:System.Fabric.ApplicationUpgradeProgress">
            <summary>
            <para>Represents the upgrade status of the application instance.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.ApplicationUpgradeProgress.GetChangedUpgradeDomains(System.Fabric.ApplicationUpgradeProgress)">
            <summary>
            <para>Specifies a helper method that returns a collection of upgrade domains that have changed to the <see cref="F:System.Fabric.ApplicationUpgradeState.RollingForwardCompleted"/> state or the <see cref="F:System.Fabric.ApplicationUpgradeState.RollingForwardInProgress"/> state since the <see cref="M:System.Fabric.ApplicationUpgradeProgress.GetChangedUpgradeDomains(System.Fabric.ApplicationUpgradeProgress)"/> method was called.</para>
            </summary>
            <param name="previousProgress">
            <para>The previous <see cref="T:System.Fabric.ApplicationUpgradeProgress"/> object.</para>
            </param>
            <returns>
            <para>A helper method that returns a collection of upgrade domains.</para>
            </returns>
            <exception cref="T:System.ArgumentException">
            <para>The application name or the application type of the <paramref name="previousProgress"/> parameter does not match the application name or application type of this object.</para>
            </exception>
        </member>
        <member name="P:System.Fabric.ApplicationUpgradeProgress.UpgradeDescription">
            <summary>
            <para>Gets the parameters that describe the behavior of the current upgrade.</para>
            </summary>
            <value>
            <para>The parameters that describe the behavior of the current upgrade.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ApplicationUpgradeProgress.ApplicationName">
            <summary>
            <para>Gets the name of the application to be upgraded.</para>
            </summary>
            <value>
            <para>The name of the application to be upgraded.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ApplicationUpgradeProgress.ApplicationTypeName">
            <summary>
            <para>Gets the type name of the application to be upgraded.</para>
            </summary>
            <value>
            <para>The type name of the application to be upgraded.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ApplicationUpgradeProgress.TargetApplicationTypeVersion">
            <summary>
            <para>Gets the version of the application type being upgraded.</para>
            </summary>
            <value>
            <para>The version of the application type being upgraded.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ApplicationUpgradeProgress.UpgradeState">
            <summary>
            <para>Gets the overall state of the application upgrade process.</para>
            </summary>
            <value>
            <para>The overall state of the application upgrade process.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ApplicationUpgradeProgress.UpgradeDomains">
            <summary>
            <para>Gets the collection of upgrade domains and their upgrade status for this application upgrade.</para>
            </summary>
            <value>
            <para>The collection of upgrade domains and their upgrade status for this application upgrade.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ApplicationUpgradeProgress.RollingUpgradeMode">
            <summary>
            <para>Gets the rolling upgrade mode for this upgrade progress.</para>
            </summary>
            <value>
            <para>The rolling upgrade mode for this upgrade progress.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ApplicationUpgradeProgress.NextUpgradeDomain">
            <summary>
            <para>Gets the next upgrade domain for this upgrade progress.</para>
            </summary>
            <value>
            <para>The next upgrade domain for this upgrade progress.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ApplicationUpgradeProgress.UpgradeDuration">
            <summary>
            <para>Gets the estimated elapsed time spent processing the current overall upgrade.</para>
            </summary>
            <value>
            <para>The estimated elapsed time spent processing the current overall upgrade.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ApplicationUpgradeProgress.CurrentUpgradeDomainDuration">
            <summary>
            <para>Gets the estimated elapsed time spent processing the current Upgrade Domain.</para>
            </summary>
            <value>
            <para>The estimated elapsed time spent processing the current Upgrade Domain.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ApplicationUpgradeProgress.UnhealthyEvaluations">
            <summary>
            <para>Gets the evaluations which describe the data and the algorithm used by health manager to evaluate the application health. </para>
            </summary>
            <value>
            <para>The evaluations which describe the data and the algorithm used by health manager to evaluate the application health.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ApplicationUpgradeProgress.CurrentUpgradeDomainProgress">
            <summary>
            <para>Gives the detailed upgrade progress for nodes in the current upgrade domain.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.UpgradeDomainProgress"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ApplicationUpgradeProgress.StartTimestampUtc">
            <summary>
            <para>
            Gets the time at which the upgrade started.
            </para>
            </summary>
            <value>
            <para>The time at which the upgrade started in UTC.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ApplicationUpgradeProgress.FailureTimestampUtc">
            <summary>
            <para>
            Gets the time at which the upgrade failed.
            </para>
            </summary>
            <value>
            <para>The time at which the upgrade failed in UTC.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ApplicationUpgradeProgress.FailureReason">
            <summary>
            <para>
            Gets the category of upgrade failure if the upgrade failed.
            </para>
            </summary>
            <value>
            <para>The category of upgrade failure. <see cref="T:System.Fabric.UpgradeFailureReason"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ApplicationUpgradeProgress.UpgradeDomainProgressAtFailure">
            <summary>
            <para>
            Gets structured information about what actions were being performed by the system at the moment of upgrade failure.
            </para>
            </summary>
            <value>
            <para>The upgrade domain progress details. <see cref="T:System.Fabric.UpgradeDomainProgress"/>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.ApplicationUpgradeState">
            <summary>
            <para>Enumerates the state of the application upgrade.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ApplicationUpgradeState.Invalid">
            <summary>
            <para>Indicates that the type is not valid. All Service Fabric enumerations have an invalid type.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ApplicationUpgradeState.RollingBackInProgress">
            <summary>
            <para>Indicates that the upgrade is in the process of rolling back. This indicates that upgrade to the target version has failed. Note that this state can also be observed temporarily if the upgrade is interrupted to start a new upgrade.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ApplicationUpgradeState.RollingBackCompleted">
            <summary>
            <para>Indicates that the roll back of the upgrade is completed. The completed rollback indicates that upgrade to the target version has failed.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ApplicationUpgradeState.RollingForwardPending">
            <summary>
            <para>Indicates that the upgrade to the target application type version is pending user input. The <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.MoveNextApplicationUpgradeDomainAsync(System.Fabric.ApplicationUpgradeProgress)"/> is used to move the upgrade forward.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ApplicationUpgradeState.RollingForwardInProgress">
            <summary>
            <para>Indicates that the upgrade to the target application type version is in progress.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ApplicationUpgradeState.RollingForwardCompleted">
            <summary>
            <para>Indicates that the upgrade to the target application type version is completed.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ApplicationUpgradeState.Failed">
            <summary>
            <para>Indicates that the upgrade has failed.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.IStatefulServicePartition">
            <summary>
            <para>Represents a partition that is associated with a stateful service replica. </para>
            </summary>
            <remarks>
            <para>Derived from <see cref="T:System.Fabric.IServicePartition"/>.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.IServicePartition">
            <summary>
            <para>Provides information to the service about the partition to which it belongs and provides methods for the service to interact with the system during runtime.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.IServicePartition.ReportLoad(System.Collections.Generic.IEnumerable{System.Fabric.LoadMetric})">
            <summary>
            <para>Reports the load for a set of load balancing metrics. The load can be reported at any time via the <see cref="M:System.Fabric.IServicePartition.ReportLoad(System.Collections.Generic.IEnumerable{System.Fabric.LoadMetric})"/> method and provides one or more properties of the <see cref="T:System.Fabric.LoadMetric"/> method.</para>
            </summary>
            <param name="metrics">
            <para>A collection of <see cref="T:System.Fabric.LoadMetric"/> to report the load for. </para>
            </param>
            <remarks>
            <para>The reported metrics should correspond to those that are provided in the <see cref="T:System.Fabric.Description.ServiceLoadMetricDescription"/> as a part of the <see cref="T:System.Fabric.Description.ServiceDescription"/> that is used to create the service. Load metrics that are not present in the description are ignored. Reporting custom metrics allows Service Fabric to balance services that are based on additional custom information.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IServicePartition.ReportFault(System.Fabric.FaultType)">
            <summary>
            <para>Enables the service to report a runtime fault that indicates that it has encountered some error and must either be restarted or removed.</para>
            </summary>
            <param name="faultType">
            <para>The <see cref="T:System.Fabric.FaultType"/> that the service has encountered.</para>
            </param>
            <remarks>
            <para>A fault is typically reported when the service code encounters some issue from which it cannot recover. A <see cref="F:System.Fabric.FaultType.Transient"/> fault indicates that the service should be restarted, while a <see cref="F:System.Fabric.FaultType.Permanent"/> fault indicates that this service has encountered some fatal, permanent issue and should be considered completely failed. Note that transient faults are only of interest to persistent stateful services, because the following restart does not equate to data loss for those services. For volatile stateful services or stateless services, the only difference between transient and permanent faults is whether the service should be shut down gracefully or ungracefully. If a graceful close is required where the service can still process operations, and finish processes that are in progress, then a transient fault should be reported.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IServicePartition.ReportMoveCost(System.Fabric.MoveCost)">
            <summary>
            <para>Reports the move cost for a replica.</para>
            </summary>
            <param name="moveCost">
            <para>The reported <see cref="T:System.Fabric.MoveCost"/>.</para>
            </param>
            <remarks>
            <para>Services can report move cost of a replica using this method. While the Service Fabric Resource Balances searches 
            for the best balance in the cluster, it examines both load information and move cost of each replica. 
            Resource balances will prefer to move replicas with lower cost in order to achieve balance. </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IServicePartition.ReportPartitionHealth(System.Fabric.Health.HealthInformation)">
            <summary>
            Reports current partition health. 
            </summary>
            <param name="healthInfo">Health information that is to be reported.</param>
            <returns></returns>
        </member>
        <member name="P:System.Fabric.IServicePartition.PartitionInfo">
            <summary>
            <para>Provides access to the <see cref="T:System.Fabric.ServicePartitionInformation"/> of the service, which contains the partition type and ID.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.ServicePartitionInformation"/>.</para>
            </value>
        </member>
        <member name="M:System.Fabric.IStatefulServicePartition.CreateReplicator(System.Fabric.IStateProvider,System.Fabric.ReplicatorSettings)">
            <summary>
            <para>Creates a <see cref="T:System.Fabric.FabricReplicator"/> with the specified settings and returns it to the replica. </para>
            </summary>
            <param name="stateProvider">
            <para>The <see cref="T:System.Fabric.IStateProvider"/> with which the returned <see cref="T:System.Fabric.FabricReplicator"/> should be associated. 
            This is often the same object that implements <see cref="T:System.Fabric.IStatefulServiceReplica"/>, but certain services might be factored differently. </para>
            </param>
            <param name="replicatorSettings">
            <para>The <see cref="T:System.Fabric.ReplicatorSettings"/> with which the returned <see cref="T:System.Fabric.FabricReplicator"/> should be configured. </para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Fabric.FabricReplicator"/>.</para>
            </returns>
            <remarks>
            <para>This method should be used to create a <see cref="T:System.Fabric.FabricReplicator"/> to service as the <see cref="T:System.Fabric.IStateReplicator"/> for a stateful service that implements <see cref="T:System.Fabric.IStateProvider"/>.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IStatefulServicePartition.ReportReplicaHealth(System.Fabric.Health.HealthInformation)">
            <summary>
            Reports health of the current replica associated with this partition. 
            </summary>
            <param name="healthInfo">Health information that is to be reported.</param>
            <returns></returns>
        </member>
        <member name="P:System.Fabric.IStatefulServicePartition.ReadStatus">
            <summary>
            <para>Used to check the readiness of the replica in regard to read operations. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.PartitionAccessStatus"/>.</para>
            </value>
            <remarks>
            <para>Read operations are always allowed on replicas that are currently <see cref="F:System.Fabric.ReplicaRole.Primary"/> and denied on those replicas that are not.
            The <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus"/> should be checked whenever the replica is servicing a customer request that is a read operation.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.IStatefulServicePartition.WriteStatus">
            <summary>
            <para>Used to check the readiness of the partition in regard to write operations. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.PartitionAccessStatus"/>.</para>
            </value>
            <remarks>
            <para>Write operations are allowed on replicas that are currently <see cref="F:System.Fabric.ReplicaRole.Primary"/>, have a write quorum of replicas available,
            and are not currently undergoing reconfiguration. The <see cref="P:System.Fabric.IStatefulServicePartition.WriteStatus"/> should be checked whenever the replica
            services a customer request that is a write operation.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.StatefulServicePartition.ReportReplicaHealth(System.Fabric.Health.HealthInformation)">
            <summary>
            Reports replica health. 
            </summary>
            <param name="healthInfo">Health information that is to be reported.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.StatefulServicePartition.ReportPartitionHealth(System.Fabric.Health.HealthInformation)">
            <summary>
            Reports partition health. 
            </summary>
            <param name="healthInfo">Health information that is to be reported.</param>
            <returns></returns>
        </member>
        <member name="T:System.Fabric.IServiceGroupPartition">
            <summary>
            <para>Service group members inside a service group can cast the provided <see cref="T:System.Fabric.IStatefulServicePartition"/> or 
            <see cref="T:System.Fabric.IStatelessServicePartition"/> to a <see cref="T:System.Fabric.IServiceGroupPartition"/> to access the methods that are specific to members within service groups.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.IServiceGroupPartition.ResolveMember``1(System.Uri)">
            <summary>
            <para>Enables the member to get direct access to the other members of the service group.</para>
            </summary>
            <param name="name">
            <para>The <c>fabric:/</c> name of the member to resolve.</para>
            </param>
            <typeparam name="T">
            <para>The type of the service member that should be resolved.</para>
            </typeparam>
            <returns>
            <para>Returns the member that is specified by name as an object of the specified type.</para>
            </returns>
            <remarks>
            <para>The <see cref="M:System.Fabric.IServiceGroupPartition.ResolveMember``1(System.Uri)"/> method enables a service group member to obtain a direct reference to the other members in the group. The direct object-object communication with the other members does not require communication outside of the machine or virtual machine, either for communication with the Naming service to resolve the member or via some external transport to send the actual commands to the member.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.Interop.NativeRuntime.IFabricKeyValueStoreReplica4">
            <summary>
            IFabricKeyValueStoreReplica4 interface.
            </summary>
            <remarks>Ensure that the GUID matches the one in FabricRuntime.idl</remarks>
        </member>
        <member name="T:System.Fabric.Interop.NativeRuntime.IFabricKeyValueStoreReplica5">
            <summary>
            IFabricKeyValueStoreReplica5 interface.
            </summary>
            <remarks>Ensure that the GUID matches the one in FabricRuntime.idl</remarks>
        </member>
        <member name="T:System.Fabric.Interop.NativeRuntime.IFabricKeyValueStoreReplica6">
            <summary>
            IFabricKeyValueStoreReplica6 interface.
            </summary>
            <remarks>Ensure that the GUID matches the one in FabricRuntime.idl</remarks>
        </member>
        <member name="T:System.Fabric.IOperationDataStream">
            <summary>
            <para> An <see cref="T:System.Fabric.IOperationDataStream"/> 
            encapsulates a stream of <see cref="T:System.Fabric.OperationData"/> objects that are exchanged between Primary replica and Secondary replica.
            Objects that implement <see cref="T:System.Fabric.IOperationDataStream"/> are used during the copy process.
            Both the copy context <see cref="M:System.Fabric.IStateProvider.GetCopyContext"/> method that is sent from the Secondary replica to the Primary replica 
            and the copy state <see cref="M:System.Fabric.IStateProvider.GetCopyState(System.Int64,System.Fabric.IOperationDataStream)"/> method implement the <see cref="T:System.Fabric.IOperationDataStream"/> 
            interface.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.IOperationDataStream.GetNextAsync(System.Threading.CancellationToken)">
            <summary>
            <para>Gets the next <see cref="T:System.Fabric.OperationData"/> object from the <see cref="T:System.Fabric.IOperationDataStream"/>.</para>
            </summary>
            <param name="cancellationToken">
            <para>Provides a mechanism to cancel the asynchronous operation.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task`1"/> of type <see cref="T:System.Fabric.OperationData"/>.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.IStateReplicator2">
            <summary>
            <para>Exposes replication-related functions of the <see cref="T:System.Fabric.FabricReplicator"/> class that are used by <see cref="T:System.Fabric.IStateProvider"/> to replicate state to ensure high availability.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.IStateReplicator">
            <summary>
            <para>Exposes replication-related functions of the <see cref="T:System.Fabric.FabricReplicator"/> class that are used by <see cref="T:System.Fabric.IStateProvider"/> to replicate state to ensure high availability. </para>
            </summary>
        </member>
        <member name="M:System.Fabric.IStateReplicator.ReplicateAsync(System.Fabric.OperationData,System.Threading.CancellationToken,System.Int64@)">
            <summary>
            <para>Replicates state changes from Primary replica to the Secondary replicas and receives a quorum acknowledgement that those state changes have been applied.</para>
            </summary>
            <param name="operationData">
            <para>The <see cref="T:System.Fabric.OperationData"/> that represents the state change that the Primary replica wants to replicate.</para>
            </param>
            <param name="cancellationToken">
            <para> A write quorum of replicas that have been lost. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <param name="sequenceNumber">
            <para>Long, the LSN of the operation. Note that this is the same value which is returned by the task. Providing it as an out parameter is useful for services which want to prepare the local write to commit when the task finishes.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task`1"/> of type long, the LSN of the operation.</para>
            </returns>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>
                <see cref="T:System.Fabric.FabricTransientException"/> is a retriable exception. It is caused by one of the following;</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NoWriteQuorum"/> is returned when the replicator does not currently have write quorum..</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ReconfigurationPending"/> is returned when the replicator has a pending reconfiguration.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ReplicationQueueFull"/> is returned when the replicator queue is full.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">
            <para>
                <see cref="T:System.Fabric.FabricNotPrimaryException"/> is caused by one of the following;</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NotPrimary"/> is returned when the replicator has a pending reconfiguration.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                <see cref="T:System.Fabric.FabricObjectClosedException"/> is caused by one of the following;</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ObjectClosed"/> is returned when the replicator has been closed.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>
                <see cref="T:System.OperationCanceledException"/> is caused by one of the following;</para>
            <para>E_ABORT when replicator cancels an inflight replication operation.</para>
            </exception>
            <remarks>
            <para>Replication at the Primary replica produces the objects that implement <see cref="T:System.Fabric.IOperation"/> that the Secondary replica obtains from the Replication Stream via <see cref="M:System.Fabric.IStateReplicator.GetReplicationStream"/>, which is followed by <see cref="M:System.Fabric.IOperationStream.GetOperationAsync(System.Threading.CancellationToken)"/>. </para>
            <para>The Primary replica has many duties that are related to process state updates. The following steps show the general sequence of events that a Primary replica must handle to replicate and acknowledge a change. </para>
            <para>Part 1: Handling incoming requests: Receive request: Write(x) – Service receives a write request, x. CheckArguments – The service checks the arguments of the request. This check helps ensure the consistency of the service’s state.</para>
            <para>Check current state – The service examines its current state to ensure that the operation is valid and can or should be performed. This check also helps ensure data consistency. It is performed by the service code.</para>
            <para>Acquire Locks – The service should acquire the necessary locks to prevent additional operations from occurring at the same time. This operation helps ensure isolation and consistency.</para>
            <para>Attempt Operation (optional) – The service can attempt the operation locally. This step reserves and allocates space and performs all the necessary computations. This step includes everything but the actual commit of the result. This operation improves the durability of the operation and makes later failures very unlikely.</para>
            <para>Manufacture the OperationData – An <see cref="T:System.Fabric.OperationData"/> object is the representation of the Write(x) that was presented to the service. The <see cref="T:System.Fabric.OperationData"/> object contains the state change to be transferred with acknowledgement from the Primary replica to the Secondary replicas. The data that the service places in the OperationData defines the atomic update that the <see cref="T:System.Fabric.FabricReplicator"/> transfers to the Secondary replicas. Note that creating of the <see cref="T:System.Fabric.OperationData"/> object requires one or more byte arrays. The service must itself determine and serialize the change in state, and then provide this set of bytes to the FabricReplicator via <see cref="M:System.Fabric.IStateReplicator.ReplicateAsync(System.Fabric.OperationData,System.Threading.CancellationToken,System.Int64@)"/>. The service sends the operation to the FabricReplicator and receives a logical sequence number (LSN) in return. The LSN is the identity for the operation and helps both the service and Service Fabric ensure that operations are always applied in the same order everywhere.The service should record the OperationData along with its LSN in an ordered list of in-flight operations. This ensures that when the operations are completed, they can be consistently applied in the correct order.</para>
            <para>Release Locks - Continue processing or waiting for further requests.</para>
            <para>Part 2: Completing requests and responding: The Primary replica receives a callback that indicates that the operation has been applied. ReplicateAsync is completed. This callback indicates that the operation has been acknowledged by a quorum of the replicas in the replica set. When the Primary replica receives this callback, it should perform the following actions: </para>
            <para>Find the corresponding operation that is indicated by the long LSN that is returned from ReplicateAsync in the service’s in-flight list and mark it as "QuorumAck’d". </para>
            <para>Now, starting at the first operation in the in-flight list, go through the list and locally commit all of the QuorumAck’d operations, finish any changes to the local state and mark the state changes with their corresponding LSN, until the first incomplete operation is encountered. This ensures that ordering is preserved (consistency) and that the operations are actually applied. This takes advantage of the previous durability and isolation preparations. Note: Most services should cache the last committed LSN value so that responses to the <see cref="M:System.Fabric.IStateProvider.GetLastCommittedSequenceNumber"/> do not require querying the actual store for the greatest LSN. </para>
            <para>When an operation is successfully committed at the Primary replica, the Primary replica can now reply to the client that initiated the call and remove the operation from the in-flight list. Continue to wait for the next quorum-acknowledgment callback.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IStateReplicator.GetCopyStream">
            <summary>
              <para>Gets copy stream.</para>
            </summary>
            <returns>
            <para>Returns the copy <see cref="T:System.Fabric.IOperationStream"/>. </para>
            </returns>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>
                <see cref="T:System.Fabric.FabricTransientException"/> is a retriable exception. It is caused by one of the following;</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ReconfigurationPending"/> is returned when the replicator has a pending reconfiguration.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                <see cref="T:System.Fabric.FabricObjectClosedException"/> is caused by one of the following;</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ObjectClosed"/> is returned when the replicator has been closed.</para>
            </exception>
            <remarks>
            <para>The returned CopyStream is an <see cref="T:System.Fabric.IOperationStream"/> that contains <see cref="T:System.Fabric.OperationData"/> objects that implement <see cref="T:System.Fabric.IOperation"/>. The <see cref="T:System.Fabric.OperationData"/> objects are obtained from the CopyState <see cref="T:System.Fabric.IOperationDataStream"/> that the Primary replica returns from <see cref="M:System.Fabric.IStateProvider.GetCopyState(System.Int64,System.Fabric.IOperationDataStream)"/>. When a replica is created and has to catch up, it should obtain the CopyStream and begin to send, apply, and acknowledge the Copy objects that implement <see cref="T:System.Fabric.IOperation"/>. In parallel, the replica responds to the corresponding <see cref="M:System.Fabric.IStateProvider.GetCopyContext"/> and <see cref="M:System.Fabric.IOperationDataStream.GetNextAsync(System.Threading.CancellationToken)"/> calls. The stream is empty when the returned <see cref="T:System.Fabric.IOperation"/> method is null.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IStateReplicator.GetReplicationStream">
            <summary>
              <para>Gets replication stream.</para>
            </summary>
            <returns>
            <para>Returns the replication <see cref="T:System.Fabric.IOperationStream"/>.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>
                <see cref="T:System.Fabric.FabricTransientException"/> is a retriable exception. It is caused by one of the following;</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ReconfigurationPending"/> is returned when the replicator has a pending reconfiguration.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>
                <see cref="T:System.Fabric.FabricObjectClosedException"/> is caused by one of the following;</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ObjectClosed"/> is returned when the replicator has been closed.</para>
            </exception>
            <remarks>
            <para>The ReplicationStream implements <see cref="T:System.Fabric.IOperationStream"/>. The ReplicationStream contains <see cref="T:System.Fabric.OperationData"/> objects that implement <see cref="T:System.Fabric.IOperation"/>. The objects are provided by the Primary replica via <see cref="M:System.Fabric.IStateReplicator.ReplicateAsync(System.Fabric.OperationData,System.Threading.CancellationToken,System.Int64@)"/>. Generally a Secondary replica should send <see cref="M:System.Fabric.IOperationStream.GetOperationAsync(System.Threading.CancellationToken)"/>. Although Service Fabric does not require services to do so, generally services should transfer all <see cref="T:System.Fabric.OperationData"/> objects out of the copy stream first, and then transfer operations out of the replication stream. The transfer from both copies in parallel is supported but increases the complexity of applying state updates correctly and is recommended only for advanced services. The stream is empty when the returned <see cref="T:System.Fabric.IOperation"/> method is null.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IStateReplicator.UpdateReplicatorSettings(System.Fabric.ReplicatorSettings)">
            <summary>
            <para>Enables modification of replicator settings during runtime. The only setting which can be modified is the security credentials. </para>
            </summary>
            <param name="settings">
            <para>The new <see cref="T:System.Fabric.ReplicatorSettings"/> with the updated credentials.</para>
            </param>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.IStateReplicator2.GetReplicatorSettings">
            <summary>
            <para>Retrieves the replicator settings during runtime.</para>
            </summary>
            <returns>
            <para>The current <see cref="T:System.Fabric.ReplicatorSettings"/> from the Service Fabric runtime.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.IAtomicGroupStateReplicator">
            <summary>
            <para>Exposes replication-related functions for atomic groups. </para>
            </summary>
            <remarks>
            <para>The <see cref="T:System.Fabric.IAtomicGroupStateReplicator"/> is available if the service is a member of a service group. The service must implement <see cref="T:System.Fabric.IAtomicGroupStateProvider"/> and be stateful. When creating a <see cref="T:System.Fabric.FabricReplicator"/> via <see cref="M:System.Fabric.IStatefulServicePartition.CreateReplicator(System.Fabric.IStateProvider,System.Fabric.ReplicatorSettings)"/>, instead of passing in a regular <see cref="T:System.Fabric.IStateProvider"/>, the service can pass in the <see cref="T:System.Fabric.IAtomicGroupStateProvider"/> that it implements instead. As a result, it receives a <see cref="T:System.Fabric.IAtomicGroupStateReplicator"/>.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IAtomicGroupStateReplicator.CreateAtomicGroup">
            <summary>
            <para>Creates a new atomic group and obtains the ID of the atomic group.</para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.Int64"/> the ID of the created atomic group.</para>
            </returns>
            <remarks>
            <para>Atomic groups are used to coordinate a set of changes across the members of a service group.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IAtomicGroupStateReplicator.ReplicateAtomicGroupOperationAsync(System.Int64,System.Fabric.OperationData,System.Threading.CancellationToken,System.Int64@)">
            <summary>
            <para>Replicates some <see cref="T:System.Fabric.OperationData"/> as a part of an atomic group.</para>
            </summary>
            <param name="atomicGroupId">
            <para>The ID of the atomic group that is obtained from <see cref="M:System.Fabric.IAtomicGroupStateReplicator.CreateAtomicGroup"/> and includes the <see cref="T:System.Fabric.OperationData"/>.</para>
            </param>
            <param name="operationData">
            <para>An <see cref="T:System.Fabric.OperationData"/> to be replicated.</para>
            </param>
            <param name="cancellationToken">
            <para>The CancellationToken object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <param name="sequenceNumber">
            <para>The LSN of the operation, as an out parameter.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task`1"/> of type long, the LSN of the replicated atomic group operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.IAtomicGroupStateReplicator.ReplicateAtomicGroupCommitAsync(System.Int64,System.Threading.CancellationToken,System.Int64@)">
            <summary>
            <para>Asynchronously commits state replication for the atomic group.</para>
            </summary>
            <param name="atomicGroupId">
            <para>The ID of the group to be committed.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <param name="commitSequenceNumber">
            <para>The LSN of the commit operation, as an out parameter.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task`1"/> of type long, the LSN of the commit operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.IAtomicGroupStateReplicator.ReplicateAtomicGroupRollbackAsync(System.Int64,System.Threading.CancellationToken,System.Int64@)">
            <summary>
            <para>Asynchronously rolls-back state replication for the atomic group.</para>
            </summary>
            <param name="atomicGroupId">
            <para>The ID of the atomic group to roll back.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <param name="rollbackSequenceNumber">
            <para>The LSN of the rollback operation, as an out parameter.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task`1"/> of type long, the LSN of the rollback operation.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.CheckExistsPropertyOperation">
            <summary>
            <para>Represents a <see cref="T:System.Fabric.PropertyBatchOperation"/> that compares the Boolean 
            existence of a property with the <see cref="P:System.Fabric.CheckExistsPropertyOperation.ExistenceCheck"/> argument. </para>
            </summary>
            <remarks>
            <para>The <see cref="T:System.Fabric.PropertyBatchOperation"/> operation fails if the 
            property is not equal to the <see cref="P:System.Fabric.CheckExistsPropertyOperation.ExistenceCheck"/> argument.
            The <see cref="T:System.Fabric.CheckExistsPropertyOperation"/> is generally used as a precondition for the write operations in the batch. Note that if one <see cref="T:System.Fabric.PropertyBatchOperation"/> fails, the entire batch fails and cannot be committed.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.PropertyBatchOperation">
            <summary>
            <para>Represents the base class for property operations that can be put into a batch and be submitted through the 
            <see cref="M:System.Fabric.FabricClient.PropertyManagementClient.SubmitPropertyBatchAsync(System.Uri,System.Collections.Generic.ICollection{System.Fabric.PropertyBatchOperation},System.TimeSpan,System.Threading.CancellationToken)"/> method.</para>
            </summary>
            <remarks>
            <para>Note that if one <see cref="T:System.Fabric.PropertyBatchOperation"/> object fails, the entire batch fails and cannot be committed.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.PropertyBatchOperation.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.PropertyBatchOperation"/> object.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.PropertyBatchOperation.#ctor(System.String,System.Fabric.PropertyBatchOperationKind)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.PropertyBatchOperation"/> object with the specified property name and kind.</para>
            </summary>
            <param name="propertyName">
            <para>String name of the Property.</para>
            </param>
            <param name="kind">
            <para>
                <see cref="T:System.Fabric.PropertyBatchOperationKind"/> defines the kind of the <see cref="T:System.Fabric.PropertyBatchOperation"/>.</para>
            </param>
        </member>
        <member name="P:System.Fabric.PropertyBatchOperation.PropertyName">
            <summary>
            <para>Indicates the name of the property that this <see cref="T:System.Fabric.PropertyBatchOperation"/> accesses.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.PropertyBatchOperation.Kind">
            <summary>
            <para>Gets the <see cref="T:System.Fabric.PropertyBatchOperationKind"/> that indicates the kind of the <see cref="T:System.Fabric.PropertyBatchOperation"/>.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.PropertyBatchOperationKind"/>.</para>
            </value>
            <remarks>
            <para>All Service Fabric enumerations have a reserved "Invalid" field.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.CheckExistsPropertyOperation.#ctor(System.String,System.Boolean)">
            <summary>
            <para>Instantiates a <see cref="T:System.Fabric.CheckExistsPropertyOperation"/> object. </para>
            </summary>
            <param name="propertyName">
            <para>The name of the property.</para>
            </param>
            <param name="existenceCheck">
            <para>Flag that specifies whether the property should exist for the operation to pass.</para>
            </param>
            <remarks>
            <para>If any <see cref="T:System.Fabric.PropertyBatchOperation"/> in the batch fails,
            the entire batch fails and cannot be committed.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.CheckExistsPropertyOperation.ExistenceCheck">
            <summary>
            <para>Gets the flag that specifies whether the property should exist for the operation to pass.</para>
            </summary>
            <value>
            <para>Flag that specifies whether the property should exist for the operation to pass.</para>
            </value>
        </member>
        <member name="T:System.Fabric.CheckSequencePropertyOperation">
            <summary>
            <para>Compares the <see cref="P:System.Fabric.NamedPropertyMetadata.SequenceNumber"/> of a property
            with the <see cref="P:System.Fabric.CheckSequencePropertyOperation.SequenceNumber"/> argument. </para>
            </summary>
            <remarks>
            <para>The comparison fails if the sequence numbers are not equal. 
            <see cref="T:System.Fabric.CheckSequencePropertyOperation"/> is generally used as a precondition for the write operations in the batch. 
            Note that if one <see cref="T:System.Fabric.PropertyBatchOperation"/> fails, the entire batch fails and cannot be committed.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.CheckSequencePropertyOperation.#ctor(System.String,System.Int64)">
            <summary>
            <para>Instantiates a new instance of the <see cref="T:System.Fabric.CheckSequencePropertyOperation"/> class.</para>
            </summary>
            <param name="propertyName">
            <para>A <see cref="T:System.String"/> that defines the name of the property.</para>
            </param>
            <param name="sequenceNumber">
            <para>A <see cref="T:System.Int64"/> that defines the expected sequence number of the property for the operation to pass.</para>
            </param>
            <remarks>
            <para>Note that if one <see cref="T:System.Fabric.PropertyBatchOperation"/> fails, the entire batch fails and cannot be committed.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.CheckSequencePropertyOperation.SequenceNumber">
            <summary>
            <para>Gets the expected sequence number.</para>
            </summary>
            <value>
            <para>The expected sequence number.</para>
            </value>
        </member>
        <member name="T:System.Fabric.CheckValuePropertyOperation">
            <summary>
            <para>Represents a <see cref="T:System.Fabric.PropertyBatchOperation"/> that compares the value of the property
            with the expected value.  </para>
            </summary>
            <remarks>
            <para>The comparison fails if the value of the property and the expected value are not equal. 
            The <see cref="T:System.Fabric.CheckValuePropertyOperation"/> is generally used as a precondition for the write operations in the batch. 
            Note that if one <see cref="T:System.Fabric.PropertyBatchOperation"/> fails, the entire batch fails and cannot be committed.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.CheckValuePropertyOperation.#ctor(System.String,System.Byte[])">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.CheckValuePropertyOperation"/> class with specified <paramref name="propertyName"/> and <see cref="T:System.Byte"/>[] value.</para>
            </summary>
            <param name="propertyName">
            <para>The name of the property.</para>
            </param>
            <param name="value">
            <para>The value of the property.</para>
            </param>
        </member>
        <member name="M:System.Fabric.CheckValuePropertyOperation.#ctor(System.String,System.Int64)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.CheckValuePropertyOperation"/> class 
            with specified <paramref name="propertyName"/> and <see cref="T:System.Int64"/> value.</para>
            </summary>
            <param name="propertyName">
            <para>The name of the property.</para>
            </param>
            <param name="value">
            <para>The value of the property.</para>
            </param>
        </member>
        <member name="M:System.Fabric.CheckValuePropertyOperation.#ctor(System.String,System.Guid)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.CheckValuePropertyOperation"/> class
            with specified <paramref name="propertyName"/> and <see cref="T:System.Guid"/> value.</para>
            </summary>
            <param name="propertyName">
            <para>The name of the property.</para>
            </param>
            <param name="value">
            <para>The value of the property.</para>
            </param>
        </member>
        <member name="M:System.Fabric.CheckValuePropertyOperation.#ctor(System.String,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.CheckValuePropertyOperation"/> class
            with specified <paramref name="propertyName"/> and <see cref="T:System.String"/> value.</para>
            </summary>
            <param name="propertyName">
            <para>The name of the property.</para>
            </param>
            <param name="value">
            <para>The value of the property.</para>
            </param>
        </member>
        <member name="M:System.Fabric.CheckValuePropertyOperation.#ctor(System.String,System.Double)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.CheckValuePropertyOperation"/> class
            with specified <paramref name="propertyName"/> and <see cref="T:System.Double"/> value.</para>
            </summary>
            <param name="propertyName">
            <para>The name of the property.</para>
            </param>
            <param name="value">
            <para>The value of the property.</para>
            </param>
        </member>
        <member name="P:System.Fabric.CheckValuePropertyOperation.PropertyValue">
            <summary>
            <para>Gets the value of the property.</para>
            </summary>
            <value>
            <para>The value of the property.</para>
            </value>
        </member>
        <member name="P:System.Fabric.CheckValuePropertyOperation.PropertyType">
            <summary>
            <para>Gets the type of the property.</para>
            </summary>
            <value>
            <para>The type of the property.</para>
            </value>
        </member>
        <member name="T:System.Fabric.FabricClientRole">
            <summary>
            <para>
            Represents the fabric client security role.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricClientRole.Unknown">
            <summary>
            Indicates unknown permissions.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricClientRole.User">
            <summary>
            <para>
            Indicates user permissions.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricClientRole.Admin">
            <summary>
            <para>
            Indicates administrator permissions.
            </para>
            </summary>
        </member>
        <member name="T:System.Fabric.FabricConstants">
            <summary>
            <para>
            These are constants used by ServiceFabric for various OS Related resources.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricConstants.FabricRegistryKeyPath">
            <summary>
            The registry key path used by Fabric. This is going to be deprecated soon, and no new dependency should be taken on this constant.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricConstants.FabricRegistryKeyPathDeprecated">
            <summary>
            The old (deprecated) registry key path. This is needed for compatibility between components
            that are versioned and deployed independently, e.g. the Azure plugin and the InfrastructureService.
            </summary>
        </member>
        <member name="T:System.Fabric.PartitionDataLossProgress">
            <summary>
            Represents the invoke data loss progress object.
            </summary>
            <remarks>
            This class returns the TestCommandProgressState, Result, and Exception (when in Faulted state). 
            The Result object is only valid when TestCommandProgressState is Completed, Faulted, Cancelled, or ForceCancelled.
            </remarks>
        </member>
        <member name="T:System.Fabric.TestCommandProgress">
            <summary>
            Base class for the progress objects.
            </summary>
            <remarks>
            This class returns the TestCommandProgressState
            </remarks>
        </member>
        <member name="M:System.Fabric.TestCommandProgress.ToString">
            <summary>
            Returns the string representation of the State
            </summary>
            <returns>String representation of the State</returns>
        </member>
        <member name="P:System.Fabric.TestCommandProgress.State">
            <summary>
            Gets the state the test command is currently in       
            </summary>
            <value>An Enum, TestCommandProgressState, which indicates the state the command is in.</value>
        </member>
        <member name="M:System.Fabric.PartitionDataLossProgress.ToString">
            <summary>
            Returns a string representation of the contained information
            </summary>
            <returns>A string that has State, InvokeDataLossResult, and Exception information.
            State is always presnt; but depending on State, the Result and the Exception may not be present.</returns>
        </member>
        <member name="P:System.Fabric.PartitionDataLossProgress.Result">
            <summary>
            Gets the result of a data loss command;
            this is avaliable only when the action is in Completed or Faulted state.
            </summary>
            <value>The PartitionDataLossResult object.</value>
        </member>
        <member name="T:System.Fabric.PartitionQuorumLossProgress">
            <summary>
            Represents the invoke quorum loss progress object.
            </summary>
            <remarks>
            This class returns the TestCommandProgressState, Result, and Exception (when in Faulted state). 
            The Result object is only valid when TestCommandProgressState is Completed, Faulted, Cancelled, or ForceCancelled.
            </remarks>
        </member>
        <member name="M:System.Fabric.PartitionQuorumLossProgress.ToString">
            <summary>
            Returns a string representation of the contained information
            </summary>
            <returns>A string that has State, InvokeQuorumLossResult, and Exception information.
            State is always presnt; but depending on State, the Result and the Exception may not be present.</returns>
        </member>
        <member name="P:System.Fabric.PartitionQuorumLossProgress.Result">
            <summary>
            Gets the result of the invoke quorum loss action;
            this is avaliable only when the action is in Completed or Faulted state.
            </summary>
            <value>The PartitionQuorumLossResult object.</value>
        </member>
        <member name="T:System.Fabric.PartitionRestartProgress">
            <summary>
            Represent the restart partition progress object.
            </summary>
            <remarks>
            This class returns the TestCommandProgressState, Result, and Exception (when in Faulted state). 
            The Result object is only valid when TestCommandProgressState is Completed, Faulted, Cancelled, or ForceCancelled.
            </remarks>
        </member>
        <member name="M:System.Fabric.PartitionRestartProgress.ToString">
            <summary>
            Returns a string representation of the contained information
            </summary>
            <returns>A string that has State, InvokeDataLossResult, and Exception information.
            State is always presnt; but depending on State, the Result and the Exception may not be present.</returns>
        </member>
        <member name="P:System.Fabric.PartitionRestartProgress.Result">
            <summary>
            Gets the result of the restart partition action;
            this is avaliable only when the action is in Completed or Faulted state.
            </summary>
            /// <value>The PartitionRestartResult object.</value>
        </member>
        <member name="M:System.Fabric.RestoreSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.RestoreSettings"/> class.
            </summary>
        </member>
        <member name="T:System.Fabric.TestCommandProgressState">
            <summary>
            This enum indicates the state of a test command.
            </summary>
        </member>
        <member name="F:System.Fabric.TestCommandProgressState.Invalid">
            <summary>
            The test command state is invalid.
            </summary>
        </member>
        <member name="F:System.Fabric.TestCommandProgressState.Running">
            <summary>
            The test command is in progress.
            </summary>
        </member>
        <member name="F:System.Fabric.TestCommandProgressState.RollingBack">
            <summary>
            The test command is rolling back because it encountered a fatal error. 
            </summary>
        </member>
        <member name="F:System.Fabric.TestCommandProgressState.Completed">
            <summary>
            The test command has completed successfully and is no longer running.
            </summary>
        </member>
        <member name="F:System.Fabric.TestCommandProgressState.Faulted">
            <summary>
            The test command has failed and is no longer running
            </summary>
        </member>
        <member name="F:System.Fabric.TestCommandProgressState.Cancelled">
            <summary>
            The test command was cancelled by the user using CancelTestCommandAsync()
            </summary>
        </member>
        <member name="F:System.Fabric.TestCommandProgressState.ForceCancelled">
            <summary>
            The test command was cancelled by the user using CancelTestCommandAsync(), with the force parameter set to true
            </summary>
        </member>
        <member name="T:System.Fabric.TestCommandType">
            <summary>
            The test command type of the queried test command.
            </summary>
        </member>
        <member name="F:System.Fabric.TestCommandType.Invalid">
            <summary>
            Invalid
            </summary>
        </member>
        <member name="F:System.Fabric.TestCommandType.PartitionDataLoss">
            <summary>
            Indicates the test command is for a data loss command
            </summary>
        </member>
        <member name="F:System.Fabric.TestCommandType.PartitionQuorumLoss">
            <summary>
            Indicates the test command is for a quorum loss command
            </summary>
        </member>
        <member name="F:System.Fabric.TestCommandType.PartitionRestart">
            <summary>
            Indicates the test command is for a restart partition command
            </summary>
        </member>
        <member name="T:System.Fabric.UpgradeFailureReason">
            <summary>
            <para>
            Describes possible upgrade failure reasons.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeFailureReason.None">
            <summary>
            <para>
            There is no upgrade failures.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeFailureReason.Interrupted">
            <summary>
            <para>
            The upgrade was interrupted or manually rolled back.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeFailureReason.HealthCheck">
            <summary>
            <para>
            The upgrade failed because of health checks.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeFailureReason.UpgradeDomainTimeout">
            <summary>
            <para>
            The upgrade domain timeout expired.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeFailureReason.OverallUpgradeTimeout">
            <summary>
            <para>
            The overall upgrade timeout expired.
            </para>
            </summary>
        </member>
        <member name="T:System.Fabric.NodeConfiguration">
            <summary>
            <para>
            This class contains APIs for managing the configuration of the node.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.NodeConfiguration.GetNodeConfiguration">
            <summary>
            <para>
            Gets the cluster manifest configured on that node.
            </para>
            </summary>
            <returns>
            <para>Gets the cluster manifest used to configure the node. Returns null if the node has never been configured.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.FabricValidationException">
            <summary>
            Exception thrown by validation APIs in testability
            </summary>
        </member>
        <member name="T:System.Fabric.FabricException">
            <summary>
            <para>The exception that is thrown for Service Fabric error code.</para>
            </summary>
            <remarks>
            <para>Defines an error code property that is used to indicate the precise circumstance that produced the exception.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricException.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricException"/> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricException.#ctor(System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricException"/> class with specified error code.</para>
            </summary>
            <param name="errorCode">
            <para>The error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricException.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricException"/> class with appropriate message.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for this exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricException"/> class with message and error code.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="errorCode">
            <para>The error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricException.#ctor(System.String,System.Exception)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricException"/> class with a message and an inner exception containing detailed information.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for this exception.</para>
            </param>
            <param name="inner">
            <para>The Inner Exception that provides detailed information.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricException"/> class with specified message, inner exception and error code.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The inner exception.</para>
            </param>
            <param name="errorCode">
            <para>The error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricException"/> class from serialized state.</para>
            </summary>
            <param name="info">
            <para>Contains serialized object data about the exception being thrown.</para>
            </param>
            <param name="context">
            <para>Contains contextual information about the source or destination.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricException"/> class with specified info, context and error code.</para>
            </summary>
            <param name="info">
            <para>The  <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object that contains serialized object data about the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The  <see cref="T:System.Runtime.Serialization.StreamingContext"/> object that contains contextual information about the source or destination. The context parameter is reserved for future use, and can be specified as null.</para>
            </param>
            <param name="errorCode">
            <para>The error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="P:System.Fabric.FabricException.ErrorCode">
            <summary>
            <para>Gets the error code parameter.</para>
            </summary>
            <value>
            <para>The error code for Service Fabric.</para>
            </value>
        </member>
        <member name="M:System.Fabric.FabricValidationException.#ctor">
            <summary>
            Default constructor for FabricValidationException
            </summary>
        </member>
        <member name="M:System.Fabric.FabricValidationException.#ctor(System.Fabric.FabricErrorCode)">
            <summary>
            Constructor for FabricValidationException which takes in FabricErrorCode
            </summary>
            <param name="errorCode">FabricErrorCode for the failure</param>
        </member>
        <member name="M:System.Fabric.FabricValidationException.#ctor(System.String)">
            <summary>
            Constructor for FabricValidationException which takes in a message
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:System.Fabric.FabricValidationException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            Constructor for FabricValidationException which takes in a message and FabricErrorCode
            </summary>
            <param name="message">Error message </param>
            <param name="errorCode">Fabric Error code</param>
        </member>
        <member name="M:System.Fabric.FabricValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for FabricValidationException which takes in a message and innner exception
            </summary>
            <param name="message">Error message</param>
            <param name="inner">Inner exception</param>
        </member>
        <member name="M:System.Fabric.FabricValidationException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            Constructor for FabricValidationException which takes in a message and innner exception and fabric error code
            </summary>
            <param name="message">Error message</param>
            <param name="inner">Inner exception</param>
            <param name="errorCode">Fabric error code</param>
        </member>
        <member name="M:System.Fabric.FabricValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            FabricValidationException constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="M:System.Fabric.FabricValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Fabric.FabricErrorCode)">
            <summary>
            FabricValidationException constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
            <param name="errorCode">errorCode</param>
        </member>
        <member name="T:System.Fabric.ClaimsCredentials">
            <summary>
              <para>Represents the claim based security credential acquired from STS (security token service).</para>
            </summary>
        </member>
        <member name="T:System.Fabric.SecurityCredentials">
            <summary>
              <para>An abstract base class for types that represent security credentials.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.SecurityCredentials.CredentialType">
            <summary>
              <para>Indicates the type of security credentials to use in order to secure the cluster – valid values are "none", "x509", "Windows".</para>
            </summary>
            <value>
              <para>The type of security credentials to use in order to secure the cluster.</para>
            </value>
        </member>
        <member name="M:System.Fabric.ClaimsCredentials.#ctor">
            <summary>
              <para>Initializes a new instance of the <see cref="T:System.Fabric.ClaimsCredentials"/> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.ClaimsCredentials.LocalClaims">
            <summary>
              <para>Gets the string representation of claims token acquired from STS (security token service).</para>
            </summary>
            <value>
              <para>The string representation of claims token acquired from STS (security token service).</para>
            </value>
        </member>
        <member name="P:System.Fabric.ClaimsCredentials.ServerCommonNames">
            <summary>
              <para>Gets the expected common names of server certificate.</para>
            </summary>
            <value>
              <para>The expected common names of server certificate.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ClaimsCredentials.ServerThumbprints">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <value>FOR INTERNAL USE ONLY.</value>
        </member>
        <member name="P:System.Fabric.ClaimsCredentials.IssuerThumbprints">
            <summary>
              <para>Gets the certificate thumbprints of server certificate issuer.</para>
            </summary>
            <value>
              <para>The certificate thumbprints of server certificate issuer.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ClaimsCredentials.ProtectionLevel">
            <summary>
              <para>Gets the protection level of communication with server; the default value is <see cref="F:System.Fabric.ProtectionLevel.EncryptAndSign"/>.</para>
            </summary>
            <value>
              <para>The protection level of communication with server.</para>
            </value>
        </member>
        <member name="T:System.Fabric.CodePackageDebugParameters">
            <summary>
            <para>Class for code package debug parameters.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.CodePackageDebugParameters.GetDebugParameters(System.Fabric.CodePackageDebugParameters[])">
            <summary>
              <para>
            Returns JSON string representing CodePackageDebugParameters passed in.
            </para>
            </summary>
            <param name="debugParameters">
              <para>Array of CodePackageDebugParameters that need to be serialized into JSON. </para>
            </param>
            <returns>
              <para>String representation of the debug parameters.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Common.Helpers.IsStatefulService(System.Type)">
            <summary>
            Returns true if it is stateful
            Returns false if it is stateless
            Returns null if it is both IFabricStatefulServiceReplica and IStatelessService
            Returns null if it is neither IFabricStatefulServiceReplica nor IStatelessService
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Helpers.CreateDirectoryIfNotExist(System.String,System.String)">
            <summary>
            Creates the given directory if it doesn't exist on the given machine
            If the machineName is null, the local machine is assumed to be the default
            </summary>
            <param name="directory"></param>
            <param name="machineName"></param>
        </member>
        <member name="M:System.Fabric.Common.Helpers.GetRemotePath(System.String,System.String)">
            <summary>
            Constructs and returns the remote path for the given path in the machine
            For e.g., for path = C:\temp; machineName = VM1, \\VM1\C$\temp will be returned
            if machineName is null, the given path will be returned as it is
            if machineName is IPV6 address, translate it into the format of \\(ipv6address).ipv6-literal.net\share.
            </summary>
            <param name="path"></param>
            <param name="machineName"></param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.Common.Helpers.CopyDirectory(System.String,System.String)">
            <summary>
            Copies the directory specified by sourcePath to the destPath
            For e.g. for sourcePath = C:\temp\package; targetpath = D:\temp,
            this will create D:\temp\package and copy contents of C:\temp\package to D:\temp\package 
            </summary>
            <param name="sourcePath"></param>
            <param name="destPath"></param>
        </member>
        <member name="M:System.Fabric.Common.Helpers.CreateQualifiedNameForAssembly(System.String,System.String)">
            Assembly.CreateQualifiedName is not coreCLRCompliant. Implementation of the method from .NET
            This method creates the name of a type qualified by the display name of its assembly.
        </member>
        <member name="T:System.Fabric.ProtectionLevel">
            <summary>
              <para>Enumerates how communication is protected.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ProtectionLevel.None">
            <summary>
              <para>Not protected.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ProtectionLevel.Sign">
            <summary>
              <para>Only integrity is protected.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ProtectionLevel.EncryptAndSign">
            <summary>
              <para>Both confidentiality and integrity are protected.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Common.ReleaseAssert.Failfast(System.String,System.Object[])">
            <summary>
            Failfast the process
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:System.Fabric.Common.ReleaseAssert.Fail(System.String,System.Object[])">
            <summary>
            Terminate the process after logging debug information.
            </summary>
            <param name="format">The format string for logging.</param>
            <param name="args">The arguments for logging.  If the argument
            object supports IDumpable, this interface will be used to dump
            the object.  Otherwise ToString will be used.</param>
        </member>
        <member name="M:System.Fabric.Common.ReleaseAssert.IsTrue(System.Boolean,System.String,System.Object[])">
            <summary>
            Assert that the condition is true.  Otherwise terminate the process
            after logging debug information.
            </summary>
            <param name="condition">The condition to assert.</param>
            <param name="format">The format string for logging.</param>
            <param name="args">The arguments for logging.  If the argument
            object supports IDumpable, this interface will be used to dump
            the object.  Otherwise ToString will be used.</param>
        </member>
        <member name="M:System.Fabric.Common.ReleaseAssert.IsTrue(System.Boolean,System.String)">
            <summary>
            Assert that the condition is true.  Otherwise terminate the process
            after logging debug information.
            </summary>
            <param name="condition">The condition to assert.</param>
            <param name="format">The format string for logging.</param>
        </member>
        <member name="M:System.Fabric.Common.ReleaseAssert.IsTrue``1(System.Boolean,System.String,``0)">
            <summary>
            Assert that the condition is true.  Otherwise terminate the process
            after logging debug information.
            </summary>
            <param name="condition">The condition to assert.</param>
            <param name="format">The format string for logging.</param>
            <param name="t1">The argument for logging.</param>
        </member>
        <member name="M:System.Fabric.Common.ReleaseAssert.IsTrue``2(System.Boolean,System.String,``0,``1)">
            <summary>
            Assert that the condition is true.  Otherwise terminate the process
            after logging debug information.
            </summary>
            <param name="condition">The condition to assert.</param>
            <param name="format">The format string for logging.</param>
            <param name="t1">The argument for logging.</param>
            <param name="t2">The argument for logging.</param>
        </member>
        <member name="M:System.Fabric.Common.ReleaseAssert.IsTrue``3(System.Boolean,System.String,``0,``1,``2)">
            <summary>
            Assert that the condition is true.  Otherwise terminate the process
            after logging debug information.
            </summary>
            <param name="condition">The condition to assert.</param>
            <param name="format">The format string for logging.</param>
            <param name="t1">The argument for logging.</param>
            <param name="t2">The argument for logging.</param>
            <param name="t3">The argument for logging.</param>
        </member>
        <member name="M:System.Fabric.Common.ReleaseAssert.IsTrue``4(System.Boolean,System.String,``0,``1,``2,``3)">
            <summary>
            Assert that the condition is true.  Otherwise terminate the process
            after logging debug information.
            </summary>
            <param name="condition">The condition to assert.</param>
            <param name="format">The format string for logging.</param>
            <param name="t1">The argument for logging.</param>
            <param name="t2">The argument for logging.</param>
            <param name="t3">The argument for logging.</param>
            <param name="t4">The argument for logging.</param>
        </member>
        <member name="M:System.Fabric.Common.ReleaseAssert.IsTrue``5(System.Boolean,System.String,``0,``1,``2,``3,``4)">
            <summary>
            Assert that the condition is true.  Otherwise terminate the process
            after logging debug information.
            </summary>
            <param name="condition">The condition to assert.</param>
            <param name="format">The format string for logging.</param>
            <param name="t1">The argument for logging.</param>
            <param name="t2">The argument for logging.</param>
            <param name="t3">The argument for logging.</param>
            <param name="t4">The argument for logging.</param>
        </member>
        <member name="M:System.Fabric.Common.ReleaseAssert.IsTrue``6(System.Boolean,System.String,``0,``1,``2,``3,``4,``5)">
            <summary>
            Assert that the condition is true.  Otherwise terminate the process
            after logging debug information.
            </summary>
            <param name="condition">The condition to assert.</param>
            <param name="format">The format string for logging.</param>
            <param name="t1">The argument for logging.</param>
            <param name="t2">The argument for logging.</param>
            <param name="t3">The argument for logging.</param>
            <param name="t4">The argument for logging.</param>
        </member>
        <member name="M:System.Fabric.Common.ReleaseAssert.IsTrue``7(System.Boolean,System.String,``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Assert that the condition is true.  Otherwise terminate the process
            after logging debug information.
            </summary>
            <param name="condition">The condition to assert.</param>
            <param name="format">The format string for logging.</param>
            <param name="t1">The argument for logging.</param>
            <param name="t2">The argument for logging.</param>
            <param name="t3">The argument for logging.</param>
            <param name="t4">The argument for logging.</param>
        </member>
        <member name="M:System.Fabric.Common.ReleaseAssert.IsTrue``8(System.Boolean,System.String,``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Assert that the condition is true.  Otherwise terminate the process
            after logging debug information.
            </summary>
            <param name="condition">The condition to assert.</param>
            <param name="format">The format string for logging.</param>
            <param name="t1">The argument for logging.</param>
            <param name="t2">The argument for logging.</param>
            <param name="t3">The argument for logging.</param>
            <param name="t4">The argument for logging.</param>
        </member>
        <member name="M:System.Fabric.Common.ReleaseAssert.IsTrue(System.Boolean)">
            <summary>
            Assert that the condition is true.  Otherwise terminate the process
            after logging debug information.
            </summary>
            <param name="condition">The condition to assert.</param>
        </member>
        <member name="M:System.Fabric.Common.Requires.ThrowIfNull(System.Object,System.String)">
            <summary>
            Call this method to check if an argument is null and throw <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <param name="argument">The argument to be checked.</param>
            <param name="argumentName">The name of the argument. This should not be null or empty.</param>
            <remarks>For better usability, it is recommended to use this method than <see cref="M:System.Fabric.Common.Requires.ArgumentRequirements`1.NotNull"/>.</remarks>
            <example>connection.ThrowIfArgumentNull("connection");</example>
        </member>
        <member name="M:System.Fabric.Common.Requires.ThrowIfNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Call this method to check if a string argument is null or whitespace and throw 
            <see cref="T:System.ArgumentNullException"/> or <see cref="T:System.ArgumentException"/> respectively.
            </summary>
            <param name="argument">The argument to be checked.</param>
            <param name="argumentName">The name of the argument. This should not be null or empty.</param>
            <remarks>For better usability, it is recommended to use this method than <see cref="M:System.Fabric.Common.Requires.ArgumentRequirements`1.NotNullOrWhiteSpace"/>.</remarks>
            <example>connectionString.ThrowIfArgumentNullOrWhiteSpace("connection");</example>        
        </member>
        <member name="M:System.Fabric.Common.Requires.CheckUInt32ArgumentLimits(System.Int64,System.String)">
            <summary>
            Checks if long argument is within limits of UInt32 type and throws if it's not.
            </summary>
            <param name="argument">The argument to be checked.</param>
            <param name="argumentName">The name of the argument. This should not be null or empty.</param>
        </member>
        <member name="M:System.Fabric.Common.Requires.Throw(System.Exception)">
            <summary>
            Call this method to throw an exception.
            </summary>
            <param name="exception">The exception to be thrown.</param>
            <remarks>
            Calling this method will log the exception and do other common processing, 
            and then it will throw the exception.
            </remarks>
        </member>
        <member name="M:System.Fabric.Common.Requires.ArgumentRequirements`1.NotNull">
            <summary>
            Call this method to check if an argument is null and throw <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <returns>The current instance of this class if the argument is valid.</returns>            
            <remarks>For better usability, it is recommended to use <see cref="M:System.Fabric.Common.Requires.ThrowIfNull(System.Object,System.String)"/> instead of this method.</remarks>
        </member>
        <member name="M:System.Fabric.Common.Requires.ArgumentRequirements`1.NotNullOrWhiteSpace">
            <summary>
            Call this method to check if a string argument is null or whitespace and throw 
            <see cref="T:System.ArgumentNullException"/> or <see cref="T:System.ArgumentException"/> respectively.            
            </summary>
            <returns>The current instance of this class if the argument is valid.</returns>            
            <remarks>For better usability, it is recommended to use <see cref="M:System.Fabric.Common.Requires.ThrowIfNullOrWhiteSpace(System.String,System.String)"/> instead of this method.</remarks>
        </member>
        <member name="T:System.Fabric.NoneSecurityCredentials">
            <summary>
              <para>SecurityCredentials subtype for non-secure mode</para>
            </summary>
        </member>
        <member name="M:System.Fabric.NoneSecurityCredentials.#ctor">
            <summary>
              <para>
            Creates SecurityCredentials object with CredentialType.None.
            </para>
            </summary>
        </member>
        <member name="T:System.Fabric.Common.TemplateHelper">
            <summary>
            TemplateHelper - substitute templated content
            </summary>
        </member>
        <member name="M:System.Fabric.Common.TemplateHelper.ApplyTemplate(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Replaces all occurences of [[VARIABLE]] in templatedData with their associated values in the collection.
            Example: If templated data is "this is a [[VARIABLE_1]] [[VARIABLE_2]] message" and the collection contains
            {"[[VARIABLE_1]]" -> hello} and {"VARIABLE_2" -> world} this function will return
            "this is a hello world message"
            </summary>
            <param name="templatedData"></param>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="T:System.Fabric.Common.Tracing.StructuredEvent">
            <summary>
            Trace level for records and sinks.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.Tracing.Trace">
            <summary>
            Provides API for using trace.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.Trace.PerTaskEvents">
            <summary>
            Max number of events per task.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.Trace.IdFieldName">
            <summary>
            Name of the id field.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.Trace.SetDefaultLevel(System.Fabric.Common.Tracing.TraceSinkType,System.Fabric.Common.Tracing.TraceLevel)">
            <summary>
            Set default level for a sink type.
            </summary>
            <param name="sinkType">Type of the sink.</param>
            <param name="level">Default level for the sink.</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.Trace.SetDefaultSamplingRatio(System.Fabric.Common.Tracing.TraceSinkType,System.Double)">
            <summary>
            Set default sampling ratio for a sink type.
            </summary>
            <param name="sinkType">Type of the sink.</param>
            <param name="samplingRatio">Default sampling ratio for the sink.</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.Trace.AddFilter(System.Fabric.Common.Tracing.TraceSinkType,System.String)">
            <summary>
            Add filter for a sink.
            </summary>
            <param name="sinkType">Type of the sink.</param>
            <param name="filter">The filter to be applied for the sink.
            Syntax: task.event@id:level
            </param>
            <returns>Whether the filter is set correctly.</returns>
        </member>
        <member name="M:System.Fabric.Common.Tracing.Trace.RemoveFilter(System.Fabric.Common.Tracing.TraceSinkType,System.String)">
            <summary>
            Removes all filters based on source.
            </summary>
            <param name="sinkType">Type of the sink.</param>
            <param name="source">The source to be removed.
            Syntax: task.event@id:level
            </param>
            <returns>Whether the filter is removed correctly.</returns>
        </member>
        <member name="M:System.Fabric.Common.Tracing.Trace.InternalAddFilter(System.Fabric.Common.Tracing.TraceSinkType,System.String)">
            <summary>
            Add filter for a sink.
            </summary>
            <param name="sinkType">Type of the sink.</param>
            <param name="filter">The filter to be applied for the sink.
            Syntax: task.event@id:level
            </param>
            <returns>Whether the filter is set correctly.</returns>
        </member>
        <member name="M:System.Fabric.Common.Tracing.Trace.InternalAddFilter(System.Fabric.Common.Tracing.TraceSinkType,System.String,System.String,System.Fabric.Common.Tracing.TraceLevel,System.Int32)">
            <summary>
            Add filter for a sink.
            </summary>
            <param name="sink">Type of the sink.</param>
            <param name="taskName">Task name.</param>
            <param name="eventName">Event name.</param>
            <param name="level">Level for the filter.</param>
            <param name="samplingRatio">Sampling ratio for records below the level.</param>
            <returns>Whether the filter is set correctly.</returns>
        </member>
        <member name="M:System.Fabric.Common.Tracing.Trace.GetEventSource(System.Fabric.Common.Tracing.TraceTaskCodes)">
            <summary>
            Retrieve the TraceEventSource object for a given task.
            </summary>
            <param name="taskId">Task id.</param>
            <returns>The event source object for the given task.</returns>
        </member>
        <member name="M:System.Fabric.Common.Tracing.Trace.GetKeywordString(System.UInt64)">
            <summary>
            Converts the specified numeric keyword to its string name.
            </summary>
            <param name="keyword">The numeric keyword value.</param>
            <returns>The string name of the keyword.</returns>
        </member>
        <member name="M:System.Fabric.Common.Tracing.Trace.GenerateManifest(System.String,System.String,System.String[])">
            <summary>
            Generate the manifest for the events defined.
            </summary>
            <param name="path">The path for the manifest file.</param>
            <param name="targetFile">Path for the manifest target file.</param>
            <param name="inputFiles">Path for other manifest file to be merged.</param>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceChannelType">
            <summary>
            Channel type for ETW tracing.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceChannelType.Admin">
            <summary>
            Admin channel.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceChannelType.Operational">
            <summary>
            Operational channel.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceChannelType.Analytic">
            <summary>
            Analytic channel.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceChannelType.Debug">
            <summary>
            Debug channel.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceEtwSink.EventProviderWrapper">
            <summary>
            This code is mostly copied from .NET implementation with a fix in
            bool type handling and some other minor simplifications.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceEventSource">
            <summary>
            Class encapsulating events defined for a task.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteError(System.String,System.String,System.Object[])">
            <summary>
            Write an error text event.
            </summary>
            <param name="type">Type of the event.</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteErrorWithId(System.String,System.String,System.String,System.Object[])">
            <summary>
            Write an error text event.
            </summary>
            <param name="type">Type of the event.</param>
            <param name="id">The id of the event.</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteExceptionAsError(System.String,System.Exception,System.String,System.Object[])">
            <summary>
            Writes a message with an exception
            </summary>
            <param name="type">Type of the event.</param>
            <param name="ex">The exception to trace</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteExceptionAsError(System.String,System.Exception)">
            <summary>
            Writes a message with an exception
            </summary>
            <param name="type">Type of the event.</param>
            <param name="ex">The exception to trace</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteExceptionAsErrorWithId(System.String,System.String,System.Exception,System.String,System.Object[])">
            <summary>
            Writes a message with an exception  and an id 
            </summary>
            <param name="type">Type of the event.</param>
            <param name="ex">The exception to trace</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteWarning(System.String,System.String,System.Object[])">
            <summary>
            Write a warning text event.
            </summary>
            <param name="type">Type of the event.</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteWarningWithId(System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a warning text event.
            </summary>
            <param name="type">Type of the event.</param>
            <param name="id">The id of the event.</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteExceptionAsWarning(System.String,System.Exception,System.String,System.Object[])">
            <summary>
            Writes a message with an exception
            </summary>
            <param name="type">Type of the event.</param>
            <param name="ex">The exception to trace</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteExceptionAsWarning(System.String,System.Exception)">
            <summary>
            Writes a message with an exception
            </summary>
            <param name="type">Type of the event.</param>
            <param name="ex">The exception to trace</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteExceptionAsWarningWithId(System.String,System.String,System.Exception,System.String,System.Object[])">
            <summary>
            Writes a message with an exception  and an id 
            </summary>
            <param name="type">Type of the event.</param>
            <param name="ex">The exception to trace</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteInfo(System.String,System.String,System.Object[])">
            <summary>
            Write an informational text event.
            </summary>
            <param name="type">Type of the event.</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteInfo(System.String)">
            <summary>
            Write an informational text event.
            </summary>
            <param name="type">Type of the event.</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteInfoWithId(System.String,System.String,System.String,System.Object[])">
            <summary>
            Write an informational text event.
            </summary>
            <param name="type">Type of the event.</param>
            <param name="id">The id of the event.</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteNoise(System.String,System.String,System.Object[])">
            <summary>
            Write a noise text event.
            </summary>
            <param name="type">Type of the event.</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteNoise(System.String)">
            <summary>
            Write a noise text event.
            </summary>
            <param name="type">Type of the event.</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventSource.WriteNoiseWithId(System.String,System.String,System.String,System.Object[])">
            <summary>
            Write a noise text event.
            </summary>
            <param name="type">Type of the event.</param>
            <param name="id">The id of the event.</param>
            <param name="format">Format string.</param>
            <param name="args">The arguments</param>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceEventWriterBase">
            <summary>
            Writer for a structured event with Variant arguments.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventWriterBase.#ctor(System.Fabric.Common.Tracing.TraceTaskCodes,System.UInt16,System.String,System.Fabric.Common.Tracing.TraceLevel,System.Fabric.Common.Tracing.TraceChannelType,System.Fabric.Common.Tracing.TraceKeywords,System.String,System.Collections.Generic.KeyValuePair{System.String,System.Type}[])">
            <summary>
            Constructor.
            </summary>
            <param name="taskCode">Task id.</param>
            <param name="eventId">Event id within the task.</param>
            <param name="eventName">Event name.</param>
            <param name="level">Trace level for the event.</param>
            <param name="channel">Channel for the event.</param>
            <param name="keywords">Keywords for the event.</param>
            <param name="format">Format string for the event.</param>
            <param name="args">Array of argument name and type pairs for manifest.</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventWriterBase.VariantWrite(System.Int32,System.Fabric.Common.Tracing.Variant,System.Fabric.Common.Tracing.Variant,System.Fabric.Common.Tracing.Variant,System.Fabric.Common.Tracing.Variant,System.Fabric.Common.Tracing.Variant,System.Fabric.Common.Tracing.Variant,System.Fabric.Common.Tracing.Variant,System.Fabric.Common.Tracing.Variant,System.Fabric.Common.Tracing.Variant)">
            <summary>
            This is an internal method meant only for the tracing extensions.
            Please add using System.Fabric.Common.Tracing to get Write
            extension methods and add additional methods to 
            TraceEventWriterExtensions.cs.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceEventWriter">
            <summary>
            Writer for a structured event with 0 argument.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventWriter.#ctor(System.Fabric.Common.Tracing.TraceTaskCodes,System.UInt16,System.String,System.Fabric.Common.Tracing.TraceLevel,System.Fabric.Common.Tracing.TraceChannelType,System.Fabric.Common.Tracing.TraceKeywords,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="taskCode">Task id.</param>
            <param name="eventId">Event id within the task.</param>
            <param name="eventName">Event name.</param>
            <param name="level">Trace level for the event.</param>
            <param name="channel">Channel for the event.</param>
            <param name="keywords">Keywords for the event.</param>
            <param name="format">Format string for the event.</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventWriter.Write">
            <summary>
            Write out the event.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceEventWriter`1">
            <summary>
            Writer for a structured event with 1 argument.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventWriter`1.#ctor(System.Fabric.Common.Tracing.TraceTaskCodes,System.UInt16,System.String,System.Fabric.Common.Tracing.TraceLevel,System.Fabric.Common.Tracing.TraceChannelType,System.Fabric.Common.Tracing.TraceKeywords,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="taskCode">Task id.</param>
            <param name="eventId">Event id within the task.</param>
            <param name="eventName">Event name.</param>
            <param name="level">Trace level for the event.</param>
            <param name="channel">Channel for the event.</param>
            <param name="keywords">Keywords for the event.</param>
            <param name="format">Format string for the event.</param>
            <param name="argName0">Name for argument 0.</param>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceEventWriter`2">
            <summary>
            Writer for a structured event with 2 argument.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventWriter`2.#ctor(System.Fabric.Common.Tracing.TraceTaskCodes,System.UInt16,System.String,System.Fabric.Common.Tracing.TraceLevel,System.Fabric.Common.Tracing.TraceChannelType,System.Fabric.Common.Tracing.TraceKeywords,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="taskCode">Task id.</param>
            <param name="eventId">Event id within the task.</param>
            <param name="eventName">Event name.</param>
            <param name="level">Trace level for the event.</param>
            <param name="channel">Channel for the event.</param>
            <param name="keywords">Keywords for the event.</param>
            <param name="format">Format string for the event.</param>
            <param name="argName0">Name for argument 0.</param>
            <param name="argName1">Name for argument 1.</param>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceEventWriter`3">
            <summary>
            Writer for a structured event with 3 argument.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventWriter`3.#ctor(System.Fabric.Common.Tracing.TraceTaskCodes,System.UInt16,System.String,System.Fabric.Common.Tracing.TraceLevel,System.Fabric.Common.Tracing.TraceChannelType,System.Fabric.Common.Tracing.TraceKeywords,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="taskCode">Task id.</param>
            <param name="eventId">Event id within the task.</param>
            <param name="eventName">Event name.</param>
            <param name="level">Trace level for the event.</param>
            <param name="channel">Channel for the event.</param>
            <param name="keywords">Keywords for the event.</param>
            <param name="format">Format string for the event.</param>
            <param name="argName0">Name for argument 0.</param>
            <param name="argName1">Name for argument 1.</param>
            <param name="argName2">Name for argument 2.</param>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceEventWriter`4">
            <summary>
            Writer for a structured event with 4 argument.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventWriter`4.#ctor(System.Fabric.Common.Tracing.TraceTaskCodes,System.UInt16,System.String,System.Fabric.Common.Tracing.TraceLevel,System.Fabric.Common.Tracing.TraceChannelType,System.Fabric.Common.Tracing.TraceKeywords,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="taskCode">Task id.</param>
            <param name="eventId">Event id within the task.</param>
            <param name="eventName">Event name.</param>
            <param name="level">Trace level for the event.</param>
            <param name="channel">Channel for the event.</param>
            <param name="keywords">Keywords for the event.</param>
            <param name="format">Format string for the event.</param>
            <param name="argName0">Name for argument 0.</param>
            <param name="argName1">Name for argument 1.</param>
            <param name="argName2">Name for argument 2.</param>
            <param name="argName3">Name for argument 3.</param>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceEventWriter`5">
            <summary>
            Writer for a structured event with 5 argument.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventWriter`5.#ctor(System.Fabric.Common.Tracing.TraceTaskCodes,System.UInt16,System.String,System.Fabric.Common.Tracing.TraceLevel,System.Fabric.Common.Tracing.TraceChannelType,System.Fabric.Common.Tracing.TraceKeywords,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="taskCode">Task id.</param>
            <param name="eventId">Event id within the task.</param>
            <param name="eventName">Event name.</param>
            <param name="level">Trace level for the event.</param>
            <param name="channel">Channel for the event.</param>
            <param name="keywords">Keywords for the event.</param>
            <param name="format">Format string for the event.</param>
            <param name="argName0">Name for argument 0.</param>
            <param name="argName1">Name for argument 1.</param>
            <param name="argName2">Name for argument 2.</param>
            <param name="argName3">Name for argument 3.</param>
            <param name="argName4">Name for argument 4.</param>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceEventWriter`6">
            <summary>
            Writer for a structured event with 6 argument.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventWriter`6.#ctor(System.Fabric.Common.Tracing.TraceTaskCodes,System.UInt16,System.String,System.Fabric.Common.Tracing.TraceLevel,System.Fabric.Common.Tracing.TraceChannelType,System.Fabric.Common.Tracing.TraceKeywords,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="taskCode">Task id.</param>
            <param name="eventId">Event id within the task.</param>
            <param name="eventName">Event name.</param>
            <param name="level">Trace level for the event.</param>
            <param name="channel">Channel for the event.</param>
            <param name="keywords">Keywords for the event.</param>
            <param name="format">Format string for the event.</param>
            <param name="argName0">Name for argument 0.</param>
            <param name="argName1">Name for argument 1.</param>
            <param name="argName2">Name for argument 2.</param>
            <param name="argName3">Name for argument 3.</param>
            <param name="argName4">Name for argument 4.</param>
            <param name="argName5">Name for argument 5.</param>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceEventWriter`7">
            <summary>
            Writer for a structured event with 7 argument.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventWriter`7.#ctor(System.Fabric.Common.Tracing.TraceTaskCodes,System.UInt16,System.String,System.Fabric.Common.Tracing.TraceLevel,System.Fabric.Common.Tracing.TraceChannelType,System.Fabric.Common.Tracing.TraceKeywords,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="taskCode">Task id.</param>
            <param name="eventId">Event id within the task.</param>
            <param name="eventName">Event name.</param>
            <param name="level">Trace level for the event.</param>
            <param name="channel">Channel for the event.</param>
            <param name="keywords">Keywords for the event.</param>
            <param name="format">Format string for the event.</param>
            <param name="argName0">Name for argument 0.</param>
            <param name="argName1">Name for argument 1.</param>
            <param name="argName2">Name for argument 2.</param>
            <param name="argName3">Name for argument 3.</param>
            <param name="argName4">Name for argument 4.</param>
            <param name="argName5">Name for argument 5.</param>
            <param name="argName6">Name for argument 6.</param>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceEventWriter`8">
            <summary>
            Writer for a structured event with 8 argument.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventWriter`8.#ctor(System.Fabric.Common.Tracing.TraceTaskCodes,System.UInt16,System.String,System.Fabric.Common.Tracing.TraceLevel,System.Fabric.Common.Tracing.TraceChannelType,System.Fabric.Common.Tracing.TraceKeywords,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="taskCode">Task id.</param>
            <param name="eventId">Event id within the task.</param>
            <param name="eventName">Event name.</param>
            <param name="level">Trace level for the event.</param>
            <param name="channel">Channel for the event.</param>
            <param name="keywords">Keywords for the event.</param>
            <param name="format">Format string for the event.</param>
            <param name="argName0">Name for argument 0.</param>
            <param name="argName1">Name for argument 1.</param>
            <param name="argName2">Name for argument 2.</param>
            <param name="argName3">Name for argument 3.</param>
            <param name="argName4">Name for argument 4.</param>
            <param name="argName5">Name for argument 5.</param>
            <param name="argName6">Name for argument 6.</param>
            <param name="argName7">Name for argument 7.</param>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceEventWriter`9">
            <summary>
            Writer for a structured event with 9 argument.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceEventWriter`9.#ctor(System.Fabric.Common.Tracing.TraceTaskCodes,System.UInt16,System.String,System.Fabric.Common.Tracing.TraceLevel,System.Fabric.Common.Tracing.TraceChannelType,System.Fabric.Common.Tracing.TraceKeywords,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="taskCode">Task id.</param>
            <param name="eventId">Event id within the task.</param>
            <param name="eventName">Event name.</param>
            <param name="level">Trace level for the event.</param>
            <param name="channel">Channel for the event.</param>
            <param name="keywords">Keywords for the event.</param>
            <param name="format">Format string for the event.</param>
            <param name="argName0">Name for argument 0.</param>
            <param name="argName1">Name for argument 1.</param>
            <param name="argName2">Name for argument 2.</param>
            <param name="argName3">Name for argument 3.</param>
            <param name="argName4">Name for argument 4.</param>
            <param name="argName5">Name for argument 5.</param>
            <param name="argName6">Name for argument 6.</param>
            <param name="argName7">Name for argument 7.</param>
            <param name="argName8">Name for argument 8.</param>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceKeywords">
            <summary>
            User-defined ETW keywords. Values must be powers of 2, starting with 0x1.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceLevel">
            <summary>
            Trace level for records and sinks.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceLevel.Silent">
            <summary>
            Used for sink only.  The sink is effectively disabled.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceLevel.Critical">
            <summary>
            Critical error level.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceLevel.Error">
            <summary>
            Error level.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceLevel.Warning">
            <summary>
            Warning level.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceLevel.Info">
            <summary>
            Informational level.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceLevel.Noise">
            <summary>
            Noise level.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceSinkType">
            <summary>
            Trace sink types.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceSinkType.ETW">
            <summary>
            ETW sink.  This is the only sink that should be used for production environment.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceSinkType.TextFile">
            <summary>
            Text file sink.  Used mainly in dev environment for convenience.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceSinkType.Console">
            <summary>
            Console sink.  Must be highly filtered.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceSinkType.Max">
            <summary>
            The number of sink types.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceTaskCodes">
            <summary>
            Task id.  They take the most significant 8 bits of event id.
            The name of the task is the same as the enum member defined here.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.General">
            <summary>
            General task for managed code.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.ManagementCommon">
            <summary>
            The trace code for management common library.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.ImageStoreClient">
            <summary>
            The trace code for the Image Store code.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.FabricHost">
            <summary>
            The trace code for the Fabric Host code.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.FabricDeployer">
            <summary>
            The trace code for the Cluster Setup code.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.Test">
            <summary>
            Used by tests which write to Fabric trace session
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.AzureLogCollector">
            <summary>
            The trace code for the Azure Log Collector code.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.SystemFabric">
            <summary>
            The trace code for System.Fabric
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.ImageBuilder">
            <summary>
            The trace code for ImageBuilder
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.FabricDCA">
            <summary>
            The trace code for DCA
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.FabricHttpGateway">
            <summary>
            The trace code for FabricHttpGateway
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.InfrastructureService">
            <summary>
            The trace code for InfrastructureService
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.DSTSTokenValidationService">
            <summary>
            The trace code for DSTS TokenValidationService
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.DSTSClient">
            <summary>
            The trace code for DSTS Client
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.FabricMonSvc">
            <summary>
            The trace code for Monitoring Service
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.TStore">
            <summary>
            Differential store
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.DistributedDictionary">
            <summary>
            Distributed Dictionary 
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.DistributedQueue">
            <summary>
            Distributed Queue 
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.Wave">
            <summary>
            Stream based waves
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.ReliableStream">
            <summary>
            Reliable Streams
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.DistributedVersionedDictionary">
            <summary>
            Distributed Versioned Dictionary 
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.Testability">
            <summary>
            Testability
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.RandomActionGenerator">
            <summary>
            RandomActionGenerator
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.FabricMdsAgentSvc">
            <summary>
            The trace code for MDS agent service
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.TReplicator">
            <summary>
            Transactional replicator
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.TStatefulServiceReplica">
            <summary>
            Stateful service replica that is part of the transactional replicator
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.TStateManager">
            <summary>
            State Manager that is part of the transactional replicator
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.ActorFramework">
            <summary>
            Actor framework
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.WRP">
            <summary>
            State Manager that is part of the transactional replicator
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.ServiceFramework">
            <summary>
            Service Framework (fabsrv)
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.FaultAnalysisService">
            <summary>
            Fault Analysis Service
            </summary>
        </member>
        <member name="F:System.Fabric.Common.Tracing.TraceTaskCodes.Max">
            <summary>
            All valid task id must be below this number.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.Tracing.TraceTextFileSink">
            <summary>
            Sink that writes trace records to text file.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceTextFileSink.SetPath(System.String)">
            <summary>
            Set the path of the text file sink.
            Before the path is set, the sink is effectively disabled.
            </summary>
            <param name="path">Path for the text file where the records are written to.</param>
        </member>
        <member name="M:System.Fabric.Common.Tracing.TraceTextFileSink.SetOption(System.String)">
            <summary>
            Set option for text file sink.
            </summary>
            <param name="option">If 'h' is contained, trace file is truncated
            every hour.
            If 'p' is contained, process id is appended to the file name.
            </param>
        </member>
        <member name="T:System.Fabric.WindowsCredentials">
            <summary>
              <para>Represents the active directory domain credential.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.WindowsCredentials.#ctor">
            <summary>
              <para>Initializes a new instance of the <see cref="T:System.Fabric.WindowsCredentials"/> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.WindowsCredentials.RemoteSpn">
            <summary>
              <para>Gets or sets the service principal name of remote listener, can be left empty if the remote listener runs as machine accounts.</para>
            </summary>
            <value>
              <para>The service principal name of remote listener, can be left empty if the remote listener runs as machine accounts.</para>
            </value>
        </member>
        <member name="P:System.Fabric.WindowsCredentials.RemoteIdentities">
            <summary>
              <para>Gets or sets the list of active directory domain identities of remote clients, each entry can be either account name or group name.</para>
            </summary>
            <value>
              <para>The list of active directory domain identities of remote clients, each entry can be either account name or group name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.WindowsCredentials.ProtectionLevel">
            <summary>
              <para>Gets or sets how communication is protected, default value is <see cref="F:System.Fabric.ProtectionLevel.EncryptAndSign"/>.</para>
            </summary>
            <value>
              <para>The protection level of the credential.</para>
            </value>
        </member>
        <member name="T:System.Fabric.X509Name">
            <summary>
              <para>A type to identify X509 certificate with subject common name or DNS name</para>
            </summary>
        </member>
        <member name="M:System.Fabric.X509Name.#ctor(System.String,System.String)">
            <summary>
              <para>Construct an X509Name object that identifies an X509 certificate</para>
            </summary>
            <param name="name">
              <para>Subject common name or DNS name of X509 certificate</para>
            </param>
            <param name="issuerCertThumbprint">
              <para>Certificate thumbprint to identify issuer</para>
            </param>
        </member>
        <member name="M:System.Fabric.X509Name.Equals(System.Object)">
            <summary>
              <para>Determines whether the specified object is equal to the current object</para>
            </summary>
            <param name="obj">
              <para>The object to compare with the current object</para>
            </param>
            <returns>
              <para>Returns true if the objects are equal, false otherwise.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.X509Name.GetHashCode">
            <summary>
              <para>Compute hash code</para>
            </summary>
            <returns>
              <para>Returns <see cref="T:System.Int32"/> representing the hash code.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.X509Name.Equals(System.Fabric.X509Name)">
            <summary>
              <para>Determines whether the specified object is equal to the current object</para>
            </summary>
            <param name="other">
              <para>The object to compare with the current object</para>
            </param>
            <returns>
              <para>Returns true if the objects are equal, false otherwise.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.X509Name.Name">
            <summary>
              <para>Gets the subject common name or DNS name of X509 certificate</para>
            </summary>
            <value>
              <para>Subject common name or DNS name of X509 certificate</para>
            </value>
        </member>
        <member name="P:System.Fabric.X509Name.IssuerCertThumbprint">
            <summary>
              <para>Gets the certificate thumbprint to identify issuer</para>
            </summary>
            <value>
              <para>Certificate thumbprint to identify issuer</para>
            </value>
        </member>
        <member name="T:System.Fabric.X509Credentials">
            <summary>
              <para>Specifies the security credentials that are based upon X.509 certificates.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.X509Credentials.#ctor">
            <summary>
              <para>Creates a new instance of the <see cref="T:System.Fabric.X509Credentials"/> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.X509Credentials.AllowedCommonNames">
            <summary>
              <para>Deprecated by RemoteCommonNames.</para>
            </summary>
            <value>
              <para>The allowed common names that you want Service Fabric to validate against.</para>
            </value>
        </member>
        <member name="P:System.Fabric.X509Credentials.RemoteX509Names">
            <summary>
              <para>Gets the list of X509Name to validate remote X509Credentials</para>
            </summary>
            <value>
              <para>the list of X509Name to validate remote X509Credentials</para>
            </value>
        </member>
        <member name="P:System.Fabric.X509Credentials.RemoteCommonNames">
            <summary>
              <para>Indicates the expected common names of remote certificates that you want Service Fabric to validate against.</para>
            </summary>
            <value>
              <para>The expected common names of remote certificates that you want Service Fabric to validate against.</para>
            </value>
        </member>
        <member name="P:System.Fabric.X509Credentials.IssuerThumbprints">
            <summary>
              <para>When not empty, this dictates the certificate thumbprints of direct issuer of remote certificates.</para>
            </summary>
            <value>
              <para>The certificate thumbprints of direct issuer of remote certificates.</para>
            </value>
        </member>
        <member name="P:System.Fabric.X509Credentials.RemoteCertThumbprints">
            <summary>
              <para>Gets the list of remote certificate thumbprints, used to validate remote X509Credentials</para>
            </summary>
            <value>
              <para>List of remote certificate thumbprints, used to validate remote X509Credentials</para>
            </value>
        </member>
        <member name="P:System.Fabric.X509Credentials.FindType">
            <summary>
              <para> Specifies how to find local certificate in certificate store.Supported values:FindByThumbprint: find certificate by certificate thumbprintFindBySubjectName: find certificate by subject distinguished name or common name, when subject distinguished name is provided in FindValue, subject name in the certificate must be encoded in ASN encoding due to a restriction in native Windows crypto API. There is no such restriction when common name is provided in FindValue.</para>
            </summary>
            <value>
              <para>The type of security credentials to use to secure the cluster.</para>
            </value>
        </member>
        <member name="P:System.Fabric.X509Credentials.FindValue">
            <summary>
              <para>Specifies the filter value used to search local certificate in certificate store. FindType specifies the type of filter value.</para>
            </summary>
            <value>
              <para>The value of security credentials to use to secure the cluster.</para>
            </value>
        </member>
        <member name="P:System.Fabric.X509Credentials.FindValueSecondary">
            <summary>
              <para>Gets or sets the secondary find value for loading local certificate credential.</para>
            </summary>
            <value>
              <para>The secondary find value for loading local certificate credential.</para>
            </value>
        </member>
        <member name="P:System.Fabric.X509Credentials.StoreLocation">
            <summary>
              <para>Indicates the location of the certificate store.</para>
            </summary>
            <value>
              <para>The location of the certificate store.</para>
            </value>
        </member>
        <member name="P:System.Fabric.X509Credentials.StoreName">
            <summary>
              <para>Indicates the name of the store where the certificate is stored.</para>
            </summary>
            <value>
              <para>The name of the store where the certificate is stored.</para>
            </value>
        </member>
        <member name="P:System.Fabric.X509Credentials.ProtectionLevel">
            <summary>
              <para>Indicates the string value that is used to specify whether the messages in the header and body have integrity and confidentiality guarantees applied to them when they are sent between the nodes of a cluster.</para>
            </summary>
            <value>
              <para>The string value that is used to specify whether the messages in the header and body have integrity and confidentiality guarantees applied to them when they are sent between the nodes of a cluster.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Common.Serialization.JsonCustomizationAttribute.PropertyName">
            Defines the name of current property in JsonString.
        </member>
        <member name="P:System.Fabric.Common.Serialization.JsonCustomizationAttribute.IsIgnored">
            Defines the name of current property in JsonString.
        </member>
        <member name="P:System.Fabric.Common.Serialization.JsonCustomizationAttribute.JsonConverterTypeName">
            Defines the name of current property in JsonString.
        </member>
        <member name="P:System.Fabric.Common.Serialization.JsonCustomizationAttribute.ReCreateMember">
            Defines the name of current property in JsonString.
        </member>
        <member name="P:System.Fabric.Common.Serialization.JsonCustomizationAttribute.AppearanceOrder">
            Defines order of the this property in json string relative to other properties of the defining class.
        </member>
        <member name="T:System.Fabric.Common.ServiceQueryClient.SynchronizedModifyOnce`1">
            Synchronization wrapper around struct type 'T'. 
            Read/Write access are serialized.
            Stored value can be "set" (changed) only once.
        </member>
        <member name="T:System.Fabric.CredentialType">
            <summary>
            <para>Defines the valid kinds of security credentials.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.CredentialType.None">
            <summary>
            <para>No credential defined (default).</para>
            </summary>
        </member>
        <member name="F:System.Fabric.CredentialType.X509">
            <summary>
            <para>The X509 certificate.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.CredentialType.Windows">
            <summary>
            <para>The active directory domain credential.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.CredentialType.Claims">
            <summary>
            <para>The claims token acquired from STS (security token service).</para>
            </summary>
        </member>
        <member name="T:System.Fabric.DeletePropertyOperation">
            <summary>
            <para>Represents a <see cref="T:System.Fabric.PropertyBatchOperation"/> that deletes a specified property if it exists.</para>
            </summary>
            <remarks>
            <para>Note that if one <see cref="T:System.Fabric.PropertyBatchOperation"/> object fails, the entire batch fails 
            and cannot be committed.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.DeletePropertyOperation.#ctor(System.String)">
            <summary>
            <para>Creates and instantiates a <see cref="T:System.Fabric.DeletePropertyOperation"/> object.</para>
            </summary>
            <param name="propertyName">
            <para>The name of the property to be deleted.</para>
            </param>
        </member>
        <member name="T:System.Fabric.DeploymentStatus">
            <summary>
            <para>Specifies the status of the package on the node.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.DeploymentStatus.Invalid">
            <summary>
            <para>The status of the package is not known or invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.DeploymentStatus.Downloading">
            <summary>
            <para>The package is being downloaded to the node from the ImageStore.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.DeploymentStatus.Activating">
            <summary>
            <para>The package is being activated.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.DeploymentStatus.Active">
            <summary>
            <para>The package is active.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.DeploymentStatus.Upgrading">
            <summary>
            <para>The package is being upgraded.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.DeploymentStatus.Deactivating">
            <summary>
            <para>The package is being deactivated.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.ApplicationDescription">
            <summary>
            <para>Describes an application to be created by using 
            <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.CreateApplicationAsync(System.Fabric.Description.ApplicationDescription)"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ApplicationDescription.#ctor">
            <summary>
            <para>Instantiates an instance of <see cref="T:System.Fabric.Description.ApplicationDescription"/> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ApplicationDescription.#ctor(System.Uri,System.String,System.String)">
            <summary>
            <para>Instantiates an instance of <see cref="T:System.Fabric.Description.ApplicationDescription"/> with the application instance name, the application 
            type name, and the application type version.</para>
            </summary>
            <param name="applicationName">
            <para>URI of the application instance name.</para>
            </param>
            <param name="applicationTypeName">
            <para>Name of the application type.</para>
            </param>
            <param name="applicationTypeVersion">
            <para>Version of the application type.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Description.ApplicationDescription.#ctor(System.Uri,System.String,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            <para>Instantiates an instance of <see cref="T:System.Fabric.Description.ApplicationDescription"/> with the application instance name, the application 
            type name, the application type version, and the collection of application parameters.</para>
            </summary>
            <param name="applicationName">
            <para>URI of the application instance name.</para>
            </param>
            <param name="applicationTypeName">
            <para>Name of the application type.</para>
            </param>
            <param name="applicationTypeVersion">
            <para>Version of the application type.</para>
            </param>
            <param name="applicationParameters">
            <para>Collection of name-value pairs for the parameters that are specified in the ApplicationManifest.xml.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Description.ApplicationDescription.ApplicationName">
            <summary>
            <para>Gets or sets the URI name of the application instance.</para>
            </summary>
            <value>
            <para>The application name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ApplicationDescription.ApplicationTypeName">
            <summary>
            <para>Gets or sets the name of the Service Fabric application type.</para>
            </summary>
            <value>
            <para>The application type name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ApplicationDescription.ApplicationTypeVersion">
            <summary>
            <para>Gets or sets the version of the application type.</para>
            </summary>
            <value>
            <para>The application type version.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ApplicationDescription.ApplicationParameters">
            <summary>
            <para>Gets the collection of name-value pairs for the parameters that are specified in the ApplicationManifest.xml.</para>
            </summary>
            <value>
            <para>The collection of name-value pairs for the parameters that are specified in the ApplicationManifest.xml.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ApplicationDescription.ParameterList">
            Wrapper of property ApplicationParameters. Needed for serialization.
        </member>
        <member name="T:System.Fabric.Description.ApplicationHealthQueryDescription">
            <summary>
            <para>Represents the query input for getting application health. Used by 
            <see cref="M:System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Fabric.Description.ApplicationHealthQueryDescription)"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ApplicationHealthQueryDescription.#ctor(System.Uri)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ApplicationHealthQueryDescription"/> class.</para>
            </summary>
            <param name="applicationName">
            <para>The application name. Cannot be <languageKeyword>null</languageKeyword>.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para>A null value was passed in for a required parameter.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.Description.ApplicationHealthQueryDescription.ToString">
            <summary>
            Gets a string representation of the health query description.
            </summary>
            <returns>A string representation of the health query description.</returns>
        </member>
        <member name="P:System.Fabric.Description.ApplicationHealthQueryDescription.ApplicationName">
            <summary>
            <para>Gets the name of the application.</para>
            </summary>
            <value>
            <para>The name of the application.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ApplicationHealthQueryDescription.HealthPolicy">
            <summary>
            <para>Gets or sets the <see cref="T:System.Fabric.Health.ApplicationHealthPolicy"/> used to evaluate the application health.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Health.ApplicationHealthPolicy"/> used to evaluate application health.</para>
            </value>
            <remarks>If not specified, the health store uses the application health policy specified in the application manifest
            to evaluate the application.</remarks>
        </member>
        <member name="P:System.Fabric.Description.ApplicationHealthQueryDescription.EventsFilter">
            <summary>
            <para>Gets or sets the filter for the collection of <see cref="T:System.Fabric.Health.HealthEvent"/> reported on the application. Only events 
            that match the filter will be returned. All events will be used to evaluate the application aggregated health state.</para>
            </summary>
            <value>
            <para>The filter for the collection of <see cref="T:System.Fabric.Health.HealthEvent"/> reported on the application.</para>
            </value>
            <remarks><para> Only events that match 
            the filter will be returned. All events will be used to evaluate the application aggregated health state.
            If the filter is not specified, all events are returned.</para></remarks>
        </member>
        <member name="P:System.Fabric.Description.ApplicationHealthQueryDescription.ServicesFilter">
            <summary>
            <para>Gets or sets the filter for <see cref="T:System.Fabric.Health.ServiceHealthState"/> children. Only children that match the filter will 
            be returned. All children will be used to evaluate the application aggregated health state.</para>
            </summary>
            <value>
            <para>The filter for <see cref="T:System.Fabric.Health.ServiceHealthState"/> children.</para>
            </value>
            <remarks><para> Only children that match the filter will be returned. 
            All children will be used to evaluate the application aggregated health state.
            If the filter is not specified, all service children of the application are returned.</para></remarks>
        </member>
        <member name="P:System.Fabric.Description.ApplicationHealthQueryDescription.DeployedApplicationsFilter">
            <summary>
            <para>Gets or sets the filter for <see cref="T:System.Fabric.Health.DeployedApplicationHealthState"/> children. Only children that match the 
            filter will be returned. All children will be used to evaluate the application aggregated health state.</para>
            </summary>
            <value>
            <para>The filter for <see cref="T:System.Fabric.Health.DeployedApplicationHealthStatesFilter"/> children.</para>
            </value>
            <remarks><para> Only children that match the filter will be returned. 
            All children will be used to evaluate the application aggregated health state.
            If the filter is not specified, all deployed application children of the application are returned.</para></remarks>
        </member>
        <member name="T:System.Fabric.Description.ApplicationParameter">
            <summary>
            <para>Provides an application parameter override to be applied when creating or upgrading an application.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ApplicationParameter.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ApplicationParameter"/> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ApplicationParameter.Name">
            <summary>
            <para>Gets the name of the application parameter to override.</para>
            </summary>
            <value>
            <para>The name of the application parameter to override.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ApplicationParameter.Value">
            <summary>
            <para>Gets the value of the application parameter to override.</para>
            </summary>
            <value>
            <para>The value of the application parameter to override.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.ApplicationParameterList">
            <summary>
            <para>Represents the list of application parameters applied to the current version of the application. Retrieved using 
            <see cref="M:System.Fabric.FabricClient.QueryClient.GetApplicationListAsync(System.Uri)"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ApplicationParameterList.#ctor">
            <summary>
            <para>initializes a new instance of the <see cref="T:System.Fabric.Description.ApplicationParameterList"/> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ApplicationParameterList.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            <para>initializes a new instance of the <see cref="T:System.Fabric.Description.ApplicationParameterList"/> class.</para>
            </summary>
            <param name="comparer">
            <para>The equality comparer.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Description.ApplicationParameterList.#ctor(System.Collections.Generic.IEqualityComparer{System.String},System.Int32)">
            <summary>
            <para>initializes a new instance of the <see cref="T:System.Fabric.Description.ApplicationParameterList"/> class.</para>
            </summary>
            <param name="comparer">
            <para>The equality comparer.</para>
            </param>
            <param name="dictionaryCreationThreshold">
            <para>The creation threshold.</para>
            </param>
        </member>
        <member name="T:System.Fabric.Description.ApplicationPrincipalsDescription">
            <summary>
            <para>Describes the application principals of the service.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ApplicationPrincipalsDescription.#ctor">
            <summary>
            <para>Creates and initializes an <see cref="T:System.Fabric.Description.ApplicationPrincipalsDescription"/> object. </para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ApplicationPrincipalsDescription.Users">
            <summary>
            <para>Gets the users that must be created as a part of the application environment setup in the application manifest.</para>
            </summary>
            <value>
            <para>The users that must be created as a part of the application environment setup in the application manifest.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ApplicationPrincipalsDescription.Groups">
            <summary>
            <para>Gets the groups that must be created as a part of the application environment setup in the application manifest.</para>
            </summary>
            <value>
            <para>The groups that must be created as a part of the application environment setup in the application manifest.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.ApplicationUpgradeDescription">
            <summary>
            <para>Describes the upgrade policy and the application to be upgraded.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ApplicationUpgradeDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ApplicationUpgradeDescription"/> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ApplicationUpgradeDescription.ApplicationName">
            <summary>
            <para>Gets or sets the URI name of the application instance.</para>
            </summary>
            <value>
            <para>The URI name of the application instance.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ApplicationUpgradeDescription.TargetApplicationTypeVersion">
            <summary>
            <para>Gets or sets the version of the application type to which the application instance is upgrading.</para>
            </summary>
            <value>
            <para>The version of the application type to which the application instance is upgrading.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ApplicationUpgradeDescription.UpgradePolicyDescription">
            <summary>
            <para>Gets or sets the description of the policy to be used for upgrading this application instance.</para>
            </summary>
            <value>
            <para>The description of the policy to be used for upgrading this application instance.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ApplicationUpgradeDescription.ApplicationParameters">
            <summary>
            <para>Gets or sets the collection of name-value pairs for the parameters that are specified in the ApplicationManifest.xml.</para>
            </summary>
            <value>
            <para>The collection of name-value pairs for the parameters that are specified in the ApplicationManifest.xml.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ApplicationUpgradeDescription.Parameters">
            Needed for serialization
            ReCreateMember will cause serializer to call setter of the property
            on deserialization rather than adding elements to the existing ParameterList.
            This will allow property "ApplicationParameters" can be populated on deserialization.
        </member>
        <member name="T:System.Fabric.Description.ApplicationUpgradeUpdateDescription">
            <summary>
            <para>Used to modify the upgrade parameters describing the behavior of application upgrades. See 
            <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationUpgradeAsync(System.Fabric.Description.ApplicationUpgradeUpdateDescription)"/>.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.UpgradeUpdateDescriptionBase">
            <summary>
            <para>Represents the base class for <see cref="T:System.Fabric.Description.ApplicationUpgradeUpdateDescription"/> and 
            <see cref="T:System.Fabric.Description.FabricUpgradeUpdateDescription"/>. Used to modify the upgrade parameters describing the behavior 
            of application or cluster upgrades. See <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationUpgradeAsync(System.Fabric.Description.ApplicationUpgradeUpdateDescription)"/> 
            and <see cref="M:System.Fabric.FabricClient.ClusterManagementClient.UpdateFabricUpgradeAsync(System.Fabric.Description.FabricUpgradeUpdateDescription)"/>.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.UpgradeUpdateDescriptionBase.UpgradeMode">
            <summary>
            <para>Gets or sets the new value of <see cref="T:System.Fabric.RollingUpgradeMode"/>.</para>
            </summary>
            <value>
            <para>The new value of <see cref="T:System.Fabric.RollingUpgradeMode"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.UpgradeUpdateDescriptionBase.ForceRestart">
            <summary>
            <para>Gets or sets the new value of <see cref="P:System.Fabric.Description.RollingUpgradePolicyDescription.ForceRestart"/>.</para>
            </summary>
            <value>
            <para>The new value of <see cref="P:System.Fabric.Description.RollingUpgradePolicyDescription.ForceRestart"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.UpgradeUpdateDescriptionBase.UpgradeReplicaSetCheckTimeout">
            <summary>
            <para>Gets or sets the new value of <see cref="P:System.Fabric.Description.RollingUpgradePolicyDescription.UpgradeReplicaSetCheckTimeout"/>.</para>
            </summary>
            <value>
            <para>The new value of <see cref="P:System.Fabric.Description.RollingUpgradePolicyDescription.UpgradeReplicaSetCheckTimeout"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.UpgradeUpdateDescriptionBase.FailureAction">
            <summary>
            <para>Gets or sets the new value of <see cref="T:System.Fabric.UpgradeFailureAction"/>.</para>
            </summary>
            <value>
            <para>The new value of <see cref="T:System.Fabric.UpgradeFailureAction"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.UpgradeUpdateDescriptionBase.HealthCheckWaitDuration">
            <summary>
            <para>Gets or sets the new value of <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.HealthCheckWaitDuration"/>.</para>
            </summary>
            <value>
            <para>The new value of <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.HealthCheckWaitDuration"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.UpgradeUpdateDescriptionBase.HealthCheckStableDuration">
            <summary>
            <para>Gets or sets the new value of <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.HealthCheckStableDuration"/>.</para>
            </summary>
            <value>
            <para>The new value of <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.HealthCheckStableDuration"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.UpgradeUpdateDescriptionBase.HealthCheckRetryTimeout">
            <summary>
            <para>Gets or sets the new value of <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.HealthCheckRetryTimeout"/>.</para>
            </summary>
            <value>
            <para>The new value of <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.HealthCheckRetryTimeout"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.UpgradeUpdateDescriptionBase.UpgradeTimeout">
            <summary>
            <para>Gets or sets the new value of <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.UpgradeTimeout"/>.</para>
            </summary>
            <value>
            <para>The new value of <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.UpgradeTimeout"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.UpgradeUpdateDescriptionBase.UpgradeDomainTimeout">
            <summary>
            <para>Gets or sets the new value of <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.UpgradeDomainTimeout"/>. </para>
            </summary>
            <value>
            <para>The new value of <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.UpgradeDomainTimeout"/>.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Description.ApplicationUpgradeUpdateDescription.#ctor">
            <summary>
            <para>Creates an instance of the <see cref="T:System.Fabric.Description.ApplicationUpgradeUpdateDescription"/> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ApplicationUpgradeUpdateDescription.ApplicationName">
            <summary>
            <para>Gets or sets the name of the application with a current upgrade to modify.</para>
            </summary>
            <value>
            <para>The name of the application with a current upgrade to modify.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ApplicationUpgradeUpdateDescription.HealthPolicy">
            <summary>
            <para>Gets or sets the new value of <see cref="P:System.Fabric.Description.MonitoredRollingApplicationUpgradePolicyDescription.HealthPolicy"/>.</para>
            </summary>
            <value>
            <para>the new value of <see cref="P:System.Fabric.Description.MonitoredRollingApplicationUpgradePolicyDescription.HealthPolicy"/>.</para>
            </value>
            <remarks>The application health policy is used to evaluate the application health.</remarks>
        </member>
        <member name="T:System.Fabric.Description.ClusterHealthQueryDescription">
            <summary>
            <para>Provides query input for getting <see cref="T:System.Fabric.Health.ClusterHealth"/>. Used by 
            <see cref="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.Fabric.Description.ClusterHealthQueryDescription)"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ClusterHealthQueryDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ClusterHealthQueryDescription"/> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ClusterHealthQueryDescription.ToString">
            <summary>
            Gets a string representation of the health query description.
            </summary>
            <returns>A string representation of the health query description.</returns>
        </member>
        <member name="P:System.Fabric.Description.ClusterHealthQueryDescription.HealthPolicy">
            <summary>
            <para>Gets or sets the <see cref="T:System.Fabric.Health.ClusterHealthPolicy"/> used to evaluate the cluster health. The policy 
            will be used to evaluate the aggregated health state of the events reported on cluster as well as the aggregated health states of the nodes.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Health.ClusterHealthPolicy"/> used to evaluate the cluster health.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ClusterHealthQueryDescription.EventsFilter">
            <summary>
            <para>Gets or sets the filter for the collection of <see cref="T:System.Fabric.Health.HealthEvent"/> reported on the cluster.</para>
            </summary>
            <value>
            <para>The filter for the collection of <see cref="T:System.Fabric.Health.HealthEvent"/> reported on the cluster.</para>
            </value>
            <remarks><para> Only events that match 
            the filter will be returned. All events will be used to evaluate the cluster aggregated health state.
            If the filter is not specified, all events are returned.</para></remarks>
        </member>
        <member name="P:System.Fabric.Description.ClusterHealthQueryDescription.NodesFilter">
            <summary>
            <para>Gets or sets the filter for <see cref="T:System.Fabric.Health.NodeHealthState"/> children. Only children that match the filter 
            will be returned.</para>
            </summary>
            <value>
            <para>The filter for <see cref="T:System.Fabric.Health.NodeHealthState"/> children.</para>
            </value>
            <remarks><para> Only nodes that match the filter will be returned. 
            All nodes will be used to evaluate the cluster aggregated health state.
            If the filter is not specified, all cluster nodes are returned.</para></remarks>
        </member>
        <member name="P:System.Fabric.Description.ClusterHealthQueryDescription.ApplicationsFilter">
            <summary>
            <para>Gets or sets the filter for <see cref="T:System.Fabric.Health.ApplicationHealthState"/> children. Only children that match the 
            filter will be returned.</para>
            </summary>
            <value>
            <para>The filter for <see cref="T:System.Fabric.Health.ApplicationHealthState"/> children.</para>
            </value>
            <remarks><para> Only applications that match the filter will be returned. 
            All applications will be used to evaluate the cluster aggregated health state.
            If the filter is not specified, all cluster applications are returned.</para></remarks>
        </member>
        <member name="P:System.Fabric.Description.ClusterHealthQueryDescription.ApplicationHealthPolicyMap">
            <summary>
            <para>Gets the application health policies used to evaluate the health of the applications from the cluster. Each entry specifies 
            as key the application name and as value an <see cref="T:System.Fabric.Health.ApplicationHealthPolicy"/> used to evaluate the 
            application health.</para>
            </summary>
            <value>
            <para>The application health policies used to evaluate the health of the applications from the cluster.</para>
            </value>
            <remarks><para>If an application is not specified in the map, the <see cref="T:System.Fabric.Health.ApplicationHealthPolicy"/> found 
            in its application manifest will be used for evaluation. The map is empty by default.</para></remarks>
        </member>
        <member name="T:System.Fabric.Description.ClusterHealthChunkQueryDescription">
            <summary>
            Describes the cluster health chunk query input.
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ClusterHealthChunkQueryDescription.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Description.ClusterHealthChunkQueryDescription"/> class.
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ClusterHealthChunkQueryDescription.ClusterHealthPolicy">
            <summary>
            Gets or sets the <see cref="T:System.Fabric.Health.ClusterHealthPolicy"/> used to evaluate the cluster health. 
            </summary>
            <value>the <see cref="T:System.Fabric.Health.ClusterHealthPolicy"/> used to evaluate the cluster health.</value>
            <remarks>The policy will be used to evaluate the aggregated health state of the events reported on cluster and the aggregated health state of the nodes.
            If not specified, the cluster health policy described in the manifest or the default cluster health policy are used.</remarks>
        </member>
        <member name="P:System.Fabric.Description.ClusterHealthChunkQueryDescription.ApplicationHealthPolicies">
            <summary>
            Gets the application health policies used to evaluate the health of the applications from the cluster. 
            </summary>
            <value>The application health policies used to evaluate the health of the specified applications.</value>
            <remarks>Each entry specifies as key the application name and as value an ApplicationHealthPolicy used to evaluate the application health.
            If an application is not specified in the map, the ApplicationHealthPolicy found in the application manifest will be used for evaluation. 
            The map is empty by default.
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.ClusterHealthChunkQueryDescription.ApplicationFilters">
            <summary>
            Gets the list of <see cref="T:System.Fabric.Health.ApplicationHealthStateFilter"/> to be applied to the application children health states.
            </summary>
            <value>The list of <see cref="T:System.Fabric.Health.ApplicationHealthStateFilter"/> to be applied to the application children health states.</value>
            <remarks>The list can contain one default application filter and/or application filters for specific applications to fine-grain entities returned by the query.
            All application children that match the filter will be returned as children of the service.
            If empty, the children are not returned by default.</remarks>
        </member>
        <member name="P:System.Fabric.Description.ClusterHealthChunkQueryDescription.NodeFilters">
            <summary>
            Gets the list of <see cref="T:System.Fabric.Health.NodeHealthStateFilter"/> to be applied to the node children health states.
            </summary>
            <value>The list of <see cref="T:System.Fabric.Health.NodeHealthStateFilter"/> to be applied to the node children health states.</value>
            <remarks>
            All node children that match the filter will be returned as children of the service.
            If empty, the children are not returned by default.</remarks>
        </member>
        <member name="T:System.Fabric.Description.CodePackageDescription">
            <summary>
            <para>Describes a code package that includes its entry point.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.PackageDescription">
            <summary>
            <para>Represents a base class for all package descriptions.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.PackageDescription.Name">
            <summary>
            <para>Specifies the name of the package.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.PackageDescription.Version">
            <summary>
            <para>Specifies the version of the package.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.PackageDescription.ServiceManifestName">
            <summary>
            <para>Specifies the name of the service manifest.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.PackageDescription.ServiceManifestVersion">
            <summary>
            <para>Specifies the service manifest version.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.PackageDescription.Path">
            <summary>
            <para>Specifies the path to the package.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.CodePackageDescription.SetupEntryPoint">
            <summary>
            <para>Describes that the <see cref="P:System.Fabric.Description.CodePackageDescription.SetupEntryPoint"/> property is configurable for each code package in a service manifest. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String"/>.</para>
            </value>
            <remarks>
            <para>Service Fabric  provides support for an additional entry point for application/service developers to configure and set up the 
            environment for their services before the main entry point starts.  </para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.CodePackageDescription.EntryPoint">
            <summary>
            <para>Describes the entry point that is specified in the code package.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.Description.EntryPointDescription"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.CodePackageDescription.IsShared">
            <summary>
            Gets a flag indicating whether the code package is shared.
            </summary>
            <value>Flag indicating whether the code package is shared.</value>
        </member>
        <member name="T:System.Fabric.Description.CodePackageEntryPointKind">
            <summary>
            <para>Enumerates the possible types of entry points.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.CodePackageEntryPointKind.Invalid">
            <summary>
            <para>Indicates that the HOST Type is invalid. Do not use.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.CodePackageEntryPointKind.None">
            <summary>
            <para>Indicates that the HOST Type is None.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.CodePackageEntryPointKind.Exe">
            <summary>
            <para>Indicates that the HOST Type is EXE. </para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.CodePackageEntryPointKind.DllHost">
            <summary>
            <para>Indicates that the HOST Type is DLL. </para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.DllHostIsolationPolicy">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.DllHostIsolationPolicy.Invalid">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.DllHostIsolationPolicy.SharedDomain">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.DllHostIsolationPolicy.DedicatedDomain">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.DllHostIsolationPolicy.DedicatedProcess">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.ConfigurationPackageDescription">
            <summary>
            <para>Describes a configuration package.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ConfigurationPackageDescription.Settings">
            <summary>
            <para>DEPRECATED. Gets the parsed configuration settings from the configuration package.</para>
            </summary>
            <value>
            <para>The parsed configuration settings from the configuration package.</para>
            </value>
            <remarks>This property is obsolete. Use Settings property of System.Fabric.ConfigurationPackage type instead.</remarks>
        </member>
        <member name="T:System.Fabric.Description.ConfigurationProperty">
            <summary>
            <para>Specifies a name-value pair that is used to configure a service or application.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ConfigurationProperty.DecryptValue">
            <summary>
            <para>Specifies the method to decrypt the encrypted value.</para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.Security.SecureString"/>.</para>
            </returns>
            <exception cref="T:System.InvalidOperationException">
            <para>The value of the <see cref="T:System.Fabric.Description.ConfigurationProperty"/> is not encrypted.</para>
            </exception>
        </member>
        <member name="P:System.Fabric.Description.ConfigurationProperty.Name">
            <summary>
            <para>Specifies the name of the setting.</para>
            </summary>
            <value>
            <para>The name of the setting.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ConfigurationProperty.Value">
            <summary>
            <para>Gets the value of the setting.</para>
            </summary>
            <value>
            <para>The value of the setting.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ConfigurationProperty.MustOverride">
            <summary>
            <para>Gets a flag indicating whether the setting must be overridden in the application manifest.</para>
            </summary>
            <value>
            <para>Flag indicating whether the setting must be overridden in the application manifest.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ConfigurationProperty.IsEncrypted">
            <summary>
            <para>Specifies whether the configuration is encrypted. </para>
            </summary>
            <value>
            <para>Returns true if the configuration is encrypted; false, otherwise.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.ConfigurationSection">
            <summary>
            <para>Specifies a named collection of configuration properties.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ConfigurationSection.Name">
            <summary>
            <para> The name of the section. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ConfigurationSection.Parameters">
            <summary>
            <para>The key/value pair of a configuration property. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Collections.ObjectModel.KeyedCollection`2"/>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.ConfigurationSettings">
            <summary>
            <para>Describes the configuration settings.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ConfigurationSettings.Sections">
            <summary>
            <para>Gets the name/value pair collection of the sections. </para>
            </summary>
            <value>
            <para>the name/value pair collection of the sections.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.DataPackageDescription">
            <summary>
            <para>Describes a data package. </para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.DeployedApplicationHealthQueryDescription">
            <summary>
            <para>Describes query input for getting <see cref="T:System.Fabric.Health.DeployedApplicationHealth"/>. Used by 
            <see cref="M:System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Fabric.Description.DeployedApplicationHealthQueryDescription)"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.DeployedApplicationHealthQueryDescription.#ctor(System.Uri,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.DeployedApplicationHealthQueryDescription"/> class.</para>
            </summary>
            <param name="applicationName">
            <para>The application name. Cannot be null.</para>
            </param>
            <param name="nodeName">
            <para>The node name. Cannot be null or empty.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para>A required parameter can’t be null.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>A required parameter can't be empty.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.Description.DeployedApplicationHealthQueryDescription.ToString">
            <summary>
            Gets a string representation of the health query description.
            </summary>
            <returns>A string representation of the health query description.</returns>
        </member>
        <member name="P:System.Fabric.Description.DeployedApplicationHealthQueryDescription.ApplicationName">
            <summary>
            <para>Gets the name of the application.</para>
            </summary>
            <value>
            <para>The name of the application.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.DeployedApplicationHealthQueryDescription.NodeName">
            <summary>
            <para>Gets the node name.</para>
            </summary>
            <value>
            <para>The node name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.DeployedApplicationHealthQueryDescription.HealthPolicy">
            <summary>
            <para>Gets or sets the <see cref="T:System.Fabric.Health.ApplicationHealthPolicy"/> used to evaluate the deployed application health.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Health.ApplicationHealthPolicy"/> used to evaluate health.</para>
            </value>
            <remarks>If not specified, the health store uses the application health policy or the parent application to evaluate the deployed application.
            The application health policy is specified in the application manifest.
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.DeployedApplicationHealthQueryDescription.EventsFilter">
            <summary>
            <para>Gets or sets the filter for the collection of <see cref="T:System.Fabric.Health.HealthEvent"/> reported on the deployed application. 
            Only events that match the filter will be returned.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Health.HealthEventsFilter"/> used to filter returned events.</para>
            </value>
            <remarks><para> Only events that match 
            the filter will be returned. All events will be used to evaluate the application aggregated health state.
            If the filter is not specified, all events are returned.</para></remarks>
        </member>
        <member name="P:System.Fabric.Description.DeployedApplicationHealthQueryDescription.DeployedServicePackagesFilter">
            <summary>
            <para>Gets or sets the filter for <see cref="T:System.Fabric.Health.DeployedServicePackageHealthState"/> children. Only children that 
            match the filter will be returned.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Health.DeployedServicePackageHealthStatesFilter"/> used to filter returned deployed service packages.</para>
            </value>
            <remarks><para> Only children that match the filter will be returned. 
            All children will be used to evaluate the deployed application aggregated health state.
            If the filter is not specified, all deployed service package children of the deployed application are returned.</para></remarks>
        </member>
        <member name="T:System.Fabric.Description.DeployedServicePackageHealthQueryDescription">
            <summary>
            <para>Describes the query input for getting <see cref="T:System.Fabric.Health.DeployedServicePackageHealth"/>. Used by 
            <see cref="M:System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Fabric.Description.DeployedServicePackageHealthQueryDescription)"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.DeployedServicePackageHealthQueryDescription.#ctor(System.Uri,System.String,System.String)">
            <summary>
            <para>Instantiates a <see cref="T:System.Fabric.Description.DeployedServicePackageHealthQueryDescription"/> class.</para>
            </summary>
            <param name="applicationName">
            <para>The application name. Cannot be null.</para>
            </param>
            <param name="nodeName">
            <para>The node name. Cannot be null or empty.</para>
            </param>
            <param name="serviceManifestName">
            <para>The service manifest name. Cannot be null or empty.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para>A required parameter can’t be null.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>A required parameter can't be empty.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.Description.DeployedServicePackageHealthQueryDescription.ToString">
            <summary>
            Gets a string representation of the health query description.
            </summary>
            <returns>A string representation of the health query description.</returns>
        </member>
        <member name="P:System.Fabric.Description.DeployedServicePackageHealthQueryDescription.ApplicationName">
            <summary>
            <para>Gets the name of the application.</para>
            </summary>
            <value>
            <para>The name of the application.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.DeployedServicePackageHealthQueryDescription.NodeName">
            <summary>
            <para>Gets the node name.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.String"/> representing the node name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.DeployedServicePackageHealthQueryDescription.ServiceManifestName">
            <summary>
            <para>Gets the service manifest name.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.String"/> representing the service manifest name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.DeployedServicePackageHealthQueryDescription.HealthPolicy">
            <summary>
            <para>Gets or sets the <see cref="T:System.Fabric.Health.ApplicationHealthPolicy"/> used to evaluate the health.</para>
            </summary>
            <value>
            <para>The  <see cref="T:System.Fabric.Health.ApplicationHealthPolicy"/> used to evaluate health.</para>
            </value>
            <remarks>If not specified, the health store uses the application health policy of the parent application
            to evaluate the deployed service package health.</remarks>
        </member>
        <member name="P:System.Fabric.Description.DeployedServicePackageHealthQueryDescription.EventsFilter">
            <summary>
            <para>Gets or sets the filter for the collection of <see cref="T:System.Fabric.Health.HealthEvent"/> reported on the deployed service 
            package. Only events that match the filter will be returned. All events will be used to evaluate the aggregated health state.</para>
            </summary>
            <value>
            <para>The  <see cref="T:System.Fabric.Health.HealthEventsFilter"/> used to filter returned events.</para>
            </value>
            <remarks><para> Only events that match 
            the filter will be returned. All events will be used to evaluate the entity aggregated health state.
            If the filter is not specified, all events are returned.</para></remarks>
        </member>
        <member name="T:System.Fabric.Description.DllHostEntryPointDescription">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.EntryPointDescription">
            <summary>
            <para>Describes an entry point that is associated with a code package.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.EntryPointDescription.#ctor(System.Fabric.Description.CodePackageEntryPointKind)">
            <summary>
            <para>Creates and initializes an <see cref="P:System.Fabric.Description.EntryPointDescription.Kind"/> object with the specified 
            <see cref="T:System.Fabric.Description.CodePackageEntryPointKind"/>.</para>
            </summary>
            <param name="kind">
            <para>A <see cref="T:System.Fabric.Description.CodePackageEntryPointKind"/> specifying the type of entry point.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Description.EntryPointDescription.Kind">
            <summary>
            <para>Indicates an entry point type.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.Description.CodePackageEntryPointKind"/>.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Description.DllHostEntryPointDescription.ToString">
            <summary>
            <para> Reserved for future use.</para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.String"/>.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Description.DllHostEntryPointDescription.IsolationPolicy">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.Description.DllHostIsolationPolicy"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.DllHostEntryPointDescription.HostedDlls">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Collections.Generic.ICollection`1"/>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.DllHostHostedDllDescription">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.DllHostHostedDllDescription.#ctor(System.Fabric.Description.DllHostHostedDllKind)">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
            <param name="kind">
            <para>Reserved for future use.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Description.DllHostHostedDllDescription.Kind">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.Description.DllHostHostedDllKind"/>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.DllHostHostedUnmanagedDllDescription">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.DllHostHostedUnmanagedDllDescription.ToString">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.String"/>.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Description.DllHostHostedUnmanagedDllDescription.DllName">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String"/>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.DllHostHostedManagedDllDescription">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.DllHostHostedManagedDllDescription.ToString">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.String"/>.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Description.DllHostHostedManagedDllDescription.AssemblyName">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String"/>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.DllHostHostedDllKind">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.DllHostHostedDllKind.Invalid">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.DllHostHostedDllKind.Unmanaged">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.DllHostHostedDllKind.Managed">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.EndpointResourceDescription">
            <summary>
            <para>Describes the endpoint resource.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.EndpointResourceDescription.Name">
            <summary>
            <para>Gets or sets the name of the endpoint.</para>
            </summary>
            <value>
            <para>The name of the endpoint.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.EndpointResourceDescription.Protocol">
            <summary>
            <para>Gets the protocol used by this endpoint.</para>
            </summary>
            <value>
            <para>The protocol used by this endpoint.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.EndpointResourceDescription.EndpointType">
            <summary>
            <para>Gets the type of the endpoint.</para>
            </summary>
            <value>
            <para>The type of the endpoint.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.EndpointResourceDescription.Certificate">
            <summary>
            <para>Do not use. This property is not supported.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.EndpointResourceDescription.Port">
            <summary>
            <para>Gets the port assigned for this endpoint.</para>
            </summary>
            <value>
            <para>The port assigned for this endpoint.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.EndpointProtocol">
            <summary>
            <para>Enumerates the kinds of endpoint protocols.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.EndpointProtocol.Http">
            <summary>
            <para>Indicates an HTTP endpoint.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.EndpointProtocol.Https">
            <summary>
            <para>Indicates an HTTPS endpoint.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.EndpointProtocol.Tcp">
            <summary>
            <para>Indicates a TCP endpoint.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.EndpointType">
            <summary>
            <para>Enumerates the kinds of endpoint types.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.EndpointType.Input">
            <summary>
            <para>Indicates an external facing endpoint.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.EndpointType.Internal">
            <summary>
            <para>Indicates an internal facing endpoint.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.ExeHostEntryPointDescription">
            <summary>
            <para>Provides information about the executable entry point.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ExeHostEntryPointDescription.ToString">
            <summary>
            <para>Gets the string representation of this entry point.</para>
            </summary>
            <returns>
            <para>The string representation of this entry point.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Description.ExeHostEntryPointDescription.Program">
            <summary>
            <para>Gets or sets the executable name as specified in the service manifest.</para>
            </summary>
            <value>
            <para>The executable name as specified in the service manifest.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ExeHostEntryPointDescription.Arguments">
            <summary>
            <para>Gets or sets the arguments passed to the executable as specified in the service manifest. </para>
            </summary>
            <value>
            <para>The arguments passed to the executable as specified in the service manifest.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ExeHostEntryPointDescription.WorkingFolder">
            <summary>
            <para>Gets or sets the working folder for the executable as specified in the service manifest.</para>
            </summary>
            <value>
            <para>The working folder for the executable as specified in the service manifest.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ExeHostEntryPointDescription.ConsoleRedirectionEnabled">
            <summary>
            <para>Gets or sets a value that indicates whether to enable or disable console redirection for executables. Default is <languageKeyword>false</languageKeyword>.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> to enable console redirection for executables; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ExeHostEntryPointDescription.ConsoleRedirectionFileRetentionCount">
            <summary>
            <para>Gets or sets the maximum number of files used for console redirection before overwriting content in circular way. </para>
            </summary>
            <value>
            <para>The maximum number of files used for console redirection before overwriting content in circular way.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ExeHostEntryPointDescription.ConsoleRedirectionFileMaxSizeInKb">
            <summary>
            <para>Gets or sets the maximum size in KB for console redirection file.</para>
            </summary>
            <value>
            <para>The maximum size in KB for console redirection file.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ExeHostEntryPointDescription.PeriodicInterval">
            <summary>
            <para>Gets or sets the time period, if executable needs to be activated periodically. </para>
            </summary>
            <value>
            <para>The time period the executable needs to be activated periodically.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.ExeHostWorkingFolder">
            <summary>
            <para>Enumerates the possible start folder types.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ExeHostWorkingFolder.Invalid">
            <summary>
            <para>Do not use.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ExeHostWorkingFolder.Work">
            <summary>
            <para>Indicates that the start folder is the application’s work folder.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ExeHostWorkingFolder.CodePackage">
            <summary>
            <para>Indicates that the start folder is the Code Package’s folder.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ExeHostWorkingFolder.CodeBase">
            <summary>
            <para>Indicates that the start folder is from where the executable / program that is specified in the ExeHost is loaded. This folder can differ 
            from the Code Package folder if there are multiple levels in the Code Package folder and a specified program is from one of the nested folders.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.FabricUpgradeDescription">
            <summary>
            <para>Represents a class to encapsulate a Service Fabric upgrade description.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.FabricUpgradeDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.FabricUpgradeDescription"/> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.FabricUpgradeDescription.TargetCodeVersion">
            <summary>
            <para>Gets or sets the target code version for the Service Fabric upgrade.</para>
            </summary>
            <value>
            <para>The target code version for the Service Fabric upgrade.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.FabricUpgradeDescription.TargetConfigVersion">
            <summary>
            <para>Gets or sets the target configuration version for the Service Fabric upgrade.</para>
            </summary>
            <value>
            <para>The target configuration version for the Service Fabric upgrade.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.FabricUpgradeDescription.UpgradePolicyDescription">
            <summary>
            <para>Gets or sets the upgrade policy description.</para>
            </summary>
            <value>
            <para>The upgrade policy description.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.FabricUpgradeUpdateDescription">
            <summary>
            <para>Used to modify the upgrade parameters describing the behavior cluster upgrades.
            See <see cref="M:System.Fabric.FabricClient.ClusterManagementClient.UpdateFabricUpgradeAsync(System.Fabric.Description.FabricUpgradeUpdateDescription)"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.FabricUpgradeUpdateDescription.#ctor">
            <summary>
            <para>Creates an instance of the <see cref="T:System.Fabric.Description.FabricUpgradeUpdateDescription"/> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.FabricUpgradeUpdateDescription.HealthPolicy">
            <summary>
            <para>Gets or sets the <see cref="P:System.Fabric.Description.MonitoredRollingFabricUpgradePolicyDescription.HealthPolicy"/>.</para>
            </summary>
            <value>
            <para>The cluster health policy used to evaluate cluster health during upgrade.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.FabricUpgradeUpdateDescription.EnableDeltaHealthEvaluation">
            <summary>
            <para>Gets or sets a flag indicating whether delta evaluation is enabled.</para>
            </summary>
            <value>
            <para><languageKeyword>true</languageKeyword> when delta health evaluation is enabled; <languageKeyword>false</languageKeyword> otherwise.</para>
            </value>
            <remarks>
            <para>When delta evaluation is enabled, the cluster health evaluation ensures that the degradation of health respects tolerated limits,
            both globally, across all nodes, and per each upgrade domain that is evaluated. The tolerated thresholds are specified in 
            <see cref="T:System.Fabric.Health.ClusterUpgradeHealthPolicy"/>.</para>
            <para>Delta evaluation is disabled by default.</para></remarks>
        </member>
        <member name="P:System.Fabric.Description.FabricUpgradeUpdateDescription.UpgradeHealthPolicy">
            <summary>
            <para>Gets or sets the <see cref="P:System.Fabric.Description.MonitoredRollingFabricUpgradePolicyDescription.UpgradeHealthPolicy"/>.</para>
            </summary>
            <value>
            <para>The cluster upgrade health policy used to evaluate cluster health during upgrade.</para>
            </value>
            <remarks><para>
            The upgrade health policy is used when <see cref="P:System.Fabric.Description.FabricUpgradeUpdateDescription.EnableDeltaHealthEvaluation"/> is set to <languageKeyword>true</languageKeyword>. 
            The delta evaluation is disabled by default.
            </para></remarks>
        </member>
        <member name="T:System.Fabric.Description.MonitoredRollingApplicationUpgradePolicyDescription">
            <summary>
            <para>Describes the behavior to use when performing an application upgrade.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.MonitoredRollingUpgradePolicyDescription">
            <summary>
            <para>Specifies the behavior to use when performing a monitored application or cluster upgrade.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.RollingUpgradePolicyDescription">
            <summary>
            <para>Description of the rolling upgrade policy.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.UpgradePolicyDescription">
            <summary>
            <para>Describes the upgrade policy of the service.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.UpgradePolicyDescription.#ctor(System.Fabric.Description.UpgradeKind)">
            <summary>
            <para>Initializes an instance of the <see cref="T:System.Fabric.Description.UpgradePolicyDescription"/> class with the upgrade kind.</para>
            </summary>
            <param name="kind">
            <para>
                <see cref="T:System.Fabric.Description.UpgradeKind"/>: Describes the kind of upgrade.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Description.UpgradePolicyDescription.Kind">
            <summary>
            <para>Specifies the kind of application upgrade.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.Description.UpgradeKind"/>.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Description.RollingUpgradePolicyDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.RollingUpgradePolicyDescription"/> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.RollingUpgradePolicyDescription.UpgradeMode">
            <summary>
            <para>Type: <see cref="T:System.Fabric.RollingUpgradeMode"/>Specifies the types of upgrade (<see cref="T:System.Fabric.RollingUpgradeMode"/>) to be 
            used for upgrading the application instance. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.RollingUpgradeMode"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.RollingUpgradePolicyDescription.ForceRestart">
            <summary>
            <para>Specifies if the service host should be restarted even though if there is not code package changes as part of the upgrade. Set this flag to 
            true if the service cannot dynamically accept config or data package changes.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Boolean"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.RollingUpgradePolicyDescription.UpgradeReplicaSetCheckTimeout">
            <summary>
            <para>Specifies the duration Service Fabric should wait before upgrading the services of an application instance in the upgrade domain if the 
            services does not have quorum.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.TimeSpan"/>.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Description.MonitoredRollingUpgradePolicyDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.MonitoredRollingUpgradePolicyDescription"/> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.MonitoredRollingUpgradePolicyDescription.MonitoringPolicy">
            <summary>
            <para>Gets or sets the monitoring policy to apply.</para>
            </summary>
            <value>
            <para>The monitoring policy to apply.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Description.MonitoredRollingApplicationUpgradePolicyDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.MonitoredRollingApplicationUpgradePolicyDescription"/> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.MonitoredRollingApplicationUpgradePolicyDescription.HealthPolicy">
            <summary>
            <para>Gets or sets the health policy to use when performing health checks against an upgrading application.</para>
            </summary>
            <value>
            <para>The health policy to use when performing health checks against an upgrading application.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.MonitoredRollingFabricUpgradePolicyDescription">
            <summary>
            <para>Class to encapsulate a monitored rolling Service Fabric upgrade policy.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.MonitoredRollingFabricUpgradePolicyDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.MonitoredRollingFabricUpgradePolicyDescription"/> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.MonitoredRollingFabricUpgradePolicyDescription.HealthPolicy">
            <summary>
            <para>Gets or sets the health policy for this rolling fabric upgrade.</para>
            </summary>
            <value>
            <para>The health policy for this rolling fabric upgrade.</para>
            </value>
            <remarks>The cluster health policy is used to evaluate cluster health.</remarks>
        </member>
        <member name="P:System.Fabric.Description.MonitoredRollingFabricUpgradePolicyDescription.EnableDeltaHealthEvaluation">
            <summary>
            <para>Gets or sets a flag indicating whether delta evaluation is enabled.</para>
            </summary>
            <value>
            <para><languageKeyword>true</languageKeyword> when delta health evaluation is enabled; <languageKeyword>false</languageKeyword> otherwise.</para>
            </value>
            <remarks>
            <para>When delta evaluation is enabled, the cluster health evaluation ensures that the degradation of health respects tolerated limits,
            both globally, across all nodes, and per each upgrade domain that is evaluated. The tolerated thresholds are specified in 
            <see cref="T:System.Fabric.Health.ClusterUpgradeHealthPolicy"/>.</para>
            <para>Delta evaluation is disabled by default.</para></remarks>
        </member>
        <member name="P:System.Fabric.Description.MonitoredRollingFabricUpgradePolicyDescription.UpgradeHealthPolicy">
            <summary>
            <para>Gets or sets the upgrade health policy for this rolling fabric upgrade.</para>
            </summary>
            <value>
            <para>The cluster upgrade health policy used to evaluate cluster health during upgrade.</para>
            </value>
            <remarks><para>
            The upgrade health policy is used when <see cref="P:System.Fabric.Description.MonitoredRollingFabricUpgradePolicyDescription.EnableDeltaHealthEvaluation"/> is set to <languageKeyword>true</languageKeyword>. 
            The delta evaluation is disabled by default.
            </para></remarks>
        </member>
        <member name="T:System.Fabric.Description.NamedPartitionSchemeDescription">
            <summary>
            <para>Describes the named partition scheme of the service.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.PartitionSchemeDescription">
            <summary>
            <para>Describes how the service is partitioned. This is the parent entity from which the actual partitioning scheme descriptions are derived.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.PartitionSchemeDescription.#ctor(System.Fabric.Description.PartitionScheme)">
            <summary>
            <para>Instantiates a <see cref="T:System.Fabric.Description.PartitionSchemeDescription"/> class. </para>
            </summary>
            <param name="scheme">
            <para>
                <see cref="T:System.Fabric.Description.PartitionScheme"/> defines the kind of partition scheme.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Description.PartitionSchemeDescription.#ctor(System.Fabric.Description.PartitionSchemeDescription)">
            <summary>
            <para>
            Instantiates a <see cref="T:System.Fabric.Description.PartitionSchemeDescription"/> class with parameters from another 
            <see cref="T:System.Fabric.Description.PartitionSchemeDescription"/> object.
            </para>
            </summary>
            <param name="other">
            <para>The partition scheme description from which parameters are copied.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Description.PartitionSchemeDescription.Scheme">
            <summary>
            <para>Specifies how the service is partitioned. A common use is that it enables programmers to cast the description into 
            <see cref="T:System.Fabric.Description.SingletonPartitionSchemeDescription"/>, <see cref="T:System.Fabric.Description.NamedPartitionSchemeDescription"/>, 
            or <see cref="T:System.Fabric.Description.UniformInt64RangePartitionSchemeDescription"/>.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.Description.PartitionScheme"/>.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Description.NamedPartitionSchemeDescription.#ctor">
            <summary>
            <para>Instantiates a new instance of the <see cref="T:System.Fabric.Description.NamedPartitionSchemeDescription"/> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.NamedPartitionSchemeDescription.PartitionNames">
            <summary>
            <para>Gets the list of names that represent each partition.</para>
            </summary>
            <value>
            <para>The list of names that represent each partition.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.NodeHealthQueryDescription">
            <summary>
            <para>Describes query input for getting <see cref="T:System.Fabric.Health.NodeHealth"/>. Used by 
            <see cref="M:System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.Fabric.Description.NodeHealthQueryDescription)"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.NodeHealthQueryDescription.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.NodeHealthQueryDescription"/> class.</para>
            </summary>
            <param name="nodeName">
            <para>The node name. Cannot be null or empty.</para>
            </param>
            <exception cref="T:System.ArgumentException">
            <para>A required parameter can't be null or empty.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.Description.NodeHealthQueryDescription.ToString">
            <summary>
            Gets a string representation of the health query description.
            </summary>
            <returns>A string representation of the health query description.</returns>
        </member>
        <member name="P:System.Fabric.Description.NodeHealthQueryDescription.NodeName">
            <summary>
            <para>Gets the node name.</para>
            </summary>
            <value>
            <para>The node name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.NodeHealthQueryDescription.HealthPolicy">
            <summary>
            <para>Gets or sets the <see cref="T:System.Fabric.Health.ClusterHealthPolicy"/> used to evaluate the node health.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Health.ClusterHealthPolicy"/> used to evaluate the node health.</para>
            </value>
            <remarks><para>If not specified, the health store uses the cluster health policy from the manifest (if exists) or the default, strict health policy.</para></remarks>
        </member>
        <member name="P:System.Fabric.Description.NodeHealthQueryDescription.EventsFilter">
            <summary>
            <para>Gets or sets the filter for the collection of <see cref="T:System.Fabric.Health.HealthEvent"/> reported on the node. Only events 
            that match the filter will be returned.</para>
            </summary>
            <value>
            <para>The filter for the health event.</para>
            </value>
            <remarks><para> Only events that match 
            the filter will be returned. All events will be used to evaluate the node aggregated health state.
            If the filter is not specified, all events are returned.</para></remarks>
        </member>
        <member name="T:System.Fabric.Description.PartitionHealthQueryDescription">
            <summary>
            <para>Describes query input for getting <see cref="T:System.Fabric.Health.PartitionHealth"/>. Used by 
            <see cref="M:System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Fabric.Description.PartitionHealthQueryDescription)"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.PartitionHealthQueryDescription.#ctor(System.Guid)">
            <summary>
            <para>Instantiates a new instance of the <see cref="T:System.Fabric.Description.PartitionHealthQueryDescription"/> class.</para>
            </summary>
            <param name="partitionId">
            <para>The partition identifier.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Description.PartitionHealthQueryDescription.ToString">
            <summary>
            Gets a string representation of the health query description.
            </summary>
            <returns>A string representation of the health query description.</returns>
        </member>
        <member name="P:System.Fabric.Description.PartitionHealthQueryDescription.PartitionId">
            <summary>
            <para>Gets or sets the partition identifier.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Guid"/> representing the partition identifier.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.PartitionHealthQueryDescription.HealthPolicy">
            <summary>
            <para>Gets or sets the <see cref="T:System.Fabric.Health.ApplicationHealthPolicy"/> used to evaluate health.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Health.ApplicationHealthPolicy"/> used to evaluate partition health.</para>
            </value>
            <remarks>If not specified, the health store uses the application health policy of the parent application
            to evaluate the partition health.</remarks>
        </member>
        <member name="P:System.Fabric.Description.PartitionHealthQueryDescription.EventsFilter">
            <summary>
            <para>Gets or sets the filter for the collection of <see cref="T:System.Fabric.Health.HealthEvent"/> reported on the partition. Only 
            events that match the filter will be returned.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Health.HealthEventsFilter"/> used to filter returned events.</para>
            </value>
            <remarks><para> Only events that match 
            the filter will be returned. All events will be used to evaluate the partition aggregated health state.
            If the filter is not specified, all events are returned.</para></remarks>
        </member>
        <member name="P:System.Fabric.Description.PartitionHealthQueryDescription.ReplicasFilter">
            <summary>
            <para>Gets or sets the filter for <see cref="T:System.Fabric.Health.ReplicaHealthState"/> children. Only children that match the filter 
            will be returned. All children will be used to evaluate the partition aggregated health state.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Health.ReplicaHealthStatesFilter"/> used to filter returned replicas.</para>
            </value>
            <remarks><para> Only children that match the filter will be returned. 
            All children will be used to evaluate the partition aggregated health state.
            If the filter is not specified, all partition children are returned.</para></remarks>
        </member>
        <member name="T:System.Fabric.Description.ReplicaHealthQueryDescription">
            <summary>
            <para>Describes the query input for getting <see cref="T:System.Fabric.Health.ReplicaHealth"/>. Used by 
            <see cref="M:System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Fabric.Description.ReplicaHealthQueryDescription)"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ReplicaHealthQueryDescription.#ctor(System.Guid,System.Int64)">
            <summary>
            <para>Instantiates a new instance of the <see cref="T:System.Fabric.Description.ReplicaHealthQueryDescription"/> class.</para>
            </summary>
            <param name="partitionId">
            <para>The partition identifier.</para>
            </param>
            <param name="replicaOrInstanceId">
            <para>The stateful service replica id or the stateless service instance.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Description.ReplicaHealthQueryDescription.ToString">
            <summary>
            Gets a string representation of the health query description.
            </summary>
            <returns>A string representation of the health query description.</returns>
        </member>
        <member name="P:System.Fabric.Description.ReplicaHealthQueryDescription.PartitionId">
            <summary>
            <para>Gets the partition identifier.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Guid"/> representing the partition identifier.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ReplicaHealthQueryDescription.ReplicaOrInstanceId">
            <summary>
            <para>The stateful service replica id or stateless service instance.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Int64"/> representing the stateful service replica id or the stateless service instance.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ReplicaHealthQueryDescription.HealthPolicy">
            <summary>
            <para>Gets or sets the <see cref="T:System.Fabric.Health.ApplicationHealthPolicy"/> used to evaluate health.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Health.ApplicationHealthPolicy"/> used to evaluate health.</para>
            </value>
            <remarks>If not specified, the health store uses the application health policy of the parent application
            to evaluate the replica health.</remarks>
        </member>
        <member name="P:System.Fabric.Description.ReplicaHealthQueryDescription.EventsFilter">
            <summary>
            <para>Gets or sets the filter for the collection of <see cref="T:System.Fabric.Health.HealthEvent"/> reported on the replica. Only 
            events that match the filter will be returned.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Health.HealthEventsFilter"/> used to filter the events returned by query.</para>
            </value>
            <remarks><para> Only events that match 
            the filter will be returned. All events will be used to evaluate the replica aggregated health state.
            If the filter is not specified, all events are returned.</para></remarks>
        </member>
        <member name="T:System.Fabric.ReplicaSetConfiguration">
            <summary>
            <para>FOR INTERNAL USE ONLY.
            Provides information about the configuration of a replica set.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.ReplicaSetConfiguration.WriteQuorum">
            <summary>
            FOR INTERNAL USE ONLY.
            Gets the write quorum.
            </summary>
            <value>
            <para>The write quorum.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ReplicaSetConfiguration.Replicas">
            <summary>
            FOR INTERNAL USE ONLY.
            Gets the list of replicas.
            </summary>
            <value>
            <para>The list of replicas.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.RollingUpgradeMonitoringPolicy">
            <summary>
            <para>Represents a class to encapsulate a rolling upgrade monitoring policy.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.RollingUpgradeMonitoringPolicy.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.RollingUpgradeMonitoringPolicy"/> class.</para>
            </summary>
            <remarks>
            <para>The initialization sets the properties of the <see cref="T:System.Fabric.Description.RollingUpgradeMonitoringPolicy"/> class with the following defaults.</para>
            <para>Property</para>
            <para>Default value</para>
              <list type="table">
                <item>
                  <term>
                    <para>
                      <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.FailureAction"/>
                    </para>
                  </term>
                  <description>
                    <para>
                      <see cref="F:System.Fabric.UpgradeFailureAction.Invalid"/>
                    </para>
                    <para>This value must be changed or a <see cref="T:System.ArgumentException"/> will be thrown before the upgrade begins.</para>
                  </description>
                </item>
                <item>
                  <term>
                    <para>
                      <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.HealthCheckRetryTimeout"/>
                    </para>
                  </term>
                  <description>
                    <para>
                      <see cref="F:System.TimeSpan.Zero"/>
                    </para>
                  </description>
                </item>
                <item>
                  <term>
                    <para>
                      <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.HealthCheckWaitDuration"/>
                    </para>
                  </term>
                  <description>
                    <para>
                      <see cref="F:System.TimeSpan.Zero"/>
                    </para>
                  </description>
                </item>
                <item>
                  <term>
                    <para>
                      <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.UpgradeDomainTimeout"/>
                    </para>
                  </term>
                  <description>
                    <para>TimeSpan.FromSeconds(uint.MaxValue)</para>
                  </description>
                </item>
                <item>
                  <term>
                    <para>
                      <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.UpgradeTimeout"/>
                    </para>
                  </term>
                  <description>
                    <para>TimeSpan.FromSeconds(uint.MaxValue)</para>
                  </description>
                </item>
              </list>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.FailureAction">
            <summary>
            <para>Gets or sets the action to take if an upgrade process fails. The default is <see cref="F:System.Fabric.UpgradeFailureAction.Invalid"/>.</para>
            </summary>
            <value>
            <para>The action to take if an upgrade process fails.</para>
            </value>
            <exception cref="T:System.ArgumentException">
            <para>The <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.FailureAction"/> property is set to 
            <see cref="F:System.Fabric.UpgradeFailureAction.Invalid"/>.</para>
            </exception>
            <remarks>
            <para>The <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.FailureAction"/> property must be changed from the default 
            of <see cref="F:System.Fabric.UpgradeFailureAction.Invalid"/> or a <see cref="T:System.ArgumentException"/> will be thrown before the upgrade begins.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.HealthCheckWaitDuration">
            <summary>
            <para>Gets or sets the length of time to wait after completing an upgrade domain before starting the health check process.</para>
            </summary>
            <value>
            <para>The length of time to wait after completing an upgrade domain before starting the health checks process.</para>
            </value>
            <remarks>
            <para>To use an infinite wait for the health check, set the <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.HealthCheckWaitDuration"/> 
            property value to <see cref="F:System.TimeSpan.Zero"/>. The default is <see cref="F:System.TimeSpan.Zero"/>.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.HealthCheckStableDuration">
            <summary>
            <para>Gets or sets the length of time that the application or cluster must remain healthy before the health check passes and the upgrade proceeds 
            to the next Upgrade Domain.</para>
            </summary>
            <value>
            <para>The length of time that the application or cluster must remain healthy.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.HealthCheckRetryTimeout">
            <summary>
            <para>Gets or sets the length of time between attempts to perform a health check if the application or cluster is not healthy.</para>
            </summary>
            <value>
            <para>The length of time between attempts to perform a health checks if the application or cluster is not healthy.</para>
            </value>
            <remarks>
            <para>To prevent a retry of the health check, set the <see cref="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.HealthCheckRetryTimeout"/> 
            property value to <see cref="F:System.TimeSpan.Zero"/>. The default is <see cref="F:System.TimeSpan.Zero"/>.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.UpgradeTimeout">
            <summary>
            <para>Gets or sets the upgrade timeout.</para>
            </summary>
            <value>
            <para>The upgrade timeout.</para>
            </value>
            <remarks>
            <para>The default is TimeSpan.FromSeconds(uint.MaxValue).</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.RollingUpgradeMonitoringPolicy.UpgradeDomainTimeout">
            <summary>
            <para>Gets or sets the timeout for the upgrade domain.</para>
            </summary>
            <value>
            <para>The timeout for the upgrade domain.</para>
            </value>
            <remarks>
            <para>The default is TimeSpan.FromSeconds(uint.MaxValue).</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.Description.RunAsPolicyDescription">
            <summary>
            <para>Describes the RunAsPolicy associated with a CodePackage specified in application manifest. </para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.RunAsPolicyDescription.UserName">
            <summary>
            <para>Gets or sets the UserName specified in RunAsPolicy associated with a CodePackage.</para>
            </summary>
            <value>
            <para>The UserName specified in RunAsPolicy associated with a CodePackage.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.SecurityGroupDescription">
            <summary>
            <para>Represents a description of a security group.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.SecurityGroupDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.SecurityGroupDescription"/> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.SecurityGroupDescription.Name">
            <summary>
            <para>Gets the name of the group to be created as part of environment setup for an application.</para>
            </summary>
            <value>
            <para>The name of the group to be created as part of environment setup for an application.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.SecurityGroupDescription.Sid">
            <summary>
            <para>
            Gets the primary SecurityIdentifier for the SecurityGroup.
            </para>
            </summary>
            <value>
             The primary SecurityIdentifier for the SecurityGroup.
            </value>
        </member>
        <member name="P:System.Fabric.Description.SecurityGroupDescription.DomainGroupMembers">
            <summary>
            <para>Gets the domain groups to be added as members to this group.</para>
            </summary>
            <value>
            <para>The domain groups to be added as members to this group.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.SecurityGroupDescription.SystemGroupMembers">
            <summary>
            <para>Gets the system groups to be added as members to this group.</para>
            </summary>
            <value>
            <para>The system groups to be added as members to this group.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.SecurityGroupDescription.DomainUserMembers">
            <summary>
            <para>Gets the domain users to be added as members to this group.</para>
            </summary>
            <value>
            <para>The domain users to be added as members to this group.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.SecurityUserDescription">
            <summary>
            <para>Represents a description for a security user.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.SecurityUserDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.SecurityUserDescription"/> class. </para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.SecurityUserDescription.Name">
            <summary>
            <para>Gets the name of the user to be created as part of environment setup for the application manifest. </para>
            </summary>
            <value>
            <para>The name of the user to be created as part of environment setup for the application manifest. </para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.SecurityUserDescription.Sid">
            <summary>
            <para>
            Gets the primary SecurityIdentifier for the SecurityUser.
            </para>
            </summary>
            <value>
              The primary SecurityIdentifier for the SecurityUser
            </value>
        </member>
        <member name="P:System.Fabric.Description.SecurityUserDescription.ParentSystemGroups">
            <summary>
            <para>Gets the local groups to which this user is to be added.</para>
            </summary>
            <value>
            <para>The local groups to which this user is to be added.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.SecurityUserDescription.ParentApplicationGroups">
            <summary>
            <para>Gets the parent groups in the security group description, to which this user is to be added. </para>
            </summary>
            <value>
            <para>The parent groups in the security group description, to which this user is to be added. </para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.ServiceCorrelationDescription">
            <summary>
            <para>Creates a particular correlation between services.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServiceCorrelationDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ServiceCorrelationDescription"/> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServiceCorrelationDescription.ToString">
            <summary>
            <para> 
            Returns a string of the ServiceCorrelationDescription in the form 'ServiceName', 'Scheme'
            </para>
            </summary>
            <returns>
            <para>A string representing the ServiceCorrelationDescription object.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Description.ServiceCorrelationDescription.ServiceName">
            <summary>
            <para>Gets or sets the name of the service that you want to establish the correlation relationship with.</para>
            </summary>
            <value>
            <para>The name of the service that you want to establish the correlation relationship with.</para>
            </value>
            <remarks>
              <para />
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.ServiceCorrelationDescription.Scheme">
            <summary>
            <para>Gets or sets the <see cref="T:System.Fabric.Description.ServiceCorrelationScheme"/> which describes the relationship between this 
            service and the service specified via <see cref="P:System.Fabric.Description.ServiceCorrelationDescription.ServiceName"/>.</para>
            </summary>
            <value>
            <para>The service correlation scheme.</para>
            </value>
            <remarks>
              <para/>
            </remarks>
        </member>
        <member name="T:System.Fabric.Description.ServiceCorrelationScheme">
            <summary>
            <para>Indicates that this service is associated with another service, and describes the relationship with that service.</para>
            </summary>
            <remarks>
              <para />
            </remarks>
        </member>
        <member name="F:System.Fabric.Description.ServiceCorrelationScheme.Invalid">
            <summary>
            <para>An invalid correlation scheme. Cannot be used.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ServiceCorrelationScheme.Affinity">
            <summary>
            <para>Indicates that this service has an affinity relationship with another service. Provided for backwards compatibility, consider preferring 
            the Aligned or NonAlignedAffinity options.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ServiceCorrelationScheme.AlignedAffinity">
            <summary>
            <para>Aligned affinity ensures that the primaries of the partitions of the affinitized services are collocated on the same nodes. This is the 
            default and is the same as selecting the “Affinity” scheme.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ServiceCorrelationScheme.NonAlignedAffinity">
            <summary>
            <para>Non-Aligned affinity guarantees that all replicas of each service will be placed on the same nodes. Unlike Aligned Affinity, this does not 
            guarantee that replicas of particular role will be collocated. </para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.ServiceDescription">
            <summary>
            <para> A ServiceDescription contains all of the information necessary to create a service. </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServiceDescription.#ctor(System.Fabric.Description.ServiceDescriptionKind)">
            <summary>
            <para>Initialize an instance of <see cref="T:System.Fabric.Description.ServiceDescription"/> with service kind.</para>
            </summary>
            <param name="kind">
            <para>Describe the kind of service type.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Description.ServiceDescription.#ctor(System.Fabric.Description.ServiceDescription)">
            <summary>
            <para>
            Instantiates a <see cref="T:System.Fabric.Description.ServiceDescription"/> class with parameters from another 
            <see cref="T:System.Fabric.Description.ServiceDescription"/> object.
            </para>
            </summary>
            <param name="other">
            <para>The service description from which parameters are copied.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Description.ServiceDescription.Kind">
            <summary>
            <para>Describes the service type (i.e., Stateful, Stateless and etc)</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.Description.ServiceDescriptionKind"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceDescription.PlacementConstraints">
            <summary>
            <para> Gets or sets the placement constraints for this service. </para>
            </summary>
            <value>
            <para> The placement constraints. </para>
            </value>
            <remarks>
            <para>Placement Constraints are Boolean statements which allow services to select for particular node properties (and the values of 
            those properties) in order to control where it is legal to place them.  Node properties are key value pairs that define some additional 
            metadata about a node, usually related to the hardware capabilities of the node.  Examples of hardware characteristics that could be exposed 
            as node properties are “HasDisk”, “MemorySize”, “StorageSize”, “NumberOfCores” etc.  When deploying a service, an administrator can define 
            the properties that the service cares about as well as simple Boolean operators which define requirements for the values of those 
            properties.  Ex: (HasDisk==true &amp;&amp; MemorySize&gt;=2048).  During runtime, Service Fabric Load Balancing will only place services 
            on nodes that have properties with values which match those required by the service.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.ServiceDescription.ServiceTypeName">
            <summary>
            <para>Name of the service type.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceDescription.ApplicationName">
            <summary>
            <para>Gets or sets the name of the application.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Uri"/>.</para>
            </value>
            <remarks>
            <para>Remarks:This is the unique name of an application and is used to group services together for management. The scheme must 
            be "fabric://" and the application name must be a prefix of the service name.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.ServiceDescription.ServiceName">
            <summary>
            <para>URI name of the service.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Uri"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceDescription.PartitionSchemeDescription">
            <summary>
            <para>Describe the partition scheme to be used for the service.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.Description.PartitionSchemeDescription"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceDescription.InitializationData">
            <summary>
            <para> Gets or sets the initialization data that will be passed to service instances or replicas when they are created. </para>
            </summary>
            <value>
            <para>Returns an array of <see cref="T:System.Byte"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceDescription.Metrics">
            <summary>
            <para>Gets or sets the ServiceLoadMetricDescriptionCollection for this service.  The LoadMetricDescriptionCollection contains the 
            <see cref="T:System.Fabric.Description.ServiceLoadMetricDescription"/>s relevant to this service</para>
            </summary>
            <value>
            <para>Returns a collection of <see cref="T:System.Fabric.Description.ServiceLoadMetricDescription"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceDescription.Correlations">
            <summary>
            <para>A list that describes the correlation of the service with other services.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Collections.Generic.IList`1"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceDescription.PlacementPolicies">
            <summary>
            <para> 
             Gets the list of ServicePlacementPolicyDescriptions belonging to the ServiceDescription.
             </para>
            </summary>
            <value>
            <para>The list of ServicePlacementPolicyDescriptions belonging to the ServiceDescription.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceDescription.IsDefaultMoveCostSpecified">
            <summary>
            <para> 
            Gets whether a Default MoveCost is specified for a ServiceDescription.
            </para>
            </summary>
            <value>
            <para>A flag indicating whether a Default MoveCost is specified for a ServiceDescription.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceDescription.DefaultMoveCost">
            <summary>
            <para> 
            Gets or sets the DefaultMoveCost of a service in a ServiceDescription
            </para>
            </summary>
            <value>
            <para> The value that the default MoveCost for the service should be set to for a service in its ServiceDescription.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.ServiceDescriptionKind">
            <summary>
            <para>Enumerates the kinds of service descriptions.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ServiceDescriptionKind.Invalid">
            <summary>
            <para>All Service Fabric enumerations have a reserved Invalid flag.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ServiceDescriptionKind.Stateless">
            <summary>
            <para>Indicates a stateless service.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ServiceDescriptionKind.Stateful">
            <summary>
            <para>Indicates a stateful service.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.ServiceGroupDescription">
            <summary>
            <para>Provides a collection of information that is necessary to create and describe a service group.  </para>
            </summary>
            <remarks>
            <para>A service group description contains a <see cref="T:System.Fabric.Description.ServiceGroupDescription"/> and a list of members in the 
            service group. The service description provides information, such as the metrics, application name, service group name, and initialization 
            information for this service group. The list of member definitions describes the services inside the service group.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Description.ServiceGroupDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ServiceGroupDescription"/> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServiceGroupDescription.#ctor(System.Fabric.Description.ServiceDescription)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ServiceGroupDescription"/> class with the specified 
            <see cref="T:System.Fabric.Description.ServiceDescription"/>.</para>
            </summary>
            <param name="serviceDescription">
            <para>The <see cref="T:System.Fabric.Description.ServiceDescription"/> to use as the basis for the <see cref="T:System.Fabric.Description.ServiceGroupDescription"/>.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Description.ServiceGroupDescription.MemberDescriptions">
            <summary>
            <para>Specifies the list of <see cref="T:System.Fabric.Description.ServiceGroupMemberDescription"/> objects for the members of this service group.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Collections.Generic.IList`1"/> of type <see cref="T:System.Fabric.Description.ServiceGroupMemberDescription"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceGroupDescription.ServiceDescription">
            <summary>
            <para>Describes the service group’s service.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.Description.ServiceDescription"/>.</para>
            </value>
            <remarks>
            <para>The service description describes how the system should partition the service group, including the partitioning scheme, such as the key, 
            the key range and other properties.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.Description.ServiceGroupMemberDescription">
            <summary>
            <para>Describes a service that belongs to a service group.  </para>
            </summary>
            <remarks>
            <para>A <see cref="T:System.Fabric.Description.ServiceGroupMemberDescription"/> contains a subset of a normal stateless or stateful service 
            description. These fields are relevant to the service inside the group. Other fields that are present in a normal service description, such as 
            partitioning information, become properties of the service group via its <see cref="T:System.Fabric.Description.ServiceGroupDescription"/>.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Description.ServiceGroupMemberDescription.#ctor(System.String,System.Uri,System.Byte[])">
            <summary>
            <para>Creates a <see cref="T:System.Fabric.Description.ServiceGroupMemberDescription"/> object and initializes it with the specified parameters.</para>
            </summary>
            <param name="serviceTypeName">
            <para>The service type name of the service group member.</para>
            </param>
            <param name="serviceName">
            <para>The fully qualified name to set for the member. For example, if the group name is fabric:/G1 and the member is M1, then the full name 
            to specify is fabric:/G1#M1.</para>
            </param>
            <param name="initializationData">
            <para>The byte[] that is provided as the initialization data to the member’s factory.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Description.ServiceGroupMemberDescription.#ctor">
            <summary>
            <para>Creates an empty <see cref="T:System.Fabric.Description.ServiceGroupMemberDescription"/> object.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ServiceGroupMemberDescription.ServiceTypeName">
            <summary>
            <para>Indicates the service type of this service group member.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceGroupMemberDescription.ServiceName">
            <summary>
            <para>Specifies the name of the service within the service group.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Uri"/>.</para>
            </value>
            <remarks>
            <para>Services are independently named inside the service group. This name is used as a portion of the stable fabric name to resolve 
            the service. For example, if the service group’s name is "fabric:/groupA" and the service name provided here is "svc1", then a client 
            should resolve the name “fabric:/groupA#svc1” to resolve this service.</para>
            </remarks>
            <seealso cref="T:System.Fabric.Description.ServiceDescription"/>
        </member>
        <member name="P:System.Fabric.Description.ServiceGroupMemberDescription.InitializationData">
            <summary>
            <para>Specifies the initialization data for this service group member.  </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Byte"/>.</para>
            </value>
            <remarks>
            <para>This information is passed by the service group factory to the service factories that correspond to the object when it is created 
            as initialization data for instances of this service group member, similar to how initialization data is passed when normal stateless or 
            stateful service instances are created.</para>
            </remarks>
            <seealso cref="M:System.Fabric.IStatelessServiceFactory.CreateInstance(System.String,System.Uri,System.Byte[],System.Guid,System.Int64)"/>
            <seealso cref="M:System.Fabric.IStatefulServiceFactory.CreateReplica(System.String,System.Uri,System.Byte[],System.Guid,System.Int64)"/>
            <seealso cref="P:System.Fabric.Description.ServiceDescription.InitializationData"/>
        </member>
        <member name="P:System.Fabric.Description.ServiceGroupMemberDescription.Metrics">
            <summary>
            <para>Gets or sets the collection of <see cref="T:System.Fabric.Description.ServiceLoadMetricDescription"/> objects for this service. The metrics 
            collection contains the <see cref="T:System.Fabric.Description.ServiceLoadMetricDescription"/> objects that are relevant to this service.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Collections.Generic.IList`1"/> of type <see cref="T:System.Fabric.Description.ServiceLoadMetricDescription"/>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.ServiceGroupTypeDescription">
            <summary>
            <para>Represents the type description of the Fabric service group.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServiceGroupTypeDescription.#ctor">
            <summary>
            <para>Initialize an instance of <see cref="T:System.Fabric.Description.ServiceGroupTypeDescription"/>.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ServiceGroupTypeDescription.ServiceTypeDescription">
            <summary>
            <para>Gets or sets the service group type.</para>
            </summary>
            <value>
            <para>The service group type.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceGroupTypeDescription.Members">
            <summary>
            <para>Gets or sets the collection of members of this service group.</para>
            </summary>
            <value>
            <para>The collection of members of this service group.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceGroupTypeDescription.UseImplicitFactory">
            <summary>
            <para>Gets or sets the flag indicates whether to use implicit factory.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> to use implicit factory; otherwise, <languageKeyword>false</languageKeyword>. </para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.ServiceGroupTypeMemberDescription">
            <summary>
            <para>Represents the type of member description for the service group.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServiceGroupTypeMemberDescription.#ctor">
            <summary>
            <para>initializes a new instance of the <see cref="T:System.Fabric.Description.ServiceGroupTypeMemberDescription"/> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ServiceGroupTypeMemberDescription.ServiceTypeName">
            <summary>
            <para>Gets the name of the service type.</para>
            </summary>
            <value>
            <para>The name of the service type.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceGroupTypeMemberDescription.LoadMetrics">
            <summary>
            <para>Gets or sets the collection of <see cref="T:System.Fabric.Description.ServiceLoadMetricDescription"/> for this service.</para>
            </summary>
            <value>
            <para>The collection of <see cref="T:System.Fabric.Description.ServiceLoadMetricDescription"/> for this service.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.ServiceGroupUpdateDescription">
            <summary>
            <para>Modifies the <see cref="T:System.Fabric.Description.ServiceGroupDescription"/> of an existing service group.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServiceGroupUpdateDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ServiceGroupUpdateDescription"/> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServiceGroupUpdateDescription.#ctor(System.Fabric.Description.ServiceUpdateDescription)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ServiceGroupUpdateDescription"/> class from the specified 
            <see cref="T:System.Fabric.Description.ServiceUpdateDescription"/>.</para>
            </summary>
            <param name="updateDescription">
            <para>The <see cref="T:System.Fabric.Description.ServiceUpdateDescription"/> that will be used to create the 
            <see cref="T:System.Fabric.Description.ServiceGroupUpdateDescription"/></para>
            </param>
        </member>
        <member name="P:System.Fabric.Description.ServiceGroupUpdateDescription.ServiceUpdateDescription">
            <summary>
            <para>Gets or sets the description of a service update.</para>
            </summary>
            <value>
            <para>The description of a service update.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.ServiceHealthQueryDescription">
            <summary>
            <para>Provides query input for getting <see cref="T:System.Fabric.Health.ServiceHealth"/>. Used by 
            <see cref="M:System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Fabric.Description.ServiceHealthQueryDescription)"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServiceHealthQueryDescription.#ctor(System.Uri)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ServiceHealthQueryDescription"/> class.</para>
            </summary>
            <param name="serviceName">
            <para>The service name. Cannot be null.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para>A null value was passed in for a required parameter.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.Description.ServiceHealthQueryDescription.ToString">
            <summary>
            Gets a string representation of the health query description.
            </summary>
            <returns>A string representation of the health query description.</returns>
        </member>
        <member name="P:System.Fabric.Description.ServiceHealthQueryDescription.ServiceName">
            <summary>
            <para>Gets the <see cref="T:System.Uri"/> of the service name.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Uri"/> of the service name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceHealthQueryDescription.HealthPolicy">
            <summary>
            <para>Gets or sets the <see cref="T:System.Fabric.Health.ApplicationHealthPolicy"/> used to evaluate health.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Health.ApplicationHealthPolicy"/> used to evaluate health.</para>
            </value>
            <remarks>If not specified, the health store uses the application health policy of the parent application
            to evaluate the service health.</remarks>
        </member>
        <member name="P:System.Fabric.Description.ServiceHealthQueryDescription.EventsFilter">
            <summary>
            <para>Gets or sets the filter for the collection of <see cref="T:System.Fabric.Health.HealthEvent"/> reported on the service. Only events 
            that match the filter will be returned.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Health.HealthEventsFilter"/> used to filter returned events.</para>
            </value>
            <remarks><para> Only events that match 
            the filter will be returned. All events will be used to evaluate the service aggregated health state.
            If the filter is not specified, all events are returned.</para></remarks>
        </member>
        <member name="P:System.Fabric.Description.ServiceHealthQueryDescription.PartitionsFilter">
            <summary>
            <para>Gets or sets the filter for <see cref="T:System.Fabric.Health.PartitionHealthState"/> children. Only children that match the filter 
            will be returned.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Health.PartitionHealthStatesFilter"/> used to filter returned partition health states.</para>
            </value>
            <remarks><para> Only children that match the filter will be returned. 
            All children will be used to evaluate the service aggregated health state.
            If the filter is not specified, all partition children are returned.</para></remarks>
        </member>
        <member name="T:System.Fabric.Description.ServiceLoadMetricDescription">
            <summary>
            <para>Specifies a metric to load balance a service during runtime.</para>
            </summary>
            <remarks>
            <para>Note that to provide metrics for services is optional, because Service Fabric uses default metrics. Provide metrics only if the service 
            requires advanced load balancing features, such as balancing that is based on specific node characteristics and resources.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Description.ServiceLoadMetricDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ServiceLoadMetricDescription"/> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.ServiceLoadMetricDescription.Name">
            <summary>
            <para>Defines the name of the metric. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String"/>.</para>
            </value>
            <remarks>
            <para>If the service chooses to <see cref="M:System.Fabric.IServicePartition.ReportLoad(System.Collections.Generic.IEnumerable{System.Fabric.LoadMetric})"/> 
            during runtime, the name that is provided via the <see cref="T:System.Fabric.LoadMetric"/> at that time should match the name that is specified in 
            <see cref="P:System.Fabric.Description.ServiceLoadMetricDescription.Name"/> exactly.</para>
            <para>Note that metric names are case sensitive.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.ServiceLoadMetricDescription.Weight">
            <summary>
            <para>Determines the metric’s weight relative to the other metrics that are configured for this service. During runtime, if two metrics end up in 
            conflict, the Load Balancer prefers the metric with the higher weight.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.Description.ServiceLoadMetricWeight"/>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.ServiceLoadMetricWeight">
            <summary>
            <para>Describes the weight of a metric.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ServiceLoadMetricWeight.Zero">
            <summary>
            <para>Specifies the metric weight of the service load as Zero. Disable Service Fabric Load Balancing for this metric. Note that metrics 
            that are not balanced during runtime can still be used to control capacity on nodes and can still be reported via 
            <see cref="M:System.Fabric.IServicePartition.ReportLoad(System.Collections.Generic.IEnumerable{System.Fabric.LoadMetric})"/>.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ServiceLoadMetricWeight.Low">
            <summary>
            <para>Specifies the metric weight of the service load as Low.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ServiceLoadMetricWeight.Medium">
            <summary>
            <para>Specifies the metric weight of the service load as Medium.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ServiceLoadMetricWeight.High">
            <summary>
            <para>Specifies the metric weight of the service load as High.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.ServiceNotificationFilterDescription">
            <summary>
            <para>Represents a class that is used to describe a filter for service notification delivery, registered 
            via <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.RegisterServiceNotificationFilterAsync(System.Fabric.Description.ServiceNotificationFilterDescription)"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServiceNotificationFilterDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ServiceNotificationFilterDescription"/> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServiceNotificationFilterDescription.#ctor(System.Uri,System.Boolean,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ServiceNotificationFilterDescription"/> class.</para>
            </summary>
            <param name="name"><para>The name for which service notifications should be delivered.</para></param>
            <param name="matchNamePrefix"><para>Flag that indicates whether all service notifications for which Name is a prefix will be delivered.</para></param>
            <param name="matchPrimaryChangeOnly"><para>Flag that indicates whether to match the service notification delivery by filtering out notifications in which the primary.</para></param>
        </member>
        <member name="P:System.Fabric.Description.ServiceNotificationFilterDescription.Name">
            <summary>
            <para>Gets the name for which service notifications should be delivered. The name must be in the fabric:/ scheme. The root name (fabric:/) is allowed.</para>
            </summary>
            <value>
            <para>The name for which service notifications should be delivered.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceNotificationFilterDescription.MatchNamePrefix">
            <summary>
            <para>Gets a value that indicates whether all service notifications for which Name is a prefix will be delivered.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if all service notification for which Name is a prefix will be delivered; otherwise, 
            <languageKeyword>false</languageKeyword>. The default is <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceNotificationFilterDescription.MatchPrimaryChangeOnly">
            <summary>
            <para>Gets a value that indicates whether to match the service notification delivery by filtering out notifications in which the primary 
            replica endpoint has not changed.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the filtering matches primary change only; otherwise, <languageKeyword>false</languageKeyword>. 
            The default is <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.PartitionScheme">
            <summary>
            <para>Enumerates the ways that a service can be partitioned.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.PartitionScheme.Invalid">
            <summary>
            <para>All Service Fabric enumerations reserve the "Invalid" value.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.PartitionScheme.Singleton">
            <summary>
            <para>Indicates that the service is singleton-partitioned. This means that there is only one partition, or the service is not partitioned.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.PartitionScheme.UniformInt64Range">
            <summary>
            <para>Indicates that the service is uniform int64 range-partitioned. This means that each partition owns a range of int64 keys.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.PartitionScheme.Named">
            <summary>
            <para>Indicates that the service is named-partitioned. This means that each partition is associated with a string name.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.ServicePlacementInvalidDomainPolicyDescription">
            <summary>
            <para>Represents a policy which indicates that a particular fault or upgrade domain should not be used for placement of the instances or 
            replicas of the service this policy is applied to.</para>
            </summary>
            <remarks>
            <para>As an example, in geographically distributed rings there may be a service which must not be run in a particular region due to political 
            or legal requirements. In this case that domain could be defined as invalid with this policy. </para>
            </remarks>
        </member>
        <member name="T:System.Fabric.Description.ServicePlacementPolicyDescription">
            <summary>
            <para>Represents the base type for all PlacementPolicyDescription types in the cluster.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementPolicyDescription.#ctor(System.Fabric.Description.ServicePlacementPolicyType)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ServicePlacementPolicyDescription"/> class.</para>
            </summary>
            <param name="type">
            <para>The service placement policy type.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementPolicyDescription.#ctor(System.Fabric.Description.ServicePlacementPolicyDescription)">
            <summary>
            <para> 
            Constructor for a ServicePlacementPolicyDescription
            </para>
            </summary>
            <param name="other">
            <para> The ServicePlacementPolicyDescription that the new object should be constructed from.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Description.ServicePlacementPolicyDescription.Type">
            <summary>
            <para>Gets the service placement policy type.</para>
            </summary>
            <value>
            <para>The service placement policy type.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementInvalidDomainPolicyDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ServicePlacementInvalidDomainPolicyDescription"/> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementInvalidDomainPolicyDescription.ToString">
            <summary>
            <para> 
            Return a string representation of the InvalidDomain Service Placement Policy in the form 'InvalidDomain, DomainName' 
            </para>
            </summary>
            <returns>
            <para>A string representing the object.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Description.ServicePlacementInvalidDomainPolicyDescription.DomainName">
            <summary>
            <para>Gets or sets the name of the fault domain, as a string, that it is invalid to place this service in.</para>
            </summary>
            <value>
            <para>The name of the fault domain, as a string, that it is invalid to place this service in.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.ServicePlacementRequiredDomainPolicyDescription">
            <summary>
            <para>
            Placement policy description that requires a replica to be placed in a particular domain.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementRequiredDomainPolicyDescription.#ctor">
            <summary>
            <para>
            Instantiates a new <see cref="T:System.Fabric.Description.ServicePlacementRequiredDomainPolicyDescription"/> object.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementRequiredDomainPolicyDescription.#ctor(System.Fabric.Description.ServicePlacementRequiredDomainPolicyDescription)">
            <summary> 
            A copy constructor for the ServicePlacementRequiredDomainPolicyDescription class
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementRequiredDomainPolicyDescription.ToString">
            <summary>
            <para> 
            Return a string representation of the RequiredDomain Service Placement Policy in the form 'RequiredDomain, DomainName' 
            </para>
            </summary>
            <returns>
            <para>A string representing the object.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Description.ServicePlacementRequiredDomainPolicyDescription.DomainName">
            <summary>
            <para> 
            Gets or sets the name of the domain specified in a ServicePlacementRequiredDomainPolicyDescription
            </para>
            </summary>
            <value>
            <para> A string containing the name of the domain that the ServicePlacementRequiredDomainPolicyDescription should respect.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.ServicePlacementPreferPrimaryDomainPolicyDescription">
            <summary>
            <para>Represents a <see cref="T:System.Fabric.Description.ServicePlacementPolicyDescription"/> which indicates that the service’s Primary replicas 
            should optimally be placed in a particular domain.</para>
            </summary>
            <remarks>
            <para>This constraint is usually used with fault domains in scenarios where the Service Fabric cluster is geographically distributed in order to 
            indicate that a service’s primary replica should be located in a particular fault domain, which in geo-distributed scenarios usually aligns with 
            regional or datacenter boundaries. Note that since this is an optimization it is possible that the Primary replica may not end up located in this 
            domain due to failures, capacity limits, or other constraints.</para>
            </remarks>
            <example>
              <code>
            //create the service placement policy
            ServicePlacementPreferPrimaryDomainPolicyDescription placementPolicy = new ServicePlacementPreferPrimaryDomainPolicyDescription();
            placementPolicy.DomainName = @"fd:\Datacenter1";
            
            //add it to the Stateful Service Description
            StatefulServiceDescription ssd = new StatefulServiceDescription();
            ssd.PlacementPolicies.Add(placementPolicy);</code>
            </example>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementPreferPrimaryDomainPolicyDescription.#ctor">
            <summary>
            <para>initializing a new instance of the <see cref="T:System.Fabric.Description.ServicePlacementPreferPrimaryDomainPolicyDescription"/> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementPreferPrimaryDomainPolicyDescription.ToString">
            <summary>
            <para> 
            Return a string representation of the PreferPrimaryDomain Service Placement Policy in the form 'PreferPrimaryDomain, DomainName' 
            </para>
            </summary>
            <returns>
            <para>A string representing the object.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Description.ServicePlacementPreferPrimaryDomainPolicyDescription.DomainName">
            <summary>
            <para>Gets or sets the string name of the domain in which the Primary replica should be preferentially located.</para>
            </summary>
            <value>
            <para>The string name of the domain in which the Primary replica should be preferentially located.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.ServicePlacementRequireDomainDistributionPolicyDescription">
            <summary>
            <para>Specifies the placement policy which indicates that two replicas from the same partition should never be placed in the same fault or upgrade domain.  
            While this is not common it can expose the service to an increased risk of concurrent failures due to unplanned outages or other cases of subsequent/concurrent 
            failures. As an example, consider a case where replicas are deployed across different data center, with one replica per location. In the event that one of 
            the datacenters goes offline, normally the replica that was placed in that datacenter will be packed into one of the remaining datacenters. If this is not 
            desirable then this policy should be set.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementRequireDomainDistributionPolicyDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ServicePlacementRequireDomainDistributionPolicyDescription"/> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementRequireDomainDistributionPolicyDescription.ToString">
            <summary>
            <para> 
            Return a string representation of the RequiredDomainDistribution Service Placement Policy in the form 'RequiredDomainDistribution, DomainName' 
            </para>
            </summary>
            <returns>
            <para>A string representing the object.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Description.ServicePlacementNonPartiallyPlaceServicePolicyDescription">
            <summary>
            <para>
            Placement policy description that describes a service placement where all replicas must be able to be placed in order for any replicas to be created.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementNonPartiallyPlaceServicePolicyDescription.#ctor">
            <summary>
              <para />
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServicePlacementNonPartiallyPlaceServicePolicyDescription.ToString">
            <summary>
            <para> 
            Return a string representation of the ServicePlacementNonPartiallyPlaceServicePolicyDescription
            </para>
            </summary>
            <returns>
            <para>A string representing the object.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.Description.ServicePlacementPolicyType">
            <summary>
            <para>Indicates the type of the specific <see cref="T:System.Fabric.Description.ServicePlacementPolicyDescription"/>.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ServicePlacementPolicyType.Invalid">
            <summary>
            <para>Invalid placement policy type. Indicates that the type of the policy specified was unknown or invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ServicePlacementPolicyType.InvalidDomain">
            <summary>
            <para>Indicates that the <see cref="T:System.Fabric.Description.ServicePlacementPolicyDescription"/> is a 
            <see cref="T:System.Fabric.Description.ServicePlacementInvalidDomainPolicyDescription"/>, which indicates that a particular fault or 
            upgrade domain cannot be used for placement of this service.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ServicePlacementPolicyType.RequireDomain">
            <summary>
            <para>Indicates that the <see cref="T:System.Fabric.Description.ServicePlacementPolicyDescription"/> is a 
            <see cref="T:System.Fabric.Description.ServicePlacementRequireDomainDistributionPolicyDescription"/> indicating that the replicas of 
            the service must be placed in a specific domain.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ServicePlacementPolicyType.PreferPrimaryDomain">
            <summary>
            <para>Indicates that the <see cref="T:System.Fabric.Description.ServicePlacementPolicyDescription"/> is a 
            <see cref="T:System.Fabric.Description.ServicePlacementPreferPrimaryDomainPolicyDescription"/>, which indicates that if possible 
            the Primary replica for the partitions of the service should be located in a particular domain as an optimization.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ServicePlacementPolicyType.RequireDomainDistribution">
            <summary>
            <para>Indicates that the <see cref="T:System.Fabric.Description.ServicePlacementPolicyDescription"/> is a 
            <see cref="T:System.Fabric.Description.ServicePlacementRequireDomainDistributionPolicyDescription"/>, indicating that the system 
            will disallow placement of any two replicas from the same partition in the same domain at any time.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.ServicePlacementPolicyType.NonPartiallyPlaceService">
            <summary>
              <para />
            </summary>
        </member>
        <member name="T:System.Fabric.Description.ServiceTypeDescription">
            <summary>
            <para>Describes the service type.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServiceTypeDescription.#ctor(System.Fabric.Description.ServiceDescriptionKind)">
            <summary>
            <para>
            Instantiates a <see cref="T:System.Fabric.Description.ServiceTypeDescription"/> class with specified service description kind.
            </para>
            </summary>
            <param name="kind">
            <para>The service description kind.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Description.ServiceTypeDescription.#ctor(System.Fabric.Description.ServiceTypeDescription)">
            <summary>
            <para>
            Instantiates a <see cref="T:System.Fabric.Description.ServiceTypeDescription"/> class with parameters from another 
            <see cref="T:System.Fabric.Description.ServiceTypeDescription"/> object.
            </para>
            </summary>
            <param name="other">
            <para>The service type description from which parameters are copied.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Description.ServiceTypeDescription.ReadCommonProperties(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            <para>Reads the properties of the service type.</para>
            </summary>
            <param name="serviceTypeName">
            <para>The name of the service type.</para>
            </param>
            <param name="placementConstraints">
            <para>The constraints to be used.</para>
            </param>
            <param name="loadMetricsList">
            <para>The type of load metric.</para>
            </param>
            <param name="descriptionExtensionList">
            <para>The description extension list.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Description.ServiceTypeDescription.ServiceTypeName">
            <summary>
            <para>Gets or sets the name of the service type.</para>
            </summary>
            <value>
            <para>The name of the service type.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceTypeDescription.ServiceTypeKind">
            <summary>
            <para>Gets or sets the kind of service type.</para>
            </summary>
            <value>
            <para>The kind of service type.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceTypeDescription.PlacementConstraints">
            <summary>
            <para>Gets or sets the constraint to be used when instantiating this service in a Service Fabric cluster.</para>
            </summary>
            <value>
            <para>The constraint to be used when instantiating this service in a Service Fabric cluster.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceTypeDescription.LoadMetrics">
            <summary>
            <para>Gets the type of load metric is reported by the service.</para>
            </summary>
            <value>
            <para>The type of load metric is reported by the service.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceTypeDescription.Extensions">
            <summary>
            <para>Gets the extensions for the service type.</para>
            </summary>
            <value>
            <para>The extensions for the service type.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceTypeDescription.Extensions_">
            <summary>
            INTERNAL USE ONLY. Wrapper of property "Extensions". Needed for serialization.
            </summary>
            <value>
            INTERNAL USE ONLY. Wrapper of property "Extensions". Needed for serialization.
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceTypeDescription.Policies">
            <summary>
            <para>Gets the policies of the service type.</para>
            </summary>
            <value>
            <para>The policies of the service type.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceTypeDescription.IsStateful">
            <summary>
            <para>
            Indicates whether the service is stateful.
            </para>
            </summary>
            <value>
            <para>Flag indicating whether the service is stateful.</para>
            </value>
            <remarks>
            <para>Exposed by REST API and native code.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.Description.ServiceUpdateDescription">
            <summary>
            <para>Modifies the <see cref="T:System.Fabric.Description.ServiceDescription"/> of an existing service.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.ServiceUpdateDescription.#ctor(System.Fabric.Description.ServiceDescriptionKind)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.ServiceUpdateDescription"/> class.</para>
            </summary>
            <param name="kind">
            <para>The kind specifies whether this <see cref="T:System.Fabric.Description.ServiceUpdateDescription"/> is a 
            <see cref="T:System.Fabric.Description.StatelessServiceUpdateDescription"/> or <see cref="T:System.Fabric.Description.StatefulServiceUpdateDescription"/></para>
            </param>
        </member>
        <member name="P:System.Fabric.Description.ServiceUpdateDescription.Kind">
            <summary>
            <para>Gets or sets whether the <see cref="T:System.Fabric.Description.ServiceUpdateDescription"/> object is a 
            <see cref="T:System.Fabric.Description.StatelessServiceUpdateDescription"/> or <see cref="T:System.Fabric.Description.StatefulServiceUpdateDescription"/>.</para>
            </summary>
            <value>
            <para>The kind of update description.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceUpdateDescription.PlacementConstraints">
            <summary>
            <para>
            The placement constraints for this service. A placement constraint restrict the replica being placed on some nodes.
            Placement constraints is a combined logic of each placement constraint.
            </para>
            </summary>
            <value>
            <para>PlacementConstraints property gets/sets the value of the string field, placementConstraints.</para>
            </value>
            <example> nodeName == node1 || nodeType == databaseNode </example>
        </member>
        <member name="P:System.Fabric.Description.ServiceUpdateDescription.Metrics">
            <summary>
            <para>
            A map of service metric name to service metric description. <see cref="T:System.Fabric.Description.ServiceLoadMetricDescription"/></para>
            </summary>
            <value>
            <para>Metrics property gets/sets the value of the KeyedCollection field, _metrics.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceUpdateDescription.Correlations">
            <summary>
            <para>
            A list of service correlations. <see cref="T:System.Fabric.Description.ServiceCorrelationDescription"/></para>
            </summary>
            <value>
            <para>Correlations property gets/sets the value of the IList field, _correlations.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceUpdateDescription.PlacementPolicies">
            <summary>
            <para>
            A list of service placement policies. <see cref="T:System.Fabric.Description.ServicePlacementPolicyDescription"/></para>
            </summary>
            <value>
            <para>PlacementPolicies property gets/sets the value of the IList field, _placementPolicies.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.ServiceUpdateDescription.DefaultMoveCost">
            <summary>
            <para>
            The default move cost. <see cref="T:System.Fabric.MoveCost"/>
            If not provided, the value will be <see cref="F:System.Fabric.Interop.NativeTypes.FABRIC_MOVE_COST.FABRIC_MOVE_COST_LOW"/></para>
            </summary>
            <value>
            <para>DefaultMoveCost property gets/sets the value of the MoveCost field, _defaultMoveCost.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.SingletonPartitionSchemeDescription">
            <summary>
            <para>Describes the partition scheme of a singleton-partitioned, or non-partitioned service.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.SingletonPartitionSchemeDescription.#ctor">
            <summary>
            <para>Instantiates a <see cref="T:System.Fabric.Description.SingletonPartitionSchemeDescription"/> class.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Description.StatefulServiceDescription">
            <summary>
            <para>Represents the extend <see cref="T:System.Fabric.Description.ServiceDescription"/> to provide additional information necessary to create stateful services.</para>
            </summary>
            <remarks>
              <para/>
            </remarks>
        </member>
        <member name="M:System.Fabric.Description.StatefulServiceDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.StatefulServiceDescription"/> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.StatefulServiceDescription.HasPersistedState">
            <summary>
            <para>Gets or sets a value indicating whether this instance has persisted state.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the instance has persisted state; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
            <remarks><para>When a <see cref="T:System.Fabric.FabricReplicator"/> at a secondary replica receives an operation 
            for a persistent service, it must wait for the service to acknowledge that the data has been persisted before it can send that acknowledgment 
            back to the primary. For non-persistent services, the operation can be acknowledged immediately upon receipt.</para>
            <para>When a 
            persistent service replica fails, the Service Fabric will not immediately consider that replica as lost because the persistent state for that replica 
            still exists. If the replica is recovered, it can be recreated using the persisted state. In contrast, beginning to build a replacement replica 
            immediately may be costly and unnecessary, especially when the failures are transient. To configure how long Service Fabric should wait for the 
            persistent replica to recover before building a new (replacement) replica from scratch, use the 
            <see cref="P:System.Fabric.Description.StatefulServiceDescription.ReplicaRestartWaitDuration"/> parameter. For non-persistent services (those 
            with <see cref="P:System.Fabric.Description.StatefulServiceDescription.HasPersistedState"/> set to <languageKeyword>false</languageKeyword>), Service Fabric 
            will immediately begin creating a new replica (since there is no persistent state to recover from, and hence no point in waiting for local recovery).</para></remarks>
        </member>
        <member name="P:System.Fabric.Description.StatefulServiceDescription.TargetReplicaSetSize">
            <summary>
            <para> Gets or sets the target size of the replica set.</para>
            </summary>
            <value>
            <para>The target size of the replica set.</para>
            </value>
            <remarks>
            <para>The number of replicas that the system creates and maintains for each partition of this service.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.StatefulServiceDescription.MinReplicaSetSize">
            <summary>
            <para>Gets or sets the minimum allowed replica set size for this service.</para>
            </summary>
            <value>
            <para>The minimum allowed replica set size for this service.</para>
            </value>
            <remarks>
            <para>Defines the minimum number of replicas that Service Fabric will keep in its view of the Replica Set for a given partition. For example, if 
            the <see cref="P:System.Fabric.Description.StatefulServiceDescription.TargetReplicaSetSize"/> is set to five (5) then normally (without failures) 
            there will be five replicas in the view of the replica set. However this number will decrease during failures. The 
            <see cref="P:System.Fabric.Description.StatefulServiceDescription.MinReplicaSetSize"/> defines the minimum number of replicas in the view, so for 
            example if the <see cref="P:System.Fabric.Description.StatefulServiceDescription.TargetReplicaSetSize"/> is five and the 
            <see cref="P:System.Fabric.Description.StatefulServiceDescription.MinReplicaSetSize"/> is three, then even if there are three concurrent failures 
            (resulting  in only two remaining replicas running) will still have three replicas in its view of the replica set (two up and one down). Since  
            uses majority quorum of the number of replicas maintained in this view, majority quorum of the 
            <see cref="P:System.Fabric.Description.StatefulServiceDescription.MinReplicaSetSize"/> is minimum level of reliability of any operation: in the 
            prior example, with Target = 5 and Min = 3, with 3 concurrent failures, there are two remaining up replicas (and one down), and the majority 
            quorum of 3 (the <see cref="P:System.Fabric.Description.StatefulServiceDescription.MinReplicaSetSize"/>) is 2. This means that the primary will 
            continue to be able to replicate operations AND that the remaining secondary replica MUST apply the operation in order for the replica set (partition) 
            to make progress. If the total number of replicas drops below the majority quorum of the 
            <see cref="P:System.Fabric.Description.StatefulServiceDescription.MinReplicaSetSize"/> then further writes will be disallowed.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.StatefulServiceDescription.ReplicaRestartWaitDuration">
            <summary>
            <para>Gets or sets the duration, in seconds, between when a replica goes down and when a new replica is created.</para>
            </summary>
            <value>
            <para>The duration as a <see cref="T:System.TimeSpan"/> object.</para>
            </value>
            <remarks>
            <para>When a persistent replica goes down, this timer starts.  When it expires Service Fabric will create a new replica on any node in the 
            cluster. This configuration is to reduce unnecessary state copies. When a persisted replica goes down, the system waits for it to come 
            back up for <see cref="P:System.Fabric.Description.StatefulServiceDescription.ReplicaRestartWaitDuration"/> seconds before creating a new 
            replica which will require a copy. Note that a replica that is down is not considered lost, yet.</para>
            <para>The default value is 300 (seconds).</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.StatefulServiceDescription.QuorumLossWaitDuration">
            <summary>
            <para>Gets or sets the maximum duration, in seconds, for which a partition is allowed to be in a state of quorum loss.</para>
            </summary>
            <value>
            <para>The wait duration as a <see cref="T:System.TimeSpan"/> object.</para>
            </value>
            <remarks>
            <para>If the partition is still in quorum loss after this duration, the partition is recovered from quorum loss by considering the down 
            replicas as lost. Note that this can potentially incur data loss. The default value is Infinity and it is not recommended to change this value.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.StatefulServiceDescription.StandByReplicaKeepDuration">
            <summary>
            <para>Gets or sets the definition on how long StandBy replicas should be maintained before being removed.</para>
            </summary>
            <value>
            <para>The definition on how long StandBy replicas should be maintained before being removed.</para>
            </value>
            <remarks>
            <para>Sometimes a replica will be down for longer than the <see cref="P:System.Fabric.Description.StatefulServiceDescription.ReplicaRestartWaitDuration"/>. 
            In these cases a new replica will be built to replace it. Sometimes however the loss is not permanent and the persistent replica is eventually recovered. 
            This now constitutes a StandBy replica. StandBy replicas will preferentially be used in the case of subsequent failures or resource balancing actions, 
            since they represent persistent state that already exists and which can be used to expedite recovery. The 
            <see cref="P:System.Fabric.Description.StatefulServiceDescription.StandByReplicaKeepDuration"/> defines how long such StandBy replicas should be maintained 
            before being removed.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.Description.StatefulServiceTypeDescription">
            <summary>
            <para>Describes the stateful service type.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.StatefulServiceTypeDescription.#ctor">
            <summary>
            <para>Initializes an instance of the <see cref="T:System.Fabric.Description.StatefulServiceTypeDescription"/> class. </para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.StatefulServiceTypeDescription.HasPersistedState">
            <summary>
            <para>Gets or sets a flag indicating whether this is a persistent service which stores states on the local disk.</para>
            </summary>
            <value>
            <para>A flag indicating whether this is a persistent service which stores states on the local disk.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.StatefulServiceUpdateDescription">
            <summary>
            <para>Represents the <see cref="T:System.Fabric.Description.StatefulServiceUpdateDescription"/> that is used to modify the 
            <see cref="T:System.Fabric.Description.StatefulServiceDescription"/> of a running service via 
            <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.UpdateServiceAsync(System.Uri,System.Fabric.Description.ServiceUpdateDescription)"/>. 
            The properties specified will be applied to the running service.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.StatefulServiceUpdateDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.StatefulServiceUpdateDescription"/> class with no properties set.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.StatefulServiceUpdateDescription.TargetReplicaSetSize">
            <summary>
            <para>Gets or sets the <see cref="P:System.Fabric.Description.StatefulServiceUpdateDescription.TargetReplicaSetSize"/> of the 
            <see cref="T:System.Fabric.Description.StatefulServiceUpdateDescription"/>.</para>
            </summary>
            <value>
            <para>The <see cref="P:System.Fabric.Description.StatefulServiceUpdateDescription.TargetReplicaSetSize"/> of the 
            <see cref="T:System.Fabric.Description.StatefulServiceUpdateDescription"/>.</para>
            </value>
            <remarks>
            <para>See <see cref="P:System.Fabric.Description.StatefulServiceDescription.TargetReplicaSetSize"/>.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.StatefulServiceUpdateDescription.MinReplicaSetSize">
            <summary>
            <para>Gets or sets the <see cref="P:System.Fabric.Description.StatefulServiceUpdateDescription.MinReplicaSetSize"/> of the 
            <see cref="T:System.Fabric.Description.StatefulServiceUpdateDescription"/>.</para>
            </summary>
            <value>
            <para>The <see cref="P:System.Fabric.Description.StatefulServiceUpdateDescription.MinReplicaSetSize"/> of the 
            <see cref="T:System.Fabric.Description.StatefulServiceUpdateDescription"/>.</para>
            </value>
            <remarks>
            <para>See <see cref="P:System.Fabric.Description.StatefulServiceDescription.MinReplicaSetSize"/></para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.StatefulServiceUpdateDescription.ReplicaRestartWaitDuration">
            <summary>
            <para>Gets or sets the <see cref="P:System.Fabric.Description.StatefulServiceUpdateDescription.ReplicaRestartWaitDuration"/> of the 
            <see cref="T:System.Fabric.Description.StatefulServiceUpdateDescription"/>.</para>
            </summary>
            <value>
            <para>The <see cref="P:System.Fabric.Description.StatefulServiceUpdateDescription.ReplicaRestartWaitDuration"/> of the 
            <see cref="T:System.Fabric.Description.StatefulServiceUpdateDescription"/>.</para>
            </value>
            <remarks>
            <para>See <see cref="P:System.Fabric.Description.StatefulServiceDescription.ReplicaRestartWaitDuration"/></para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.StatefulServiceUpdateDescription.QuorumLossWaitDuration">
            <summary>
            <para>Gets or sets the <see cref="P:System.Fabric.Description.StatefulServiceUpdateDescription.QuorumLossWaitDuration"/> of the 
            <see cref="T:System.Fabric.Description.StatefulServiceUpdateDescription"/>.</para>
            </summary>
            <value>
            <para>The <see cref="P:System.Fabric.Description.StatefulServiceUpdateDescription.QuorumLossWaitDuration"/> of the 
            <see cref="T:System.Fabric.Description.StatefulServiceUpdateDescription"/>.</para>
            </value>
            <remarks>
            <para>See <see cref="P:System.Fabric.Description.StatefulServiceDescription.QuorumLossWaitDuration"/></para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.StatefulServiceUpdateDescription.StandByReplicaKeepDuration">
            <summary>
            <para>Gets or sets the <see cref="P:System.Fabric.Description.StatefulServiceUpdateDescription.StandByReplicaKeepDuration"/> of the 
            <see cref="T:System.Fabric.Description.StatefulServiceUpdateDescription"/>.</para>
            </summary>
            <value>
            <para>The <see cref="P:System.Fabric.Description.StatefulServiceUpdateDescription.StandByReplicaKeepDuration"/> of the 
            <see cref="T:System.Fabric.Description.StatefulServiceUpdateDescription"/>.</para>
            </value>
            <remarks>
            <para>See <see cref="P:System.Fabric.Description.StatefulServiceUpdateDescription.StandByReplicaKeepDuration"/></para>
            </remarks>
        </member>
        <member name="T:System.Fabric.Description.StatelessServiceDescription">
            <summary>
            <para>Extends <see cref="T:System.Fabric.Description.ServiceDescription"/> to provide additional information that is necessary to create a stateless service. </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.StatelessServiceDescription.#ctor">
            <summary>
            <para>Initializes an instance of the <see cref="T:System.Fabric.Description.StatelessServiceDescription"/> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.StatelessServiceDescription.InstanceCount">
            <summary>
            <para>Gets or sets the instance count of this service partition. </para>
            </summary>
            <value>
            <para>The instance count of this service partition. </para>
            </value>
            <remarks>
            <para>The <see cref="P:System.Fabric.Description.StatelessServiceDescription.InstanceCount"/> property indicates how many instances must be 
            created for this service and be maintained by Service Fabric. For a partitioned stateless service, 
            <see cref="P:System.Fabric.Description.StatelessServiceDescription.InstanceCount"/> indicates the number of instances to keep per partition.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.Description.StatelessServiceTypeDescription">
            <summary>
            <para>Describes the type of stateless service.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.StatelessServiceTypeDescription.#ctor">
            <summary>
            <para>Creates and initializes an instance of the <see cref="T:System.Fabric.Description.StatelessServiceTypeDescription"/> object.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.StatelessServiceTypeDescription.UseImplicitHost">
            <summary>
            <para>Specifies that the service does not implement Service Fabric interfaces. Service Fabric should start the specified executables (EXEs).</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Boolean"/>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.StatelessServiceUpdateDescription">
            <summary>
            <para>Represents the <see cref="T:System.Fabric.Description.StatelessServiceDescription"/> of a running service via 
            <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.UpdateServiceAsync(System.Uri,System.Fabric.Description.ServiceUpdateDescription)"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.StatelessServiceUpdateDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.StatelessServiceUpdateDescription"/> class with no properties set.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Description.StatelessServiceUpdateDescription.InstanceCount">
            <summary>
            <para>Gets or sets the <see cref="P:System.Fabric.Description.StatelessServiceUpdateDescription.InstanceCount"/> of the 
            <see cref="T:System.Fabric.Description.StatelessServiceUpdateDescription"/>.</para>
            </summary>
            <value>
            <para>The <see cref="P:System.Fabric.Description.StatelessServiceUpdateDescription.InstanceCount"/> of the 
            <see cref="T:System.Fabric.Description.StatelessServiceUpdateDescription"/>.</para>
            </value>
            <remarks>
            <para>See <see cref="P:System.Fabric.Description.StatelessServiceDescription.InstanceCount"/></para>
            </remarks>
        </member>
        <member name="T:System.Fabric.Description.UniformInt64RangePartitionSchemeDescription">
            <summary>
            <para>Describes a partitioning scheme where an integer range is allocated evenly across a number of partitions.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.UniformInt64RangePartitionSchemeDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.UniformInt64RangePartitionSchemeDescription"/> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Description.UniformInt64RangePartitionSchemeDescription.#ctor(System.Int32)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Description.UniformInt64RangePartitionSchemeDescription"/> class.</para>
            </summary>
            <param name="partitionCount">
            <para>The number of partitions in the scheme.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Description.UniformInt64RangePartitionSchemeDescription.PartitionCount">
            <summary>
            <para>Gets or sets the partition count.</para>
            </summary>
            <value>
            <para>The partition count.</para>
            </value>
            <remarks>
            <para>Specifies the number of partitions into which this service is partitioned. Each partition receives approximately the same 
            number of keys. The number is determined by subtracting <languagekeyword>HighKey</languagekeyword> from <languagekeyword>LowKey</languagekeyword> and dividing 
            the sum by <languagekeyword>PartitionCount</languagekeyword>.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Description.UniformInt64RangePartitionSchemeDescription.LowKey">
            <summary>
            <para>Gets or sets the inclusive lower bound on the range of keys that is supported by the service.</para>
            </summary>
            <value>
            <para>The inclusive lower bound on the range of keys that is supported by the service.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Description.UniformInt64RangePartitionSchemeDescription.HighKey">
            <summary>
            <para>Gets or sets the inclusive upper bound on the range of keys that is supported by the service.</para>
            </summary>
            <value>
            <para>The inclusive upper bound on the range of keys that is supported by the service.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Description.UpgradeKind">
            <summary>
            <para>Enumerates the possible kinds of upgrade.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.UpgradeKind.Invalid">
            <summary>
            <para>Indicates that this is an invalid upgrade. All Service Fabric enumerations have a reserved "Invalid" member.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Description.UpgradeKind.Rolling">
            <summary>
            <para>Indicates that this is a rolling upgrade.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Common.MovePrimaryDescriptionKind">
            <summary>
            This is an enum used to indicate what overload of the MovePrimary API is being used 
            </summary>
            <remarks>
            The values indicate whether MovePrimary .API is being called using NodeName etc. or using ReplicaSelector etc.
            </remarks>
        </member>
        <member name="F:System.Fabric.Common.MovePrimaryDescriptionKind.UsingNodeName">
            <summary>
            Do not verify the completion of the action.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.MovePrimaryDescriptionKind.UsingReplicaSelector">
            <summary>
            Verify the completion of the action.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.MoveSecondaryDescriptionKind">
            <summary>
            This is an enum used to indicate what overload of the MoveSecondary API is being used 
            </summary>
            <remarks>
            The values indicate whether MoveSecondary .API is being called using NodeName etc. or using ReplicaSelector etc.
            </remarks>
        </member>
        <member name="F:System.Fabric.Common.MoveSecondaryDescriptionKind.UsingNodeName">
            <summary>
            Do not verify the completion of the action.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.MoveSecondaryDescriptionKind.UsingReplicaSelector">
            <summary>
            Verify the completion of the action.
            </summary>
        </member>
        <member name="M:System.Fabric.Common.UnreliableTransportBehavior.AddFilterForPartitionId(System.Guid)">
            <summary>
            Adds Partition Id to Filters.
            </summary>
            <param name="replicaId">Partition ID to add filter for.</param>
        </member>
        <member name="T:System.Fabric.Result.StartNodeResult">
            <summary>
            Returns Start node result object.
            </summary>
            <remarks>
            This class returns the NodeResult for Start Node action.
            </remarks>
        </member>
        <member name="T:System.Fabric.Result.NodeResult">
            <summary>
            Returns Node result object. 
            </summary>
            <remarks>
            This class returns nodeName and nodeInstanceId. 
            This class is part of RestartNode, StartNode, StopNode actions result structure.
            </remarks>
        </member>
        <member name="M:System.Fabric.Result.NodeResult.#ctor(System.String,System.Numerics.BigInteger)">
            <summary>
            Node result constructor.
            </summary>
            <param name="nodeName">node name</param>
            <param name="nodeInstance">node instance id</param>
        </member>
        <member name="M:System.Fabric.Result.NodeResult.ToString">
            <summary>
            Returns a string like: "NodeName: string, NodeInstance: BigInteger"
            </summary>
            <returns>A string</returns>
        </member>
        <member name="P:System.Fabric.Result.NodeResult.NodeName">
            <summary>
            Gets node name.
            </summary>
        </member>
        <member name="P:System.Fabric.Result.NodeResult.NodeInstance">
            <summary>
            Gets node instance id.
            </summary>
        </member>
        <member name="M:System.Fabric.Result.StartNodeResult.#ctor(System.String,System.Numerics.BigInteger)">
            <summary>
            Start node result constructor.
            </summary>
            <param name="nodeName">Node name</param>
            <param name="nodeInstance">node instance id</param>
        </member>
        <member name="T:System.Fabric.Result.StopNodeResult">
            <summary>
            Returns Stop node result object.
            </summary>
            <remarks>
            This class returns the NodeResult for Stop Node action.
            </remarks>
        </member>
        <member name="M:System.Fabric.Result.StopNodeResult.#ctor(System.String,System.Numerics.BigInteger)">
            <summary>
            Stop node result constructor.
            </summary>
            <param name="nodeName">Node name</param>
            <param name="nodeInstance">node instance id</param>
        </member>
        <member name="T:System.Fabric.Result.TestCommandResult">
            <summary>
            Base class for the result objects.
            </summary>
            <remarks>
            This class conditionally contains the Exception
            </remarks>
        </member>
        <member name="P:System.Fabric.Result.TestCommandResult.Exception">
            <summary>
            Holds an exception indicating why the test command failed.  This object is only valid when TestCommandProgressState is Faulted.  It is null otherwise.
            </summary>
            <returns>The exception.</returns>
        </member>
        <member name="T:System.Fabric.Chaos.RandomActionGenerator.ActionTranslator">
            <summary>
            This class will provide methods to translate RandomSessionAction to equivalent TestabilityAction(s).
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.ActionTranslator.GetCommandsForActions(System.Collections.Generic.IList{System.Fabric.Chaos.RandomActionGenerator.StateTransitionAction},System.Collections.Generic.List{System.Fabric.Common.FabricTestAction})">
            Create and append commands for the given action(s).
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.ActionTranslator.GetCommandsForActions(System.Fabric.Chaos.RandomActionGenerator.StateTransitionAction,System.Collections.Generic.List{System.Fabric.Common.FabricTestAction})">
            Create and append commands for the given action.
        </member>
        <member name="T:System.Fabric.Chaos.RandomActionGenerator.ActionGeneratorParameters">
            <summary>
            This class adds new test parameters which are relevant to RandomSession.
            </summary>
        </member>
        <member name="F:System.Fabric.Chaos.RandomActionGenerator.ActionGeneratorParameters.SystemFaultActionWeightDefault">
            <summary>
            Default weight to control the probability with which a system fault will be chosen
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.ActionGeneratorParameters.ValidateParameters(System.String@)">
            <summary>
            This method will do a basic validation of the testParameters.
            </summary>
            <param name="errorMessage">Help message/hint if some parameters are not valid.</param>
            <returns>True iff all parameters in this class are valid.</returns>
        </member>
        <member name="P:System.Fabric.Chaos.RandomActionGenerator.ActionGeneratorParameters.SystemFaultActionWeight">
            <summary>
            Weight to control the probability with which a system fault is chosen
            </summary>
        </member>
        <member name="P:System.Fabric.Chaos.RandomActionGenerator.ActionGeneratorParameters.SystemServiceFaultParameters">
            <summary>
            Parameters for system faults, e.g., FM Rebuild
            </summary>
        </member>
        <member name="T:System.Fabric.Chaos.RandomActionGenerator.StateTransitionAction">
            <summary>
            This class will represent an action on WindowsFabric cluster which gets generated during RandomSession.
            In general an action could represent a change in set of cluster nodes, faults,
            applications, services or verification step or just a query.
            Action will be executed with help of one or more ScriptTest commands.
            </summary>
            TODO FW: make it abstract after script test side code is refactor and totally dependent on testability.
        </member>
        <member name="T:System.Fabric.Chaos.RandomActionGenerator.NodeFaultActionGeneratorParameters">
            <summary>
            This class adds test parameters which are relevant to specific part of RandomSession -- NodeFaultActionsManager.
            This class exposed configurations/parameters relevant for generating random actions(add, remove, restart) for nodes in the cluster.
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.NodeFaultActionGeneratorParameters.ValidateParameters(System.String@)">
            <summary>
            This method will do a basic validation of the testParameters.
            </summary>
            <param name="errorMessage">Help message/hint if some parameters are not valid.</param>
            <returns>True iff all parameters in this class are valid.</returns>
        </member>
        <member name="P:System.Fabric.Chaos.RandomActionGenerator.NodeFaultActionGeneratorParameters.MinLiveNodesRatio">
            <summary>
            Creation of node-faults must maintain live/Up nodes's ratio higher than this value.
            This is a constraint while creating NodeFault actions.
            </summary>
        </member>
        <member name="P:System.Fabric.Chaos.RandomActionGenerator.NodeFaultActionGeneratorParameters.MinLiveSeedNodesRatio">
            <summary>
            Creation of node-faults must maintain live/Up seed-nodes's ratio higher than this value.
            This is a constraint while creating NodeFault actions.
            </summary>
        </member>
        <member name="P:System.Fabric.Chaos.RandomActionGenerator.NodeFaultActionGeneratorParameters.RestartNodeFaultWeight">
            <summary>
            Action generator will create RestartNodeAction rather than StopNodeAction with this much probability.
            </summary>
        </member>
        <member name="P:System.Fabric.Chaos.RandomActionGenerator.NodeFaultActionGeneratorParameters.StartStopNodeFaultWeight">
            <summary>
            Action generator will create RestartNodeAction rather than StopNodeAction with this much probability.
            </summary>
        </member>
        <member name="T:System.Fabric.Chaos.RandomActionGenerator.RandomExtensions">
            <summary>
            This class will be a helper class to generate random entities.
            This class adds new test parameters which are relevant to RandomSession.
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.RandomExtensions.ChooseRandomItemOrDefault``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Returns a randomly chosen item from given collection.
            </summary>
            <typeparam name="T">type of items in collection.</typeparam>
            <param name="items">Input collection of items from an item will be chosen</param>
            <returns>Returns an item at randomly chosen index if collection non-empty.</returns>
        </member>
        <member name="T:System.Fabric.Chaos.RandomActionGenerator.RootActionGenerator">
            <summary>
            This class will be helpful in generating Random Actions.
            This class will serve as entry point to generate any RandomSessionAction.
            This class will basically schedule and invoke different ActionsManager based on state and their configurable weights.
            and will translate those to ScriptTest commands.
            </summary>
        </member>
        <member name="F:System.Fabric.Chaos.RandomActionGenerator.RootActionGenerator.systemFaultActionGenerator">
            <summary>
            Generator for system faults, like: FM Rebuild fault
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.RootActionGenerator.GetPendingActions(System.Fabric.Chaos.RandomActionGenerator.ClusterStateSnapshot)">
            <summary>
            Actions that need to be executed before the test ends; e.g., workload-name.stop must be called
            if workload-name.start is executed
            </summary>
            <param name="stateInfo">Current snapshot of the cluster</param>
            <returns>A list of actions</returns>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.RootActionGenerator.GenerateFaultCategories">
            <summary>
            Generates and returns a list of fault categories without modifying the current cluster snapshot
            </summary>
            <returns>A list of fault categories</returns>
        </member>
        <member name="F:System.Fabric.Chaos.RandomActionGenerator.RootActionGenerator.FaultCategory.SystemFaults">
            <summary>
            For example, FM Rebuild
            </summary>
        </member>
        <member name="T:System.Fabric.Chaos.RandomActionGenerator.ServiceFaultActionGeneratorParameters">
            <summary>
            This class adds test parameters which are relevant to specific part of RandomSession -- NodeFaultActionsManager.
            This class exposed configurations/parameters relevant for generating random actions(add, remove, restart) for nodes in the cluster.
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.ServiceFaultActionGeneratorParameters.ValidateParameters(System.String@)">
            <summary>
            This method will do a basic validation of the testParameters.
            </summary>
            <param name="errorMessage">Help message/hint if some parameters are not valid.</param>
            <returns>True iff all parameters in this class are valid.</returns>
        </member>
        <member name="T:System.Fabric.Chaos.RandomActionGenerator.StateTransitionActionType">
            <summary>
            This enum will represent a type of action RandomSessionAction on WindowsFabric cluster which gets generated during RandomSession.
            </summary>
        </member>
        <member name="F:System.Fabric.Chaos.RandomActionGenerator.StateTransitionActionType.FmRebuild">
            <summary>
            Forces the Failover Manager service to rebuild GFUM
            </summary>
        </member>
        <member name="T:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGenerator">
            <summary>
            This class will keep track of current state of the WindowsFabricCluster being used for testing
            and generates random actions to change state, induce fault in it or verify consistency of the state.
            </summary>
        </member>
        <member name="F:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGenerator.testParameters">
            <summary>
            Parameters for generating system fault actions
            </summary>
        </member>
        <member name="F:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGenerator.stateSnapshot">
            <summary>
            Current snapshot of the cluster
            </summary>
        </member>
        <member name="F:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGenerator.systemFaultCategoryChooser">
            <summary>
            Probabilistically chooses a system fault category
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGenerator.#ctor(System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGeneratorParameters,System.Random)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGenerator"/> class.
            </summary>
            <param name="testParameters"> Parameters for this random session.</param>
            <param name="random"> Random number generator </param>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGenerator.GenerateAndEnqueueRandomActions(System.Fabric.Chaos.RandomActionGenerator.ClusterStateSnapshot)">
            <summary>
            Generates and enqueues random actions
            </summary>
            <param name="stateInfo">Current snapshot of the cluster</param>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGenerator.GenerateAndEnqueueRandomActions">
            <summary>
            Generates and enqueues random actions
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGenerator.CreateSystemFaultAction">
            <summary>
            Creates and returns random system fault actions
            </summary>
            <returns>A state transition action</returns>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGenerator.CreateOneSystemFaultAction">
            <summary>
            Creates and returns one system fault action
            </summary>
            <returns>A transition action for a system service</returns>
        </member>
        <member name="T:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGenerator.SystemFaultCategory">
            <summary>
            System fault categories
            </summary>
        </member>
        <member name="F:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGenerator.SystemFaultCategory.FmRebuild">
            <summary>
            Forces the Failover Manager service to rebuild the GFUM
            </summary>
        </member>
        <member name="T:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGeneratorParameters">
            <summary>
            This class adds test parameters which are relevant to specific part of RandomSession -- SystemFaultActionsManager.
            This class exposed configurations/parameters relevant for generating random actions(add, remove, restart) for nodes in the cluster.
            </summary>
        </member>
        <member name="F:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGeneratorParameters.FmRebuildFaultWeightDefault">
            <summary>
            Default weight for FmRebuild system fault action
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGeneratorParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGeneratorParameters"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGeneratorParameters.ValidateParameters(System.String@)">
            <summary>
            This method will do a basic validation of the testParameters.
            </summary>
            <param name="errorMessage">Help message/hint if some parameters are not valid.</param>
            <returns>True only if all parameters in this class are valid.</returns>
        </member>
        <member name="P:System.Fabric.Chaos.RandomActionGenerator.SystemFaultActionGeneratorParameters.FmRebuildFaultWeight">
            <summary>
            Gets or sets the weight to determine the probability with which 
            the action generator will create FmRebuildAction.
            </summary>
        </member>
        <member name="T:System.Fabric.Chaos.RandomActionGenerator.SystemStateTransitionAction">
            <summary>
            This class is used to create instances of various system state transition actions
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.SystemStateTransitionAction.#ctor(System.Fabric.Chaos.RandomActionGenerator.StateTransitionActionType)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Chaos.RandomActionGenerator.SystemStateTransitionAction"/> class.
            </summary>
            <param name="actionType">StateTransitionActionType</param>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.SystemStateTransitionAction.CreateFmRebuildStateTransitionAction">
            <summary>
            Creates and returns a state transition action, upon execution of which, the Failover
            Manager service is forced to rebuild the GFUM
            </summary>
            <returns>A system service state transition action</returns>
        </member>
        <member name="T:System.Fabric.Chaos.RandomActionGenerator.WeightedDice`1">
            <summary>
            This class will be helpful in generating random weighted outcomes.
            Basically it will be used to choose one of the several options with their associated weight/probability ratio.
            </summary>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.WeightedDice`1.NextRoll">
            <summary>
            Returns a randomly chosen face. Probability of any face is proportional to it's weight.
            </summary>
            <returns>Returns a randomly chosen face.</returns>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.WeightedDice`1.AddNewFace(`0,System.Double)">
            <summary>
            Adds a new face to the dice.
            </summary>
            <param name="faceId">The id of the face.</param>
            <param name="weight">The weight of the dice.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.Chaos.RandomActionGenerator.WeightedDice`1.UpdateRangeTree">
            <summary>
            Update the range tree.
            </summary>
        </member>
        <member name="T:System.Fabric.Testability.Scenario.FailoverTestScenario">
            <summary>
            The FailoverTestScenario is a test which runs a series of faults against a specific parition defined by the PartitionSelector in the FailoverTestScenarioParameters.
            </summary>
            <remarks>
            The faults induced put the partition through some specific failover scenarios to ensure those paths are tested and exercised. Running your workload against the service
            at the same time as the test being run will increase the chances of inducing and discovering bugs with the service. The faults induced for the
            Primary, Secondaries and stateless instances are RestartReplica(only persisted), RemoveReplica, ResartDeployedCodePackage, MovePrimary (only Stateful),
            MoveSecondary (Only Stateful), RestartPartition (no data loss).
            </remarks>
        </member>
        <member name="T:System.Fabric.Testability.Scenario.TestScenario">
            <summary>
            Base class for TestScenarios which defines all the common methods and functionality.
            </summary>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.TestScenario.#ctor(System.Fabric.FabricClient,System.Fabric.Testability.Scenario.TestScenarioParameters)">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="fabricClient">This API supports the Service Fabric platform and is not meant to be called from your code</param>
            <param name="testScenarioParameters">This API supports the Service Fabric platform and is not meant to be called from your code</param>
        </member>
        <member name="F:System.Fabric.Testability.Scenario.TestScenario.ProgressChanged">
            <summary>
            Event handler which exposes the current progress of the test. When handled it gives you the ProgressChangedEventArgs
            which gives out a total % of the test which has already completed and the last operation (string) that was performed 
            which can be useful for logging.
            </summary>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.TestScenario.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            This method executes the test with the specified parameter set passsed into the constructor.
            </summary>
            <param name="token">the Cancellation token for the async operation.</param>
            <exception cref="T:System.Fabric.FabricValidationException">If any service does not stabilize within the specified timeout.</exception>
            <returns>Returns a Task which represents the asynchronous operation.</returns>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.TestScenario.Dispose">
            <summary>
            This method will dispose the TestScenario.
            </summary>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.TestScenario.OnExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="token">This API supports the Service Fabric platform and is not meant to be called from your code</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.TestScenario.OnDispose(System.Boolean)">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="disposing">This API supports the Service Fabric platform and is not meant to be called from your code</param>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.TestScenario.ValidateScenarioAtExitAsync(System.Threading.CancellationToken)">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="token">This API supports the Service Fabric platform and is not meant to be called from your code</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.TestScenario.GetElapsedTime">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <returns>This API supports the Service Fabric platform and is not meant to be called from your code</returns>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.TestScenario.ReportProgress(System.String)">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="progressReport">This API supports the Service Fabric platform and is not meant to be called from your code</param>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.TestScenario.ReportProgress(System.String,System.Object[])">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="format">This API supports the Service Fabric platform and is not meant to be called from your code</param>
            <param name="args">This API supports the Service Fabric platform and is not meant to be called from your code</param>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.TestScenario.HandleTaskComplete(System.Threading.Tasks.Task,System.String,System.String)">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="t">This API supports the Service Fabric platform and is not meant to be called from your code</param>
            <param name="actionId">This API supports the Service Fabric platform and is not meant to be called from your code</param>
            <param name="actionName">This API supports the Service Fabric platform and is not meant to be called from your code</param>
        </member>
        <member name="P:System.Fabric.Testability.Scenario.TestScenario.ScenarioParameters">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
        </member>
        <member name="P:System.Fabric.Testability.Scenario.TestScenario.FabricClient">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.FailoverTestScenario.#ctor(System.Fabric.FabricClient,System.Fabric.Testability.Scenario.FailoverTestScenarioParameters)">
            <summary>
            Constructor for the FailoverTestScenario.
            </summary>
            <param name="fabricClient">FabricClient object which will be used to connect to the cluster and induce the faults.</param>
            <param name="testScenarioParameters">FailoverTestScenarioParameters which define the configuration for the failover test.</param>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.FailoverTestScenario.OnExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="token">This API supports the Service Fabric platform and is not meant to be called from your code</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.FailoverTestScenario.OnDispose(System.Boolean)">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="disposing">This API supports the Service Fabric platform and is not meant to be called from your code</param>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.FailoverTestScenario.ValidateScenarioAtExitAsync(System.Threading.CancellationToken)">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="token">This API supports the Service Fabric platform and is not meant to be called from your code</param>
            <returns></returns>
        </member>
        <member name="T:System.Fabric.Testability.Scenario.FailoverTestScenarioParameters">
            <summary>
            This class defines all the test parameters to configure the FailoverTestScenario.
            </summary>
        </member>
        <member name="T:System.Fabric.Testability.Scenario.TestScenarioParameters">
            <summary>
            Base class for parameters passed into all the TestScenarios which defines all the common parameters.
            </summary>
        </member>
        <member name="F:System.Fabric.Testability.Scenario.TestScenarioParameters.WaitTimeBetweenFaultsDefault">
            <summary>
            Default value for WaitTimeBetweenFaults used if value not specified by user.
            </summary>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.TestScenarioParameters.#ctor(System.TimeSpan)">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="timetoRun">This API supports the Service Fabric platform and is not meant to be called from your code</param>
        </member>
        <member name="P:System.Fabric.Testability.Scenario.TestScenarioParameters.TimeToRun">
            <summary>
            Total time for which the scenario will run before ending.
            </summary>
        </member>
        <member name="P:System.Fabric.Testability.Scenario.TestScenarioParameters.WaitTimeBetweenFaults">
            <summary>
            Total max wait time between consecutive faults. The large the value lower the concurrency.
            </summary>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.FailoverTestScenarioParameters.#ctor(System.Fabric.PartitionSelector,System.TimeSpan,System.TimeSpan)">
            <summary>
            Constructor for the FailoverTestScenarioParameters.
            </summary>
            <param name="partitionSelector">PartitionSelector which gives the partition being targeted for the test.</param>
            <param name="timeToRun">The total time for which the failover test will run.</param>
            <param name="maxServiceStabilizationTimeout">The maximum amount of time to wait for the service to stabilize after a fault before failing the test.</param>
        </member>
        <member name="P:System.Fabric.Testability.Scenario.FailoverTestScenarioParameters.PartitionSelector">
            <summary>
            The PartitionSelector which gives the partition that needs to be targeted for the test.
            </summary>
        </member>
        <member name="P:System.Fabric.Testability.Scenario.FailoverTestScenarioParameters.MaxServiceStabilizationTimeout">
            <summary>
            The maximum amount of time to wait for the service to stabilize after a fault before failing the test.
            </summary>
        </member>
        <member name="T:System.Fabric.Testability.Scenario.ChaosTestScenario">
            <summary>
            The ChaosTestScenario is a long running scenario which keeps inducing failover and faults into the cluster up until the TimetoRun has expired.
            </summary>
            <remarks>
            The test will induce upto 'maxConcurrentFaults' every iteration and then will validate the health and availability of all the services in the cluster before
            moving on to the next iteration of faults. If at any point the services are not available or healthy by 'maxClusterStabilizationTimeout' the test will fail with a 
            FabricValidationException. For every iteration the concurrent faults that are induced into the system ensure safety such that the faults together will not cause any service to
            become unavailable or lose any data. This assumes no faults induced from the outside or any unexpected failures which if they happen (concurrent with the chaos test faults)
            can cause data availability loss. This is a very good test to run against your test or staging clusters which test workloads are running to ensure that faults in the system do not 
            result in any sort of availability loss or other unexpected service issues.
            </remarks>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.ChaosTestScenario.#ctor(System.Fabric.FabricClient,System.Fabric.Testability.Scenario.ChaosTestScenarioParameters)">
            <summary>
            Constructor for the ChaosTestScenario.
            </summary>
            <param name="fabricClient">FabricClient object which will be used to connect to the cluster and induce the faults.</param>
            <param name="chaosScenarioParameters">ChaosTestScenarioParameters which define the configuration for the chaos test.</param>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.ChaosTestScenario.OnExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="token">This API supports the Service Fabric platform and is not meant to be called from your code</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.ChaosTestScenario.ExecuteFaultIterationAsync(System.Threading.CancellationToken)">
            <summary>
            Get test actions for the iteration.
            Execute each action and wait for a random wait duration.
            </summary>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.ChaosTestScenario.OnDispose(System.Boolean)">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="disposing">This API supports the Service Fabric platform and is not meant to be called from your code</param>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.ChaosTestScenario.ValidateScenarioAtExitAsync(System.Threading.CancellationToken)">
            <summary>
            This API supports the Service Fabric platform and is not meant to be called from your code
            </summary>
            <param name="token">This API supports the Service Fabric platform and is not meant to be called from your code</param>
            <returns></returns>
        </member>
        <member name="T:System.Fabric.Testability.Scenario.ChaosTestScenarioParameters">
            <summary>
            This class defines all the test parameters to configure the ChaosTestScenario.
            </summary>
        </member>
        <member name="M:System.Fabric.Testability.Scenario.ChaosTestScenarioParameters.#ctor(System.TimeSpan,System.Int64,System.Boolean,System.TimeSpan)">
            <summary>
            Constructor for the ChaosTestScenarioParameters.
            </summary>
            <param name="maxClusterStabilizationTimeout">The maximum amount of time to wait for the entire cluster to stabilize after a fault iteration before failing the test.</param>
            <param name="maxConcurrentFaults">Maximum number of concurrent faults induced per iteration with the lowest being 1. The higer the concurrency the more aggressive the failovers 
            thus inducing more complex series of failures to uncover bugs. using 2 or 3 for this is recommended.</param>
            <param name="enableMoveReplicaFaults">Enables or disables the MovePrimary and MoveSecondary faults.</param>
            <param name="timeToRun"></param>
        </member>
        <member name="P:System.Fabric.Testability.Scenario.ChaosTestScenarioParameters.WaitTimeBetweenIterations">
            <summary>
            Wait time between two iterations for a random duration bound by this value.
            </summary>
        </member>
        <member name="P:System.Fabric.Testability.Scenario.ChaosTestScenarioParameters.MaxClusterStabilizationTimeout">
            <summary>
            The maximum amount of time to wait for the cluster to stabilize after a fault before failing the test.
            </summary>
        </member>
        <member name="T:System.Fabric.Result.RestartDeployedCodePackageResult">
            <summary>
            Returns Restart deployed code package result object. 
            </summary>
            <remarks>
            This class returns nodeName, applicationName, serviceManifestName, codePackageName, codePackageInstanceId and SelectedReplica information 
            for which the deployed code package action was called. ReplicaSelector will be none in case application is selecetd using nodename, 
            application name, service manifest, code package name, and code package instance id.
            </remarks>
        </member>
        <member name="M:System.Fabric.Result.RestartDeployedCodePackageResult.#ctor(System.String,System.Uri,System.String,System.String,System.Int64,System.Fabric.SelectedReplica)">
            <summary>
            Restart deployed code package result constructor.
            </summary>
            <param name="nodeName">node name</param>
            <param name="applicationName">application name</param>
            <param name="serviceManifestName">service manifest name</param>
            <param name="codePackageName">code package name</param>
            <param name="codePackageInstanceId">code package instance id</param>
            <param name="selectedReplica">selected replica</param>
        </member>
        <member name="P:System.Fabric.Result.RestartDeployedCodePackageResult.ApplicationName">
            <summary>
            Gets Application name.
            </summary>
        </member>
        <member name="P:System.Fabric.Result.RestartDeployedCodePackageResult.NodeName">
            <summary>
            Gets node name.
            </summary>
        </member>
        <member name="P:System.Fabric.Result.RestartDeployedCodePackageResult.ServiceManifestName">
            <summary>
            Gets service manifest name.
            </summary>
        </member>
        <member name="P:System.Fabric.Result.RestartDeployedCodePackageResult.CodePackageName">
            <summary>
            Gets code package name.
            </summary>
        </member>
        <member name="P:System.Fabric.Result.RestartDeployedCodePackageResult.CodePackageInstanceId">
            <summary>
            Gets code package instance id.
            </summary>
        </member>
        <member name="P:System.Fabric.Result.RestartDeployedCodePackageResult.SelectedReplica">
            <summary>
            Gets selected replica.
            </summary>
        </member>
        <member name="T:System.Fabric.Result.RemoveReplicaResult">
            <summary>
            Returns Remove replica result object.
            </summary>
            <remarks>
            This class returns the selected replica for which remove action was called.
            </remarks>
        </member>
        <member name="T:System.Fabric.Result.ReplicaResult">
            <summary>
            Replica result object. This class returns the SelectedReplica information. 
            </summary>
        </member>
        <member name="M:System.Fabric.Result.ReplicaResult.#ctor(System.Fabric.SelectedReplica)">
            <summary>
            Replica result constructor.
            </summary>
            <param name="selectedReplica">Selected replica</param>
        </member>
        <member name="P:System.Fabric.Result.ReplicaResult.SelectedReplica">
            <summary>
            Gets selected replica.
            </summary>
        </member>
        <member name="M:System.Fabric.Result.RemoveReplicaResult.#ctor(System.Fabric.SelectedReplica)">
            <summary>
            Remove replica result constructor.
            </summary>
            <param name="selectedReplica">Selected replica</param>
        </member>
        <member name="T:System.Fabric.Result.MovePrimaryResult">
            <summary>
            Returns Move primary replica result object.
            </summary>
            <remarks>
            This class returns the nodeName and SelectedPartition information for which move primary replica action was called. 
            </remarks>
        </member>
        <member name="M:System.Fabric.Result.MovePrimaryResult.#ctor(System.String,System.Fabric.SelectedPartition)">
            <summary>
            Move primary replica result object constructor.
            </summary>
            <param name="nodeName">Node name where primary will be moving.</param>
            <param name="selectedPartition">Selected parition</param>
        </member>
        <member name="P:System.Fabric.Result.MovePrimaryResult.NodeName">
            <summary>
            Gets node name.
            </summary>
        </member>
        <member name="P:System.Fabric.Result.MovePrimaryResult.SelectedPartition">
            <summary>
            Gets the selected partition.
            </summary>
        </member>
        <member name="T:System.Fabric.Result.MoveSecondaryResult">
            <summary>
            Retunrs Move secondary replica result object.
            </summary>
            <remarks>
            This class returns currentSecondaryNodeName, where secondary replica was present before movement, 
            newSecondaryNodeName where the SelectedReplica is moved and SelectedPartition information that represents 
            the selected secondary replica.
            </remarks>
        </member>
        <member name="M:System.Fabric.Result.MoveSecondaryResult.#ctor(System.String,System.String,System.Fabric.SelectedPartition)">
            <summary>
            Move secondary replica result constructor.
            </summary>
            <param name="currentSecondaryNodeName">Current node name where secodary replica exist.</param>
            <param name="newSecondaryNodeName">New node name where secondary replica need to move.</param>
            <param name="selectedPartition">Selected partion result object</param>
        </member>
        <member name="P:System.Fabric.Result.MoveSecondaryResult.CurrentSecondaryNodeName">
            <summary>
            Gets current node name where secodary replica exist.
            </summary>
        </member>
        <member name="P:System.Fabric.Result.MoveSecondaryResult.NewSecondaryNodeName">
            <summary>
            Gets new node name where secondary replica need to move.
            </summary>
        </member>
        <member name="P:System.Fabric.Result.MoveSecondaryResult.SelectedPartition">
            <summary>
            Gets the selected partition.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.RestartNodeDescriptionKind">
            <summary>
            This is an enum used to indicate what overload of the RestartNode API is being used 
            </summary>
            <remarks>
            The values indicate whether RestartNode .API is being called using NodeName etc. or using ReplicaSelector etc.
            </remarks>
        </member>
        <member name="F:System.Fabric.Common.RestartNodeDescriptionKind.UsingNodeName">
            <summary>
            Do not verify the completion of the action.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.RestartNodeDescriptionKind.UsingReplicaSelector">
            <summary>
            Verify the completion of the action.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.StartNodeDescriptionKind">
            <summary>
            This is an enum used to indicate what overload of the RestartNode API is being used 
            </summary>
            <remarks>
            The values indicate whether RestartNode .API is being called using NodeName etc. or using ReplicaSelector etc.
            </remarks>
        </member>
        <member name="F:System.Fabric.Common.StartNodeDescriptionKind.UsingNodeName">
            <summary>
            Do not verify the completion of the action.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.StartNodeDescriptionKind.UsingReplicaSelector">
            <summary>
            Verify the completion of the action.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.StopNodeDescriptionKind">
            <summary>
            This is an enum used to indicate what overload of the RestartNode API is being used 
            </summary>
            <remarks>
            The values indicate whether RestartNode .API is being called using NodeName etc. or using ReplicaSelector etc.
            </remarks>
        </member>
        <member name="F:System.Fabric.Common.StopNodeDescriptionKind.UsingNodeName">
            <summary>
            Do not verify the completion of the action.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.StopNodeDescriptionKind.UsingReplicaSelector">
            <summary>
            Verify the completion of the action.
            </summary>
        </member>
        <member name="T:System.Fabric.Common.RestartDeployedCodePackageDescriptionKind">
            <summary>
            This is an enum used to indicate what overload of the RestartNode API is being used 
            </summary>
            <remarks>
            The values indicate whether RestartNode .API is being called using NodeName etc. or using ReplicaSelector etc.
            </remarks>
        </member>
        <member name="F:System.Fabric.Common.RestartDeployedCodePackageDescriptionKind.UsingNodeName">
            <summary>
            Do not verify the completion of the action.
            </summary>
        </member>
        <member name="F:System.Fabric.Common.RestartDeployedCodePackageDescriptionKind.UsingReplicaSelector">
            <summary>
            Verify the completion of the action.
            </summary>
        </member>
        <member name="T:System.Fabric.EntryPointStatus">
            <summary>
            <para>Specifies the status of the CodePackage EntryPoint deployed on a node.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.EntryPointStatus.Invalid">
            <summary>
            <para>The status of the entry point is unknown or invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.EntryPointStatus.Pending">
            <summary>
            <para>The entry point is scheduled to be started.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.EntryPointStatus.Starting">
            <summary>
            <para>The entry point is being started.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.EntryPointStatus.Started">
            <summary>
            <para>The entry point was started successfully and is running.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.EntryPointStatus.Stopping">
            <summary>
            <para>The entry point is being stopped.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.EntryPointStatus.Stopped">
            <summary>
            <para>The entry point is not running.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Epoch">
            <summary>
            <para> Represents the current version of the service in Service Fabric. </para>
            </summary>
            <remarks>
            <para>An Epoch is a configuration number for the replica set as a whole. 
            When the configuration of the replica set changes, for example when the Primary replica changes, 
            the operations that are replicated from the new Primary replica are said to be a new Epoch 
            from the ones which were sent by the old Primary replica. 
            The fact that the Primary has changed is not directly visible to Secondary replicas, 
            which are usually unaffected by the failure that affected the original Primary replica. 
            To track that the Primary replica has changed has to be communicated to the Secondary replica. 
            This communication occurs via the <see cref="M:System.Fabric.IStateProvider.UpdateEpochAsync(System.Fabric.Epoch,System.Int64,System.Threading.CancellationToken)"/> method. 
            Most services can ignore the details of the inner fields of the Epoch as it is usually sufficient to know that the Epoch has changed 
            and to compare Epochs to determine relative ordering of operations and events in the system. 
            Comparison operations are provided for this purpose.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Epoch.#ctor(System.Int64,System.Int64)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Epoch"/> class with the specified 
            data loss number and configuration number.</para>
            </summary>
            <param name="dataLossNumber">
            <para>An <see cref="T:System.Int64"/> representing a monotonically increasing value which is updated 
            whenever data loss is suspected.</para>
            </param>
            <param name="configurationNumber">
            <para>An <see cref="T:System.Int64"/> representing an increasing value that is updated whenever 
            the configuration of this replica set changes.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Epoch.op_Equality(System.Fabric.Epoch,System.Fabric.Epoch)">
            <summary>
            <para>Determines whether two specified <see cref="T:System.Fabric.Epoch"/> objects have the same value.</para>
            </summary>
            <param name="left">
            <para>The left <see cref="T:System.Fabric.Epoch"/> object to compare.</para>
            </param>
            <param name="right">
            <para>The right <see cref="T:System.Fabric.Epoch"/> object to compare.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the value of <paramref name="left"/> is the same as the value of <paramref name="right"/>; 
                otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Epoch.op_Inequality(System.Fabric.Epoch,System.Fabric.Epoch)">
            <summary>
            <para>Determines whether two specified <see cref="T:System.Fabric.Epoch"/> objects have different values.</para>
            </summary>
            <param name="left">
            <para>The left <see cref="T:System.Fabric.Epoch"/> object to compare.</para>
            </param>
            <param name="right">
            <para>The right <see cref="T:System.Fabric.Epoch"/> object to compare.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the value of <paramref name="left"/> is different than the value of <paramref name="right"/>; 
                otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Epoch.op_LessThan(System.Fabric.Epoch,System.Fabric.Epoch)">
            <summary>
            <para>Determines whether one specified <see cref="T:System.Fabric.Epoch"/> object is less than another specified <see cref="T:System.Fabric.Epoch"/> object.</para>
            </summary>
            <param name="left">
            <para>The left <see cref="T:System.Fabric.Epoch"/> object to compare.</para>
            </param>
            <param name="right">
            <para>The right <see cref="T:System.Fabric.Epoch"/> object to compare.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the value of <paramref name="left"/> is less than the value of <paramref name="right"/>; 
                otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Epoch.op_LessThanOrEqual(System.Fabric.Epoch,System.Fabric.Epoch)">
            <summary>
            <para>Determines whether one specified <see cref="T:System.Fabric.Epoch"/> object is less than or equal to another specified <see cref="T:System.Fabric.Epoch"/> object.</para>
            </summary>
            <param name="left">
            <para>The left <see cref="T:System.Fabric.Epoch"/> object to compare.</para>
            </param>
            <param name="right">
            <para>The right <see cref="T:System.Fabric.Epoch"/> object to compare.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the value of <paramref name="left"/> is less than or equal to the value of <paramref name="right"/>; 
                otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Epoch.op_GreaterThan(System.Fabric.Epoch,System.Fabric.Epoch)">
            <summary>
            <para>Determines whether one specified <see cref="T:System.Fabric.Epoch"/> object is greater than another specified <see cref="T:System.Fabric.Epoch"/> object.</para>
            </summary>
            <param name="left">
            <para>The left <see cref="T:System.Fabric.Epoch"/> object to compare.</para>
            </param>
            <param name="right">
            <para>The right <see cref="T:System.Fabric.Epoch"/> object to compare.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the value of <paramref name="left"/> is greater than the value of <paramref name="right"/>; 
                otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Epoch.op_GreaterThanOrEqual(System.Fabric.Epoch,System.Fabric.Epoch)">
            <summary>
            <para>Determines whether one specified <see cref="T:System.Fabric.Epoch"/> object is greater than or equal to another specified <see cref="T:System.Fabric.Epoch"/> object.</para>
            </summary>
            <param name="left">
            <para>The left <see cref="T:System.Fabric.Epoch"/> object to compare.</para>
            </param>
            <param name="right">
            <para>The right <see cref="T:System.Fabric.Epoch"/> object to compare.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the value of <paramref name="left"/> is greater than or equal to the value of <paramref name="right"/>; 
                otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Epoch.Equals(System.Object)">
            <summary>
            <para>Determines whether the specified object is equal to the current object.</para>
            </summary>
            <param name="obj">
            <para>The object to compare with the current object.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the specified object is equal to the current object; 
                otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Epoch.GetHashCode">
            <summary>
            <para>Serves as a hash function for the <see cref="T:System.Fabric.Epoch"/> type.</para>
            </summary>
            <returns>
            <para>A <see cref="T:System.Int32"/> representing a hash code for the current <see cref="T:System.Fabric.Epoch"/>..</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Epoch.Equals(System.Fabric.Epoch)">
            <summary>
            <para>Determines whether the specified <see cref="T:System.Fabric.Epoch"/> object is equal to the current <see cref="T:System.Fabric.Epoch"/> object.</para>
            </summary>
            <param name="other">
            <para>The object to compare with the current <see cref="T:System.Fabric.Epoch"/> object.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the specified <see cref="T:System.Fabric.Epoch"/> object is equal to the current <see cref="T:System.Fabric.Epoch"/> object; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Epoch.CompareTo(System.Fabric.Epoch)">
            <summary>
            <para>Compares this <see cref="T:System.Fabric.Epoch"/> object to the specified <paramref name="other"/><see cref="T:System.Fabric.Epoch"/> object.</para>
            </summary>
            <param name="other">
            <para>The <see cref="T:System.Fabric.Epoch"/> object to compare.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Int32"/>.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Epoch.DataLossNumber">
            <summary>
            <para>Gets the current data loss number in this <see cref="T:System.Fabric.Epoch"/>.</para>
            </summary>
            <value>
            <para>Returns an <see cref="T:System.Int64"/> representing the current data loss number.</para>
            </value>
            <remarks>
            <para>The data loss number property is a monotonically increasing value which is updated 
            whenever data loss is suspected, as when loss of a quorum of replicas in the replica set 
            that includes the Primary replica.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Epoch.ConfigurationNumber">
            <summary>
            <para>Gets or sets the current configuration number property in this <see cref="T:System.Fabric.Epoch"/>.</para>
            </summary>
            <value>
            <para>Returns an <see cref="T:System.Int64"/> representing the configuration number.</para>
            </value>
            <remarks>
            <para>The configuration number is an increasing value that is updated whenever the configuration 
            of this replica set changes. The services are informed of the current configuration number 
            only when <see cref="M:System.Fabric.IReplicator.UpdateEpochAsync(System.Fabric.Epoch,System.Threading.CancellationToken)"/>
            method is called as a result of an attempt to change the Primary replica of the replica set.</para>
            </remarks>
        </member>
        <member name="F:System.Fabric.FabricClient.FabricSystemApplication">
            <summary>
            <para>The Fabric system application.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricClient.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricClient"/> class.</para>
            </summary>
            <remarks>
            <para>If the <see cref="T:System.Fabric.FabricClient"/> is on the same cluster as the service, 
            then use a Local <see cref="T:System.Fabric.FabricClient"/>. Local <see cref="T:System.Fabric.FabricClient"/> is a feature of 
            Service Fabric that allows the <see cref="T:System.Fabric.FabricClient"/> to connect to the local Gateway Service instead of choosing from a list. This way, your client can bypass an extra network hop. In case a service is resolving another service partition in the same cluster, then it is recommended that you use Local <see cref="T:System.Fabric.FabricClient"/>, as it enables automatic load balancing and improves performance.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.#ctor(System.Fabric.FabricClientRole)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricClient"/> class with the specified fabric client role.
            </para>
            </summary>
            <param name="clientRole">
            <para>The fabric client role.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricClient.#ctor(System.Fabric.FabricClientSettings)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricClient"/> class with the desired fabric client settings. 
            If the <see cref="T:System.Fabric.FabricClient"/> is on the same cluster as the service, then use a Local <see cref="T:System.Fabric.FabricClient"/>. Local <see cref="T:System.Fabric.FabricClient"/> is a feature of Service Fabric that allows the <see cref="T:System.Fabric.FabricClient"/> to connect to the local Gateway Service instead of choosing from a list. This way, your client can bypass an extra network hop. In case a service is resolving another service partition in the same cluster, then it is recommended that you use Local <see cref="T:System.Fabric.FabricClient"/>, as it enables automatic load balancing and improves performance.</para>
            </summary>
            <param name="settings">
            <para>The fabric client settings used by the fabric client.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricClient.#ctor(System.String[])">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricClient"/> class with given Service Fabric Gateway addresses (hostEndpoints).</para>
            </summary>
            <param name="hostEndpoints">
            <para>Defines the set of Gateway addresses the <see cref="T:System.Fabric.FabricClient"/> can use to connect to the cluster.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricClient.#ctor(System.Fabric.SecurityCredentials,System.String[])">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricClient"/> class with given Service Fabric Gateway addresses (hostEndpoints) and security credentials.</para>
            </summary>
            <param name="credential">
             <para><see cref="T:System.Fabric.SecurityCredentials"/> defines the security settings for the<see cref="T:System.Fabric.FabricClient"/>.</para></param>
            <param name="hostEndpoints">
            <para>Defines the set of Gateway addresses the <see cref="T:System.Fabric.FabricClient"/> can use to connect to the cluster.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricClient.#ctor(System.Fabric.FabricClientSettings,System.String[])">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricClient"/> class with given 
            Service Fabric Gateway addresses (hostEndpoints) and the desired fabric client settings.</para>
            </summary>
            <param name="settings">
            <para>The fabric client settings.</para>
            </param>
            <param name="hostEndpoints">
            <para>Defines the set of Gateway addresses the <see cref="T:System.Fabric.FabricClient"/> can use to connect to the cluster.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricClient.#ctor(System.Fabric.SecurityCredentials,System.Fabric.FabricClientSettings,System.String[])">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricClient"/> class with given Service Fabric Gateway addresses (hostEndpoints), security credentials and fabric client settings.</para>
            </summary>
            <param name="credential">
             <para><see cref="T:System.Fabric.SecurityCredentials"/> defines the security settings for the<see cref="T:System.Fabric.FabricClient"/>.</para></param>
            <param name="settings">
            <para>The fabric client settings.</para>
            </param>
            <param name="hostEndpoints">
            <para>Defines the set of Gateway addresses the <see cref="T:System.Fabric.FabricClient"/> can use to connect to the cluster.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricClient.#ctor(System.TimeSpan,System.String[])">
            <summary>
            <para>DEPRECATED. Initializes a new instance of the <see cref="T:System.Fabric.FabricClient"/> class with given keepAliveInterval 
            and Service Fabric Gateway addresses (hostEndpoints).</para>
            </summary>
            <param name="keepAliveInterval">
            <para>Defines the periodic keep alive message interval.</para>
            </param>
            <param name="hostEndpoints">
            <para> Defines the set of Gateway addresses the <see cref="T:System.Fabric.FabricClient"/> can use to connect to the cluster.</para>
            </param>
            <remarks>
            <para>If there are external devices in between the connection from the client to the cluster that require periodic messages to keep the connection alive, 
            then make sure to use the KeepAlive feature of FabricClient. During the initialization of the FabricClient, users can specify a TimeSpan keepAliveInterval. 
            If this argument is specified, then the FabricClient will periodically ping the Service Fabric Gateway Service it is currently communicating with, 
            as long as there is a pending operation. An example of a scenario where this feature is useful is Windows Azure. If the <see cref="T:System.Fabric.FabricClient"/> 
            is outside of Windows Azure and the cluster is inside of Windows Azure, then all connections will go through the Azure Load Balancer (ALB). 
            ALB terminates connections that are idle for more than 60 seconds. Hence, in these situations, <see cref="T:System.Fabric.FabricClient"/> should be created with 
            KeepAliveInterval set to &lt;59 seconds (20 -30 is recommended).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.#ctor(System.Fabric.SecurityCredentials,System.TimeSpan,System.String[])">
            <summary>
            <para>DEPRECATED. Initializes a new instance of the <see cref="T:System.Fabric.FabricClient"/> class with given credentials, keepAliveInterval 
            and Service Fabric Gateway addresses (hostEndpoints).</para>
            </summary>
            <param name="credential">Defines the security credentials.</param>
            <param name="keepAliveInterval">
            <para>Defines the periodic keep alive message interval.</para>
            </param>
            <param name="hostEndpoints">
            <para> Defines the set of Gateway addresses the <see cref="T:System.Fabric.FabricClient"/> can use to connect to the cluster.</para>
            </param>
            <remarks>
            <para>If there are external devices in between the connection from the client to the cluster that require periodic messages to keep the connection alive, 
            then make sure to use the KeepAlive feature of FabricClient. During the initialization of the FabricClient, users can specify a TimeSpan keepAliveInterval. 
            If this argument is specified, then the FabricClient will periodically ping the Service Fabric Gateway Service it is currently communicating with, 
            as long as there is a pending operation. An example of a scenario where this feature is useful is Windows Azure. If the <see cref="T:System.Fabric.FabricClient"/> 
            is outside of Windows Azure and the cluster is inside of Windows Azure, then all connections will go through the Azure Load Balancer (ALB). 
            ALB terminates connections that are idle for more than 60 seconds. Hence, in these situations, <see cref="T:System.Fabric.FabricClient"/> should be created with 
            KeepAliveInterval set to &lt;59 seconds (20 -30 is recommended).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.UpdateSettings(System.Fabric.FabricClientSettings)">
            <summary>
            <para>Updates the fabric client settings.</para>
            </summary>
            <param name="settings">
            <para>The new fabric client settings to be used.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para>The specified fabric client settings can’t be null.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>
                <see cref="P:System.Fabric.FabricClientSettings.PartitionLocationCacheLimit"/> must be positive.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>
                <see cref="P:System.Fabric.FabricClientSettings.PartitionLocationCacheBucketCount"/> must be greater or equal to zero.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>
                <see cref="P:System.Fabric.FabricClientSettings.ServiceChangePollInterval"/> must represent a positive duration.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>
                <see cref="P:System.Fabric.FabricClientSettings.ConnectionInitializationTimeout"/> must represent a positive duration.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>
                <see cref="P:System.Fabric.FabricClientSettings.KeepAliveInterval"/> must be zero or a positive duration.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>
                <see cref="P:System.Fabric.FabricClientSettings.HealthOperationTimeout"/> must represent a positive duration.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>
                <see cref="P:System.Fabric.FabricClientSettings.HealthReportSendInterval"/> must be zero or a positive duration.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>
                <see cref="P:System.Fabric.FabricClientSettings.HealthReportRetrySendInterval"/> must represent a positive duration.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>
                <see cref="P:System.Fabric.FabricClientSettings.PartitionLocationCacheBucketCount"/> must be greater or equal to zero.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.UpdateSecurityCredentials(System.Fabric.SecurityCredentials)">
            <summary>
            Updates the fabric client security credentials.
            </summary>
            <param name="credentials">The new security credentials to be used.</param>
        </member>
        <member name="M:System.Fabric.FabricClient.Dispose">
            <summary>
            <para>
            Disposes of the fabric client.
            </para>
            </summary>
        </member>
        <member name="P:System.Fabric.FabricClient.PropertyManager">
            <summary>
            <para>Gets the <see cref="P:System.Fabric.FabricClient.PropertyManager"/> to perform operations related to names and properties.</para>
            </summary>
            <value>
            <para>The <see cref="P:System.Fabric.FabricClient.PropertyManager"/> to perform operations related to names and properties.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricClient.ServiceManager">
            <summary>
            <para>Gets the <see cref="P:System.Fabric.FabricClient.ServiceManager"/> to perform operations related to services and service types.</para>
            </summary>
            <value>
            <para>The <see cref="P:System.Fabric.FabricClient.ServiceManager"/> to perform operations related to services and service types.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricClient.ServiceGroupManager">
            <summary>
            <para>Gets the <see cref="P:System.Fabric.FabricClient.ServiceGroupManager"/> to perform operations related to service groups.</para>
            </summary>
            <value>
            <para>The <see cref="P:System.Fabric.FabricClient.ServiceGroupManager"/> to perform operations related to service groups.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricClient.ApplicationManager">
            <summary>
            <para>Gets the <see cref="P:System.Fabric.FabricClient.ApplicationManager"/> to perform operations related to applications and application types.</para>
            </summary>
            <value>
            <para>The <see cref="P:System.Fabric.FabricClient.ApplicationManager"/> to perform operations related to applications and application types.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricClient.ClusterManager">
            <summary>
            <para>Gets the <see cref="P:System.Fabric.FabricClient.ClusterManager"/> to perform operations related to the Service Fabric cluster.</para>
            </summary>
            <value>
            <para>The <see cref="P:System.Fabric.FabricClient.ClusterManager"/> to perform operations related to the Service Fabric cluster.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricClient.RepairManager">
            <summary>
            <para>Gets the <see cref="T:System.Fabric.FabricClient.RepairManagementClient"/> to manage repair tasks.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.FabricClient.RepairManagementClient"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricClient.QueryManager">
            <summary>
            <para>Gets or sets the query manager for the client.</para>
            </summary>
            <value>
            <para>The query manager for the client.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricClient.HealthManager">
            <summary>
            <para>Gets the <see cref="P:System.Fabric.FabricClient.HealthManager"/> to perform operations related to health, like report health or get entity health.</para>
            </summary>
            <value>
            <para>The <see cref="P:System.Fabric.FabricClient.HealthManager"/> to perform operations related to health, like report health or get entity health.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricClient.InfrastructureManager">
            <summary>
            <para>Gets the <see cref="T:System.Fabric.FabricClient.InfrastructureServiceClient"/> to perform operations related to the infrastructure on which the cluster is running.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.FabricClient.InfrastructureServiceClient"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricClient.Settings">
            <summary>
            <para>Gets the fabric client settings.</para>
            </summary>
            <value>
            <para>The fabric client settings.</para>
            </value>
        </member>
        <member name="E:System.Fabric.FabricClient.ClientConnected">
            <summary>
            Occurs when the client is connected to gateway.
            </summary>
        </member>
        <member name="E:System.Fabric.FabricClient.ClientDisconnected">
            <summary>
            Occurs when the client is disconnected from the gateway.
            </summary>
        </member>
        <member name="E:System.Fabric.FabricClient.ClaimsRetrieval">
            <summary>
            Occurs when the client needs to provide a claims token for authorization with the gateway
            </summary>
        </member>
        <member name="T:System.Fabric.FabricClient.ApplicationManagementClient">
            <summary>
            <para>Provides the functionality to manage the Service Fabric cluster applications.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.CreateApplicationAsync(System.Fabric.Description.ApplicationDescription)">
            <summary>
              <para>Creates and instantiates the specific Service Fabric application.</para>
            </summary>
            <param name="applicationDescription">
              <para>The description of the application.</para>
            </param>
            <returns>
              <para>The created Service Fabric application.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
              <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
              object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.ImageBuilderValidationError" />: The create application request is not valid with respect to the provisioned manifests for the requested application type.</para>
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" />: The application name is not a valid Naming URI.</para>
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.CorruptedImageStoreObjectFound" />: A corrupted file was encountered on the ImageStore.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementAlreadyExistsException">
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationAlreadyExists" />: The application has already been created.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationTypeNotFound" />: The requested application type has not been provisioned yet.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
              <para>There was an error accessing a file on the Image Store.</para>
            </exception>
            <exception cref="T:System.FileNotFoundException">
              <para>A required file was not found on the Image Store.</para>
            </exception>
            <exception cref="T:System.DirectoryNotFoundException">
              <para>A required directory was not found on the Image Store.</para>
            </exception>
            <exception cref="T:System.PathTooLongException">
              <para>A path to an Image Store file/directory was too long.</para>
            </exception>
            <exception cref="T:System.IOException">
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException" />: There was an IO error communicating with the Image Store.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
              <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
              <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.CreateApplicationAsync(System.Fabric.Description.ApplicationDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
              <para>Creates and instantiates the specific Service Fabric application.</para>
            </summary>
            <param name="applicationDescription">
              <para>The description of the application.</para>
            </param>
            <param name="cancellationToken">
            <para>The CancellationToken that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <param name="timeout">
            <para>Defines the maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <returns>
              <para>The created Service Fabric application.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
              <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> 
              object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.ImageBuilderValidationError" />: The create application request is not valid with respect to the provisioned manifests for the requested application type.</para>
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" />: The application name is not a valid Naming URI.</para>
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.CorruptedImageStoreObjectFound" />: A corrupted file was encountered on the ImageStore.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementAlreadyExistsException">
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationAlreadyExists" />: The application has already been created.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationTypeNotFound" />: The requested application type has not been provisioned yet.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
              <para>There was an error accessing a file on the Image Store.</para>
            </exception>
            <exception cref="T:System.FileNotFoundException">
              <para>A required file was not found on the Image Store.</para>
            </exception>
            <exception cref="T:System.DirectoryNotFoundException">
              <para>A required directory was not found on the Image Store.</para>
            </exception>
            <exception cref="T:System.PathTooLongException">
              <para>A path to an Image Store file/directory was too long.</para>
            </exception>
            <exception cref="T:System.IOException">
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException" />: There was an IO error communicating with the Image Store.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
              <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
              <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.DeleteApplicationAsync(System.Uri)">
            <summary>
            <para>Deletes the application instance from the cluster and deletes all services belonging to the application.</para>
            </summary>
            <param name="applicationName">
            <para>The URI of the application instance name.</para>
            </param>
            <returns>
            <para>The deleted application instance from the cluster.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound"/>: The application does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationUpgradeInProgress"/>: The application is being upgraded. </para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
            <remarks>
            <para>All application state will be lost and cannot be recovered after the application is deleted.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.DeleteApplicationAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Deletes the application instance from the cluster and deletes all services belonging to the application.</para>
            </summary>
            <param name="applicationName">
            <para>The URI of the application instance name.</para>
            </param>
            <param name="timeout">
            <para>Defines the maximum amount of time the system will allow this operation to continue before returning System.TimeoutException.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The deleted application instance from the cluster.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound"/>: The application does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationUpgradeInProgress"/>: The application is being upgraded. </para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
            <remarks>
            <para>All application state will be lost and cannot be recovered after the application is deleted.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.String)">
            <summary>
            <para>Provisions or registers a Service Fabric application type with the cluster.</para>
            </summary>
            <param name="applicationBuildPath">
            <para>Relative path to the application package in the ImageStore location specified in the Cluster Manifest.</para>
            </param>
            <returns>
            <para>The registered Service Fabric application.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ImageBuilderValidationError"/>: There are errors in the manifests being provisioned. </para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationTypeProvisionInProgress"/>: Another version of the application type is currently being provisioned. </para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/>: The application name is not a valid Naming URI.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CorruptedImageStoreObjectFound"/>: A corrupted file was encountered on the ImageStore.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementAlreadyExistsException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationTypeAlreadyExists"/>: The application type has already been provisioned</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>There was an error accessing a file on the ImageStore.</para>
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            <para>A required file was not found on the ImageStore.</para>
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            <para>A required directory was not found on the ImageStore.</para>
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            <para>A path to an ImageStore file/directory was too long.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException"/>: There was an IO error communicating with the ImageStore.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
            <remarks>
            <para>This is mandatory before an application instance can be created.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Provision or register a  application type with the cluster.</para>
            </summary>
            <param name="applicationBuildPath">
            <para>The relative path to the application package in the ImageStore location specified in the Cluster Manifest.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The registered Service Fabric application.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ImageBuilderValidationError"/>: There are errors in the manifests being provisioned. </para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationTypeProvisionInProgress"/>: Another version of the application type is currently being provisioned. </para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/>: The application name is not a valid Naming URI.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CorruptedImageStoreObjectFound"/>: A corrupted file was encountered on the ImageStore.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementAlreadyExistsException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationTypeAlreadyExists"/>: The application type has already been provisioned</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>There was an error accessing a file on the ImageStore.</para>
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            <para>A required file was not found on the ImageStore.</para>
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            <para>A required directory was not found on the ImageStore.</para>
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            <para>A path to an ImageStore file/directory was too long.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException"/>: There was an IO error communicating with the ImageStore.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
            <remarks>
            <para>This is mandatory before an application instance can be created.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.UnprovisionApplicationAsync(System.String,System.String)">
            <summary>
            <para>Removes or unregisters a Service Fabric application type from the cluster.</para>
            </summary>
            <param name="applicationTypeName">
            <para>The name of the application type.</para>
            </param>
            <param name="applicationTypeVersion">
            <para>The version of the application type.</para>
            </param>
            <returns>
            <para>The removed Service Fabric application type from the cluster.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationTypeInUse"/>: The application type is being used by one or more applications. </para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound"/>: The application does not exist.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
            <remarks>
            <para>This method can only be called if all application instance of the application type has been deleted. Once the application type is unregistered, no new application instance can be created for this particular application type.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.UnprovisionApplicationAsync(System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Removes or unregisters a Service Fabric application type from the cluster.</para>
            </summary>
            <param name="applicationTypeName">
            <para>The name of the application type.</para>
            </param>
            <param name="applicationTypeVersion">
            <para>The version of the application type.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The removed Service Fabric application type from the cluster.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationTypeInUse"/>: The application type is being used by one or more applications. </para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound"/>: The application does not exist.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
            <remarks>
            <para>This method can only be called if all application instance of the application type has been deleted. Once the application type is unregistered, no new application instance can be created for this particular application type.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.UpgradeApplicationAsync(System.Fabric.Description.ApplicationUpgradeDescription)">
            <summary>
              <para>Performs upgrade on an application instance.</para>
            </summary>
            <param name="upgradeDescription">
              <para>The description of the upgrade policy and the application to be upgrade.</para>
            </param>
            <returns>
              <para>The upgraded application instance.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
              <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.ImageBuilderValidationError" />: The upgrade is invalid with respect to the provisioned manifests. </para>
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationUpgradeValidationError" />: The application type does not exist. </para>
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri" />: The application name is not a valid Naming URI.</para>
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.CorruptedImageStoreObjectFound" />: A corrupted file was encountered on the ImageStore.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound" />: The application does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationUpgradeInProgress" />: The application is already being upgraded to the requested version.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
              <para>There was an error accessing a file on the ImageStore.</para>
            </exception>
            <exception cref="T:System.FileNotFoundException">
              <para>A required file was not found on the ImageStore.</para>
            </exception>
            <exception cref="T:System.DirectoryNotFoundException">
              <para>A required directory was not found on the ImageStore.</para>
            </exception>
            <exception cref="T:System.PathTooLongException">
              <para>A path to an ImageStore file/directory was too long.</para>
            </exception>
            <exception cref="T:System.IOException">
              <para>  
                <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException" />: There was an IO error communicating with the ImageStore.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
              <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
              <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.UpgradeApplicationAsync(System.Fabric.Description.ApplicationUpgradeDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
              <para>Performs upgrade on an application instance.</para>
            </summary>
            <param name="upgradeDescription">
              <para>The description of the upgrade policy and the application to be upgrade.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
              <para>The upgraded application instance.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
              <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.ImageBuilderValidationError"/>: The upgrade is invalid with respect to the provisioned manifests. </para>
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationUpgradeValidationError"/>: The application type does not exist. </para>
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/>: The application name is not a valid Naming URI.</para>
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.CorruptedImageStoreObjectFound"/>: A corrupted file was encountered on the ImageStore.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound"/>: The application does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
              <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationUpgradeInProgress"/>: The application is already being upgraded to the requested version.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
              <para>There was an error accessing a file on the ImageStore.</para>
            </exception>
            <exception cref="T:System.FileNotFoundException">
              <para>A required file was not found on the ImageStore.</para>
            </exception>
            <exception cref="T:System.DirectoryNotFoundException">
              <para>A required directory was not found on the ImageStore.</para>
            </exception>
            <exception cref="T:System.PathTooLongException">
              <para>A path to an ImageStore file/directory was too long.</para>
            </exception>
            <exception cref="T:System.IOException">
              <para>  
                <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException"/>: There was an IO error communicating with the ImageStore.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
              <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
              <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.RollbackApplicationUpgradeAsync(System.Uri)">
            <summary>
            <para>Starts rolling back the current application upgrade.</para>
            </summary>
            <param name="applicationName">
            <para>Name of the application</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task"/>.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotUpgrading"/>: There is no pending upgrade for the specified application to rollback.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.RollbackApplicationUpgradeAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Starts rolling back the current application upgrade</para>
            </summary>
            <param name="applicationName">
            <para>Name of the application</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.GetApplicationUpgradeProgressAsync(System.Uri)">
            <summary>
            <para>Retrieves the upgrade progress of the specified application instance.</para>
            </summary>
            <param name="applicationName">
            <para>The URI of the application instance name.</para>
            </param>
            <returns>
            <para>The upgrade progress of the specified application instance.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound"/>: The application does not exist.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.GetApplicationUpgradeProgressAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Retrieves the upgrade progress of the specified application instance.</para>
            </summary>
            <param name="applicationName">
            <para>The URI of the application instance name.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The upgrade progress of the specified application instance.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound"/>: The application does not exist.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.MoveNextApplicationUpgradeDomainAsync(System.Fabric.ApplicationUpgradeProgress)">
            <summary>
            <para>Instructs the Service Fabric to upgrade the application instance in the next upgrade domain.</para>
            </summary>
            <param name="upgradeProgress">
            <para>–The Upgrade progress of the application instance of interest. This provides information about the next upgrade domain to be upgraded.</para>
            </param>
            <returns>
            <para>The upgraded application instance.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound"/>: The application does not exist.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
            <remarks>
            <para>Service Fabric would only move to the next upgrade domain if it has completed the upgrade domain it is currently updating. In other words, <see cref="P:System.Fabric.ApplicationUpgradeProgress.UpgradeState"/> property should be Pending before calling this method.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.MoveNextApplicationUpgradeDomainAsync(System.Fabric.ApplicationUpgradeProgress,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Instructs the upgrade to continue with the application instance in the next upgrade domain.</para>
            </summary>
            <param name="upgradeProgress">
            <para>The upgrade progress of the application instance of interest. This provides information about the next upgrade domain to be upgraded.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The upgraded application instance.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ApplicationNotFound"/>: The application does not exist.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
            <remarks>
            <para>Service Fabric would only move to the next upgrade domain if it has completed the upgrade domain it is currently updating. In other words, <see cref="P:System.Fabric.ApplicationUpgradeProgress.UpgradeState"/> property should be Pending before calling this method.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.DeployServicePackageToNode(System.String,System.String,System.String,System.Fabric.PackageSharingPolicyList,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
              <para>Downloads packages associated with service manifest to image cache on specified node. </para>
            </summary>
            <param name="applicationTypeName">
              <para>ApplicationTypeName associated with service manifest to be downloaded</para>
            </param>
            <param name="applicationTypeVersion">
              <para>Version of ApplicationType </para>
            </param>
            <param name="serviceManifestName">
              <para>Name of service manifest whose packages need to be downloaded</para>
            </param>
            <param name="sharingPolicies">
              <para>Sharing policy representing packages that need to be copied to shared folders</para>
            </param>
            <param name="nodeName">
              <para>Name of the node where packages need to be downloaded.</para>
            </param>
            <param name="timeout">
              <para>The maximum amount of time the system will allow this operation to continue before returning T:System.TimeoutException</para>
            </param>
            <param name="cancellationToken">
              <para>The <see cref="T:System.Threading.CancellationToken" />that the operation is observing. It can be used to propagate notification that the operation should be canceled</para>
            </param>
            <returns>
              <para>Returns <see cref="T:System.Threading.Tasks.Task" />.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.GetApplicationManifestAsync(System.String,System.String)">
            <summary>
            <para>Gets the contents of a provisioned Application Manifest stored in the cluster.</para>
            </summary>
            <param name="applicationTypeName">
            <para>The type name as specified in the Application Manifest.</para>
            </param>
            <param name="applicationTypeVersion">
            <para>The type version as specified in the Application Manifest.</para>
            </param>
            <returns>
            <para>A Task whose result is the raw XML string contents of the Application Manifest.</para>
            </returns>
            <exception cref="F:System.Fabric.FabricErrorCode.ApplicationTypeNotFound">
            <para>The requested application type and version has not been provisioned.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.GetApplicationManifestAsync(System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the contents of a provisioned Application Manifest stored in the cluster.</para>
            </summary>
            <param name="applicationTypeName">
            <para>The type name as specified in the Application Manifest.</para>
            </param>
            <param name="applicationTypeVersion">
            <para>The type version as specified in the Application Manifest.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>A Task whose result is the raw XML string contents of the Application Manifest.</para>
            </returns>
            <exception cref="F:System.Fabric.FabricErrorCode.ApplicationTypeNotFound">
            <para>The requested application type and version has not been provisioned.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.CopyApplicationPackage(System.String,System.String,System.String)">
            <summary>
            <para>Uploads an application package to the Image Store in preparation for provisioning a new application type.</para>
            </summary>
            <param name="imageStoreConnectionString">
            <para>The connection string for the Image Store as specified in the Cluster Manifest.</para>
            </param>
            <param name="applicationPackagePath">
            <para>The full path to the source application package.</para>
            </param>
            <param name="applicationPackagePathInImageStore">
            <para>The rRelative path for the destination in the Image Store. This same relative path should be passed into the subsequent ProvisionApplicationAsync call.</para>
            </param>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>There was an error accessing a file on the Image Store.</para>
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            <para>A required file was not found on the Image Store.</para>
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            <para>A required directory was not found on the Image Store.</para>
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            <para>A path to an Image Store file/directory was too long.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException"/>: There was an IO error communicating with the Image Store.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ApplicationManagementClient.RemoveApplicationPackage(System.String,System.String)">
            <summary>
            <para>Deletes an application package from the Image Store.</para>
            </summary>
            <param name="imageStoreConnectionString">
            <para>The connection string for the Image Store as specified in the Cluster Manifest.</para>
            </param>
            <param name="applicationPackagePathInImageStore">
            <para>The relative path for the package in the Image Store.</para>
            </param>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>There was an error accessing a file on the ImageStore.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException"/>: There was an IO error communicating with the ImageStore.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
        </member>
        <member name="T:System.Fabric.FabricClient.ClusterManagementClient">
            <summary>
            <para>Represents the cluster management client for performing cluster maintenance operations.</para>
            </summary>
            <remarks>
            <para>The <see cref="T:System.Fabric.FabricClient.ClusterManagementClient"/> provides APIs which help to manage the cluster as a whole. 
            These are typically administrative commands which relate to major cluster events such as the loss of nodes and the need to recover services in the case of major failures.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.DeactivateNodeAsync(System.String,System.Fabric.NodeDeactivationIntent)">
            <summary>
            <para>Deactivates a particular node with the specified <see cref="T:System.Fabric.NodeDeactivationIntent"/>.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node to deactivate.</para>
            </param>
            <param name="deactivationIntent">
            <para>The <see cref="T:System.Fabric.NodeDeactivationIntent"/> for deactivating the node.</para>
            </param>
            <returns>
            <para>The deactivated node with the specified <see cref="T:System.Fabric.NodeDeactivationIntent"/>.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>Once the deactivation is in progress, the deactivation intent can be “increased” but not decreased (for example, a node which is was deactivated with the <see cref="F:System.Fabric.NodeDeactivationIntent.Pause"/> intent can be deactivated further with <see cref="F:System.Fabric.NodeDeactivationIntent.Restart"/>, but not the other way around. Nodes may be reactivated via <see cref="M:System.Fabric.FabricClient.ClusterManagementClient.ActivateNodeAsync(System.String)"/> any time after they are deactivated. If the deactivation is not complete this will cancel the deactivation. A node which goes down and comes back up while deactivated will still need to be reactivated before services will be placed on that node.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.DeactivateNodeAsync(System.String,System.Fabric.NodeDeactivationIntent,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Deactivates a particular node with the specified <see cref="T:System.Fabric.NodeDeactivationIntent"/>.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node to deactivate.</para>
            </param>
            <param name="deactivationIntent">
            <para>The <see cref="T:System.Fabric.NodeDeactivationIntent"/> for deactivating the node.</para>
            </param>
            <param name="timeout">
            <para>The timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>The deactivated node with the specified <see cref="T:System.Fabric.NodeDeactivationIntent"/>.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>Once the deactivation is in progress, the deactivation intent can be “increased” but not decreased (for example, a node which is was deactivated with the <see cref="F:System.Fabric.NodeDeactivationIntent.Pause"/> intent can be deactivated further with <see cref="F:System.Fabric.NodeDeactivationIntent.Restart"/>, but not the other way around. Nodes may be reactivated via <see cref="M:System.Fabric.FabricClient.ClusterManagementClient.ActivateNodeAsync(System.String)"/> any time after they are deactivated. If the deactivation is not complete this will cancel the deactivation. A node which goes down and comes back up while deactivated will still need to be reactivated before services will be placed on that node.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.ActivateNodeAsync(System.String)">
            <summary>
            <para>Reactivates a Service Fabric cluster node which is currently deactivated.</para>
            </summary>
            <param name="nodeName">
            <para>The Node to be reactivated.</para>
            </param>
            <returns>
            <para>The reactivated Service Fabric cluster node.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>Once reactivated, the node will again become a viable target for placing new replicas, and any deactivated replicas remaining on the node will be reactivated.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.ActivateNodeAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Reactivates a  cluster node which is currently deactivated.</para>
            </summary>
            <param name="nodeName">
            <para>The node to be deactivated.</para>
            </param>
            <param name="timeout">
            <para>The timespan that defines the maximum amount of time  will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>The reactivated Service Fabric cluster node.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>Once reactivated, the node will again become a viable target for placing new replicas, and any deactivated replicas remaining on the node will be reactivated.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.RemoveNodeStateAsync(System.String)">
            <summary>
            <para>Indicates that a particular node (which is down) has actually been lost, and that Service Fabric should treat any services or state on that node as lost and unrecoverable.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node which has been permanently lost.</para>
            </param>
            <returns>
            <para>The lost node.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>For persistent services, Service Fabric will wait for state and services on a down node to be recovered (particularly persistent services).
            In some cases, the administrator knows that a node (and its state) has been permanently lost. In these cases the 
            <see cref="M:System.Fabric.FabricClient.ClusterManagementClient.RemoveNodeStateAsync(System.String)"/> method should be called in order to get Service Fabric 
            to stop waiting for that node to recover.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.RemoveNodeStateAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Indicates that a particular node (which is down) has actually been lost, and that Service Fabric should treat any services or state on that node as lost and unrecoverable.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node which has been permanently lost.</para>
            </param>
            <param name="timeout">
            <para>The timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>The lost node.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>For persistent services, Service Fabric will wait for state and services on a down node to be recovered (particularly persistent services). 
            In some cases, the administrator knows that a node (and its state) has been permanently lost.
            In these cases the <see cref="M:System.Fabric.FabricClient.ClusterManagementClient.RemoveNodeStateAsync(System.String)"/> 
            method should be called in order to get Service Fabric to stop waiting for that node to recover.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.RecoverPartitionsAsync">
            <summary>
            <para>Indicates to the Service Fabric cluster that it should attempt to recover any services (including system services) which are currently stuck in quorum loss.</para>
            </summary>
            <returns>
            <para>The recovered services which are currently stuck in the quorum loss.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>Triggers an attempt to recover the partitions of services which are currently stuck in quorum loss.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.RecoverPartitionsAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Indicates to the Service Fabric cluster that it should attempt to recover any services (including system services) which are currently stuck in quorum loss by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="timeout">
            <para>The timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>The recovered services which are currently stuck in the quorum loss.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>Triggers an attempt to recover the partitions of services which are currently stuck in quorum loss.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.RecoverPartitionAsync(System.Guid)">
            <summary>
            <para>Indicates to the Service Fabric cluster that it should attempt to recover any services (including system services) which are currently stuck in quorum loss on the specified partition.</para>
            </summary>
            <param name="partitionId">
            <para>The partition ID of the partition to recover.</para>
            </param>
            <returns>
            <para>The recovered services which are currently stuck in quorum loss on the specified partition.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>Triggers an attempt to recover the partitions of services which are currently stuck in quorum loss.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.RecoverPartitionAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Indicates to the Service Fabric cluster that it should attempt to recover any services (including system services) which are currently stuck in quorum loss on the specified partition by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="partitionId">
            <para>The partition ID of the partition to recover.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>The recovered services which are currently stuck in quorum loss on the specified partition.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>Triggers an attempt to recover the partitions of services which are currently stuck in quorum loss.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.RecoverServicePartitionsAsync(System.Uri)">
            <summary>
            <para>Indicates to the Service Fabric cluster that it should attempt to recover the specified service which is currently stuck in quorum loss.</para>
            </summary>
            <param name="serviceName">
            <para>The name of the service to recover.</para>
            </param>
            <returns>
            <para>The recovered service which is currently stuck in the quorum loss.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>Triggers an attempt to recover the partitions of the specified service which is currently stuck in quorum loss.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.RecoverServicePartitionsAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Indicates to the Service Fabric cluster that it should attempt to recover the specified service which is currently stuck in quorum loss by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="serviceName">
            <para>The name of the service to recover.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>The recovered service which is currently stuck in the quorum loss.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>Triggers an attempt to recover the partitions of the specified service which is currently stuck in quorum loss.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.RecoverSystemPartitionsAsync">
            <summary>
            <para>Indicates to the Service Fabric cluster that it should attempt to recover the system services which are currently stuck in quorum loss.</para>
            </summary>
            <returns>
            <para>The recovered system service which is currently stuck in the quorum loss.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>Triggers an attempt to recover the system services partitions which are currently stuck in quorum loss.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.RecoverSystemPartitionsAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Indicates to the Service Fabric cluster that it should attempt to recover the system services which are currently stuck in quorum loss.</para>
            </summary>
            <param name="timeout">
            <para>The timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>The recovered system service which is currently stuck in the quorum loss.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>Triggers an attempt to recover the system services partitions which are currently stuck in quorum loss.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.ResetPartitionLoadAsync(System.Guid)">
            <summary>
            <para> 
            Resets a given partition's load
            </para>
            </summary>
            <param name="partitionId">
            <para>The partition Id represented as a Guid </para>
            </param>
            <returns>
            <para>The task associated with this async method. </para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.ResetPartitionLoadAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para> 
            Resets a given partition's load
            </para>
            </summary>
            <param name="partitionId">
            <para>The partition Id represented as a Guid </para>
            </param>
            <param name="timeout">
            <para> The length of time within which the async method must complete in order for the method to not time out.</para>
            </param>
            <param name="cancellationToken">
            <para>A cancellation token for this method. </para>
            </param>
            <returns>
            <para>The task associated with this async method. </para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.ToggleVerboseServicePlacementHealthReportingAsync(System.Boolean)">
            <summary>
            <para> 
            Toggles whether the Cluster Resource Balancer will report a health warning when it's unable to place a replica.
            </para>
            </summary>
            <param name="enabled">
            <para>A boolean value, which if true causes reporting when a replica is unabled to be placed. </para>
            </param>
            <returns>
            <para>The task associated with this async method. </para>
            </returns>
            <remarks>
            <para>If this method is called twice with the value false, it clears from memory the reports that would potentially have been emitted.
            If this method is called with the value true, the Cluster Resource Balancer will report a health warning when it's unable to place a replica.
            If such health warnings are blocking a monitored upgrade's health checks the toggle can be switched off. </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.ToggleVerboseServicePlacementHealthReportingAsync(System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para> 
            Toggles whether the Cluster Resource Balancer will report a health warning when it's unable to place a replica.
            </para>
            </summary>
            <param name="enabled">
            <para>A boolean value, which if true causes reporting when a replica is unabled to be placed. </para>
            </param>
            <param name="timeout">
            <para> The length of time within which the async method must complete in order for the method to not time out.</para>
            </param>
            <param name="cancellationToken">
            <para>A cancellation token for this method. </para>
            </param>
            <returns>
            <para>The task associated with this async method. </para>
            </returns>
            <remarks>
            <para>If this method is called twice with the value false, it clears from memory the reports that would potentially have been emitted.
            If this method is called with the value true, the Cluster Resource Balancer will report a health warning when it's unable to place a replica.
            If such health warnings are blocking a monitored upgrade's health checks, the toggle can be switched off. </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.ProvisionFabricAsync(System.String,System.String)">
            <summary>
            <para>Provisions the Service Fabric.</para>
            </summary>
            <param name="patchFilePath">
            <para>The path to the update patch file.</para>
            </param>
            <param name="clusterManifestFilePath">
            <para>The path to the cluster manifest.</para>
            </param>
            <returns>
            <para>The provisioned Service Fabric.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>A <languageKeyword>null</languageKeyword> value is permitted for either the <paramref name="patchFilePath"/> parameter or the <paramref name="clusterManifestFilePath"/> parameter. A <languageKeyword>null</languageKeyword> value cannot be used for both parameters.</para>
            <para>This will upload the patch file and/or cluster manifest file to the image store location. The image store location is specified as a configuration setting in the cluster manifest that was provided when the cluster was created.</para>
            <para>Cluster manifest validation will occur within the context of this call.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.ProvisionFabricAsync(System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Provisions the Service Fabric by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="patchFilePath">
            <para>The path to the update patch file.</para>
            </param>
            <param name="clusterManifestFilePath">
            <para>The path to the cluster manifest.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>The provisioned Service Fabric.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>A <languageKeyword>null</languageKeyword> value is permitted for either the <paramref name="patchFilePath"/> parameter or the <paramref name="clusterManifestFilePath"/>
            parameter. A <languageKeyword>null</languageKeyword> value cannot be used for both parameters.</para>
            <para>This will upload the patch file and/or cluster manifest file to the image store location. The image store location is specified as a configuration setting
            in the cluster manifest that was provided when the cluster was created.</para>
            <para>Cluster manifest validation will occur within the context of this call.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.UnprovisionFabricAsync(System.String,System.String)">
            <summary>
            <para>Unprovisions the Service Fabric.</para>
            </summary>
            <param name="codeVersion">
            <para>The code version to unprovision.</para>
            </param>
            <param name="configVersion">
            <para>The configuration version to unprovision.</para>
            </param>
            <returns>
            <para>The unprovisioned Service Fabric.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>A <languageKeyword>null</languageKeyword> value is permitted for either the <paramref name="codeVersion"/> parameter or the <paramref name="configVersion"/> parameter. A <languageKeyword>null</languageKeyword> value cannot be used for both parameters.</para>
            <para>This will delete the patch file and/or cluster manifest file from the image store location. The image store location is specified as a configuration setting in the cluster manifest that was provided when the cluster was created.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.UnprovisionFabricAsync(System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Unprovisions the Service Fabric by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="codeVersion">
            <para>The code version to unprovision.</para>
            </param>
            <param name="configVersion">
            <para>The configuration version to unprovision.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>The unprovisioned Service Fabric.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.UpgradeFabricAsync(System.Fabric.Description.FabricUpgradeDescription)">
            <summary>
            <para>Upgrades the Service Fabric.</para>
            </summary>
            <param name="upgradeDescription">
            <para>The description of the upgrade.</para>
            </param>
            <returns>
            <para>The upgraded Service Fabric.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.UpgradeFabricAsync(System.Fabric.Description.FabricUpgradeDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Upgrades the Service Fabric by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="upgradeDescription">
            <para>The description of the upgrade.</para>
            </param>
            <param name="timeout">
            <para>The timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>The upgraded Service Fabric.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.UpdateFabricUpgradeAsync(System.Fabric.Description.FabricUpgradeUpdateDescription)">
            <summary>
            <para>Modifies the upgrade parameters that describe the behavior of the current cluster upgrade.</para>
            </summary>
            <param name="updateDescription">
            <para>Description of the new upgrade parameters to apply.</para>
            </param>
            <returns>
            <para>The current cluster upgrade.</para>
            </returns>
            <remarks />
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.UpdateFabricUpgradeAsync(System.Fabric.Description.FabricUpgradeUpdateDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Modifies the upgrade parameters that describe the behavior of the current cluster upgrade.</para>
            </summary>
            <param name="updateDescription">
            <para> The new upgrade parameters to apply.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before throwing a <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>The current cluster upgrade.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.RollbackFabricUpgradeAsync">
            <summary>
            <para>Rolls back the Service Fabric to upgrade the operation.</para>
            </summary>
            <returns>
            <para>The rollback Service Fabric to upgrade the operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.RollbackFabricUpgradeAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Rolls back the Service Fabric to upgrade the operation.</para>
            </summary>
            <param name="timeout">
            <para>The timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning a timeout exception.</para>
            </param>
            <param name="cancellationToken">
            <para>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>The rollback Service Fabric to upgrade the operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.GetFabricUpgradeProgressAsync">
            <summary>
            <para>Returns the progress of a Service Fabric upgrade process.</para>
            </summary>
            <returns>
            <para>The progress of a Service Fabric upgrade process.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.GetFabricUpgradeProgressAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Returns the progress of a Service Fabric upgrade process.</para>
            </summary>
            <param name="timeout">
            <para>The timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>The progress of a Service Fabric upgrade process.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.MoveNextFabricUpgradeDomainAsync(System.Fabric.FabricUpgradeProgress)">
            <summary>
            <para>Instructs the Service Fabric to upgrade the next upgrade domain in the cluster if the current upgrade domain has been completed.</para>
            </summary>
            <param name="upgradeProgress">
            <para>The fabric upgrade process object to use.</para>
            </param>
            <returns>
            <para>The upgraded domain in the cluster.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>Similar to <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.MoveNextApplicationUpgradeDomainAsync(System.Fabric.ApplicationUpgradeProgress)"/>.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.MoveNextFabricUpgradeDomainAsync(System.Fabric.FabricUpgradeProgress,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Instructs Service Fabric to upgrade the next upgrade domain in the cluster if the current upgrade domain has been completed, by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="upgradeProgress">
            <para>The fabric upgrade process object to use.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>The upgraded domain in the cluster.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>Similar to <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.MoveNextApplicationUpgradeDomainAsync(System.Fabric.ApplicationUpgradeProgress,System.TimeSpan,System.Threading.CancellationToken)"/>.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.GetClusterManifestAsync">
            <summary>
            <para>Gets the Service Fabric cluster manifest XML file as a string.</para>
            </summary>
            <returns>
            <para>The Service Fabric cluster manifest XML file as a string.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.GetClusterManifestAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the Service Fabric cluster manifest XML file as a string, by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="timeout">
            <para>The timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. 
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The Service Fabric cluster manifest XML file as a string, by using the specified timeout and cancellation token.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using 
            and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.CopyClusterPackage(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            <para>Copies the cluster manifest file and/or Service Fabric MSI file to the image store.</para>
            </summary>
            <param name="imageStoreConnectionString">
            <para>The connection string of the image store as specified in the cluster manifest.</para>
            </param>
            <param name="clusterManifestPath">
            <para>The full path to the cluster manifest file to be copied.</para>
            </param>
            <param name="clusterManifestPathInImageStore">
            <para>The relative path along with the file name of the destination in the image store. This parameter is required when source cluster manifest path is specified.</para>
            </param>
            <param name="codePackagePath">
            <para>The full path to the Service Fabric MSI file to be copied.</para>
            </param>
            <param name="codePackagePathInImageStore">
            <para>The relative path along with the file name of the destination in the image store. This parameter is required when destination code relative path is specified.</para>
            </param>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>There was an error accessing a file on the image store.</para>
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            <para>A required file was not found on the image store.</para>
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            <para>A required directory was not found on the image store.</para>
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            <para>A path to an image store file/directory was too long.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException"/>: There was an IO error communicating with the image store.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <remarks>
            <para>Both source cluster manifest path and source code path cannot be null.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ClusterManagementClient.RemoveClusterPackage(System.String,System.String,System.String)">
            <summary>
            <para>Deletes the ClusterManifest file and/or Service Fabric MSI file from the ImageStore.</para>
            </summary>
            <param name="imageStoreConnectionString">
            <para>The connection string for the ImageStore as specified in the Cluster Manifest.</para>
            </param>
            <param name="clusterManifestPathInImageStore">
            <para>The relative path of ClusterManifest file in the ImageStore.</para>
            </param>
            <param name="codePackagePathInImageStore">
            <para>The relative path of Service Fabric MSI file in the ImageStore.</para>
            </param>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>There was an error accessing a file on the ImageStore.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ImageStoreIOException"/>: There was an IO error communicating with the ImageStore.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <remarks>
            <para>Either clusterManifestRelativePath or codeRelativePath parameter can be <languageKeyword>null</languageKeyword>. However, both of them cannot be <languageKeyword>null</languageKeyword>.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.FabricClient.GatewayInformationEventArgs">
            <summary>
            <para>
            Represents the event arguments for gateway related events, like connect and disconnect.
            </para>
            </summary>
            <remarks>
            <para>Provides more information about the gateway that the client is configured with.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.FabricClient.GatewayInformationEventArgs.GatewayInformation">
            <summary>
            <para>
            Gets the gateway information.
            </para>
            </summary>
            <value>
            <para>The gateway information.</para>
            </value>
        </member>
        <member name="T:System.Fabric.FabricClient.ClaimsRetrievalEventArgs">
            <summary>
            Represents the event arguments for a claims token retrieval event
            </summary>
            <remarks>Optionally allows the application to provide a claims token for authorization.</remarks>
        </member>
        <member name="P:System.Fabric.FabricClient.ClaimsRetrievalEventArgs.AzureActiveDirectoryMetadata">
            <summary>
            Gets metadata needed for acquiring a claims token from Azure Active Directory
            </summary>
            <value>The metadata object.</value>
        </member>
        <member name="T:System.Fabric.FabricClient.HealthClient">
            <summary>
            <para>Represents the health client used to perform health related operations, like report and query health.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric cluster.</para>
            </summary>
            <returns>
            <para>The health of a Service Fabric cluster.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. 
            Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than MaxOperationTimeout to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <remarks>
            <para>The following example gets the health of the cluster.</para>
              <code language="c#">public static bool GetClusterHealth(string clusterConnection)
            {
                ClusterHealth clusterHealth;
            
                // Connect to the cluster.
                FabricClient fabricClient = new FabricClient(clusterConnection);
            
                // Get the cluster health.
                try
                {
                    clusterHealth = fabricClient.HealthManager.GetClusterHealthAsync().Result;
                }
                catch (Exception e)
                {
                    Console.WriteLine("Error: " + e.Message);
            
                    if (e.InnerException != null)
            Console.WriteLine("  Inner Exception: " + e.InnerException.Message);
            
                    return false;
                }
            
                // Display the cluster health state.
                Console.WriteLine("Cluster Health:");
                Console.WriteLine("  Aggregated Health State: " + clusterHealth.AggregatedHealthState);
                Console.WriteLine();
            
                // Display the application health states on the cluster.
                Console.WriteLine("  Application Health States:");
                IList&lt;ApplicationHealthState&gt; applicationHealthStateList = clusterHealth.ApplicationHealthStates;
                foreach(ApplicationHealthState applicationHealthState in applicationHealthStateList)
                {
                    Console.WriteLine("    Application {0}: {1}", applicationHealthState.ApplicationName, applicationHealthState.AggregatedHealthState);
                }
            
                // Display Node Health States on the cluster.
                Console.WriteLine("  Node Health States:");
                IList&lt;NodeHealthState&gt; nodeHealthStateList = clusterHealth.NodeHealthStates;
                foreach (NodeHealthState nodeHealthState in nodeHealthStateList)
                {
                    Console.WriteLine("    Node Name: " + nodeHealthState.NodeName);
                    Console.WriteLine("      Aggregated Health State: " + nodeHealthState.AggregatedHealthState);
                }
            
                // Display Health Events.
                Console.WriteLine("  Health Events:");
                IList&lt;HealthEvent&gt; healthEventList = clusterHealth.HealthEvents;
                foreach(HealthEvent healthEvent in healthEventList)
                {
                    Console.WriteLine("      Health Event:");
                    Console.WriteLine("        Last Modified: " + healthEvent.LastModifiedUtcTimestamp);
                    Console.WriteLine("        Source UTC Timestamp: " + healthEvent.SourceUtcTimestamp);
                    Console.WriteLine("        Is Expired: " + healthEvent.IsExpired);
                    Console.WriteLine("        Health Information:");
                    Console.WriteLine("          Description: " + healthEvent.HealthInformation.Description);
                    Console.WriteLine("          Source ID: " + healthEvent.HealthInformation.SourceId);
                    Console.WriteLine("          Health State: " + healthEvent.HealthInformation.HealthState);
                    Console.WriteLine("          Property: " + healthEvent.HealthInformation.Property);
                    Console.WriteLine("          Remove When Expired: " + healthEvent.HealthInformation.RemoveWhenExpired);
                    Console.WriteLine("          Sequence Number: " + healthEvent.HealthInformation.SequenceNumber);
                    Console.WriteLine("          Time to Live: " + healthEvent.HealthInformation.TimeToLive);
                }
            
                Console.WriteLine("  Unhealthy Evaluations:");
                IList&lt;HealthEvaluation&gt; healthEvaluationList = clusterHealth.UnhealthyEvaluations;
                foreach(HealthEvaluation healthEvaluation in healthEvaluationList)
                {
                    Console.WriteLine("    Kind: " + healthEvaluation.Kind);
                    Console.WriteLine("      Aggregated Health State: " + healthEvaluation.AggregatedHealthState);
                    Console.WriteLine("      Description: " + healthEvaluation.Description);
                }
            
                return true;
            }
            </code>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.Fabric.Health.ClusterHealthPolicy)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric cluster, evaluating it using the specified policy.</para>
            </summary>
            <param name="healthPolicy">The cluster health policy used to evaluate cluster health.</param>
            <returns>
                <para>The health of a Service Fabric cluster.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
                <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. 
                Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>Caused by one of the following:</para>
                <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
                <para>Caused by one of the following:</para>
                <para><see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than MaxOperationTimeout to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric cluster by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. 
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health of a Service Fabric cluster.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the user provided <paramref name="timeout"/> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.Fabric.Health.ClusterHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric cluster by using the specified health policy, timeout and cancellation token.</para>
            </summary>
            <param name="healthPolicy">The cluster health policy used to evaluate cluster health.</param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. 
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health of a Service Fabric cluster.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the user provided <paramref name="timeout"/> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.Fabric.Description.ClusterHealthQueryDescription)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric cluster by using a query description.</para>
            </summary>
            <param name="queryDescription">The query description that defined query parameters like health policies, filters etc.</param>
            <returns>
            <para>The health of a Service Fabric cluster.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than MaxOperationTimeout to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.Fabric.Description.ClusterHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric cluster by using a query description, a timeout and cancellation token.</para>
            </summary>
            <param name="queryDescription">The query description that defined query parameters like health policies, filters etc.</param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. 
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health of a Service Fabric cluster.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the user provided <paramref name="timeout"/> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.String)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric node.</para>
            </summary>
            <param name="nodeName">
            <para>The Service Fabric node name.</para>
            </param>
            <returns>
            <para>The health of a Service Fabric node.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than MaxOperationTimeout to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <remarks>
            <para>The following example gets the health of a node.</para>
              <code language="c#">public static bool GetNodeHealth(string clusterConnection)
            {
                NodeHealth nodeHealth;
            
                // Connect to the cluster.
                FabricClient fabricClient = new FabricClient(clusterConnection);
            
                // Get the node health.
                try
                {
                    nodeHealth = fabricClient.HealthManager.GetNodeHealthAsync("Node1").Result;
                }
                catch (Exception e)
                {
                    Console.WriteLine("Error: " + e.Message);
            
                    if (e.InnerException != null)
            Console.WriteLine("  Inner Exception: " + e.InnerException.Message);
            
                    return false;
                }
            
                // Display the node health information.
                Console.WriteLine("Node Health:");
                Console.WriteLine("  Node {0}: {1}", nodeHealth.NodeName, nodeHealth.AggregatedHealthState);
            
                // List the health events.
                Console.WriteLine("    Health Events:");
                IList&lt;HealthEvent&gt; healthEvents = nodeHealth.HealthEvents;
                foreach (HealthEvent healthEvent in healthEvents)
                {
                    Console.WriteLine("      Health Event:");
                    Console.WriteLine("        Last Modified: " + healthEvent.LastModifiedUtcTimestamp);
                    Console.WriteLine("        Source UTC Timestamp: " + healthEvent.SourceUtcTimestamp);
                    Console.WriteLine("        Is Expired: " + healthEvent.IsExpired);
                    Console.WriteLine("        Health Information:");
                    Console.WriteLine("          Description: " + healthEvent.HealthInformation.Description);
                    Console.WriteLine("          Source ID: " + healthEvent.HealthInformation.SourceId);
                    Console.WriteLine("          Health State: " + healthEvent.HealthInformation.HealthState);
                    Console.WriteLine("          Property: " + healthEvent.HealthInformation.Property);
                    Console.WriteLine("          Remove When Expired: " + healthEvent.HealthInformation.RemoveWhenExpired);
                    Console.WriteLine("          Sequence Number: " + healthEvent.HealthInformation.SequenceNumber);
                    Console.WriteLine("          Time to Live: " + healthEvent.HealthInformation.TimeToLive);
                }
            
                // List the unhealthy evaluations.
                Console.WriteLine("    Unhealthy Evaluations:");
                IList&lt;HealthEvaluation&gt; healthEvaluationList = nodeHealth.UnhealthyEvaluations;
                foreach (HealthEvaluation healthEvaluation in healthEvaluationList)
                {
                    Console.WriteLine("      Kind: " + healthEvaluation.Kind);
                    Console.WriteLine("        Aggregated Health State: " + healthEvaluation.AggregatedHealthState);
                    Console.WriteLine("        Description: " + healthEvaluation.Description);
                }
            
                Console.WriteLine(); 
                return true;
            }
            </code>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.String,System.Fabric.Health.ClusterHealthPolicy)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric node.</para>
            </summary>
            <param name="nodeName">
            <para>The Service Fabric node name.</para>
            </param>
            <param name="healthPolicy">The cluster health policy used to evaluate the node health.</param>
            <returns>
            <para>The health of a Service Fabric node.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than MaxOperationTimeout to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric node by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="nodeName">
            <para>The Service Fabric node.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the 
            operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health of a Service Fabric node.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the user provided <paramref name="timeout"/> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.String,System.Fabric.Health.ClusterHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric node by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="nodeName">
            <para>The Service Fabric node.</para>
            </param>
            <param name="healthPolicy">The cluster health policy used to evaluate the node health.</param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. 
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health of a Service Fabric node.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the user provided <paramref name="timeout"/> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.Fabric.Description.NodeHealthQueryDescription)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric node by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="queryDescription">The query description that defines parameters like health policy, filters etc.</param>
            <returns>
            <para>The health of a Service Fabric node.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than MaxOperationTimeout to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.Fabric.Description.NodeHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric node by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="queryDescription">The query description that defines parameters like health policy, filters etc.</param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. 
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health of a Service Fabric node.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the user provided <paramref name="timeout"/> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Uri)">
            <summary>
            <para>Asynchronously gets the health of the specified Service Fabric application.</para>
            </summary>
            <param name="applicationName">
            <para>The URI of the Service Fabric application.</para>
            </param>
            <returns>
            <para>The health of the specified Service Fabric application.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/>
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than MaxOperationTimeout to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <paramref name="applicationName"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <remarks>
            <para>The following example gets the health of an application.</para>
              <code language="c#">public static bool GetApplicationHealth(string clusterConnection)
            {
                ApplicationHealth applicationHealth;
                Uri applicationName = new Uri("fabric:/myapp/todo");
            
                // Connect to the cluster.
                FabricClient fabricClient = new FabricClient(clusterConnection);
            
                // Get the application health.
                try
                {
                    applicationHealth = fabricClient.HealthManager.GetApplicationHealthAsync(applicationName).Result;
                }
                catch (Exception e)
                {
                    Console.WriteLine("Error: " + e.Message);
            
                    if (e.InnerException != null)
            Console.WriteLine("  Inner Exception: " + e.InnerException.Message);
            
                    return false;
                }
            
                // Display the application health information.
                Console.WriteLine("Get Application Health:");
                Console.WriteLine("  Application {0}: {1}", applicationHealth.ApplicationName, applicationHealth.AggregatedHealthState);
            
                // List the deployed application health states.
                Console.WriteLine("    Deployed applications:");
                IList&lt;DeployedApplicationHealthState&gt; deployedAppHealthStateList = applicationHealth.DeployedApplicationHealthStates;
                foreach (DeployedApplicationHealthState deployedAppHealthState in deployedAppHealthStateList)
                {
                    Console.WriteLine("      Application: " + deployedAppHealthState.ApplicationName);
                    Console.WriteLine("        Aggregated Health State: " + deployedAppHealthState.AggregatedHealthState);
                    Console.WriteLine("        Node Name: " + deployedAppHealthState.NodeName);
                }
            
                // List the deployed services health states.
                Console.WriteLine("    Service Health States:");
                IList&lt;ServiceHealthState&gt; deployedSvcsHealthStateList = applicationHealth.ServiceHealthStates;
                foreach (ServiceHealthState serviceHealthState in deployedSvcsHealthStateList)
                {
                    Console.WriteLine("      Service {0}: {1}", serviceHealthState.ServiceName, serviceHealthState.AggregatedHealthState);
                }
            
                // List the health events.
                Console.WriteLine("    Health Events:");
                IList&lt;HealthEvent&gt; healthEvents = applicationHealth.HealthEvents;
                foreach (HealthEvent healthEvent in healthEvents)
                {
                    Console.WriteLine("      Health Event:");
                    Console.WriteLine("        Last Modified: " + healthEvent.LastModifiedUtcTimestamp);
                    Console.WriteLine("        Source UTC Timestamp: " + healthEvent.SourceUtcTimestamp);
                    Console.WriteLine("        Is Expired: " + healthEvent.IsExpired);
                    Console.WriteLine("        Health Information:");
                    Console.WriteLine("          Description: " + healthEvent.HealthInformation.Description);
                    Console.WriteLine("          Source ID: " + healthEvent.HealthInformation.SourceId);
                    Console.WriteLine("          Health State: " + healthEvent.HealthInformation.HealthState);
                    Console.WriteLine("          Property: " + healthEvent.HealthInformation.Property);
                    Console.WriteLine("          Remove When Expired: " + healthEvent.HealthInformation.RemoveWhenExpired);
                    Console.WriteLine("          Sequence Number: " + healthEvent.HealthInformation.SequenceNumber);
                    Console.WriteLine("          Time to Live: " + healthEvent.HealthInformation.TimeToLive);
                }
            
                Console.WriteLine();
                return true;
            }
            </code>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Uri,System.Fabric.Health.ApplicationHealthPolicy)">
            <summary>
            <para>Asynchronously gets the health of the specified Service Fabric application by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="applicationName">
            <para>The URI of the Service Fabric application.</para>
            </param>
            <param name="healthPolicy">The application health policy used to evaluate the application.</param>
            <returns>
            <para>The health reports of the specified Service Fabric application.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than MaxOperationTimeout to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <paramref name="applicationName"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of the specified Service Fabric application by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="applicationName">
            <para>The URI of the Service Fabric application.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health reports of the specified Service Fabric application.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/>
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the user provided <paramref name="timeout"/> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <paramref name="applicationName"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Uri,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of the specified Service Fabric application by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="applicationName">
            <para>The URI of the Service Fabric application.</para>
            </param>
            <param name="healthPolicy">The application health policy used to evaluate the application health.</param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health reports of the specified Service Fabric application.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/>
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the user provided <paramref name="timeout"/> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <paramref name="applicationName"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Fabric.Description.ApplicationHealthQueryDescription)">
            <summary>
            <para>Asynchronously gets the health of the specified Service Fabric application by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="queryDescription">The query description.</param>
            <returns>
            <para>The health reports of the specified Service Fabric application.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/>
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than MaxOperationTimeout to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <see cref="P:System.Fabric.Description.ApplicationHealthQueryDescription.ApplicationName"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Fabric.Description.ApplicationHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of the specified Service Fabric application by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="queryDescription">The query description.</param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health reports of the specified Service Fabric application.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/>
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the user provided <paramref name="timeout"/> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <see cref="P:System.Fabric.Description.ApplicationHealthQueryDescription.ApplicationName"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Uri)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric service.</para>
            </summary>
            <param name="serviceName">
            <para>The name of the Service Fabric service.</para>
            </param>
            <returns>
            <para>The health of a Service Fabric service.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than MaxOperationTimeout to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <paramref name="serviceName"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <remarks>
            <para>The following example gets the health of a service.</para>
              <code language="c#">public static bool GetServiceHealth(string clusterConnection)
            {
                ServiceHealth serviceHealth;
                Uri serviceName = new Uri("fabric:/myapp/todo/svc1");
            
                // Connect to the cluster.
                FabricClient fabricClient = new FabricClient(clusterConnection);
            
                // Get the service health.
                try
                {
                    serviceHealth = fabricClient.HealthManager.GetServiceHealthAsync(serviceName).Result;
                }
                catch (Exception e)
                {
                    Console.WriteLine("Error: " + e.Message);
            
                    if (e.InnerException != null)
            Console.WriteLine("  Inner Exception: " + e.InnerException.Message);
            
                    return false;
                }
            
                Console.WriteLine("Service Health:");
                Console.WriteLine("  Service {0}: {1}", serviceHealth.ServiceName, serviceHealth.AggregatedHealthState);
            
                // List the health states.
                Console.WriteLine("    Partition Health States:");
                IList&lt;PartitionHealthState&gt; partitionHealthStates = serviceHealth.PartitionHealthStates;
                foreach (PartitionHealthState partitionHealthState in partitionHealthStates)
                {
                    Console.WriteLine("      Aggregated Health State: " + partitionHealthState.AggregatedHealthState);
                    Console.WriteLine("      Partition ID: " + partitionHealthState.PartitionId);
                }
            
                // List the health events.
                Console.WriteLine("    Health Events:");
                IList&lt;HealthEvent&gt; healthEvents = serviceHealth.HealthEvents;
                foreach (HealthEvent healthEvent in healthEvents)
                {
                    Console.WriteLine("      Health Event:");
                    Console.WriteLine("        Last Modified: " + healthEvent.LastModifiedUtcTimestamp);
                    Console.WriteLine("        Source UTC Timestamp: " + healthEvent.SourceUtcTimestamp);
                    Console.WriteLine("        Is Expired: " + healthEvent.IsExpired);
                    Console.WriteLine("        Health Information:");
                    Console.WriteLine("          Description: " + healthEvent.HealthInformation.Description);
                    Console.WriteLine("          Source ID: " + healthEvent.HealthInformation.SourceId);
                    Console.WriteLine("          Health State: " + healthEvent.HealthInformation.HealthState);
                    Console.WriteLine("          Property: " + healthEvent.HealthInformation.Property);
                    Console.WriteLine("          Remove When Expired: " + healthEvent.HealthInformation.RemoveWhenExpired);
                    Console.WriteLine("          Sequence Number: " + healthEvent.HealthInformation.SequenceNumber);
                    Console.WriteLine("          Time to Live: " + healthEvent.HealthInformation.TimeToLive);
                }
            
                // List the unhealthy evaluations.
                Console.WriteLine("    Unhealthy Evaluations:");
                IList&lt;HealthEvaluation&gt; healthEvaluationList = serviceHealth.UnhealthyEvaluations;
                foreach (HealthEvaluation healthEvaluation in healthEvaluationList)
                {
                    Console.WriteLine("      Kind: " + healthEvaluation.Kind);
                    Console.WriteLine("        Aggregated Health State: " + healthEvaluation.AggregatedHealthState);
                    Console.WriteLine("        Description: " + healthEvaluation.Description);
                }
            
                Console.WriteLine();
                return true;
            }
            </code>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Uri,System.Fabric.Health.ApplicationHealthPolicy)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric service.</para>
            </summary>
            <param name="serviceName">
            <para>The name of the Service Fabric service.</para>
            </param>
            <param name="healthPolicy">The application health policy used to evaluate service health.</param>
            <returns>
            <para>The health of a Service Fabric service.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than MaxOperationTimeout to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <paramref name="serviceName"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric service by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="serviceName">
            <para>The name of the Service Fabric service.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health of a Service Fabric service.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the user provided <paramref name="timeout"/> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <paramref name="serviceName"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Uri,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric service by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="serviceName">
            <para>The name of the Service Fabric service.</para>
            </param>
            <param name="healthPolicy">The application health policy used to evaluate the entity health.</param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health of a Service Fabric service.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the user provided <paramref name="timeout"/> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <paramref name="serviceName"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Fabric.Description.ServiceHealthQueryDescription)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric service by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="queryDescription">The query description.</param>
            <returns>
            <para>The health of a Service Fabric service.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than MaxOperationTimeout to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <see cref="P:System.Fabric.Description.ServiceHealthQueryDescription.ServiceName"/> 
                is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Fabric.Description.ServiceHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric service by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="queryDescription">The query description.</param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health of a Service Fabric service.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the user provided <paramref name="timeout"/> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <see cref="P:System.Fabric.Description.ServiceHealthQueryDescription.ServiceName"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Guid)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric partition.</para>
            </summary>
            <param name="partitionId">
            <para>The ID of the Service Fabric partition.</para>
            </param>
            <returns>
            <para>The health of a Service Fabric partition.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than MaxOperationTimeout to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <remarks>
            <para>The following example gets the health of a partition.</para>
              <code language="c#">public static bool GetPartitionHealth(string clusterConnection)
            {
                PartitionHealth partitionHealth;
            
                // Connect to the cluster.
                FabricClient fabricClient = new FabricClient(clusterConnection);
            
                // Get the partition health.
                try
                {
                    partitionHealth = fabricClient.HealthManager.GetPartitionHealthAsync(new Guid("a7206315-e53b-4d05-b59c-e210caa28893")).Result;
                }
                catch (Exception e)
                {
                    Console.WriteLine("Error: " + e.Message);
            
                    if (e.InnerException != null)
                        Console.WriteLine("  Inner Exception: " + e.InnerException.Message);
            
                    return false;
                }
            
                // Display the partition health information.
                Console.WriteLine("Partition Health:");
                Console.WriteLine("  Partition ID: " + partitionHealth.PartitionId);
                Console.WriteLine("    Aggregated Health State: " + partitionHealth.AggregatedHealthState);
            
                // List the health events.
                Console.WriteLine("    Health Events:");
                IList&lt;HealthEvent&gt; healthEvents = partitionHealth.HealthEvents;
                foreach (HealthEvent healthEvent in healthEvents)
                {
                    Console.WriteLine("      Health Event:");
                    Console.WriteLine("        Last Modified: " + healthEvent.LastModifiedUtcTimestamp);
                    Console.WriteLine("        Source UTC Timestamp: " + healthEvent.SourceUtcTimestamp);
                    Console.WriteLine("        Is Expired: " + healthEvent.IsExpired);
                    Console.WriteLine("        Health Information:");
                    Console.WriteLine("          Description: " + healthEvent.HealthInformation.Description);
                    Console.WriteLine("          Source ID: " + healthEvent.HealthInformation.SourceId);
                    Console.WriteLine("          Health State: " + healthEvent.HealthInformation.HealthState);
                    Console.WriteLine("          Property: " + healthEvent.HealthInformation.Property);
                    Console.WriteLine("          Remove When Expired: " + healthEvent.HealthInformation.RemoveWhenExpired);
                    Console.WriteLine("          Sequence Number: " + healthEvent.HealthInformation.SequenceNumber);
                    Console.WriteLine("          Time to Live: " + healthEvent.HealthInformation.TimeToLive);
                }
            
                // List the replica health states.
                Console.WriteLine("    Replica Health States:");
                IList&lt;ReplicaHealthState&gt; replicaHealthStates = partitionHealth.ReplicaHealthStates;
                foreach (ReplicaHealthState replicaHealthState in replicaHealthStates)
                {
                    Console.WriteLine("      ID: " + replicaHealthState.Id);
                    Console.WriteLine("        Kind: " + replicaHealthState.Kind);
                    Console.WriteLine("        Aggregated Health State: " + replicaHealthState.AggregatedHealthState);
                    Console.WriteLine("        Partition ID: " + replicaHealthState.PartitionId);
                }
            
                // List the unhealthy evaluations.
                Console.WriteLine("    Unhealthy Evaluations:");
                IList&lt;HealthEvaluation&gt; healthEvaluationList = partitionHealth.UnhealthyEvaluations;
                foreach (HealthEvaluation healthEvaluation in healthEvaluationList)
                {
                    Console.WriteLine("      Kind: " + healthEvaluation.Kind);
                    Console.WriteLine("        Aggregated Health State: " + healthEvaluation.AggregatedHealthState);
                    Console.WriteLine("        Description: " + healthEvaluation.Description);
                }
            
                Console.WriteLine();
                return true;
            }
            </code>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Guid,System.Fabric.Health.ApplicationHealthPolicy)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric partition.</para>
            </summary>
            <param name="partitionId">
            <para>The ID of the Service Fabric partition.</para>
            </param>
            <param name="healthPolicy">The application health policy used to evaluate the entity health.</param>
            <returns>
            <para>The health of a Service Fabric partition.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than MaxOperationTimeout to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric partition by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="partitionId">
            <para>The ID of the Service Fabric partition.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health of a Service Fabric partition.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/>
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the user provided <paramref name="timeout"/> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Guid,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric partition by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="partitionId">
            <para>The ID of the Service Fabric partition.</para>
            </param>
            <param name="healthPolicy">The application health policy used to evaluate the entity health.</param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health of a Service Fabric partition.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/>
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the user provided <paramref name="timeout"/> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Fabric.Description.PartitionHealthQueryDescription)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric partition by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="queryDescription">The query description.</param>
            <returns>
            <para>The health of a Service Fabric partition.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/>
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than MaxOperationTimeout to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Fabric.Description.PartitionHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric partition by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="queryDescription">The query description.</param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health of a Service Fabric partition.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/>
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the user provided <paramref name="timeout"/> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Guid,System.Int64)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric replica.</para>
            </summary>
            <param name="partitionId">
            <para>The ID of the Service Fabric partition.</para>
            </param>
            <param name="replicaId">
            <para>The ID of the Service Fabric replica.</para>
            </param>
            <returns>
            <para>The health of a Service Fabric replica.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than MaxOperationTimeout to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <remarks>
            <para>The following example gets the health of a replica.</para>
              <code language="c#">public static bool GetReplicaHealth(string clusterConnection)
            {
                ReplicaHealth replicaHealth;
            
                // Connect to the cluster.
                FabricClient fabricClient = new FabricClient(clusterConnection);
            
                // Get the replica health.
                try
                {
                    replicaHealth = fabricClient.HealthManager.GetReplicaHealthAsync(
            new Guid("a7206315-e53b-4d05-b59c-e210caa28893"), 130538257146083818).Result;
                }
                catch (Exception e)
                {
                    Console.WriteLine("Error: " + e.Message);
            
                    if (e.InnerException != null)
            Console.WriteLine("  Inner Exception: " + e.InnerException.Message);
            
                    return false;
                }
            
                Console.WriteLine("Replica Health:");
                Console.WriteLine("  ID: " + replicaHealth.Id);
                Console.WriteLine("    Aggregated Health State: " + replicaHealth.AggregatedHealthState);
                Console.WriteLine("    Kind: " + replicaHealth.Kind);
                Console.WriteLine("    Partition ID: " + replicaHealth.PartitionId);
            
                // List the health events.
                Console.WriteLine("    Health Events:");
                IList&lt;HealthEvent&gt; healthEvents = replicaHealth.HealthEvents;
                foreach (HealthEvent healthEvent in healthEvents)
                {
                    Console.WriteLine("      Health Event:");
                    Console.WriteLine("        Last Modified: " + healthEvent.LastModifiedUtcTimestamp);
                    Console.WriteLine("        Source UTC Timestamp: " + healthEvent.SourceUtcTimestamp);
                    Console.WriteLine("        Is Expired: " + healthEvent.IsExpired);
                    Console.WriteLine("        Health Information:");
                    Console.WriteLine("          Description: " + healthEvent.HealthInformation.Description);
                    Console.WriteLine("          Source ID: " + healthEvent.HealthInformation.SourceId);
                    Console.WriteLine("          Health State: " + healthEvent.HealthInformation.HealthState);
                    Console.WriteLine("          Property: " + healthEvent.HealthInformation.Property);
                    Console.WriteLine("          Remove When Expired: " + healthEvent.HealthInformation.RemoveWhenExpired);
                    Console.WriteLine("          Sequence Number: " + healthEvent.HealthInformation.SequenceNumber);
                    Console.WriteLine("          Time to Live: " + healthEvent.HealthInformation.TimeToLive);
                }
            
                // List the unhealthy evaluations.
                Console.WriteLine("    Unhealthy Evaluations:");
                IList&lt;HealthEvaluation&gt; healthEvaluationList = replicaHealth.UnhealthyEvaluations;
                foreach (HealthEvaluation healthEvaluation in healthEvaluationList)
                {
                    Console.WriteLine("      Kind: " + healthEvaluation.Kind);
                    Console.WriteLine("        Aggregated Health State: " + healthEvaluation.AggregatedHealthState);
                    Console.WriteLine("        Description: " + healthEvaluation.Description);
                }
            
                Console.WriteLine(); 
                return true;
            }
            </code>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Guid,System.Int64,System.Fabric.Health.ApplicationHealthPolicy)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric replica.</para>
            </summary>
            <param name="partitionId">
            <para>The ID of the Service Fabric partition.</para>
            </param>
            <param name="replicaId">
            <para>The ID of the Service Fabric replica.</para>
            </param>
            <param name="healthPolicy">The application health policy used to evaluate the entity health.</param>
            <returns>
            <para>The health of a Service Fabric replica.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than MaxOperationTimeout to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Guid,System.Int64,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric replica by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="partitionId">
            <para>The ID of the Service Fabric partition.</para>
            </param>
            <param name="replicaId">
            <para>The ID of the Service Fabric replica.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health of a Service Fabric replica.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the user provided <paramref name="timeout"/> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Guid,System.Int64,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric replica by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="partitionId">
            <para>The ID of the Service Fabric partition.</para>
            </param>
            <param name="replicaId">
            <para>The ID of the Service Fabric replica.</para>
            </param>
            <param name="healthPolicy">The application health policy used to evaluate the entity health.</param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health of a Service Fabric replica.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the user provided <paramref name="timeout"/> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Fabric.Description.ReplicaHealthQueryDescription)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric replica by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="queryDescription">The query description.</param>
            <returns>
            <para>The health of a Service Fabric replica.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than MaxOperationTimeout to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Fabric.Description.ReplicaHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a Service Fabric replica by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="queryDescription">The query description.</param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health of a Service Fabric replica.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the user provided <paramref name="timeout"/> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Uri,System.String)">
            <summary>
            <para>Asynchronously gets the health of a deployed Service Fabric application on the specified node.</para>
            </summary>
            <param name="applicationName">
            <para>The URI of the Service Fabric application.</para>
            </param>
            <param name="nodeName">
            <para>The node name where the Service Fabric application is deployed.</para>
            </param>
            <returns>
            <para>The health of a deployed Service Fabric application.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/>
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than MaxOperationTimeout to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <paramref name="applicationName"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <remarks>
            <para>The following example gets the health of a deployed application.</para>
              <code language="c#">public static bool GetDeployedApplicationsHealth(string clusterConnection)
            {
                //DeployedApplicationHealth deployedApplicationHealth;
                //ApplicationHealth applicationHealth;
                Uri applicationName = new Uri("fabric:/myapp/todo");
            
                // Connect to the cluster.
                FabricClient fabricClient = new FabricClient(clusterConnection);
            
                Console.WriteLine("Deployed Application Health:");
            
                try
                {
                    // Determine the nodes where the application has been deployed.
                    ApplicationHealth applicationHealth = fabricClient.HealthManager.GetApplicationHealthAsync(applicationName).Result;
            
                    // Get the deployed application health for each node.
                    IList&lt;DeployedApplicationHealthState&gt; deployedAppHealthStateList = applicationHealth.DeployedApplicationHealthStates;
                    foreach (DeployedApplicationHealthState deployedAppHealthState in deployedAppHealthStateList)
                    {
            DeployedApplicationHealth deployedApplicationHealth = fabricClient.HealthManager.GetDeployedApplicationHealthAsync(applicationName, 
                deployedAppHealthState.NodeName).Result;
            
            // Display the deployed application health information for each node.
            
            Console.WriteLine("  Application {0}: {1}", deployedApplicationHealth.ApplicationName, deployedApplicationHealth.AggregatedHealthState);
            Console.WriteLine("    Node Name: " + deployedApplicationHealth.NodeName);
            
            // List the deployed application health states.
            Console.WriteLine("    Deployed applications:");
            IList&lt;DeployedServicePackageHealthState&gt; deployedSPHealthStateList = deployedApplicationHealth.DeployedServicePackageHealthStates;
            foreach (DeployedServicePackageHealthState deployedSPHealthState in deployedSPHealthStateList)
            {
                Console.WriteLine("      Application: " + deployedSPHealthState.ApplicationName);
                Console.WriteLine("        Aggregated Health State: " + deployedSPHealthState.AggregatedHealthState);
                Console.WriteLine("        Node Name: " + deployedSPHealthState.NodeName);
                Console.WriteLine("        Service Manifest Name: " + deployedSPHealthState.ServiceManifestName);
            }
            
            // List the health events.
            Console.WriteLine("    Health Events:");
            IList&lt;HealthEvent&gt; healthEvents = deployedApplicationHealth.HealthEvents;
            foreach (HealthEvent healthEvent in healthEvents)
            {
                Console.WriteLine("      Health Event:");
                Console.WriteLine("        Last Modified: " + healthEvent.LastModifiedUtcTimestamp);
                Console.WriteLine("        Source UTC Timestamp: " + healthEvent.SourceUtcTimestamp);
                Console.WriteLine("        Is Expired: " + healthEvent.IsExpired);
                Console.WriteLine("        Health Information:");
                Console.WriteLine("          Description: " + healthEvent.HealthInformation.Description);
                Console.WriteLine("          Source ID: " + healthEvent.HealthInformation.SourceId);
                Console.WriteLine("          Health State: " + healthEvent.HealthInformation.HealthState);
                Console.WriteLine("          Property: " + healthEvent.HealthInformation.Property);
                Console.WriteLine("          Remove When Expired: " + healthEvent.HealthInformation.RemoveWhenExpired);
                Console.WriteLine("          Sequence Number: " + healthEvent.HealthInformation.SequenceNumber);
                Console.WriteLine("          Time to Live: " + healthEvent.HealthInformation.TimeToLive);
            }
            
            // List the unhealthy evaluations.
            Console.WriteLine("    Unhealthy Evaluations:");
            IList&lt;HealthEvaluation&gt; healthEvaluationList = deployedApplicationHealth.UnhealthyEvaluations;
            foreach (HealthEvaluation healthEvaluation in healthEvaluationList)
            {
                Console.WriteLine("      Kind: " + healthEvaluation.Kind);
                Console.WriteLine("        Aggregated Health State: " + healthEvaluation.AggregatedHealthState);
                Console.WriteLine("        Description: " + healthEvaluation.Description);
            }
            
            Console.WriteLine();
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine("Error: " + e.Message);
            
                    if (e.InnerException != null)
            Console.WriteLine("  Inner Exception: " + e.InnerException.Message);
            
                    return false;
                }
            
                return true;
            }
            </code>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Uri,System.String,System.Fabric.Health.ApplicationHealthPolicy)">
            <summary>
            <para>Asynchronously gets the health of a deployed Service Fabric application on the specified node.</para>
            </summary>
            <param name="applicationName">
            <para>The URI of the Service Fabric application.</para>
            </param>
            <param name="nodeName">
            <para>The node name where the Service Fabric application is deployed.</para>
            </param>
            <param name="healthPolicy">The application health policy used to evaluate entity health.</param>
            <returns>
            <para>The health of a deployed Service Fabric application.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/>
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than MaxOperationTimeout to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <paramref name="applicationName"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Uri,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a deployed Service Fabric application on the specified node by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="applicationName">
            <para>The URI of the Service Fabric application.</para>
            </param>
            <param name="nodeName">
            <para>The node name where the Service Fabric application is deployed.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The task representing the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the user provided <paramref name="timeout"/> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <paramref name="applicationName"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Uri,System.String,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a deployed Service Fabric application on the specified node by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="applicationName">
            <para>The URI of the Service Fabric application.</para>
            </param>
            <param name="nodeName">
            <para>The node name where the Service Fabric application is deployed.</para>
            </param>
            <param name="healthPolicy">The application health policy used to evaluate the entity health.</param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The task representing the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the user provided <paramref name="timeout"/> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <paramref name="applicationName"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Fabric.Description.DeployedApplicationHealthQueryDescription)">
            <summary>
            <para>Asynchronously gets the health of a deployed Service Fabric application on the specified node by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="queryDescription">The query description.</param>
            <returns>
            <para>The task representing the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than MaxOperationTimeout to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <see cref="P:System.Fabric.Description.DeployedApplicationHealthQueryDescription.ApplicationName"/> 
                is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Fabric.Description.DeployedApplicationHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a deployed Service Fabric application on the specified node by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="queryDescription">The query description.</param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The task representing the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the user provided <paramref name="timeout"/> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <see cref="P:System.Fabric.Description.DeployedApplicationHealthQueryDescription.ApplicationName"/> 
                is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Uri,System.String,System.String)">
            <summary>
            <para>Asynchronously gets the health of a deployed Service Fabric service package.</para>
            </summary>
            <param name="applicationName">
            <para>The URI of the Service Fabric application.</para>
            </param>
            <param name="serviceManifestName">
            <para>The name of the service manifest file for this Service Fabric service.</para>
            </param>
            <param name="nodeName">
            <para>The name of the node that the Service Fabric service was deployed to.</para>
            </param>
            <returns>
            <para>The health of a deployed Service Fabric service package.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than MaxOperationTimeout to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <paramref name="applicationName"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <remarks>
            <para>The following example gets the health of a deployed service package.</para>
              <code language="c#">public static bool GetDeployedServicePackageHealth(string clusterConnection)
            {
                DeployedApplicationHealth deployedApplicationHealth;
                DeployedServicePackageHealth deployedServicePackageHealth;
                ApplicationHealth applicationHealth;
                Uri applicationName = new Uri("fabric:/myapp/todo");
            
                // Connect to the cluster.
                FabricClient fabricClient = new FabricClient(clusterConnection);
            
                Console.WriteLine("Deployed Service Package Health:");
            
                try
                {
                    // Determine the nodes where the application has been deployed.
                    applicationHealth = fabricClient.HealthManager.GetApplicationHealthAsync(applicationName).Result;
            
                    // Get the deployed service package health for each node.
                    IList&lt;DeployedApplicationHealthState&gt; deployedApplicationHealthStateList = applicationHealth.DeployedApplicationHealthStates;
                    foreach (DeployedApplicationHealthState deployedApplicationHealthState in deployedApplicationHealthStateList)
                    {
            // Get the deployed application health, which contains the service manifest name and 
            // the names of the nodes where the service has been deployed.
            deployedApplicationHealth = fabricClient.HealthManager.GetDeployedApplicationHealthAsync(applicationName,
                deployedApplicationHealthState.NodeName).Result;
            
            // Return if empty.
            if (deployedApplicationHealth.DeployedServicePackageHealthStates.Count == 0)
                return false;
            
            // Get the deployed service package health.
            deployedServicePackageHealth = fabricClient.HealthManager.GetDeployedServicePackageHealthAsync(applicationName,
                deployedApplicationHealth.DeployedServicePackageHealthStates[0].ServiceManifestName, 
                deployedApplicationHealthState.NodeName).Result;
            
            // Display the deployed service package health information.
            Console.WriteLine("  Application Name: " + deployedServicePackageHealth.ApplicationName);
            Console.WriteLine("    Node Name: " + deployedServicePackageHealth.NodeName);
            Console.WriteLine("    Aggregated Health State: " + deployedServicePackageHealth.AggregatedHealthState);
            Console.WriteLine("    Service Manifest Name: " + deployedServicePackageHealth.ServiceManifestName);
            
            // List the health events.
            Console.WriteLine("    Health Events:");
            IList&lt;HealthEvent&gt; healthEvents = deployedServicePackageHealth.HealthEvents;
            foreach (HealthEvent healthEvent in healthEvents)
            {
                Console.WriteLine("      Health Event:");
                Console.WriteLine("        Last Modified: " + healthEvent.LastModifiedUtcTimestamp);
                Console.WriteLine("        Source UTC Timestamp: " + healthEvent.SourceUtcTimestamp);
                Console.WriteLine("        Is Expired: " + healthEvent.IsExpired);
                Console.WriteLine("        Health Information:");
                Console.WriteLine("          Description: " + healthEvent.HealthInformation.Description);
                Console.WriteLine("          Source ID: " + healthEvent.HealthInformation.SourceId);
                Console.WriteLine("          Health State: " + healthEvent.HealthInformation.HealthState);
                Console.WriteLine("          Property: " + healthEvent.HealthInformation.Property);
                Console.WriteLine("          Remove When Expired: " + healthEvent.HealthInformation.RemoveWhenExpired);
                Console.WriteLine("          Sequence Number: " + healthEvent.HealthInformation.SequenceNumber);
                Console.WriteLine("          Time to Live: " + healthEvent.HealthInformation.TimeToLive);
            }
            
            // List the unhealthy evaluations.
            Console.WriteLine("    Unhealthy Evaluations:");
            IList&lt;HealthEvaluation&gt; healthEvaluationList = deployedServicePackageHealth.UnhealthyEvaluations;
            foreach (HealthEvaluation healthEvaluation in healthEvaluationList)
            {
                Console.WriteLine("      Kind: " + healthEvaluation.Kind);
                Console.WriteLine("        Aggregated Health State: " + healthEvaluation.AggregatedHealthState);
                Console.WriteLine("        Description: " + healthEvaluation.Description);
            }
            
            Console.WriteLine();
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine("Error: " + e.Message);
            
                    if (e.InnerException != null)
            Console.WriteLine("  Inner Exception: " + e.InnerException.Message);
            
                    return false;
                }
                return true;
            }
            </code>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Uri,System.String,System.String,System.Fabric.Health.ApplicationHealthPolicy)">
            <summary>
            <para>Asynchronously gets the health of a deployed Service Fabric service package.</para>
            </summary>
            <param name="applicationName">
            <para>The URI of the Service Fabric application.</para>
            </param>
            <param name="serviceManifestName">
            <para>The name of the service manifest file for this Service Fabric service.</para>
            </param>
            <param name="nodeName">
            <para>The name of the node that the Service Fabric service was deployed to.</para>
            </param>
            <param name="healthPolicy">The application health policy used to evaluate the entity health.</param>
            <returns>
            <para>The health of a deployed Service Fabric service package.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than MaxOperationTimeout to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <paramref name="applicationName"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Uri,System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a deployed Service Fabric service package by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="applicationName">
            <para>The URI of the Service Fabric application.</para>
            </param>
            <param name="serviceManifestName">
            <para>The name of the service manifest file for this Service Fabric service.</para>
            </param>
            <param name="nodeName">
            <para>The name of the node that the Service Fabric service was deployed to.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health of a deployed Service Fabric service package.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/>
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the user provided <paramref name="timeout"/> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <paramref name="applicationName"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Uri,System.String,System.String,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a deployed Service Fabric service package by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="applicationName">
            <para>The URI of the Service Fabric application.</para>
            </param>
            <param name="serviceManifestName">
            <para>The name of the service manifest file for this Service Fabric service.</para>
            </param>
            <param name="nodeName">
            <para>The name of the node that the Service Fabric service was deployed to.</para>
            </param>
            <param name="healthPolicy">The application health policy used to evaluate entity health.</param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health of a deployed Service Fabric service package.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/>
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the user provided <paramref name="timeout"/> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <paramref name="applicationName"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Fabric.Description.DeployedServicePackageHealthQueryDescription)">
            <summary>
            <para>Asynchronously gets the health of a deployed Service Fabric service package by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="queryDescription">The query description.</param>
            <returns>
            <para>The health of a deployed Service Fabric service package.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/>
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than MaxOperationTimeout to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <see cref="P:System.Fabric.Description.DeployedServicePackageHealthQueryDescription.ApplicationName"/> 
                is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Fabric.Description.DeployedServicePackageHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously gets the health of a deployed Service Fabric service package by using the specified timeout and cancellation token.</para>
            </summary>
            <param name="queryDescription">The query description.</param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The health of a deployed Service Fabric service package.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/>
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the user provided <paramref name="timeout"/> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <see cref="P:System.Fabric.Description.DeployedServicePackageHealthQueryDescription.ApplicationName"/> 
                is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTooBusy"/> is returned when the service is too busy to process the operation.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthChunkAsync">
            <summary>
            Gets the health of a Service Fabric cluster.
            </summary>
            <returns>The health chunk representing the cluster health.</returns>
            <remarks>The cluster aggregated health state is computed based on all entities in the cluster. No children are included in the results, because no filters are specified.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthChunkAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the health of a Service Fabric cluster.
            </summary>
            <param name="timeout">The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</param>
            <param name="cancellationToken">The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</param>
            <returns>The health chunk representing the cluster health.</returns>
            <remarks>The cluster aggregated health state is computed based on all entities in the cluster. No children are included in the results, because no filters are specified.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthChunkAsync(System.Fabric.Description.ClusterHealthChunkQueryDescription)">
            <summary>
            Gets the health of a Service Fabric cluster, including cluster entities as requested in the query description.
            </summary>
            <param name="queryDescription">The query description that defines how health evaluation should be performed and what entities should be included in the <see cref="T:System.Fabric.Health.ClusterHealthChunk"/>.</param>
            <returns>The health chunk representing the cluster health.</returns>
            <remarks>The cluster aggregated health state is computed based on all entities in the cluster. Only the children that respect the filters from the input query description (if any) are included in the results.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthChunkAsync(System.Fabric.Description.ClusterHealthChunkQueryDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the health of a Service Fabric cluster, including cluster entities as requested in the query description.
            </summary>
            <param name="queryDescription">The query description that defines how health evaluation should be performed and what entities should be included in the <see cref="T:System.Fabric.Health.ClusterHealthChunk"/>.</param>
            <param name="timeout">The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</param>
            <param name="cancellationToken">The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</param>
            <returns>The health chunk representing the cluster health.</returns>
            <remarks>The cluster aggregated health state is computed based on all entities in the cluster. Only the children that respect the filters from the input query description (if any) are included in the results.</remarks>
        </member>
        <member name="T:System.Fabric.FabricClient.InfrastructureServiceClient">
            <summary>
            <para>Provides methods for performing infrastructure-specific operations.</para>
            </summary>
            <remarks>
            <para>The InfrastructureService must be enabled before this client can be used. The InfrastructureService is only supported on some infrastructures.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.InfrastructureServiceClient.InvokeInfrastructureCommandAsync(System.Uri,System.String)">
            <summary>
            <para>Asynchronously invokes an administrative command on the given infrastructure service instance.</para>
            </summary>
            <param name="serviceName">
            <para>The name of the target infrastructure service instance.</para>
            </param>
            <param name="command">
            <para>The text of the command to be invoked.  The content of the command is infrastructure-specific.</para>
            </param>
            <returns>
            <para>The response from the infrastructure service. The response format is a JSON string. The contents of the response depend on which command was issued.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.InfrastructureServiceClient.InvokeInfrastructureCommandAsync(System.Uri,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously invokes an administrative command on an infrastructure service.</para>
            </summary>
            <param name="serviceName">
            <para>The name of the target infrastructure service instance.</para>
            </param>
            <param name="command">
            <para>The text of the command to be invoked.  The content of the command is infrastructure-specific.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>The response from the infrastructure service. The response format is a JSON string. The contents of the response depend on which command was issued.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.InfrastructureServiceClient.InvokeInfrastructureQueryAsync(System.Uri,System.String)">
            <summary>
            <para>Asynchronously invokes a read-only query on the given infrastructure service instance.</para>
            </summary>
            <param name="serviceName">
            <para>The name of the target infrastructure service instance.</para>
            </param>
            <param name="command">
            <para>The text of the command to be invoked.  The content of the command is infrastructure-specific.</para>
            </param>
            <returns>
            <para>The response from the infrastructure service. The response format is a JSON string. The contents of the response depend on which command was issued.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.InfrastructureServiceClient.InvokeInfrastructureQueryAsync(System.Uri,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously invokes a read-only query on the given infrastructure service instance.</para>
            </summary>
            <param name="serviceName">
            <para>The name of the target infrastructure service instance.</para>
            </param>
            <param name="command">
            <para>The text of the command to be invoked.  The content of the command is infrastructure-specific.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>The response from the infrastructure service. The response format is a JSON string. The contents of the response depend on which command was issued.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.FabricClient.PropertyManagementClient">
            <summary>
            <para>Represents the property management client used to perform management of names and properties.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.CreateNameAsync(System.Uri)">
            <summary>
            <para>Creates the specified Service Fabric Name.</para>
            </summary>
            <param name="name">
            <para>The Service Fabric Name.</para>
            </param>
            <returns>
            <para>The created Service Fabric name.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementAlreadyExistsException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameAlreadyExists"/> is returned when the Service Fabric Name already exists.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the default timeout (1 minute) to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <paramref name="name"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.CreateNameAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Creates the specified Service Fabric Name.</para>
            </summary>
            <param name="name">
            <para>The Service Fabric Name.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>. 
            Maximum timeout is MaxOperationTimeout which is configurable in the Cluster Manifest.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The created Service Fabric name.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementAlreadyExistsException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameAlreadyExists"/> is returned when the Service Fabric Name already exists.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the user provided <paramref name="timeout"/> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <paramref name="name"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.DeleteNameAsync(System.Uri)">
            <summary>
            <para>Deletes the specified Service Fabric Name.</para>
            </summary>
            <param name="name">
            <para>the Service Fabric Name.</para>
            </param>
            <returns>
            <para>The deleted Service Fabric name.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/>
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound"/> is returned when the user provided <paramref name="name"/> does not exist.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the default timeout (1 minute) to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <paramref name="name"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotEmpty"/> is returned when <paramref name="name"/> is parent of other Names, Properties or a Service.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.DeleteNameAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Deletes the specified Service Fabric Name.</para>
            </summary>
            <param name="name">
            <para>The Service Fabric Name.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>. 
            Maximum timeout is MaxOperationTimeout which is configurable in the Cluster Manifest.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The deleted Service Fabric name.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound"/> is returned when the user provided <paramref name="name"/> does not exist.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the user provided <paramref name="timeout"/> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <paramref name="name"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotEmpty"/> is returned when <paramref name="name"/> is parent of other Names, Properties or a Service.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.EnumerateSubNamesAsync(System.Uri,System.Fabric.NameEnumerationResult,System.Boolean)">
            <summary>
            <para>Enumerates all the Service FabricNames under a given Name. </para>
            </summary>
            <param name="name">
            <para>The parent Service Fabric Name to be enumerated.</para>
            </param>
            <param name="previousResult">
            <para>The result that was returned by the previous enumerate call. For the initial call, this is null.</para>
            </param>
            <param name="recursive">
            <para>
                <languageKeyword>True</languageKeyword> the enumeration should be recursive.</para>
            </param>
            <returns>
            <para>The enumerated Service Fabric Names.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound"/> is returned when the user provided <paramref name="name"/> does not exist.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the default timeout (1 minute) to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when user provided <paramref name="name"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.EnumerateSubNamesAsync(System.Uri,System.Fabric.NameEnumerationResult,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Enumerates all the Service Fabric Names under a given Name.</para>
            </summary>
            <param name="name">
            <para>The parent Service Fabric Name to be enumerated.</para>
            </param>
            <param name="previousResult">
            <para>The result that was returned by the previous enumerate call. For the initial call, this is null.</para>
            </param>
            <param name="recursive">
            <para>
                <languageKeyword>True</languageKeyword> if the enumeration should be recursive.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>.
            Maximum timeout is MaxOperationTimeout which is configurable in the Cluster Manifest.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The enumerated Service Fabric Names.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound"/> is returned when the user provided <paramref name="name"/> does not exist.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the user provided <paramref name="timeout"/> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when user provided <paramref name="name"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.NameExistsAsync(System.Uri)">
            <summary>
            <para>Returns <languageKeyword>true</languageKeyword> if the specified Service Fabric Name exists.</para>
            </summary>
            <param name="name">
            <para>The Service Fabric Name.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the specified Service Fabric Name exists; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/>
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the default timeout (1 minute) to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when user provided <paramref name="name"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            <para>
                <see cref="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.Fabric.Description.ClusterHealthQueryDescription)"/> is the one way of verifying the cluster is up 
                and <see cref="T:System.Fabric.FabricClient"/> can connect to the cluster.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.NameExistsAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Returns <languageKeyword>true</languageKeyword> if the specified Service Fabric Name exists.</para>
            </summary>
            <param name="name">
            <para>The Service Fabric Name.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>. Maximum timeout is MaxOperationTimeout which is configurable in the Cluster Manifest.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the specified Service Fabric Name exists; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the user provided <paramref name="timeout"/> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when user provided <paramref name="name"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.PutPropertyAsync(System.Uri,System.String,System.Double)">
            <summary>
            <para>Creates or updates the specified Service Fabric Property of type <see cref="T:System.Double"/> under a given Name.
            Timeout for the operation will be set to default timeout (1 minute).</para>
            </summary>
            <param name="parentName">
            <para>The parent Service Fabric Name.</para>
            </param>
            <param name="propertyName">
            <para>The name of the Service Fabric Property.</para>
            </param>
            <param name="value">
            <para>The value of the property.</para>
            </param>
            <returns>
            <para>The created or updated Service Fabric Property.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound"/> is returned when <paramref name="parentName"/> does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.WriteConflict"/> is returned when this write operation conflicts with another write operation.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the default timeout (1 minute) to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <paramref name="parentName"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ValueTooLarge"/> is returned when <paramref name="value"/> is larger than 1MB.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.PutPropertyAsync(System.Uri,System.String,System.Double,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Creates or updates the specified Service Fabric Property of type <see cref="T:System.Double"/> under a given Name.</para>
            </summary>
            <param name="parentName">
            <para>The parent Service Fabric Name.</para>
            </param>
            <param name="propertyName">
            <para>The name of the Service Fabric Property.</para>
            </param>
            <param name="value">
            <para>The value of the property.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>.
            Maximum timeout is MaxOperationTimeout which is configurable in the Cluster Manifest. Maximum timeout is MaxOperationTimeout which is configurable in the Cluster Manifest.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The created or updated Service Fabric Property.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound"/> is returned when <paramref name="parentName"/> does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.WriteConflict"/> is returned when this write operation conflicts with another write operation.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the user provided <paramref name="timeout"/> or MaxOperationTimeout to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <paramref name="parentName"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ValueTooLarge"/> is returned when <paramref name="value"/> is larger than 1MB.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.PutPropertyAsync(System.Uri,System.String,System.Int64)">
            <summary>
            <para>Creates or updates the specified Service Fabric Property of type <see cref="T:System.Int64"/> under a given Name. </para>
            </summary>
            <param name="parentName">
            <para>The parent Service Fabric Name.</para>
            </param>
            <param name="propertyName">
            <para>The name of the Service Fabric Property.</para>
            </param>
            <param name="value">
            <para>The value of the property.</para>
            </param>
            <returns>
            <para>The created or updated Service Fabric Property.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/>
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound"/> is returned when <paramref name="parentName"/> does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.WriteConflict"/> is returned when this write operation conflicts with another write operation.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the default timeout (1 minute) to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <paramref name="parentName"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ValueTooLarge"/> is returned when <paramref name="value"/> is larger than 1MB.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.PutPropertyAsync(System.Uri,System.String,System.Int64,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Creates or updates the specified Service Fabric Property of type <see cref="T:System.Int64"/> under a given Name.</para>
            </summary>
            <param name="parentName">
            <para>The parent Service Fabric Name.</para>
            </param>
            <param name="propertyName">
            <para>The name of the Service Fabric Property.</para>
            </param>
            <param name="value">
            <para>The value of the property.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>.
            Maximum timeout is MaxOperationTimeout which is configurable in the Cluster Manifest.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The created or updated Service Fabric Property.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/>
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound"/> is returned when the user provided <paramref name="parentName"/> does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.WriteConflict"/> is returned when this write operation conflicts with another write operation.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the user provided <paramref name="timeout"/> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <paramref name="parentName"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ValueTooLarge"/> is returned when <paramref name="value"/> is larger than 1MB.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.PutPropertyAsync(System.Uri,System.String,System.String)">
            <summary>
            <para>Creates or updates the specified Service Fabric Property of type <see cref="T:System.String"/> under a given Name. </para>
            </summary>
            <param name="parentName">
            <para>The parent Service Fabric Name.</para>
            </param>
            <param name="propertyName">
            <para>The name of the Service Fabric Property.</para>
            </param>
            <param name="value">
            <para>The value of the property.</para>
            </param>
            <returns>
            <para>The created or updated Service Fabric Property.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound"/> is returned when the user provided <paramref name="parentName"/> does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.WriteConflict"/> is returned when this write operation conflicts with another write operation.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the default timeout (1 minute) to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <paramref name="parentName"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ValueTooLarge"/> is returned when <paramref name="value"/> is larger than 1MB.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.PutPropertyAsync(System.Uri,System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Creates or updates the specified Service Fabric Property of type <see cref="T:System.String"/> under a given Name.</para>
            </summary>
            <param name="parentName">
            <para>The parent Service Fabric Name.</para>
            </param>
            <param name="propertyName">
            <para>The name of the Service Fabric Property.</para>
            </param>
            <param name="value">
            <para>The value of the property.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>. Maximum timeout is MaxOperationTimeout which is configurable in the Cluster Manifest.</para>
            </param>
            <param name="cancellationToken">
            <para>The operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The created or updated Service Fabric Property.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound"/> is returned when the user provided <paramref name="parentName"/> does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.WriteConflict"/> is returned when this write operation conflicts with another write operation.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the user provided <paramref name="timeout"/> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <paramref name="parentName"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ValueTooLarge"/> is returned when <paramref name="value"/> is larger than 1MB.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.PutPropertyAsync(System.Uri,System.String,System.Guid)">
            <summary>
            <para>Creates or updates the specified Service Fabric Property of type <see cref="T:System.Guid"/> under a given Name. </para>
            </summary>
            <param name="parentName">
            <para>The parent Service Fabric Name.</para>
            </param>
            <param name="propertyName">
            <para>The name of the Service Fabric Property.</para>
            </param>
            <param name="value">
            <para>The value of the property.</para>
            </param>
            <returns>
            <para>The created or updated Service Fabric Property.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound"/> is returned when <paramref name="parentName"/> does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.WriteConflict"/> is returned when this write operation conflicts with another write operation.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the default timeout (1 minute) to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <paramref name="parentName"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ValueTooLarge"/> is returned when <paramref name="value"/> is larger than 1MB.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.PutPropertyAsync(System.Uri,System.String,System.Guid,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Creates or updates the specified Service Fabric Property of type <see cref="T:System.Guid"/> under a given Name.</para>
            </summary>
            <param name="parentName">
            <para>The parent Service Fabric Name.</para>
            </param>
            <param name="propertyName">
            <para>The name of the Service Fabric Property.</para>
            </param>
            <param name="value">
            <para>The value of the property.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>.
            Maximum timeout is MaxOperationTimeout which is configurable in the Cluster Manifest.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing.
            It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The created or updated Service Fabric Property.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/>
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound"/> is returned when <paramref name="parentName"/> does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.WriteConflict"/> is returned when this write operation conflicts with another write operation.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the user provided <paramref name="timeout"/> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <paramref name="parentName"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ValueTooLarge"/> is returned when <paramref name="value"/> is larger than 1MB.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.PutPropertyAsync(System.Uri,System.String,System.Byte[])">
            <summary>
            <para>Creates or updates the specified Service Fabric Property of type <see cref="T:System.Byte"/> array under a given Name. </para>
            </summary>
            <param name="parentName">
            <para>The parent Service Fabric Name.</para>
            </param>
            <param name="propertyName">
            <para>The name of the Service Fabric Property.</para>
            </param>
            <param name="value">
            <para>The value of the property.</para>
            </param>
            <returns>
            <para>The created or updated Service Fabric Property.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/>
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound"/> is returned when <paramref name="parentName"/> does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.WriteConflict"/> is returned when this write operation conflicts with another write operation.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the default timeout (1 minute) to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <paramref name="parentName"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ValueTooLarge"/> is returned when <paramref name="value"/> is larger than 1MB.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.PutPropertyAsync(System.Uri,System.String,System.Byte[],System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Creates or updates the specified Service Fabric Property of type <see cref="T:System.Byte"/> array under a given Name.</para>
            </summary>
            <param name="parentName">
            <para>The parent Service Fabric Name.</para>
            </param>
            <param name="propertyName">
            <para>The name of the Service Fabric Property.</para>
            </param>
            <param name="value">
            <para>The value of the property.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>.
            Maximum timeout is MaxOperationTimeout which is configurable in the Cluster Manifest.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing.
            It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The created or updated Service Fabric Property.</para>
            </returns>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound"/> is returned when <paramref name="parentName"/> does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.WriteConflict"/> is returned when this write operation conflicts with another write operation.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the user provided <paramref name="timeout"/> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <paramref name="parentName"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ValueTooLarge"/> is returned when <paramref name="value"/> is larger than 1MB.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.DeletePropertyAsync(System.Uri,System.String)">
            <summary>
            <para>Deletes the specified Service Fabric Property. </para>
            </summary>
            <param name="parentName">
            <para>The parent Service Fabric Name of the Property.</para>
            </param>
            <param name="propertyName">
            <para>The name of the Service Fabric Property.</para>
            </param>
            <returns>
            <para>The deleted Service Fabric Property.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/>
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound"/> is returned when the user provided <paramref name="parentName"/> does not exist.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.PropertyNotFound"/> is returned when the specified Property does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.WriteConflict"/> is returned when this write operation conflicts with another write operation.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the default timeout (1 minute) to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <paramref name="parentName"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.DeletePropertyAsync(System.Uri,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Deletes the specified Service Fabric Property.</para>
            </summary>
            <param name="parentName">
            <para>URI defines the parent Service Fabric Name of the Property.</para>
            </param>
            <param name="propertyName">
            <para>String defines the name of the Service Fabric Property.</para>
            </param>
            <param name="timeout">
            <para>
                <see cref="T:System.TimeSpan"/> defines the maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>.
                Maximum timeout is MaxOperationTimeout which is configurable in the Cluster Manifest.</para>
            </param>
            <param name="cancellationToken">
            <para>
                <see cref="T:System.Threading.CancellationToken"/> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The deleted Service Fabric Property.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/>
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound"/> is returned when the user provided <paramref name="parentName"/> does not exist.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.PropertyNotFound"/> is returned when the specified Property does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.WriteConflict"/> is returned when this write operation conflicts with another write operation.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the user provided <paramref name="timeout"/> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <paramref name="parentName"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.GetPropertyAsync(System.Uri,System.String)">
            <summary>
            <para>Gets the specified <see cref="T:System.Fabric.NamedProperty"/>.</para>
            </summary>
            <param name="parentName">
            <para>The parent Service Fabric Name of the Property.</para>
            </param>
            <param name="propertyName">
            <para>The name of the Service Fabric Property.</para>
            </param>
            <returns>
            <para>The specified <see cref="T:System.Fabric.NamedProperty"/>.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/>
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound"/> is returned when the user provided <paramref name="parentName"/> does not exist.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.PropertyNotFound"/> is returned when the specified Property does not exist.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the default timeout (1 minute) to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <paramref name="parentName"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.GetPropertyAsync(System.Uri,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the specified <see cref="T:System.Fabric.NamedProperty"/>. </para>
            </summary>
            <param name="parentName">
            <para>The parent Service Fabric Name of the Property.</para>
            </param>
            <param name="propertyName">
            <para>The name of the Service Fabric Property.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>.
            Maximum timeout is MaxOperationTimeout which is configurable in the Cluster Manifest.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task`1"/> of <see cref="T:System.Fabric.NamedProperty"/>.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/>
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound"/> is returned when the user provided <paramref name="parentName"/> does not exist.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.PropertyNotFound"/> is returned when the specified Property does not exist.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the user provided <paramref name="timeout"/> or MaxOperationTimeout to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <paramref name="parentName"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.SubmitPropertyBatchAsync(System.Uri,System.Collections.Generic.ICollection{System.Fabric.PropertyBatchOperation})">
            <summary>
            <para>Submits a batch of <see cref="T:System.Fabric.PropertyBatchOperation"/>.</para>
            </summary>
            <param name="parentName">
            <para>The parent Service Fabric Name under which the Property batch operations will be executed.</para>
            </param>
            <param name="operations">
            <para>The batch property operations.</para>
            </param>
            <returns>
            <para>A batch of <see cref="T:System.Fabric.PropertyBatchOperation"/>.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/>
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound"/> is returned when the user provided <paramref name="parentName"/> does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.WriteConflict"/> is returned when this write operation conflicts with another write operation.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the default timeout (1 minute) to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <paramref name="parentName"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ValueTooLarge"/> is returned when the property value is larger than 1MB.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.PropertyCheckFailed"/> is returned when at least one check operation in the user provided <paramref name="operations"/> has failed.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Either all or none of the operations in the batch will be committed. </para>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.SubmitPropertyBatchAsync(System.Uri,System.Collections.Generic.ICollection{System.Fabric.PropertyBatchOperation},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Submits a batch of <see cref="T:System.Fabric.PropertyBatchOperation"/>s. Either all or none of the operations in the batch will be committed.</para>
            </summary>
            <param name="parentName">
            <para>The parent Service Fabric Name under which the Property batch operations will be executed.</para>
            </param>
            <param name="operations">
            <para>The batch property operations.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>.
            Maximum timeout is MaxOperationTimeout which is configurable in the Cluster Manifest.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>A batch of <see cref="T:System.Fabric.PropertyBatchOperation"/>.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/>
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound"/> is returned when the user provided <paramref name="parentName"/> does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.WriteConflict"/> is returned when this write operation conflicts with another write operation.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the user provided <paramref name="timeout"/> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <paramref name="parentName"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ValueTooLarge"/> is returned when property value is larger than 1MB.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.PropertyCheckFailed"/> is returned when at least one check operation in the user provided <paramref name="operations"/> has failed.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Either all or none of the operations in the batch will be committed. </para>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.GetPropertyMetadataAsync(System.Uri,System.String)">
            <summary>
            <para>Gets the specified <see cref="T:System.Fabric.NamedPropertyMetadata"/>.</para>
            </summary>
            <param name="parentName">
            <para>The parent Service Fabric Name of the Property.</para>
            </param>
            <param name="propertyName">
            <para>The name of the Property.</para>
            </param>
            <returns>
            <para>The specified <see cref="T:System.Fabric.NamedPropertyMetadata"/>.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound"/> is returned when the user provided <paramref name="parentName"/> does not exist.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.PropertyNotFound"/> is returned when the specified Property does not exist.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the default timeout (1 minute) to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <paramref name="parentName"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.GetPropertyMetadataAsync(System.Uri,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the specified <see cref="T:System.Fabric.NamedPropertyMetadata"/>.</para>
            </summary>
            <param name="parentName">
            <para>The parent Service Fabric Name of the Property.</para>
            </param>
            <param name="propertyName">
            <para>The name of the Property.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>.
            Maximum timeout is MaxOperationTimeout which is configurable in the Cluster Manifest.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing.
            It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The specified <see cref="T:System.Fabric.NamedPropertyMetadata"/>.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/>
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound"/> is returned when the user provided <paramref name="parentName"/> does not exist.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.PropertyNotFound"/> is returned when the specified Property does not exist.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the user provided <paramref name="timeout"/> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <paramref name="parentName"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.EnumeratePropertiesAsync(System.Uri,System.Boolean,System.Fabric.PropertyEnumerationResult)">
            <summary>
            <para>Enumerates all Service Fabric Properties under a given Name. </para>
            </summary>
            <param name="name">
            <para>The parent Service Fabric Name.</para>
            </param>
            <param name="includeValues">
            <para>
                <languageKeyword>True</languageKeyword> if values should be returned with the metadata. <languageKeyword>False</languageKeyword> to return only property metadata; <languageKeyword>true</languageKeyword> to return property metadata and value.</para>
            </param>
            <param name="previousResult">
            <para>The batch result for the previous call. If this the first call, this field needs to be set to null.</para>
            </param>
            <returns>
            <para>The enumerated Service Fabric Properties.</para>
            <para>If <see cref="P:System.Fabric.PropertyEnumerationResult.HasMoreData"/> is true, then this result can be used as input to the next
            <see cref="M:System.Fabric.FabricClient.PropertyManagementClient.EnumeratePropertiesAsync(System.Uri,System.Boolean,System.Fabric.PropertyEnumerationResult)"/> call.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/>
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound"/> is returned when the user provided <paramref name="name"/> does not exist.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the default timeout (1 minute) to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when user provided <paramref name="name"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.EnumeratePropertiesAsync(System.Uri,System.Boolean,System.Fabric.PropertyEnumerationResult,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Enumerates all Service Fabric Properties under a given Name.</para>
            </summary>
            <param name="name">
            <para>The parent Service Fabric Name.</para>
            </param>
            <param name="includeValues">
            <para>
                <languageKeyword>True</languageKeyword> if the values should be returned with the metadata.
                <languageKeyword>False</languageKeyword> to return only property metadata; true to return property metadata and value.</para>
            </param>
            <param name="previousResult">
            <para>The batch result for the previous call. If this the first call, this field needs to be set to null.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>.
            Maximum timeout is MaxOperationTimeout which is configurable in the Cluster Manifest.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The enumerated Service Fabric Properties.</para>
            <para>If <see cref="P:System.Fabric.PropertyEnumerationResult.HasMoreData"/> is true, then this result can be used as input to the next 
            <see cref="M:System.Fabric.FabricClient.PropertyManagementClient.EnumeratePropertiesAsync(System.Uri,System.Boolean,System.Fabric.PropertyEnumerationResult)"/> call.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state.
            Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound"/> is returned when the user provided <paramref name="name"/> does not exist.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the user provided <paramref name="timeout"/> to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when user provided <paramref name="name"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
            <remarks>
            <para>Timeout for the operation will be set to default timeout (1 minute).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.PutCustomPropertyOperationAsync(System.Uri,System.Fabric.PutCustomPropertyOperation)">
            <summary>
            <para>Creates or updates the specified Service Fabric Property described by <see cref="T:System.Fabric.PutCustomPropertyOperation"/> under a given Name.</para>
            </summary>
            <param name="name">
            <para>The parent Service Fabric Name.</para>
            </param>
            <param name="operation">
            <para>The put operation parameters, including property name, value and custom type information.</para>
            </param>
            <returns>
            <para>The created or upgraded specified Service Fabric Property.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound"/> is returned when <paramref name="name"/> does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.WriteConflict"/> is returned when this write operation conflicts with another write operation.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the default timeout (1 minute) to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <paramref name="name"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ValueTooLarge"/> is returned when <see cref="P:System.Fabric.PutCustomPropertyOperation.PropertyValue"/> is larger than 1MB.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.PropertyManagementClient.PutCustomPropertyOperationAsync(System.Uri,System.Fabric.PutCustomPropertyOperation,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Creates or updates the specified Service Fabric Property described by <see cref="T:System.Fabric.PutCustomPropertyOperation"/> under a given Name.</para>
            </summary>
            <param name="name">
            <para>The parent Service Fabric Name.</para>
            </param>
            <param name="operation">
            <para>The put operation parameters, including property name, value and custom type information.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>.
            Maximum timeout is MaxOperationTimeout which is configurable in the Cluster Manifest.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing.
            It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The created or upgraded specified Service Fabric Property.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/>
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Caused by one of the following:</para>
            <para>E_INVALIDARG is returned when one or more arguments are not valid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Caused by one of the following:</para>
            <para>E_POINTER is returned when a null reference is passed to a method that does not accept it as a valid argument.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.NameNotFound"/> is returned when <paramref name="name"/> does not exist.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricTransientException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.WriteConflict"/> is returned when this write operation conflicts with another write operation.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>Caused by one of the following:</para>
            <para>E_ABORT is returned when operation was aborted.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.OperationTimedOut"/> is returned when the operation takes more than the default timeout (1 minute) to complete.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            <para>Caused by one of the following:</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidNameUri"/> is returned when <paramref name="name"/> is not a valid Service Fabric Name.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ValueTooLarge"/> is returned when <see cref="P:System.Fabric.PutCustomPropertyOperation.PropertyValue"/> is larger than 1MB.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.CommunicationError"/> is returned when a communication error caused the operation to fail.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidCredentialType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509FindType"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509StoreName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidX509Store"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidSubjectName"/>.</para>
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList"/>.</para>
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <para>Caused by one of the following:</para>
            <para>E_ACCESSDENIED is returned when the access check has failed for this operation.</para>
            </exception>
            <exception cref="T:System.Runtime.InteropServices.COMException">
            <para>This exception is thrown when an internal error has occurred.</para>
            </exception>
        </member>
        <member name="T:System.Fabric.FabricClient.QueryClient">
            <summary>
            <para>Represents the fabric client that can be used to issue queries.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetNodeListAsync">
            <summary>
            <para>Gets the list of nodes.</para>
            </summary>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> 
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetNodeListAsync(System.String)">
            <summary>
            <para>Gets the list of nodes.</para>
            </summary>
            <param name="nodeNameFilter">
            <para>The filter for the node name.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/>
            object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetNodeListAsync(System.String,System.String)">
            <summary>
            <para>
            Gets the details for all nodes in the cluster or the specified node.
            </para>
            </summary>
            <param name="nodeNameFilter">
            <para>The filter for the node name.</para>
            </param>
            <param name="continuationToken">
            <para>The continuation token obtained from a previous query.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation. It contains the list of nodes as <see cref="T:System.Fabric.Query.NodeList"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetNodeListAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the list of nodes.</para>
            </summary>
            <param name="nodeNameFilter">
            <para>The filter for the node name.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operations should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetNodeListAsync(System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>
            Gets the details for all nodes in the cluster or the specified node.
            </para>
            </summary>
            <param name="nodeNameFilter">
            <para>The filter for the node name.</para>
            </param>
            <param name="continuationToken">
            <para>The continuation token obtained from a previous query.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operation should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation. It contains the list of nodes as <see cref="T:System.Fabric.Query.NodeList"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetNodeListAsync(System.String,System.Fabric.Query.NodeStatusFilter,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the details for all nodes in the cluster or the specified node.
            </summary>
            <param name="nodeNameFilter">The filter for the node name.</param>
            <param name="nodeStatusFilter">The filter for the node status.</param>
            <param name="continuationToken">The continuation token obtained from a previous query.</param>
            <param name="timeout">Specifies the duration this operation has to complete before timing out.</param>
            <param name="cancellationToken">Propagates notification that operation should be canceled.</param>
            <returns>A task that represents the asynchronous operation. It contains the list of nodes as <see cref="T:System.Fabric.Query.NodeList"/>.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetApplicationTypeListAsync">
            <summary>
            <para>Gets the details for all application types provisioned in the system.</para>
            </summary>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetApplicationTypeListAsync(System.String)">
            <summary>
            <para>Gets the details for a particular application type provisioned in the system.</para>
            </summary>
            <param name="applicationTypeNameFilter">
            <para>The application type to get details for.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetApplicationTypeListAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets details for a particular application type provisioned in the system.</para>
            </summary>
            <param name="applicationTypeNameFilter">
            <para>The application type to get details for.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operations should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetServiceTypeListAsync(System.String,System.String)">
            <summary>
            <para>Gets the list of service type.</para>
            </summary>
            <param name="applicationTypeName">
            <para>The type name of the application.</para>
            </param>
            <param name="applicationTypeVersion">
            <para>The application type version.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetServiceTypeListAsync(System.String,System.String,System.String)">
            <summary>
            <para>Gets the list of service type.</para>
            </summary>
            <param name="applicationTypeName">
            <para>The type name of the application.</para>
            </param>
            <param name="applicationTypeVersion">
            <para>The application type version.</para>
            </param>
            <param name="serviceTypeNameFilter">
            <para>The filter for the service type name.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetServiceTypeListAsync(System.String,System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the list of service type.</para>
            </summary>
            <param name="applicationTypeName">
            <para>The type name of the application.</para>
            </param>
            <param name="applicationTypeVersion">
            <para>The application type version.</para>
            </param>
            <param name="serviceTypeNameFilter">
            <para>The filter for the service type name.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operations should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetServiceGroupMemberTypeListAsync(System.String,System.String)">
            <summary>
            <para>Get service group members types of service group(s).</para>
            </summary>
            <param name="applicationTypeName">
            <para>The application type name of the service group.</para>
            </param>
            <param name="applicationTypeVersion">
            <para>The application type version of the service group.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task`1"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetServiceGroupMemberTypeListAsync(System.String,System.String,System.String)">
            <summary>
            <para>Get service group members types of service group(s).</para>
            </summary>
            <param name="applicationTypeName">
            <para>The application type name of the service group.</para>
            </param>
            <param name="applicationTypeVersion">
            <para>The application type version of the service group.</para>
            </param>
            <param name="serviceGroupTypeNameFilter">
            <para>The service group type name filter.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task`1"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetServiceGroupMemberTypeListAsync(System.String,System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
              <para />
            </summary>
            <param name="applicationTypeName">
            <para>The application type name of the service group.</para>
            </param>
            <param name="applicationTypeVersion">
            <para>The application type version of the service group.</para>
            </param>
            <param name="serviceGroupTypeNameFilter">
            <para>The service group type name filter.</para>
            </param>
            <param name="timeout">
            <para>The timeout to the operation.</para>
            </param>
            <param name="cancellationToken">
            <para>Notifies the operation should be canceled.</para>
            </param>
            <returns>
            <para>Returns the list of service group member types.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetApplicationListAsync">
            <summary>
            <para>Gets the details for all applications created in the system.</para>
            </summary>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetApplicationListAsync(System.Uri)">
            <summary>
            <para>Gets the details for a specific application created in the system.</para>
            </summary>
            <param name="applicationNameFilter">
            <para>The application name to get details for.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetApplicationListAsync(System.Uri,System.String)">
            <summary>
            <para>
            Gets the details for all or a specific application created in the system.
            </para>
            </summary>
            <param name="applicationNameFilter">
            <para>The application name to get details for.</para>
            </param>
            <param name="continuationToken">
            <para>The continuation token obtained from a previous query.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation. It contains the list of applications as <see cref="T:System.Fabric.Query.ApplicationList"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetApplicationListAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the details for a specific application created in the system.</para>
            </summary>
            <param name="applicationNameFilter">
            <para>The application name to get details for.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operations should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetApplicationListAsync(System.Uri,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>
            Gets the details for all or a specific application created in the system.
            </para>
            </summary>
            <param name="applicationNameFilter">
            <para>The application name to get details for.</para>
            </param>
            <param name="continuationToken">
            <para>The continuation token obtained from a previous query.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operation should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation. It contains the list of applications as <see cref="T:System.Fabric.Query.ApplicationList"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetServiceListAsync(System.Uri)">
            <summary>
            <para>Gets the information about all services belonging to the application specified by the application name URI.</para>
            </summary>
            <param name="applicationName">
            <para>The name of the application.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetServiceListAsync(System.Uri,System.Uri)">
            <summary>
            <para>Gets the list of services.</para>
            </summary>
            <param name="applicationName">
            <para>The name of the application.</para>
            </param>
            <param name="serviceNameFilter">
            <para>The filter for the service name.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetServiceListAsync(System.Uri,System.Uri,System.String)">
            <summary>
            <para>
            Gets the details for all application services or just the specified service.
            </para>
            </summary>
            <param name="applicationName">
            <para>The name of the application.</para>
            </param>
            <param name="serviceNameFilter">
            <para>The filter for the service name.</para>
            </param>
            <param name="continuationToken">
            <para>The continuation token obtained from a previous query.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation. It contains the list of services as <see cref="T:System.Fabric.Query.ServiceList"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetServiceListAsync(System.Uri,System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the information about the service belonging to the application name given by the ApplicationName and the Service Name given by the ServiceNameFilter.</para>
            </summary>
            <param name="applicationName">
            <para>The name of the application.</para>
            </param>
            <param name="serviceNameFilter">
            <para>The filter for the service name.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operations should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetServiceListAsync(System.Uri,System.Uri,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>
            Gets the details for all application services or just the specified service.
            </para>
            </summary>
            <param name="applicationName">
            <para>The name of the application.</para>
            </param>
            <param name="serviceNameFilter">
            <para>The filter for the service name.</para>
            </param>
            <param name="continuationToken">
            <para>The continuation token obtained from a previous query.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operation should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation. It contains the list of services as <see cref="T:System.Fabric.Query.ServiceList"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetServiceGroupMemberListAsync(System.Uri)">
            <summary>
            <para>Get service group members of service groups.</para>
            </summary>
            <param name="applicationName">
            <para>The application name of the service group,</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task`1"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetServiceGroupMemberListAsync(System.Uri,System.Uri)">
            <summary>
            <para>Get service group members of service groups.</para>
            </summary>
            <param name="applicationName">
            <para>The application name of the service group,</para>
            </param>
            <param name="serviceNameFilter">
            <para>The service name of the service group.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task`1"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetServiceGroupMemberListAsync(System.Uri,System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Get service group members of service groups.</para>
            </summary>
            <param name="applicationName">
            <para>The application name of the service group,</para>
            </param>
            <param name="serviceNameFilter">
            <para>The service name of the service group.</para>
            </param>
            <param name="timeout">
            <para>The timeout to the operation.</para>
            </param>
            <param name="cancellationToken">
            <para>Notifies the operation should be canceled.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task`1"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetPartitionListAsync(System.Uri)">
            <summary>
            <para>Gets the list of partition.</para>
            </summary>
            <param name="serviceName">
            <para>The name of the service.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetPartitionListAsync(System.Uri,System.String)">
            <summary>
            <para>
            Gets the details for all service partitions.
            </para>
            </summary>
            <param name="serviceName">
            <para>The name of the service.</para>
            </param>
            <param name="continuationToken">
            <para>The continuation token obtained from a previous query.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation. It contains the list of service partition as <see cref="T:System.Fabric.Query.ServicePartitionList"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetPartitionListAsync(System.Uri,System.Nullable{System.Guid})">
            <summary>
            <para>Gets the list of partition.</para>
            </summary>
            <param name="serviceName">
            <para>The name of the service.</para>
            </param>
            <param name="partitionIdFilter">
            <para>The filter for the partition identifier.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetPartitionListAsync(System.Uri,System.Nullable{System.Guid},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the list of partition.</para>
            </summary>
            <param name="serviceName">
            <para>The name of the service.</para>
            </param>
            <param name="partitionIdFilter">
            <para>The filter for the partition identifier.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operations should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetPartitionListAsync(System.Uri,System.Nullable{System.Guid},System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>
            Gets the details for all service partition or just the specified partition.
            </para>
            </summary>
            <param name="serviceName">
            <para>The name of the service.</para>
            </param>
            <param name="partitionIdFilter">
            <para>The filter for the partition identifier.</para>
            </param>
            <param name="continuationToken">
            <para>The continuation token obtained from a previous query.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operation should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation. It contains the list of service partitions as <see cref="T:System.Fabric.Query.ServicePartitionList"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetPartitionLoadInformationAsync(System.Guid)">
            <summary>
            <para>Gets the information about the partition load.</para>
            </summary>
            <param name="partitionId">
            <para>The partition identifier.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetPartitionLoadInformationAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the information about the partition load.</para>
            </summary>
            <param name="partitionId">
            <para>The partition identifier.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operations should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetReplicaListAsync(System.Guid)">
            <summary>
            <para>Gets the list of replica.</para>
            </summary>
            <param name="partitionId">
            <para>The partition identifier.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetReplicaListAsync(System.Guid,System.String)">
            <summary>
            <para>
            Gets the details for all partition replicas.
            </para>
            </summary>
            <param name="partitionId">
            <para>The partition identifier.</para>
            </param>
            <param name="continuationToken">
            <para>The continuation token obtained from a previous query.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation. It contains the list of replicas as <see cref="T:System.Fabric.Query.ServiceReplicaList"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetReplicaListAsync(System.Guid,System.Int64)">
            <summary>
            <para>Gets the list of replica.</para>
            </summary>
            <param name="partitionId">
            <para>The partition identifier.</para>
            </param>
            <param name="replicaIdOrInstanceIdFilter">
            <para>The filter for the replica identifier or instance identifier.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetReplicaListAsync(System.Guid,System.Int64,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the list of replica.</para>
            </summary>
            <param name="partitionId">
            <para>The partition identifier.</para>
            </param>
            <param name="replicaIdOrInstanceIdFilter">
            <para>The filter for the replica identifier or instance identifier.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operations should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetReplicaListAsync(System.Guid,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>
            Gets the details for all partition replicas.
            </para>
            </summary>
            <param name="partitionId">
            <para>The partition identifier.</para>
            </param>
            <param name="continuationToken">
            <para>The continuation token obtained from a previous query.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operation should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation. It contains the list of replicas as <see cref="T:System.Fabric.Query.ServiceReplicaList"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetReplicaListAsync(System.Guid,System.Int64,System.Fabric.Query.ServiceReplicaStatusFilter,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the details for all partition replicas that match the replica or instance filter and the status filter.
            </summary>
            <param name="partitionId">The partition identifier.</param>
            <param name="replicaIdOrInstanceIdFilter">The replica or instance id.</param>
            <param name="replicaStatusFilter">The replica status filter.</param>
            <param name="timeout">Specifies the duration this operation has to complete before timing out.</param>
            <param name="cancellationToken">Propagates notification that operation should be canceled.</param>
            <returns>A task that represents the asynchronous operation. It contains the list of replicas as <see cref="T:System.Fabric.Query.ServiceReplicaList"/>.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetReplicaListAsync(System.Guid,System.Int64,System.Fabric.Query.ServiceReplicaStatusFilter,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the details for all partition replicas or the specified replica.
            </summary>
            <param name="partitionId">The partition identifier.</param>
            <param name="replicaIdOrInstanceIdFilter">The filter for the replica identifier or instance identifier.</param>
            <param name="replicaStatusFilter">The filter used for matching the replica status for replicas that should be returned by query.</param>
            <param name="continuationToken">The continuation token obtained from a previous query.</param>
            <param name="timeout">Specifies the duration this operation has to complete before timing out.</param>
            <param name="cancellationToken">Propagates notification that operation should be canceled.</param>
            <returns>A task that represents the asynchronous operation. It contains the list of replicas as <see cref="T:System.Fabric.Query.ServiceReplicaList"/>.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedApplicationListAsync(System.String)">
            <summary>
            <para>Gets the deployed application list.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedApplicationListAsync(System.String,System.Uri)">
            <summary>
            <para>Gets the deployed application list.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node.</para>
            </param>
            <param name="applicationNameFilter">
            <para>The filter used in the application name.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedApplicationListAsync(System.String,System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the deployed application list.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node.</para>
            </param>
            <param name="applicationNameFilter">
            <para>The filter used in the application name.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operations should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedServicePackageListAsync(System.String,System.Uri)">
            <summary>
            <para>Gets the list of deployed service package.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node.</para>
            </param>
            <param name="applicationName">
            <para>The name of the application.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedServicePackageListAsync(System.String,System.Uri,System.String)">
            <summary>
            <para>Gets the list of deployed service package.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node.</para>
            </param>
            <param name="applicationName">
            <para>The name of the application.</para>
            </param>
            <param name="serviceManifestNameFilter">
            <para>The filter for the service manifest.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedServicePackageListAsync(System.String,System.Uri,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the list of deployed service package.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node.</para>
            </param>
            <param name="applicationName">
            <para>The name of the application.</para>
            </param>
            <param name="serviceManifestNameFilter">
            <para>The filter for the service manifest.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operations should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedServiceTypeListAsync(System.String,System.Uri)">
            <summary>
            <para>Gets the list of the deployed service type.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node.</para>
            </param>
            <param name="applicationName">
            <para>The name of the application.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedServiceTypeListAsync(System.String,System.Uri,System.String,System.String)">
            <summary>
            <para>Gets the list of the deployed service type.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node.</para>
            </param>
            <param name="applicationName">
            <para>The name of the application.</para>
            </param>
            <param name="serviceManifestNameFilter">
            <para>The filter for the service manifest.</para>
            </param>
            <param name="serviceTypeNameFilter">
            <para>The filter for the service type name.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedServiceTypeListAsync(System.String,System.Uri,System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the list of the deployed service type.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node.</para>
            </param>
            <param name="applicationName">
            <para>The name of the application.</para>
            </param>
            <param name="serviceManifestNameFilter">
            <para>The filter for the service manifest.</para>
            </param>
            <param name="serviceTypeNameFilter">
            <para>The filter for the service type name.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operations should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedCodePackageListAsync(System.String,System.Uri)">
            <summary>
            <para>Gets the list of the deployed code package.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node.</para>
            </param>
            <param name="applicationName">
            <para>The name of the application.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedCodePackageListAsync(System.String,System.Uri,System.String,System.String)">
            <summary>
            <para>Gets the list of the deployed code package.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node.</para>
            </param>
            <param name="applicationName">
            <para>The name of the application.</para>
            </param>
            <param name="serviceManifestNameFilter">
            <para>The filter for the service manifest.</para>
            </param>
            <param name="codePackageNameFilter">
            <para>The filter for the code package.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedCodePackageListAsync(System.String,System.Uri,System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the list of the deployed code package.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node.</para>
            </param>
            <param name="applicationName">
            <para>The name of the application.</para>
            </param>
            <param name="serviceManifestNameFilter">
            <para>The filter for the service manifest.</para>
            </param>
            <param name="codePackageNameFilter">
            <para>The filter for the code package.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operations should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedReplicaListAsync(System.String,System.Uri)">
            <summary>
            <para>Gets the deployed replica list.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node.</para>
            </param>
            <param name="applicationName">
            <para>The name of the application.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedReplicaListAsync(System.String,System.Uri,System.Nullable{System.Guid})">
            <summary>
            <para>Gets the deployed replica list.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node.</para>
            </param>
            <param name="applicationName">
            <para>The name of the application.</para>
            </param>
            <param name="partitionIdFilter">
            <para>The filter for the partition identifier.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedReplicaListAsync(System.String,System.Uri,System.String,System.Nullable{System.Guid})">
            <summary>
            <para>Gets the deployed replica list.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node.</para>
            </param>
            <param name="applicationName">
            <para>The name of the application.</para>
            </param>
            <param name="serviceManifestNameFilter">
            <para>The filter for the service manifest.</para>
            </param>
            <param name="partitionIdFilter">
            <para>The filter for the partition identifier.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedReplicaListAsync(System.String,System.Uri,System.String,System.Nullable{System.Guid},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the deployed replica list.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node.</para>
            </param>
            <param name="applicationName">
            <para>The name of the application.</para>
            </param>
            <param name="serviceManifestNameFilter">
            <para>The filter for the service manifest.</para>
            </param>
            <param name="partitionIdFilter">
            <para>The filter for the partition identifier.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operations should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedReplicaDetailAsync(System.String,System.Guid,System.Int64)">
            <summary>
            <para>Returns details of a replica from within the service host process</para>
            </summary>
            <param name="nodeName">
            <para>The node name from which the results are desired</para>
            </param>
            <param name="partitionId">
            <para>The partition id for which the results are desired</para>
            </param>
            <param name="replicaId">
            <para>The identifier for the replica or the instance for which the results are desired</para>
            </param>
            <returns>
            <para>A task that represents the running async operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetDeployedReplicaDetailAsync(System.String,System.Guid,System.Int64,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Returns details of a replica from within the service host process</para>
            </summary>
            <param name="nodeName">
            <para>The node name from which the results are desired</para>
            </param>
            <param name="partitionId">
            <para>The partition id for which the results are desired</para>
            </param>
            <param name="replicaId">
            <para>The identifier for the replica or the instance for which the results are desired</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operations should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the running async operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetClusterLoadInformationAsync">
            <summary>
            <para>Gets the cluster load information.</para>
            </summary>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetClusterLoadInformationAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the cluster load information.</para>
            </summary>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operations should be canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetProvisionedFabricCodeVersionListAsync">
            <summary>
            <para>Gets details for all cluster code versions provisioned in the system.</para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task`1"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetProvisionedFabricCodeVersionListAsync(System.String)">
            <summary>
            <para>Gets details for the specific cluster code version provisioned in the system.</para>
            </summary>
            <param name="codeVersionFilter">
            <para>Code version to get details for.</para>
            </param>
            <returns>
            <para>Returns the list of provisioned code versions.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetProvisionedFabricCodeVersionListAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets details for the specific cluster code version provisioned in the system.</para>
            </summary>
            <param name="codeVersionFilter">
            <para>Code version to get details for.</para>
            </param>
            <param name="timeout">
            <para>The maximum time allowed for the operation to complete before TimeoutException is thrown.</para>
            </param>
            <param name="cancellationToken">
            <para>Reserved for future use.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task`1"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetProvisionedFabricConfigVersionListAsync">
            <summary>
            <para>Gets details for all cluster config versions provisioned in the system.</para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task`1"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetProvisionedFabricConfigVersionListAsync(System.String)">
            <summary>
            <para>Gets details for a specific cluster config version provisioned in the system.</para>
            </summary>
            <param name="configVersionFilter">
            <para>The config version to get details for.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task`1"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetProvisionedFabricConfigVersionListAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets details for a specific cluster config version provisioned in the system.</para>
            </summary>
            <param name="configVersionFilter">
            <para>The config version to get details for.</para>
            </param>
            <param name="timeout">
            <para>The maximum time allowed for the operation to complete before TimeoutException is thrown.</para>
            </param>
            <param name="cancellationToken">
            <para>Reserved for future use.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task`1"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetNodeLoadInformationAsync(System.String)">
            <summary>
            <para>Get metrics and load information on the node.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task`1"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetNodeLoadInformationAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Get metrics and load information on the node.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node.</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operations should be canceled</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task`1"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetReplicaLoadInformationAsync(System.Guid,System.Int64)">
            <summary>
            <para>Get a list of metric and their load on a replica.</para>
            </summary>
            <param name="partitionId">
            <para>The partition Id.</para>
            </param>
            <param name="replicaIdOrInstanceId">
            <para>The replicaId (stateful service) or instanceId (stateless service).</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task`1"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.QueryClient.GetReplicaLoadInformationAsync(System.Guid,System.Int64,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Get a list of metric and their load on a replica.</para>
            </summary>
            <param name="partitionId">
            <para>The partition Id.</para>
            </param>
            <param name="replicaIdOrInstanceId">
            <para>The replicaId (stateful service) or instanceId (stateless service).</para>
            </param>
            <param name="timeout">
            <para>Specifies the duration this operation has to complete before timing out.</para>
            </param>
            <param name="cancellationToken">
            <para>Propagates notification that operations should be canceled.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task`1"/>.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.FabricClient.RepairManagementClient">
            <summary>
            <para>Provides methods for managing repair tasks.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricClient.RepairManagementClient.CreateRepairTaskAsync(System.Fabric.Repair.RepairTask)">
            <summary>
            <para>Creates a new repair task.</para>
            </summary>
            <param name = "repairTask" >
            <para> The description of the repair task to be created.</para>
            </param>
            <returns>
            <para>The version number of the newly-created repair task.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.RepairManagementClient.CreateRepairTaskAsync(System.Fabric.Repair.RepairTask,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Creates a new repair task.</para>
            </summary>
            <param name = "repairTask" >
            <para> The description of the repair task to be created.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a<see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name = "cancellationToken" >
            <para> The optional cancellation token that the operation is observing.It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>The version number of the newly-created repair task.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.RepairManagementClient.CancelRepairTaskAsync(System.String,System.Int64,System.Boolean)">
            <summary>
            <para>Requests the cancellation of the given repair task.</para>
            </summary>
            <param name="repairTaskId">
            <para>The ID of the repair task to be cancelled.</para>
            </param>
            <param name="version">
            <para>The current version number of the repair task. If non-zero, then the request will only succeed if this value matches the actual current value of the repair task. If zero, then no version check is performed.</para>
            </param>
            <param name="requestAbort">
            <para>
                <languageKeyword>True</languageKeyword> if the repair should be stopped as soon as possible even if it has already started executing. <languageKeyword>False</languageKeyword> if the repair should be cancelled only if execution has not yet started.</para>
            </param>
            <returns>
            <para>The new version number of the repair task.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.RepairManagementClient.CancelRepairTaskAsync(System.String,System.Int64,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Requests the cancellation of the given repair task.</para>
            </summary>
            <param name="repairTaskId">
            <para>The ID of the repair task to be cancelled.</para>
            </param>
            <param name="version">
            <para>The current version number of the repair task. If non-zero, then the request will only succeed if this value matches the actual current value of the repair task. If zero, then no version check is performed.</para>
            </param>
            <param name="requestAbort">
            <para>
                <languageKeyword>True</languageKeyword> if the repair should be stopped as soon as possible even if it has already started executing. <languageKeyword>False</languageKeyword> if the repair should be cancelled only if execution has not yet started.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>The new version number of the repair task.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.RepairManagementClient.ForceApproveRepairTaskAsync(System.String,System.Int64)">
            <summary>
            <para>Forces the approval of the given repair task.</para>
            </summary>
            <param name="repairTaskId">
            <para>The ID of the repair task to be approved.</para>
            </param>
            <param name="version">
            <para>The current version number of the repair task. If non-zero, then the request will only succeed if this value matches the actual current value of the repair task. If zero, then no version check is performed.</para>
            </param>
            <returns>
            <para>The new version number of the repair task.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.RepairManagementClient.ForceApproveRepairTaskAsync(System.String,System.Int64,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Forces the approval of the given repair task.</para>
            </summary>
            <param name="repairTaskId">
            <para>The ID of the repair task to be approved.</para>
            </param>
            <param name="version">
            <para>The current version number of the repair task. If non-zero, then the request will only succeed if this value matches the actual current value of the repair task. If zero, then no version check is performed.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>The new version number of the repair task.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.RepairManagementClient.DeleteRepairTaskAsync(System.String,System.Int64)">
            <summary>
            <para>Deletes the given repair task.</para>
            </summary>
            <param name="repairTaskId">
            <para>The ID of the completed repair task to be deleted.</para>
            </param>
            <param name="version">
            <para>The current version number of the repair task. If non-zero, then the request will only succeed if this value matches the actual current value of the repair task. If zero, then no version check is performed.</para>
            </param>
            <returns>
            <para>A task representing the asynchronous operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.RepairManagementClient.DeleteRepairTaskAsync(System.String,System.Int64,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Deletes the given repair task.</para>
            </summary>
            <param name="repairTaskId">
            <para>The ID of the completed repair task to be deleted.</para>
            </param>
            <param name="version">
            <para>The current version number of the repair task. If non-zero, then the request will only succeed if this value matches the actual current value of the repair task. If zero, then no version check is performed.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>A task representing the asynchronous operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.RepairManagementClient.UpdateRepairExecutionStateAsync(System.Fabric.Repair.RepairTask)">
            <summary>
            Updates a repair task.
            </summary>
            <param name="repairTask">The modified repair task.</param>
            <returns><para>The new version number of the repair task.</para></returns>
        </member>
        <member name="M:System.Fabric.FabricClient.RepairManagementClient.UpdateRepairExecutionStateAsync(System.Fabric.Repair.RepairTask,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Updates a repair task.
            </summary>
            <param name="repairTask">The modified repair task.</param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns><para>The new version number of the repair task.</para></returns>
        </member>
        <member name="M:System.Fabric.FabricClient.RepairManagementClient.GetRepairTaskListAsync">
            <summary>
            <para>Gets a list of all repair tasks.</para>
            </summary>
            <returns>
            <para>The list of all repair tasks.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.RepairManagementClient.GetRepairTaskListAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets a list of all repair tasks.</para>
            </summary>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>The list of all repair tasks.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.RepairManagementClient.GetRepairTaskListAsync(System.String,System.Fabric.Repair.RepairTaskStateFilter,System.String)">
            <summary>
            <para>Gets a list of repair tasks matching all of the given filters.</para>
            </summary>
            <param name="taskIdFilter">
            <para>The repair task ID prefix to be matched.  If null, no filter is applied to the task ID.</para>
            </param>
            <param name="stateFilter">
            <para>A bitwise combination of state filter values that specify which task states should be included in the list.</para>
            </param>
            <param name="executorFilter">
            <para>The name of the repair executor whose claimed tasks should be included in the list. If null, no filter is applied to the executor name.</para>
            </param>
            <returns>
            <para>The list of repair tasks matching all of the given filters.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.RepairManagementClient.GetRepairTaskListAsync(System.String,System.Fabric.Repair.RepairTaskStateFilter,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets a list of repair tasks matching all of the given filters.</para>
            </summary>
            <param name="taskIdFilter">
            <para>The repair task ID prefix to be matched.  If null, no filter is applied to the task ID.</para>
            </param>
            <param name="stateFilter">
            <para>A bitwise combination of state filter values that specify which task states should be included in the list.</para>
            </param>
            <param name="executorFilter">
            <para>The name of the repair executor whose claimed tasks should be included in the list. If null, no filter is applied to the executor name.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>The list of repair tasks matching all of the given filters.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.FabricClient.ServiceGroupManagementClient">
            <summary>
            <para>Allows client side creation, deletion, and inspection of service groups inside the cluster, 
            just like the <see cref="T:System.Fabric.FabricClient.ServiceManagementClient"/> for regular services.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupAsync(System.Fabric.Description.ServiceGroupDescription)">
            <summary>
            Asynchronously creates a service group from the given <see cref="T:System.Fabric.Description.ServiceGroupDescription"/>.
            </summary>
            <param name="description">The <see cref="T:System.Fabric.Description.ServiceGroupDescription"/> which describes the group and its members.</param>
            <returns>The task representing the asynchronous operation.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupAsync(System.Fabric.Description.ServiceGroupDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates a service group from the given <see cref="T:System.Fabric.Description.ServiceGroupDescription"/> with the provided timeout 
            and <see cref="T:System.Threading.CancellationToken"/>.
            </summary>
            <param name="description">The <see cref="T:System.Fabric.Description.ServiceGroupDescription"/> which describes the group and its members.</param>
            <param name="timeout">Timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning 
            a Timeout Exception.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object that the operation is observing.  It can be 
            used to send a notification that the operation should be canceled.  Note that cancellation is advisory and that the operation may 
            still be completed even if it is canceled.</param>
            <returns>The task representing the asynchronous operation.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupFromTemplateAsync(System.Uri,System.Uri,System.String,System.Byte[])">
            <summary>
            <para>Creates a Service Group from a Service Group Template that is pre-defined in the current Application Manifest.</para>
            </summary>
            <param name="applicationName">
            <para>Application name for the Service Group</para>
            </param>
            <param name="serviceName">
            <para>Service name for the Service Group</para>
            </param>
            <param name="serviceTypeName">
            <para>Service Type Name for the Service Group</para>
            </param>
            <param name="initializationData">
            <para>Initialization data to pass into the Service Group instance</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupFromTemplateAsync(System.Uri,System.Uri,System.String,System.Byte[],System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Creates a service group from a Service Group Template that is pre-defined in the current Application Manifest.</para>
            </summary>
            <param name="applicationName">
            <para>Application name for the Service Group</para>
            </param>
            <param name="serviceName">
            <para>Service name for the Service Group</para>
            </param>
            <param name="serviceTypeName">
            <para>Service Type Name for the Service Group</para>
            </param>
            <param name="initializationData">
            <para>Initialization data to pass into the Service Group instance</para>
            </param>
            <param name="timeout">
            <para>Maximum allowed time for the operation to complete before TimeoutException is thrown.</para>
            </param>
            <param name="cancellationToken">
            <para>Reserved for future use.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceGroupManagementClient.UpdateServiceGroupAsync(System.Uri,System.Fabric.Description.ServiceGroupUpdateDescription)">
            <summary>
            Asynchronously updates a service group with the specified description.
            </summary>
            <param name="name">The URI name of the service group being updated.</param>
            <param name="updateDescription">The <see cref="T:System.Fabric.Description.ServiceGroupUpdateDescription"/> that specifies the updated configuration for the service group.</param>
            <returns>The task representing the asynchronous operation.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceGroupManagementClient.UpdateServiceGroupAsync(System.Uri,System.Fabric.Description.ServiceGroupUpdateDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates a service group with specified description.
            </summary>
            <param name="name">The URI name of the service being updated.</param>
            <param name="updateDescription">The <see cref="T:System.Fabric.Description.ServiceGroupUpdateDescription"/> that specifies the updated configuration for the service.</param>
            <param name="timeout">The maximum amount of time the system will allow this API to take before returning <see cref="T:System.TimeoutException"/>.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</param>
            <returns>The task representing the asynchronous operation.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceGroupManagementClient.DeleteServiceGroupAsync(System.Uri)">
            <summary>
            <para>Asynchronously deletes the specified service group.</para>
            </summary>
            <param name="serviceGroupName">
            <para>The name of the service group to be deleted.</para>
            </param>
            <returns>
            <para>The task representing the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceGroupManagementClient.DeleteServiceGroupAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously deletes the specified service group with the provided timeout and <see cref="T:System.Threading.CancellationToken"/>.</para>
            </summary>
            <param name="serviceGroupName">
            <para>The name of the service group to be deleted.</para>
            </param>
            <param name="timeout">
            <para>Timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning a Timeout Exception.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> object that the operation is observing.  It can be used to send a notification that the operation should be canceled.  Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>The task representing the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceGroupManagementClient.GetServiceGroupDescriptionAsync(System.Uri)">
            <summary>
            <para>Asynchronously fetches the <see cref="T:System.Fabric.Description.ServiceGroupDescription"/> for the specified service group, if it exists.</para>
            </summary>
            <param name="serviceGroupName">
            <para>The name of the service group whose <see cref="T:System.Fabric.Description.ServiceGroupDescription"/> should be fetched.</para>
            </param>
            <returns>
            <para>The task representing the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceGroupManagementClient.GetServiceGroupDescriptionAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously fetches the <see cref="T:System.Fabric.Description.ServiceGroupDescription"/> for the specified service group, if it exists, with the provided timeout and <see cref="T:System.Threading.CancellationToken"/>.</para>
            </summary>
            <param name="serviceGroupName">
            <para>The name of the service group whose <see cref="T:System.Fabric.Description.ServiceGroupDescription"/> should be fetched.</para>
            </param>
            <param name="timeout">
            <para>Timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning a Timeout Exception.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing.  It can be used to send a notification that the operation should be canceled.  Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</para>
            </param>
            <returns>
            <para>The task representing the asynchronous operation.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="T:System.Fabric.FabricClient.ServiceManagementClient">
            <summary>
            <para>Represents the enabling of the services to be managed.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.CreateServiceAsync(System.Fabric.Description.ServiceDescription)">
            <summary>
            <para>Instantiates a service with specified description.</para>
            </summary>
            <param name="description">
            <para>The configuration for the service.</para>
            </param>
            <returns>
            <para>The instantiated service.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <remarks>
            <para>Service Fabric name will be implicitly created if it does not already exist.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.CreateServiceAsync(System.Fabric.Description.ServiceDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Instantiates a service with specified description.</para>
            </summary>
            <param name="serviceDescription">
            <para>The configuration for the service.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException" />.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken" />that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The instantiated service.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient" /> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient" /> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient" /> object.</para>
            </exception>
            <remarks>
            <para>Service Fabric name will be implicitly created if it does not already exist.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.CreateServiceFromTemplateAsync(System.Uri,System.Uri,System.String,System.Byte[])">
            <summary>
            <para>Instantiates a service from the template specified in the Application Manifest.</para>
            </summary>
            <param name="applicationName">
            <para>The Service Fabric Name of the application under which the service will be created.</para>
            </param>
            <param name="serviceName">
            <para>The Service Fabric Name of the service.</para>
            </param>
            <param name="serviceTypeName">
            <para>The name of the service type. This has to be same as the ServiceTypeName specified in the Service Manifest.</para>
            </param>
            <param name="initializationData">
            <para>The initialization data to be passed in to the new service.</para>
            </param>
            <returns>
            <para>The instantiated service.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTemplateNotFound"/>: The service template does not exist</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
            <remarks>
            <para>Service Fabric name will be implicitly created if it does not already exist.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.CreateServiceFromTemplateAsync(System.Uri,System.Uri,System.String,System.Byte[],System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Instantiates a service from the template specified in the Application Manifest.</para>
            </summary>
            <param name="applicationName">
            <para>The Service Fabric Name of the application under which the service will be created.</para>
            </param>
            <param name="serviceName">
            <para>The Service Fabric Name of the service.</para>
            </param>
            <param name="serviceTypeName">
            <para>The name of the service type. This has to be same as the ServiceTypeName specified in the Service Manifest.</para>
            </param>
            <param name="initializationData">
            <para>The initialization data to be passed in to the new service.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The instantiated service.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>
                <see cref="F:System.Fabric.FabricErrorCode.ServiceTemplateNotFound"/>: The service template does not exist.</para>
            </exception>
            <exception cref="T:System.TimeoutException">
            <para>The request timed out but may have already been accepted for processing by the system.</para>
            </exception>
            <exception cref="T:System.OperationCanceledException">
            <para>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</para>
            </exception>
            <remarks>
            <para>Service Fabric name will be implicitly created if it does not already exist.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.DeleteServiceAsync(System.Uri)">
            <summary>
            <para>Deletes the specified service instance.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service.</para>
            </param>
            <returns>
            <para>The deleted service instance.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>Service Fabric name will be implicitly and recursively deleted if the application is Service Fabric managed.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.DeleteServiceAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Deletes the specified service instance.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The deleted service instance.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>Service Fabric name will be implicitly and recursively deleted if the application is Service Fabric managed.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.GetServiceDescriptionAsync(System.Uri)">
            <summary>
            <para>Gets the Service Description for the specified service instance.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service.</para>
            </param>
            <returns>
            <para>The Service Description for the specified service instance.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>
                <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.GetServiceDescriptionAsync(System.Uri)"/> is the most efficient way of determining whether a name is associated with a service.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.GetServiceDescriptionAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the Service Description for the specified service instance.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service. </para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The Service Description for the specified service instance.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>
                <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.GetServiceDescriptionAsync(System.Uri)"/> is the most efficient way of determining whether a name is associated with a service.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)">
            <summary>
            <para>Queries the system for the set of endpoints the specified service partition is listening to.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service instance.</para>
            </param>
            <returns>
            <para>The set of endpoints the specified service partition is listening to.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>This is a complaint based resolution API.</para>
            <para>The <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)"/> will return a <see cref="T:System.Fabric.ResolvedServicePartition"/> for the specified service partition. When this overload is used, the system will always return the closest <see cref="T:System.Fabric.ResolvedServicePartition"/> for the service partition. Timeout for the operation will be set to the Naming “MaxOperationTimeout” parameter specified in the Cluster Manifest.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.TimeSpan)">
            <summary>
            <para>Queries the system for the set of endpoints the specified service partition is listening to.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service instance.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <returns>
            <para>The set of endpoints the specified service partition is listening to.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>This is a complaint based resolution API.</para>
            <para>This will return a <see cref="T:System.Fabric.ResolvedServicePartition"/> for the specified service partition. When this overload is used, the system will always return the closest <see cref="T:System.Fabric.ResolvedServicePartition"/> for the service partition.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Queries the system for the set of endpoints the specified service partition is listening to.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service instance.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The set of endpoints the specified service partition is listening to.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>This is a complaint based resolution API.</para>
            <para>This will return a <see cref="T:System.Fabric.ResolvedServicePartition"/> for the specified service partition. When this overload is used, the system will always return the closest <see cref="T:System.Fabric.ResolvedServicePartition"/> for the service partition.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Fabric.ResolvedServicePartition)">
            <summary>
            <para>Queries the system for the set of endpoints the specified service partition is listening to.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service instance.</para>
            </param>
            <param name="previousResult">
            <para>The Previous <see cref="T:System.Fabric.ResolvedServicePartition"/> for the service partition that the user believes is stale.</para>
            </param>
            <returns>
            <para>The set of endpoints the specified service partition is listening to.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>A complaint based resolution API.</para>
            <para>This method will return a <see cref="T:System.Fabric.ResolvedServicePartition"/> for the specified service partition. When this overload is used, the system will return a more up-to-date <see cref="T:System.Fabric.ResolvedServicePartition"/> than the “previousResult” argument if it is available. Timeout for the operation will be set to the Naming “MaxOperationTimeout” parameter specified in the Cluster Manifest.</para>
            <para>PreviousResult argument enables the user to say ”This is the previous list of endpoints for this Service partition. I have tried the endpoints and I believe they are stale. Return me a more up to date version of this set.” In this case, the system will try to return a more up-to-date <see cref="T:System.Fabric.ResolvedServicePartition"/> in the most efficient way possible. If no newer version can be found, a <see cref="T:System.Fabric.ResolvedServicePartition"/> with the same version will be returned.ResolveServicePartition can be called without the previousResult argument or previousResult argument set to null. As no prerequisite is specified, the system will return the closest copy of the <see cref="T:System.Fabric.ResolvedServicePartition"/> for the service partition.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Fabric.ResolvedServicePartition,System.TimeSpan)">
            <summary>
            <para>Queries the system for the set of endpoints the specified service partition is listening to.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service instance.</para>
            </param>
            <param name="previousResult">
            <para>The Previous <see cref="T:System.Fabric.ResolvedServicePartition"/> for the service partition that the user believes is stale.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <returns>
            <para>The set of endpoints the specified service partition is listening to.</para>
            </returns>
            <remarks>
            <para>This is a complaint based resolution API.</para>
            <para>This method will return a <see cref="T:System.Fabric.ResolvedServicePartition"/> for the specified service partition. When this overload is used, the system will return a more up-to-date <see cref="T:System.Fabric.ResolvedServicePartition"/> than the “previousResult” argument if it is available.</para>
            <para>PreviousResult argument enables the user to say ”This is the previous list of endpoints for this Service partition. I have tried the endpoints and I believe they are stale. Return me a more up to date version of this set.” In this case, the system will try to return a more up-to-date <see cref="T:System.Fabric.ResolvedServicePartition"/> in the most efficient way possible. If no newer version can be found, a <see cref="T:System.Fabric.ResolvedServicePartition"/> with the same version will be returned.ResolveServicePartition can be called without the previousResult argument or previousResult argument set to null. As no prerequisite is specified, the system will return the closest copy of the <see cref="T:System.Fabric.ResolvedServicePartition"/> for the service partition.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Fabric.ResolvedServicePartition,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Queries the system for the set of endpoints the specified service partition is listening to.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service instance.</para>
            </param>
            <param name="previousResult">
            <para>Previous <see cref="T:System.Fabric.ResolvedServicePartition"/> for the service partition that the user believes is stale.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/>that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The set of endpoints the specified service partition is listening to.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>This is a complaint based resolution API.</para>
            <para>This method will return a <see cref="T:System.Fabric.ResolvedServicePartition"/> for the specified service partition. When this overload is used, the system will return a more up-to-date <see cref="T:System.Fabric.ResolvedServicePartition"/> than the “previousResult” argument if it is available.</para>
            <para>
                <paramref name="previousResult"/> argument enables the user to say ”This is the previous list of endpoints for this Service partition. I have tried the endpoints and I believe they are stale. Return me a more up to date version of this set.” In this case, the system will try to return a more up-to-date <see cref="T:System.Fabric.ResolvedServicePartition"/> in the most efficient way possible. If no newer version can be found, a <see cref="T:System.Fabric.ResolvedServicePartition"/> with the same version will be returned.ResolveServicePartition can be called without the <paramref name="previousResult"/> argument or <paramref name="previousResult"/> argument set to null. As no prerequisite is specified, the system will return the closest copy of the <see cref="T:System.Fabric.ResolvedServicePartition"/> for the service partition.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Int64)">
            <summary>
            <para>Queries the system for the set of endpoints the specified service partition is listening to.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service instance.</para>
            </param>
            <param name="partitionKey">
            <para>The partition key for the service partition.</para>
            </param>
            <returns>
            <para>The set of endpoints the specified service partition is listening to.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>This is a complaint based resolution API.</para>
            <para>This method will return a <see cref="T:System.Fabric.ResolvedServicePartition"/> for the specified service partition. When this overload is used, the system will always return the closest <see cref="T:System.Fabric.ResolvedServicePartition"/> for the service partition. Timeout for the operation will be set to the Naming “MaxOperationTimeout” parameter specified in the Cluster Manifest.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Int64,System.TimeSpan)">
            <summary>
            <para>Queries the system for the set of endpoints the specified service partition is listening to.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service instance.</para>
            </param>
            <param name="partitionKey">
            <para>The partition key for the service partition.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <returns>
            <para>The set of endpoints the specified service partition is listening to.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>This is a complaint based resolution API.</para>
            <para>This will return a <see cref="T:System.Fabric.ResolvedServicePartition"/> for the specified service partition. When this overload is used, the system will always return the closest <see cref="T:System.Fabric.ResolvedServicePartition"/> for the service partition.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Int64,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Queries the system for the set of endpoints the specified service partition is listening to.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service instance.</para>
            </param>
            <param name="partitionKey">
            <para>The partition key for the service partition.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The set of endpoints the specified service partition is listening to.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>This is a complaint based resolution API.</para>
            <para>This will return a <see cref="T:System.Fabric.ResolvedServicePartition"/> for the specified service partition. When this overload is used, the system will always return the closest <see cref="T:System.Fabric.ResolvedServicePartition"/> for the service partition.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Int64,System.Fabric.ResolvedServicePartition)">
            <summary>
            <para>Queries the system for the set of endpoints the specified service partition is listening to.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service instance.</para>
            </param>
            <param name="partitionKey">
            <para>The partition key for the service partition.</para>
            </param>
            <param name="previousResult">
            <para>The Previous <see cref="T:System.Fabric.ResolvedServicePartition"/> for the service partition that the user believes is stale.</para>
            </param>
            <returns>
            <para>The set of endpoints the specified service partition is listening to.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>This is a complaint based resolution API.</para>
            <para>This will return a <see cref="T:System.Fabric.ResolvedServicePartition"/> for the specified service partition. When this overload is used, the system will return a more up-to-date <see cref="T:System.Fabric.ResolvedServicePartition"/> than the “previousResult” argument if it is available. Timeout for the operation will be set to the Naming “MaxOperationTimeout” parameter specified in the Cluster Manifest.</para>
            <para>PreviousResult argument enables the user to say ”This is the previous list of endpoints for this Service partition. I have tried the endpoints and I believe they are stale. Return me a more up to date version of this set.” In this case, the system will try to return a more up-to-date <see cref="T:System.Fabric.ResolvedServicePartition"/> in the most efficient way possible. If no newer version can be found, a <see cref="T:System.Fabric.ResolvedServicePartition"/> with the same version will be returned.ResolveServicePartition can be called without the previousResult argument or previousResult argument set to null. As no prerequisite is specified, the system will return the closest copy of the <see cref="T:System.Fabric.ResolvedServicePartition"/> for the service partition.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Int64,System.Fabric.ResolvedServicePartition,System.TimeSpan)">
            <summary>
            <para>Queries the system for the set of endpoints the specified service partition is listening to.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service instance.</para>
            </param>
            <param name="partitionKey">
            <para>The partition key for the service partition.</para>
            </param>
            <param name="previousResult">
            <para>Previous <see cref="T:System.Fabric.ResolvedServicePartition"/> for the service partition that the user believes is stale.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <returns>
            <para>The set of endpoints the specified service partition is listening to.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>This is a complaint based resolution API.</para>
            <para>This will return a <see cref="T:System.Fabric.ResolvedServicePartition"/> for the specified service partition. When this overload is used, the system will return a more up-to-date <see cref="T:System.Fabric.ResolvedServicePartition"/> than the “previousResult” argument if it is available.</para>
            <para>PreviousResult argument enables the user to say ”This is the previous list of endpoints for this Service partition. I have tried the endpoints and I believe they are stale. Return me a more up to date version of this set.” In this case, the system will try to return a more up-to-date <see cref="T:System.Fabric.ResolvedServicePartition"/> in the most efficient way possible. If no newer version can be found, a <see cref="T:System.Fabric.ResolvedServicePartition"/> with the same version will be returned.ResolveServicePartition can be called without the previousResult argument or previousResult argument set to null. As no prerequisite is specified, the system will return the closest copy of the <see cref="T:System.Fabric.ResolvedServicePartition"/> for the service partition.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Int64,System.Fabric.ResolvedServicePartition,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Queries the system for the set of endpoints the specified service partition is listening to.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service instance.</para>
            </param>
            <param name="partitionKey">
            <para>The partition key for the service partition.</para>
            </param>
            <param name="previousResult">
            <para>Previous <see cref="T:System.Fabric.ResolvedServicePartition"/> for the service partition that the user believes is stale.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>
                <see cref="T:System.Threading.CancellationToken"/> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The set of endpoints the specified service partition is listening to.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>This is a complaint based resolution API.</para>
            <para>This will return a <see cref="T:System.Fabric.ResolvedServicePartition"/> for the specified service partition. When this overload is used, the system will return a more up-to-date <see cref="T:System.Fabric.ResolvedServicePartition"/> than the “previousResult” argument if it is available.</para>
            <para>PreviousResult argument enables the user to say ”This is the previous list of endpoints for this Service partition. I have tried the endpoints and I believe they are stale. Return me a more up to date version of this set.” In this case, the system will try to return a more up-to-date <see cref="T:System.Fabric.ResolvedServicePartition"/> in the most efficient way possible. If no newer version can be found, a <see cref="T:System.Fabric.ResolvedServicePartition"/> with the same version will be returned.ResolveServicePartition can be called without the previousResult argument or previousResult argument set to null. As no prerequisite is specified, the system will return the closest copy of the <see cref="T:System.Fabric.ResolvedServicePartition"/> for the service partition.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.String)">
            <summary>
            <para>Queries the system for the set of endpoints the specified service partition is listening to.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service instance.</para>
            </param>
            <param name="partitionKey">
            <para>The partition key for the service partition.</para>
            </param>
            <returns>
            <para>The set of endpoints the specified service partition is listening to.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>This is a complaint based resolution API.</para>
            <para>This will return a <see cref="T:System.Fabric.ResolvedServicePartition"/> for the specified service partition. When this overload is used, the system will always return the closest <see cref="T:System.Fabric.ResolvedServicePartition"/> for the service partition. Timeout for the operation will be set to the Naming “MaxOperationTimeout” parameter specified in the Cluster Manifest.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.String,System.TimeSpan)">
            <summary>
            <para>Queries the system for the set of endpoints the specified service partition is listening to.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service instance.</para>
            </param>
            <param name="partitionKey">
            <para>The partition key for the service partition.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <returns>
            <para>The set of endpoints the specified service partition is listening to.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>This is a complaint based resolution API.</para>
            <para>This will return a <see cref="T:System.Fabric.ResolvedServicePartition"/> for the specified service partition. When this overload is used, the system will always return the closest <see cref="T:System.Fabric.ResolvedServicePartition"/> for the service partition.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Queries the system for the set of endpoints the specified service partition is listening to.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service instance.</para>
            </param>
            <param name="partitionKey">
            <para>The partition key for the service partition.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The set of endpoints the specified service partition is listening to.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>This is a complaint based resolution API.</para>
            <para>This will return a <see cref="T:System.Fabric.ResolvedServicePartition"/> for the specified service partition. When this overload is used, the system will always return the closest <see cref="T:System.Fabric.ResolvedServicePartition"/> for the service partition.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.String,System.Fabric.ResolvedServicePartition)">
            <summary>
            <para>Queries the system for the set of endpoints the specified service partition is listening to.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service instance.</para>
            </param>
            <param name="partitionKey">
            <para>The partition key for the service partition.</para>
            </param>
            <param name="previousResult">
            <para>The previous <see cref="T:System.Fabric.ResolvedServicePartition"/> for the service partition that the user believes is stale.</para>
            </param>
            <returns>
            <para>The set of endpoints the specified service partition is listening to.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>This is a complaint based resolution API.</para>
            <para>This will return a <see cref="T:System.Fabric.ResolvedServicePartition"/> for the specified service partition. When this overload is used, the system will return a more up-to-date <see cref="T:System.Fabric.ResolvedServicePartition"/> than the “previousResult” argument if it is available. Timeout for the operation will be set to the Naming “MaxOperationTimeout” parameter specified in the Cluster Manifest.</para>
            <para>The PreviousResult argument enables the user to say ”This is the previous list of endpoints for this Service partition. I have tried the endpoints and I believe they are stale. Return me a more up to date version of this set.” In this case, the system will try to return a more up-to-date <see cref="T:System.Fabric.ResolvedServicePartition"/> in the most efficient way possible. If no newer version can be found, a <see cref="T:System.Fabric.ResolvedServicePartition"/> with the same version will be returned.ResolveServicePartition can be called without the previousResult argument or previousResult argument set to null. As no prerequisite is specified, the system will return the closest copy of the <see cref="T:System.Fabric.ResolvedServicePartition"/> for the service partition.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.String,System.Fabric.ResolvedServicePartition,System.TimeSpan)">
            <summary>
            <para>Queries the system for the set of endpoints the specified service partition is listening to.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service instance.</para>
            </param>
            <param name="partitionKey">
            <para>The partition key for the service partition.</para>
            </param>
            <param name="previousResult">
            <para>The previous <see cref="T:System.Fabric.ResolvedServicePartition"/> for the service partition that the user believes is stale.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <returns>
            <para>The set of endpoints the specified service partition is listening to.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>This is a complaint based resolution API.</para>
            <para>This will return a <see cref="T:System.Fabric.ResolvedServicePartition"/> for the specified service partition. When this overload is used, the system will return a more up-to-date <see cref="T:System.Fabric.ResolvedServicePartition"/> than the “previousResult” argument if it is available.</para>
            <para>The PreviousResult argument enables the user to say ”This is the previous list of endpoints for this Service partition. I have tried the endpoints and I believe they are stale. Return me a more up to date version of this set.” In this case, the system will try to return a more up-to-date <see cref="T:System.Fabric.ResolvedServicePartition"/> in the most efficient way possible. If no newer version can be found, a <see cref="T:System.Fabric.ResolvedServicePartition"/> with the same version will be returned.ResolveServicePartition can be called without the previousResult argument or previousResult argument set to null. As no prerequisite is specified, the system will return the closest copy of the <see cref="T:System.Fabric.ResolvedServicePartition"/> for the service partition.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.String,System.Fabric.ResolvedServicePartition,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Queries the system for the set of endpoints the specified service partition is listening to.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service instance.</para>
            </param>
            <param name="partitionKey">
            <para>The partition key for the service partition.</para>
            </param>
            <param name="previousResult">
            <para>The previous <see cref="T:System.Fabric.ResolvedServicePartition"/> for the service partition that the user believes is stale.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The set of endpoints the specified service partition is listening to.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>This is a complaint based resolution API.</para>
            <para>This will return a <see cref="T:System.Fabric.ResolvedServicePartition"/> for the specified service partition. When this overload is used, the system will return a more up-to-date <see cref="T:System.Fabric.ResolvedServicePartition"/> than the “previousResult” argument if it is available.</para>
            <para>The PreviousResult argument enables the user to say ”This is the previous list of endpoints for this Service partition. I have tried the endpoints and I believe they are stale. Return me a more up to date version of this set.” In this case, the system will try to return a more up-to-date <see cref="T:System.Fabric.ResolvedServicePartition"/> in the most efficient way possible. If no newer version can be found, a <see cref="T:System.Fabric.ResolvedServicePartition"/> with the same version will be returned.ResolveServicePartition can be called without the previousResult argument or previousResult argument set to null. As no prerequisite is specified, the system will return the closest copy of the <see cref="T:System.Fabric.ResolvedServicePartition"/> for the service partition.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.RegisterServicePartitionResolutionChangeHandler(System.Uri,System.Fabric.ServicePartitionResolutionChangeHandler)">
            <summary>
            <para>Registers a handler to be raised when the accessibility information of a service partition changes.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service.</para>
            </param>
            <param name="callback">
            <para>The function that will be called when a notification arrives.</para>
            </param>
            <returns>
            <para>The handler to be raised when the accessibility information of a service partition changes.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>Notification will include changes on partition’s endpoints or exceptions that occurred while the information was being updated. This overload is used for Singleton partitioned service instances. Returned Int64 is the callback handle identifier for the registration.</para>
            <para>Notifications is a mechanism that delivers notifications to user’s code each time there is an service address change or an address resolution error related to a service partition the code has raised interest for. This way instead of resolving every time the current <see cref="T:System.Fabric.ResolvedServicePartition"/> becomes stale, program registers for updates.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.RegisterServicePartitionResolutionChangeHandler(System.Uri,System.Int64,System.Fabric.ServicePartitionResolutionChangeHandler)">
            <summary>
            <para>Registers a handler to be raised when the accessibility information of a service partition changes.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service.</para>
            </param>
            <param name="partitionKey">
            <para>The partition key for the service partition.</para>
            </param>
            <param name="callback">
            <para>The function that will be called when a notification arrives.</para>
            </param>
            <returns>
            <para>The handler to be raised when the accessibility information of a service partition changes.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>Notification will include changes on partition’s endpoints or exceptions that occurred while the information was being updated. This overload is used for UniformInt64Range partitioned service instances. Returned Int64 is the callback handle identifier for the registration.</para>
            <para>Notifications is a mechanism that delivers notifications to user’s code each time there is an service address change or an address resolution error related to a service partition the code has raised interest for. This way instead of resolving every time the current <see cref="T:System.Fabric.ResolvedServicePartition"/> becomes stale, program registers for updates.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.RegisterServicePartitionResolutionChangeHandler(System.Uri,System.String,System.Fabric.ServicePartitionResolutionChangeHandler)">
            <summary>
            <para>Registers a handler to be raised when the accessibility information of a service partition changes.</para>
            </summary>
            <param name="serviceName">
            <para>The Service Fabric Name of the service.</para>
            </param>
            <param name="partitionKey">
            <para>The partition key for the service partition.</para>
            </param>
            <param name="callback">
            <para>The function that will be called when a notification arrives.</para>
            </param>
            <returns>
            <para>The handler to be raised when the accessibility information of a service partition changes.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
            <remarks>
            <para>Notification will include changes on partition’s endpoints or exceptions that occurred while the information was being updated. This overload is used for Named partitioned service instances. Returned Int64 is the callback handle identifier for the registration.</para>
            <para>Notifications is a mechanism that delivers notifications to user’s code each time there is an service address change or an address resolution error related to a service partition the code has raised interest for. This way instead of resolving every time the current <see cref="T:System.Fabric.ResolvedServicePartition"/> becomes stale, program registers for updates.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.UnregisterServicePartitionResolutionChangeHandler(System.Int64)">
            <summary>
            <para>Unregisters a change handler previously registered with <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.RegisterServicePartitionResolutionChangeHandler(System.Uri,System.Fabric.ServicePartitionResolutionChangeHandler)"/>.</para>
            </summary>
            <param name="callbackHandle">
            <para>The callbackHandle identifier that will be removed. This is returned by the <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.RegisterServicePartitionResolutionChangeHandler(System.Uri,System.Fabric.ServicePartitionResolutionChangeHandler)"/> call.</para>
            </param>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.GetServiceManifestAsync(System.String,System.String,System.String)">
            <summary>
            <para>Gets the provisioned service manifest document in the specified ApplicationTypeName and ApplicationTypeVersion.</para>
            </summary>
            <param name="applicationTypeName">
            <para>The name of the provisioned application manifest.</para>
            </param>
            <param name="applicationTypeVersion">
            <para>The version of the provisioned application manifest.</para>
            </param>
            <param name="serviceManifestName">
            <para>The name of the service manifest referenced in the application manifest.</para>
            </param>
            <returns>
            <para>The provisioned service manifest document.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.GetServiceManifestAsync(System.String,System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets the provisioned Service manifest document in the specified ApplicationTypeName and ApplicationTypeVersion.</para>
            </summary>
            <param name="applicationTypeName">
            <para>The name of the provisioned application manifest.</para>
            </param>
            <param name="applicationTypeVersion">
            <para>The version of the provisioned application manifest.</para>
            </param>
            <param name="serviceManifestName">
            <para>The name of the service manifest referenced in the application manifest.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The provisioned service manifest document</para>
            </returns>
            <exception cref="T:System.Fabric.FabricObjectClosedException">
            <para>The <see cref="T:System.Fabric.FabricClient"/> object is in a closed state. Dispose of the <see cref="T:System.Fabric.FabricClient"/> object you are using and instantiate a new <see cref="T:System.Fabric.FabricClient"/> object.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64)">
            <summary>
            <para>Removes a service replica.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node.</para>
            </param>
            <param name="partitionId">
            <para>The partition identifier.</para>
            </param>
            <param name="replicaOrInstanceId">
            <para>The instance identifier.</para>
            </param>
            <returns>
            <para>The removed service replica.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.Boolean)">
            <summary>
            <para>
            Removes a service replica.
            </para>
            </summary>
            <param name="nodeName">
            <para>The name of the node.</para>
            </param>
            <param name="partitionId">
            <para>The partition identifier.</para>
            </param>
            <param name="replicaOrInstanceId">
            <para>The replica or instance identifier.</para>
            </param>
            <param name="forceRemove">
            <para>Flag indicating whether the replica should be removed forcefully.</para>
            </param>
            <returns>
            <para>A Task representing the operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Removes a service replica.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node.</para>
            </param>
            <param name="partitionId">
            <para>The partition identifier.</para>
            </param>
            <param name="replicaOrInstanceId">
            <para>The instance identifier.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/>that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The removed service replica.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>
            Removes a service replica.
            </para>
            </summary>
            <param name="nodeName">
            <para>The name of the node.</para>
            </param>
            <param name="partitionId">
            <para>The partition identifier.</para>
            </param>
            <param name="replicaOrInstanceId">
            <para>The replica or instance identifier.</para>
            </param>
            <param name="forceRemove">
            <para>Flag indicating whether the replica should be forced removed.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>A Task representing the operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.RestartReplicaAsync(System.String,System.Guid,System.Int64)">
            <summary>
            <para>Restarts the service replica.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node.</para>
            </param>
            <param name="partitionId">
            <para>The partition identifier.</para>
            </param>
            <param name="replicaOrInstanceId">
            <para>The instance identifier.</para>
            </param>
            <returns>
            <para>The restarted service replica.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.RestartReplicaAsync(System.String,System.Guid,System.Int64,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Restarts the service replica.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node.</para>
            </param>
            <param name="partitionId">
            <para>The partition identifier.</para>
            </param>
            <param name="replicaOrInstanceId">
            <para>The instance identifier.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/>that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The restarted service replica.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.RegisterServiceNotificationFilterAsync(System.Fabric.Description.ServiceNotificationFilterDescription)">
            <summary>
            <para>Registers a Service Notification filter.</para>
            </summary>
            <param name="description">
            <para>The Description of which Service endpoint change events should be delivered to this client.</para>
            </param>
            <returns>
            <para>The registered Service Notification filter.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.RegisterServiceNotificationFilterAsync(System.Fabric.Description.ServiceNotificationFilterDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Registers a Service Notification filter.</para>
            </summary>
            <param name="description">
            <para>The Description of which Service endpoint change events should be delivered to this client.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time the system will allow this operation to continue before returning <see cref="T:System.TimeoutException"/>.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/>that the operation is observing. It can be used to propagate notification that the operation should be canceled.</para>
            </param>
            <returns>
            <para>The registered Service Notification filter.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.UnregisterServiceNotificationFilterAsync(System.Int64)">
            <summary>
            <para>Unregisters a Service Notification filter.</para>
            </summary>
            <param name="filterId">
            <para>Identifies the filter to remove.</para>
            </param>
            <returns>
            <para>The unregistered Service Notification filter.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricClient.ServiceManagementClient.UnregisterServiceNotificationFilterAsync(System.Int64,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Unregisters a Service Notification filter.</para>
            </summary>
            <param name="filterId">
            <para>Identifies the filter to remove.</para>
            </param>
            <param name="timeout">
            <para>The maximum time allowed for processing the request before TimeoutException is thrown.</para>
            </param>
            <param name="cancellationToken">
            <para>Reserved for future use.</para>
            </param>
            <returns>
            <para>The unregistered Service Notification filter.</para>
            </returns>
        </member>
        <member name="E:System.Fabric.FabricClient.ServiceManagementClient.ServiceNotificationFilterMatched">
            <summary>
            <para>Occurs when the event for a Service Notification filter is being matched.</para>
            </summary>
            <remarks>
            <para>If the client has registered Service Notification filters via the RegisterServiceNotificationFilterAsync() 
            API and a service’s endpoint changes matched the conditions of one or more registered filters, then this event will be raised.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.FabricClient.ServiceManagementClient.ServiceNotificationEventArgs">
            <summary>
            Represents the event arguments for a service notification event.
            </summary>
        </member>
        <member name="P:System.Fabric.FabricClient.ServiceManagementClient.ServiceNotificationEventArgs.Notification">
            <summary>
            <para>Gets the notification object.</para>
            </summary>
            <value>
            <para>The notification object.</para>
            </value>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.StartPartitionDataLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.DataLossMode)">
            <summary>
            This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
            </summary>
            <remarks>
            Actual data loss will depend on the specified <see cref="T:System.Fabric.DataLossMode"/>
            PartialDataLoss - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on presence of inflight replication.
            FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
            </remarks>
            <param name="operationId"> A Guid that identifies a call of this API; this is passed into the corresponding GetProgress API</param>
            <param name="partitionSelector">The <see cref="T:System.Fabric.PartitionSelector"/> to specify which partition data loss needs to be induced for</param>
            <param name="dataLossMode">Specifies the <see cref="T:System.Fabric.DataLossMode"/> i.e. the options for inducing data loss.</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.StartPartitionDataLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.Threading.CancellationToken)">
            <summary>
            This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
            </summary>
            <remarks>
            Actual data loss will depend on the specified <see cref="T:System.Fabric.DataLossMode"/>
            PartialDataLoss - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on presence of inflight replication.
            FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
            </remarks>
            <param name="operationId"> A Guid that identifies a call of this API; this is passed into the corresponding GetProgress API</param>
            <param name="partitionSelector">The <see cref="T:System.Fabric.PartitionSelector"/> to specify which partition data loss needs to be induced for.</param>
            <param name="dataLossMode">Specifies the <see cref="T:System.Fabric.DataLossMode"/> i.e. the options for inducing data loss.</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.StartPartitionDataLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.TimeSpan)">
            <summary>
            This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
            </summary>
            <remarks>
            Actual data loss will depend on the specified <see cref="T:System.Fabric.DataLossMode"/>
            PartialDataLoss - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on presence of inflight replication.
            FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
            </remarks>
            <param name="operationId"> A Guid that identifies a call of this API; this is passed into the corresponding GetProgress API</param>
            <param name="partitionSelector">The <see cref="T:System.Fabric.PartitionSelector"/> to specify which partition data loss needs to be induced for.</param>
            <param name="dataLossMode">Specifies the <see cref="T:System.Fabric.DataLossMode"/> i.e. the options for inducing data loss.</param>
            <param name="operationTimeout">The overall timeout for the operation</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.StartPartitionDataLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
            </summary>
            <remarks>
            Actual data loss will depend on the specified <see cref="T:System.Fabric.DataLossMode"/>
            PartialDataLoss - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on presence of inflight replication.
            FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
            </remarks>
            <param name="operationId"> A Guid that identifies a call of this API; this is passed into the corresponding GetProgress API</param>
            <param name="partitionSelector">The <see cref="T:System.Fabric.PartitionSelector"/> to specify which partition data loss needs to be induced for.</param>
            <param name="dataLossMode">Specifies the <see cref="T:System.Fabric.DataLossMode"/> i.e. the options for inducing data loss.</param>
            <param name="operationTimeout">The overall timeout for the operation</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync(System.Fabric.PartitionSelector,System.Fabric.DataLossMode)">
            <summary>
            This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
            </summary>
            <remarks>
            Actual data loss will depend on the specified <see cref="T:System.Fabric.DataLossMode"/>
            PartialDataLoss - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on presence of inflight replication.
            FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
            </remarks>
            <param name="partitionSelector">The <see cref="T:System.Fabric.PartitionSelector"/> to specify which partition data loss needs to be induced for</param>
            <param name="dataLossMode">Specifies the <see cref="T:System.Fabric.DataLossMode"/> i.e. the options for inducing data loss.</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>InvokeDataLossResult which gives information about the Partition that was selected for data loss.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync(System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.Threading.CancellationToken)">
            <summary>
            This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
            </summary>
            <remarks>
            Actual data loss will depend on the specified <see cref="T:System.Fabric.DataLossMode"/>
            PartialDataLoss - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on presence of inflight replication.
            FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
            </remarks>
            <param name="partitionSelector">The <see cref="T:System.Fabric.PartitionSelector"/> to specify which partition data loss needs to be induced for.</param>
            <param name="dataLossMode">Specifies the <see cref="T:System.Fabric.DataLossMode"/> i.e. the options for inducing data loss.</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>InvokeDataLossResult which gives information about the Partition that was selected for data loss.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync(System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.TimeSpan)">
            <summary>
            This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
            </summary>
            <remarks>
            Actual data loss will depend on the specified <see cref="T:System.Fabric.DataLossMode"/>
            PartialDataLoss - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on presence of inflight replication.
            FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
            </remarks>
            <param name="partitionSelector">The <see cref="T:System.Fabric.PartitionSelector"/> to specify which partition data loss needs to be induced for.</param>
            <param name="dataLossMode">Specifies the <see cref="T:System.Fabric.DataLossMode"/> i.e. the options for inducing data loss.</param>
            <param name="operationTimeout">The overall timeout for the operation</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>InvokeDataLossResult which gives information about the Partition that was selected for data loss.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync(System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            This API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.
            </summary>
            <remarks>
            Actual data loss will depend on the specified <see cref="T:System.Fabric.DataLossMode"/>
            PartialDataLoss - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on presence of inflight replication.
            FullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.
            </remarks>
            <param name="partitionSelector">The <see cref="T:System.Fabric.PartitionSelector"/> to specify which partition data loss needs to be induced for.</param>
            <param name="dataLossMode">Specifies the <see cref="T:System.Fabric.DataLossMode"/> i.e. the options for inducing data loss.</param>
            <param name="operationTimeout">The overall timeout for the operation</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>InvokeDataLossResult which gives information about the Partition that was selected for data loss.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.StartPartitionQuorumLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan)">
            <summary>Starts the operation to put a given stateful service partition in to quorum loss. </summary>
            <remarks>
            Depending on the whether a partial or full quorum loss mode is chosen, a number of replicas are taken down to induce a quorum loss on a given partition. The partition will remain in quorum loss for a given duration before it recovers.
            </remarks>
            <param name="operationId"> A Guid that identifies a call of this API; this is passed into the corresponding GetProgress API</param>
            <param name="partitionSelector">Partition which the quorum loss will be invoked. <see cref="T:System.Fabric.PartitionSelector"/></param>
            <param name="quorumLossMode">PartialQuorumLoss or FullQuorumLoss.</param>
            <remarks>
            FullQuorumLoss - All replicas for a partition will be down that will cause a quorum loss.
            PartialQuorumLoss - Minimum number of replicas for a partition will be down that will cause a quorum loss.
            </remarks>
            <param name="quorumLossDuration">Amount of time for which the partition will be kept in quorum loss.</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.OperationCanceledException">Async operation is cancelled.</exception>
            <exception cref="T:System.InvalidOperationException"> Partition specified is not a part of a Stateful Persisted Service.</exception>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.StartPartitionQuorumLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>Starts the operation to put a given stateful service partition in to quorum loss. </summary>
            <remarks>
            Depending on the whether a partial or full quorum loss mode is chosen, a number of replicas are taken down to induce a quorum loss on a given partition. The partition will remain in quorum loss for a given duration before it recovers.
            </remarks>
            <param name="operationId"> A Guid that identifies a call of this API; this is passed into the corresponding GetProgress API</param>
            <param name="partitionSelector">Partition which the quorum loss will be invoked. <see cref="T:System.Fabric.PartitionSelector"/></param>
            <param name="quorumLossMode">PartialQuorumLoss or FullQuorumLoss.</param>
            <remarks>
            FullQuorumLoss - All replicas for a partition will be down that will cause a quorum loss.
            PartialQuorumLoss - Minimum number of replicas for a partition will be down that will cause a quorum loss.
            </remarks>
            <param name="quorumLossDuration">Amount of time for which the partition will be kept in quorum loss.</param>
            <param name="cancellationToken">The cancellation token for the operation.</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.OperationCanceledException">Async operation is cancelled.</exception>
            <exception cref="T:System.InvalidOperationException"> Partition specified is not a part of a Stateful Persisted Service.</exception>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.StartPartitionQuorumLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.TimeSpan)">
            <summary>Starts the operation to put a given stateful service partition in to quorum loss. </summary>
            <remarks>
            Depending on the whether a partial or full quorum loss mode is chosen, a number of replicas are taken down to induce a quorum loss on a given partition. The partition will remain in quorum loss for a given duration before it recovers.
            </remarks>
            <param name="operationId"> A Guid that identifies a call of this API; this is passed into the corresponding GetProgress API</param>
            <param name="partitionSelector">Partition which the quorum loss will be invoked. <see cref="T:System.Fabric.PartitionSelector"/></param>
            <param name="quorumLossMode">PartialQuorumLoss or FullQuorumLoss.</param>
            <remarks>
            FullQuorumLoss - All replicas for a partition will be down that will cause a quorum loss.
            PartialQuorumLoss - Minimum number of replicas for a partition will be down that will cause a quorum loss.
            </remarks>
            <param name="quorumLossDuration">Amount of time for which the partition will be kept in quorum loss.</param>
            <param name="operationTimeout">Overall timeout for the entire operation.</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.OperationCanceledException">Async operation is cancelled.</exception>
            <exception cref="T:System.InvalidOperationException"> Partition specified is not a part of a Stateful Persisted Service.</exception>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.StartPartitionQuorumLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>Starts the operation to put a given stateful service partition in to quorum loss. </summary>
            <remarks>
            Depending on the whether a partial or full quorum loss mode is chosen, a number of replicas are taken down to induce a quorum loss on a given partition. The partition will remain in quorum loss for a given duration before it recovers.
            </remarks>
            <param name="operationId"> A Guid that identifies a call of this API; this is passed into the corresponding GetProgress API</param>
            <param name="partitionSelector">Partition which the quorum loss will be invoked. <see cref="T:System.Fabric.PartitionSelector"/></param>
            <param name="quorumlossMode">PartialQuorumLoss or FullQuorumLoss.</param>
            <remarks>
            FullQuorumLoss - All replicas for a partition will be down that will cause a quorum loss.
            PartialQuorumLoss - Minimum number of replicas for a partition will be down that will cause a quorum loss.
            </remarks>
            <param name="quorumlossDuration">Amount of time for which the partition will be kept in quorum loss.</param>
            <param name="operationTimeout">Overall timeout for the entire operation.</param>
            <param name="cancellationToken">The cancellation token for the operation.</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.OperationCanceledException">Async operation is cancelled.</exception>
            <exception cref="T:System.InvalidOperationException"> Partition specified is not a part of a Stateful Persisted Service.</exception>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync(System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan)">
            <summary>Starts the operation to put a given stateful service partition in to quorum loss. </summary>
            <remarks>
            Depending on the whether a partial or full quorum loss mode is chosen, a number of replicas are taken down to induce a quorum loss on a given partition. The partition will remain in quorum loss for a given duration before it recovers.
            </remarks>
            <param name="partitionSelector">Partition which the quorum loss will be invoked. <see cref="T:System.Fabric.PartitionSelector"/></param>
            <param name="quorumLossMode">PartialQuorumLoss or FullQuorumLoss.</param>
            <remarks>
            FullQuorumLoss - All replicas for a partition will be down that will cause a quorum loss.
            PartialQuorumLoss - Minimum number of replicas for a partition will be down that will cause a quorum loss.
            </remarks>
            <param name="quorumLossDuration">Amount of time for which the partition will be kept in quorum loss.</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.OperationCanceledException">Async operation is cancelled.</exception>
            <exception cref="T:System.InvalidOperationException"> Partition specified is not a part of a Stateful Persisted Service.</exception>
            <returns>InvokeQuorumLossResult <see cref="T:System.Fabric.Result.InvokeQuorumLossResult"/></returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync(System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>Starts the operation to put a given stateful service partition in to quorum loss. </summary>
            <remarks>
            Depending on the whether a partial or full quorum loss mode is chosen, a number of replicas are taken down to induce a quorum loss on a given partition. The partition will remain in quorum loss for a given duration before it recovers.
            </remarks>
            <param name="partitionSelector">Partition which the quorum loss will be invoked. <see cref="T:System.Fabric.PartitionSelector"/></param>
            <param name="quorumLossMode">PartialQuorumLoss or FullQuorumLoss.</param>
            <remarks>
            FullQuorumLoss - All replicas for a partition will be down that will cause a quorum loss.
            PartialQuorumLoss - Minimum number of replicas for a partition will be down that will cause a quorum loss.
            </remarks>
            <param name="quorumLossDuration">Amount of time for which the partition will be kept in quorum loss.</param>
            <param name="cancellationToken">The cancellation token for the operation.</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.OperationCanceledException">Async operation is cancelled.</exception>
            <exception cref="T:System.InvalidOperationException"> Partition specified is not a part of a Stateful Persisted Service.</exception>
            <returns>InvokeQuorumLossResult <see cref="T:System.Fabric.Result.InvokeQuorumLossResult"/></returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync(System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.TimeSpan)">
            <summary>Starts the operation to put a given stateful service partition in to quorum loss. </summary>
            <remarks>
            Depending on the whether a partial or full quorum loss mode is chosen, a number of replicas are taken down to induce a quorum loss on a given partition. The partition will remain in quorum loss for a given duration before it recovers.
            </remarks>
            <param name="partitionSelector">Partition which the quorum loss will be invoked. <see cref="T:System.Fabric.PartitionSelector"/></param>
            <param name="quorumLossMode">PartialQuorumLoss or FullQuorumLoss.</param>
            <remarks>
            FullQuorumLoss - All replicas for a partition will be down that will cause a quorum loss.
            PartialQuorumLoss - Minimum number of replicas for a partition will be down that will cause a quorum loss.
            </remarks>
            <param name="quorumLossDuration">Amount of time for which the partition will be kept in quorum loss.</param>
            <param name="operationTimeout">Overall timeout for the entire operation.</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.OperationCanceledException">Async operation is cancelled.</exception>
            <exception cref="T:System.InvalidOperationException"> Partition specified is not a part of a Stateful Persisted Service.</exception>
            <returns>InvokeQuorumLossResult <see cref="T:System.Fabric.Result.InvokeQuorumLossResult"/></returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync(System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>Starts the operation to put a given stateful service partition in to quorum loss. </summary>
            <remarks>
            Depending on the whether a partial or full quorum loss mode is chosen, a number of replicas are taken down to induce a quorum loss on a given partition. The partition will remain in quorum loss for a given duration before it recovers.
            </remarks>
            <param name="partitionSelector">Partition which the quorum loss will be invoked. <see cref="T:System.Fabric.PartitionSelector"/></param>
            <param name="quorumlossMode">PartialQuorumLoss or FullQuorumLoss.</param>
            <remarks>
            FullQuorumLoss - All replicas for a partition will be down that will cause a quorum loss.
            PartialQuorumLoss - Minimum number of replicas for a partition will be down that will cause a quorum loss.
            </remarks>
            <param name="quorumlossDuration">Amount of time for which the partition will be kept in quorum loss.</param>
            <param name="operationTimeout">Overall timeout for the entire operation.</param>
            <param name="cancellationToken">The cancellation token for the operation.</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.OperationCanceledException">Async operation is cancelled.</exception>
            <exception cref="T:System.InvalidOperationException"> Partition specified is not a part of a Stateful Persisted Service.</exception>
            <returns>InvokeQuorumLossResult <see cref="T:System.Fabric.Result.InvokeQuorumLossResult"/></returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.StartPartitionRestartAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode)">
            <summary>
            This API will restart some or all the replicas of a partition at the same time (ensures all the replicas are down concurrently) depending on the <see cref="T:System.Fabric.RestartPartitionMode"/>.
            </summary>
            <remarks>
            This API is useful to test the recovery time of a partition after a full or partial restart and also to test failover.
            </remarks>
            <param name="operationId"> A Guid that identifies a call of this API; this is passed into the corresponding GetProgress API</param>
            <param name="partitionSelector"><see cref="T:System.Fabric.PartitionSelector"/> that specifies the partition which needs to be restarted.</param>
            <param name="restartPartitionMode">The <see cref="T:System.Fabric.RestartPartitionMode"/> which can be AllReplicasOrInstances or OnlyActiveSecondaries based on which the replicas to be restarted
            are selected.</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service with <see cref="T:System.Fabric.RestartPartitionMode"/> set to OnlyActiveSecondaries.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>RestartPartitionResult which gives information about the actual selected partition.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.StartPartitionRestartAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.Threading.CancellationToken)">
            <summary>
            This API will restart some or all the replicas of a partition at the same time (ensures all the replicas are down concurrently) depending on the <see cref="T:System.Fabric.RestartPartitionMode"/>.
            </summary>
            <remarks>
            This API is useful to test the recovery time of a partition after a full or partial restart and also to test failover.
            </remarks>
            <param name="operationId"> A Guid that identifies a call of this API; this is passed into the corresponding GetProgress API</param>
            <param name="partitionSelector"><see cref="T:System.Fabric.PartitionSelector"/> that specifies the partition which needs to be restarted</param>
            <param name="restartPartitionMode">The <see cref="T:System.Fabric.RestartPartitionMode"/> which can be AllReplicasOrInstances or OnlyActiveSecondaries based on which the replicas to be restarted
            are selected.</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service with <see cref="T:System.Fabric.RestartPartitionMode"/> set to OnlyActiveSecondaries.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist</exception>
            <returns>RestartPartitionResult which gives information about the actual selected partition</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.StartPartitionRestartAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.TimeSpan)">
            <summary>
            This API will restart some or all the replicas of a partition at the same time (ensures all the replicas are down concurrently) depending on the <see cref="T:System.Fabric.RestartPartitionMode"/>.
            </summary>
            <remarks>
            This API is useful to test the recovery time of a partition after a full or partial restart and also to test failover.
            </remarks>
            <param name="operationId"> A Guid that identifies a call of this API; this is passed into the corresponding GetProgress API</param>
            <param name="partitionSelector"><see cref="T:System.Fabric.PartitionSelector"/> that specifies the partition which needs to be restarted.</param>
            <param name="restartPartitionMode">The <see cref="T:System.Fabric.RestartPartitionMode"/> which can be AllReplicasOrInstances or OnlyActiveSecondaries based on which the replicas to be restarted
            are selected.</param>
            <param name="operationTimeout">The overall timeout for the operation.</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service with <see cref="T:System.Fabric.RestartPartitionMode"/> set to OnlyActiveSecondaries.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist</exception>
            <returns>RestartPartitionResult which gives information about the actual selected partition.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.StartPartitionRestartAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            This API will restart some or all the replicas of a partition at the same time (ensures all the replicas are down concurrently) depending on the <see cref="T:System.Fabric.RestartPartitionMode"/>.
            </summary>
            <remarks>
            This API is useful to test the recovery time of a partition after a full or partial restart and also to test failover.
            </remarks>
            <param name="operationId"> A Guid that identifies a call of this API; this is passed into the corresponding GetProgress API</param>
            <param name="partitionSelector"><see cref="T:System.Fabric.PartitionSelector"/> that specifies the partition which needs to be restarted.</param>
            <param name="restartPartitionMode">The <see cref="T:System.Fabric.RestartPartitionMode"/> which can be AllReplicasOrInstances or OnlyActiveSecondaries based on which the replicas to be restarted
            are selected.</param>
            <param name="operationTimeout">The overall timeout for the operation.</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service with <see cref="T:System.Fabric.RestartPartitionMode"/> set to OnlyActiveSecondaries.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist</exception>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync(System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode)">
            <summary>
            This API will restart some or all the replicas of a partition at the same time (ensures all the replicas are down concurrently) depending on the <see cref="T:System.Fabric.RestartPartitionMode"/>.
            </summary>
            <remarks>
            This API is useful to test the recovery time of a partition after a full or partial restart and also to test failover.
            </remarks>
            <param name="partitionSelector"><see cref="T:System.Fabric.PartitionSelector"/> that specifies the partition which needs to be restarted.</param>
            <param name="restartPartitionMode">The <see cref="T:System.Fabric.RestartPartitionMode"/> which can be AllReplicasOrInstances or OnlyActiveSecondaries based on which the replicas to be restarted
            are selected.</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service with <see cref="T:System.Fabric.RestartPartitionMode"/> set to OnlyActiveSecondaries.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>RestartPartitionResult which gives information about the actual selected partition.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync(System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.Threading.CancellationToken)">
            <summary>
            This API will restart some or all the replicas of a partition at the same time (ensures all the replicas are down concurrently) depending on the <see cref="T:System.Fabric.RestartPartitionMode"/>.
            </summary>
            <remarks>
            This API is useful to test the recovery time of a partition after a full or partial restart and also to test failover.
            </remarks>
            <param name="partitionSelector"><see cref="T:System.Fabric.PartitionSelector"/> that specifies the partition which needs to be restarted</param>
            <param name="restartPartitionMode">The <see cref="T:System.Fabric.RestartPartitionMode"/> which can be AllReplicasOrInstances or OnlyActiveSecondaries based on which the replicas to be restarted
            are selected.</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service with <see cref="T:System.Fabric.RestartPartitionMode"/> set to OnlyActiveSecondaries.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist</exception>
            <returns>RestartPartitionResult which gives information about the actual selected partition</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync(System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.TimeSpan)">
            <summary>
            This API will restart some or all the replicas of a partition at the same time (ensures all the replicas are down concurrently) depending on the <see cref="T:System.Fabric.RestartPartitionMode"/>.
            </summary>
            <remarks>
            This API is useful to test the recovery time of a partition after a full or partial restart and also to test failover.
            </remarks>
            <param name="partitionSelector"><see cref="T:System.Fabric.PartitionSelector"/> that specifies the partition which needs to be restarted.</param>
            <param name="restartPartitionMode">The <see cref="T:System.Fabric.RestartPartitionMode"/> which can be AllReplicasOrInstances or OnlyActiveSecondaries based on which the replicas to be restarted
            are selected.</param>
            <param name="operationTimeout">The overall timeout for the operation.</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service with <see cref="T:System.Fabric.RestartPartitionMode"/> set to OnlyActiveSecondaries.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist</exception>
            <returns>RestartPartitionResult which gives information about the actual selected partition.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync(System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            This API will restart some or all the replicas of a partition at the same time (ensures all the replicas are down concurrently) depending on the <see cref="T:System.Fabric.RestartPartitionMode"/>.
            </summary>
            <remarks>
            This API is useful to test the recovery time of a partition after a full or partial restart and also to test failover.
            </remarks>
            <param name="partitionSelector"><see cref="T:System.Fabric.PartitionSelector"/> that specifies the partition which needs to be restarted.</param>
            <param name="restartPartitionMode">The <see cref="T:System.Fabric.RestartPartitionMode"/> which can be AllReplicasOrInstances or OnlyActiveSecondaries based on which the replicas to be restarted
            are selected.</param>
            <param name="operationTimeout">The overall timeout for the operation.</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.InvalidOperationException">If the API is called for a partition belonging to a stateless service with <see cref="T:System.Fabric.RestartPartitionMode"/> set to OnlyActiveSecondaries.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist</exception>
            <returns>RestartPartitionResult which gives information about the actual selected partition.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetPartitionDataLossProgressAsync(System.Guid)">
            <summary>
            Gets the progress of a test command started using StartPartitionDataLossAsync().
            </summary>
            <param name="operationId">The operationId passed in when the test command was starting using StartPartitionDataLossAsync().</param>            
            <returns>A PartitionDataLossProgress object, containing TestCommandProgressState and PartitionDataLossResult.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetPartitionDataLossProgressAsync(System.Guid,System.TimeSpan)">
            <summary>
            Gets the progress of a test command started using StartPartitionDataLossAsync().
            </summary>
            <param name="operationId">The operationId passed in when the test command was starting using StartPartitionDataLossAsync().</param>
            <param name="timeout">Timeout.</param>            
            <returns>A PartitionDataLossProgress object, containing TestCommandProgressState and PartitionDataLossResult.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetPartitionDataLossProgressAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the progress of a test command started using StartPartitionDataLossAsync().
            </summary>
            <param name="operationId">The operationId passed in when the test command was starting using StartPartitionDataLossAsync().</param>            
            <param name="cancellationToken">Cancellation token</param>
            <returns>A PartitionDataLossProgress object, containing TestCommandProgressState and PartitionDataLossResult.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetPartitionDataLossProgressAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the progress of a test command started using StartPartitionDataLossAsync().
            </summary>
            <param name="operationId">The operationId passed in when the test command was starting using StartPartitionDataLossAsync().</param>
            <param name="timeout">Timeout.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A PartitionDataLossProgress object, containing TestCommandProgressState and PartitionDataLossResult.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetPartitionQuorumLossProgressAsync(System.Guid)">
            <summary>
            Gets the progress of a test command started using StartPartitionQuorumLossAsync().
            </summary>
            <param name="operationId">The operationId passed in when the test command was starting using StartPartitionQuorumLossAsync().</param>            
            <returns>A PartitionQuorumLossProgress object, containing TestCommandProgressState and PartitionQuorumLossResult.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetPartitionQuorumLossProgressAsync(System.Guid,System.TimeSpan)">
            <summary>
            Gets the progress of a test command started using StartPartitionQuorumLossAsync().
            </summary>
            <param name="operationId">The operationId passed in when the test command was starting using StartPartitionQuorumLossAsync().</param>
            <param name="timeout">Timeout.</param>            
            <returns>A PartitionQuorumLossProgress object, containing TestCommandProgressState and PartitionQuorumLossResult.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetPartitionQuorumLossProgressAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the progress of a test command started using StartPartitionQuorumLossAsync().
            </summary>
            <param name="operationId">The operationId passed in when the test command was starting using StartPartitionQuorumLossAsync().</param>            
            <param name="cancellationToken">Cancellation token</param>
            <returns>A PartitionQuorumLossProgress object, containing TestCommandProgressState and PartitionQuorumLossResult.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetPartitionQuorumLossProgressAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the progress of a test command started using StartPartitionQuorumLossAsync().
            </summary>
            <param name="operationId">The operationId passed in when the test command was starting using StartPartitionQuorumLossAsync().</param>
            <param name="timeout">Timeout.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A PartitionQuorumLossProgress object, containing TestCommandProgressState and PartitionQuorumLossResult.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetPartitionRestartProgressAsync(System.Guid)">
            <summary>
            Gets the progress of a test command started using StartPartitionRestartAsync().
            </summary>
            <param name="operationId">The operationId passed in when the test command was starting using StartPartitionRestartAsync().</param>            
            <returns>A PartitionRestartProgress object, containing TestCommandProgressState and PartitionRestartResult.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetPartitionRestartProgressAsync(System.Guid,System.TimeSpan)">
            <summary>
            Gets the progress of a test command started using StartPartitionRestartAsync().
            </summary>
            <param name="operationId">The operationId passed in when the test command was starting using StartPartitionRestartAsync().</param>
            <param name="timeout">Timeout.</param>            
            <returns>A PartitionRestartProgress object, containing TestCommandProgressState and PartitionRestartResult.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetPartitionRestartProgressAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the progress of a test command started using StartPartitionRestartAsync().
            </summary>
            <param name="operationId">The operationId passed in when the test command was starting using StartPartitionRestartAsync().</param>            
            <param name="cancellationToken">Cancellation token</param>
            <returns>A PartitionRestartProgress object, containing TestCommandProgressState and PartitionRestartResult.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetPartitionRestartProgressAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the progress of a test command started using StartPartitionRestartAsync().
            </summary>
            <param name="operationId">The operationId passed in when the test command was starting using StartPartitionRestartAsync().</param>
            <param name="timeout">Timeout.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A PartitionRestartProgress object, containing TestCommandProgressState and PartitionRestartResult.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the status of test commands.
            </summary>
            <param name="operationTimeout">A timeout for the API call.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A TestCommandStatusList, which is an IList of TestCommandStatus objects</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the status of test commands.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A TestCommandStatusList, which is an IList of TestCommandStatus objects</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.TimeSpan)">
            <summary>
            Gets the status of test commands.
            </summary>
            <param name="operationTimeout">A timeout for the API call.</param>
            <returns>A TestCommandStatusList, which is an IList of TestCommandStatus objects</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.Fabric.Query.TestCommandStateFilter,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the status of test commands.
            </summary>
            <param name="stateFilter">This parameter can be used to filter by TestCommandState</param>
            <param name="operationTimeout">A timeout for the API call.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A TestCommandStatusList, which is an IList of TestCommandStatus objects</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.Fabric.Query.TestCommandTypeFilter,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the status of test commands.
            </summary>            
            <param name="typeFilter">This parameter can be used to filter by TestCommandType</param>
            <param name="operationTimeout">A timeout for the API call.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A TestCommandStatusList, which is an IList of TestCommandStatus objects</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.Fabric.Query.TestCommandStateFilter,System.Fabric.Query.TestCommandTypeFilter,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets the status of test commands.
            </summary>
            <param name="stateFilter">This parameter can be used to filter by TestCommandState</param>
            <param name="typeFilter">This parameter can be used to filter by TestCommandType</param>
            <param name="operationTimeout">A timeout for the API call.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A TestCommandStatusList, which is an IList of TestCommandStatus objects</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.CancelTestCommandAsync(System.Guid,System.Boolean)">
            <summary>
            Cancels a test command.
            </summary>
            <param name="operationId">Indicates the operationId of the test command to cancel.</param>
            <param name="force">Indicates whether to gracefully rollback and clean up the test command.  See Remarks.</param>
            <returns>A Task.</returns>
            <remarks>If force is false, then the specified test command will be gracefully rolled back.  If force is true, the command will not be gracefully rolled back, and some state
            may be left behind.  Specifying force as true should be used with care.  Calling CancelTestCommandAsync with force set to true is not allowed until CancelTestCommandAsync has
            been called on on the same test command with force set to false first, or unless the test command is already rolling back.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.CancelTestCommandAsync(System.Guid,System.Boolean,System.TimeSpan)">
            <summary>
            Cancels a test command.
            </summary>
            <param name="operationId">Indicates the operationId of the test command to cancel.</param>
            <param name="force">Indicates whether to gracefully rollback and clean up the test command.  See Remarks.</param>
            <param name="timeout">The timeout to use for the API call.</param>
            <returns>A Task.</returns>
            <remarks>If force is false, then the specified test command will be gracefully rolled back.  If force is true, the command will not be gracefully rolled back, and some state
            may be left behind.  Specifying force as true should be used with care.  Calling CancelTestCommandAsync with force set to true is not allowed until CancelTestCommandAsync has
            been called on on the same test command with force set to false first.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.CancelTestCommandAsync(System.Guid,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Cancels a test command.
            </summary>
            <param name="operationId">Indicates the operationId of the test command to cancel.</param>
            <param name="force">Indicates whether to gracefully rollback and clean up the test command.  See Remarks.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A Task.</returns>
            <remarks>If force is false, then the specified test command will be gracefully rolled back.  If force is true, the command will not be gracefully rolled back, and some state
            may be left behind.  Specifying force as true should be used with care.  Calling CancelTestCommandAsync with force set to true is not allowed until CancelTestCommandAsync has
            been called on on the same test command with force set to false first.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.CancelTestCommandAsync(System.Guid,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Cancels a test command.
            </summary>
            <param name="operationId">Indicates the operationId of the test command to cancel.</param>
            <param name="force">Indicates whether to gracefully rollback and clean up the test command.  See Remarks.</param>
            <param name="timeout">The timeout to use for the API call.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>A Task.</returns>
            <remarks>If force is false, then the specified test command will be gracefully rolled back.  If force is true, the command will not be gracefully rolled back, and some state
            may be left behind.  Specifying force as true should be used with care.  Calling CancelTestCommandAsync with force set to true is not allowed until CancelTestCommandAsync has
            been called on on the same test command with force set to false first.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.CleanTestStateAsync">
            <summary>
            Cleans up all the test state in the cluster.
            </summary>
            <remarks>
            Cleans up all the test state in the cluster which has been set for fault operations like StopNode, InvokeDataLoss, RestartPartition and InvokeQuorumLoss
            This API should be called if any of these operations fail or if the test driver process dies or an operation is cancelled while in flight to ensure that
            the cluster is back into the normal state. Normally all the fault operations clean up their state at the end of the execution of the API so CleanTestState only
            needs to be called if the API operation is interrupted.
            </remarks>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <returns>Task</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.CleanTestStateAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Cleans up all the test state in the cluster.
            </summary>
            <remarks>
            Cleans up all the test state in the cluster which has been set for fault operations like StopNode, InvokeDataLoss, RestartPartition and InvokeQuorumLoss
            This API should be called if any of these operations fail or if the test driver process dies or an operation is cancelled while in flight to ensure that
            the cluster is back into the normal state. Normally all the fault operations clean up their state at the end of the execution of the API so CleanTestState only
            needs to be called if the API operation is interrupted .
            </remarks>
            <param name="operationTimeout">The overall timeout for the operation.</param>
            <param name="token">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <returns>Task</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.ValidateApplicationAsync(System.Uri,System.TimeSpan)">
            <summary>
            This API will validate the availability and health of all services in the specified application.
            </summary>
            <param name="applicationName">Name of the application whose services need to be validated.</param>
            <param name="maximumStabilizationTimeout">Max amount of time to wait for the services to stabilize else fail the operation.</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricValidationException">If any service does not stabilize within the specified timeout.</exception>
            <returns>Task</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.ValidateApplicationAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            This API will validate the availability and health of all services in the specified application.
            </summary>
            <param name="applicationName">Name of the application whose services need to be validated.</param>
            <param name="maximumStabilizationTimeout">Max amount of time to wait for the services to stabilize else fail the operation.</param>
            <param name="token">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricValidationException">If any service does not stabilize within the specified timeout.</exception>
            <returns>Task</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.ValidateApplicationAsync(System.Uri,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            This API will validate the availability and health of all services in the specified application.
            </summary>
            <param name="applicationName">Name of the application whose services need to be validated.</param>
            <param name="maximumStabilizationTimeout">Max amount of time to wait for the services to stabilize else fail the operation.</param>
            <param name="operationTimeout">Amount of time to wait for an operation to complete else fail the operation.</param>
            <param name="token">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricValidationException">If any service does not stabilize within the specified timeout.</exception>
            <returns>Task</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.ValidateServiceAsync(System.Uri,System.TimeSpan)">
            <summary>
            This API will validate the availability and health of the specified service.
            </summary>
            <param name="serviceName">Name of the service that needs to be validated.</param>
            <param name="maximumStabilizationTimeout">Max amount of time to wait for the service to stabilize else fail the operation.</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricValidationException">If any service does not stabilize within the specified timeout.</exception>
            <returns>Task</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.ValidateServiceAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            This API will validate the availability and health of the specified service.
            </summary>
            <param name="serviceName">Name of the service that needs to be validated.</param>
            <param name="maximumStabilizationTimeout">Max amount of time to wait for the service to stabilize else fail the operation.</param>
            <param name="token">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricValidationException">If any service does not stabilize within the specified timeout.</exception>
            <returns>Task</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.TestManagementClient.ValidateServiceAsync(System.Uri,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            This API will validate the availability and health of the specified service.
            </summary>
            <param name="serviceName">Name of the service that needs to be validated.</param>
            <param name="maximumStabilizationTimeout">Max amount of time to wait for the service to stabilize else fail the operation.</param>
            <param name="operationTimeout">Amount of time to wait for an operation to complete else fail the operation.</param>
            <param name="token">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricValidationException">If any service does not stabilize within the specified timeout.</exception>
            <returns>Task</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode,System.Threading.CancellationToken)">
            <summary>
            Restarts a cluster node.
            </summary>
            <param name="nodeName">The node name of the node to restart.</param>
            <param name="nodeInstance">The node instance ID of the node to restart.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.</param>
            <param name="completionMode">If set to Verify, the system will check that the node restarted, and the API will not return until it has and NodeStatus is Up.  If set to DoNotVerify, the API returns once the node restart has been initiated.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task with information representing the target node.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.  If the ErrorCode is NodeNotFound, nodeName is invalid.  If the ErrorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.</exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode)">
            <summary>
            Restarts a cluster node.
            </summary>
            <param name="nodeName">The node name of the node to restart.</param>
            <param name="nodeInstance">The node instance id of the node to restart.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.</param>
            <param name="completionMode">If set to Verify, the system will check that the node restarted, and the API will not return until it has and NodeStatus is Up.  If set to DoNotVerify, the API returns once the node restart has been initiated.</param>
            <returns>A task with information representing the target node.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.
              If the ErrorCode is NodeNotFound, nodeName or nodeInstance is invalid.
              If the ErrorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.String,System.Numerics.BigInteger,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Restarts a cluster node.
            </summary>
            <param name="nodeName">The node name of the node to restart.</param>
            <param name="nodeInstance">The node instance ID of the node to restart.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task with information representing the target node.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.  
              If the ErrorCode is NodeNotFound, nodeName is invalid.  
              If the ErrorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.String,System.Numerics.BigInteger,System.Boolean,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Restarts a cluster node.
            </summary>
            <param name="nodeName">The node name of the node to restart.</param>
            <param name="nodeInstance">The node instance ID of the node to restart.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.</param>
            <param name="completionMode">If set to Verify, the system will check that the node restarted, and the API will not return until it has and NodeStatus is Up.  If set to DoNotVerify, the API returns once the node restart has been initiated.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task with information representing the target node.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.  
              If the ErrorCode is NodeNotFound, nodeName is invalid.  
              If the ErrorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Threading.CancellationToken)">
            <summary>
            Restarts a cluster node.
            </summary>
            <param name="replicaSelector">This parameter is used to choose a specific replica.  This replica's corresponding node will be restarted.</param>
            <param name="completionMode">If set to Verify, the system will check that the node restarted, and the API will not return until it has and NodeStatus is Up.  If set to DoNotVerify, the API returns once the node restart has been initiated.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task with information representing the target node, and the replica selected.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.
              If the ErrorCode is InvalidArgument, nodeName is invalid.
              If the errorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.
              If the ErrorCode is ReplicaDoesNotExist, the selected replica was not found.
              If the ErrorCode is PartitionNotFound, the specified partition does not exist.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode)">
            <summary>
            Restarts a cluster node.
            </summary>
            <param name="replicaSelector">This parameter is used to choose a specific replica.  This replica's corresponding node will be restarted.</param>
            <param name="completionMode">If set to Verify, the system will check that the node restarted, and the API will not return until it has and NodeStatus is Up.  If set to DoNotVerify, the API returns once the node restart has been initiated.</param>
            <returns>A task with information representing the target node, and the replica selected.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.
              If the ErrorCode is InvalidArgument, nodeName is invalid.
              If the ErrorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.
              If the ErrorCode is ReplicaDoesNotExist, the selected replica was not found.
              If the ErrorCode is PartitionNotFound, the specified partition does not exist.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Restarts a cluster node.
            </summary>
            <param name="replicaSelector">This parameter is used to choose a specific replica.  This replica's corresponding node will be restarted.</param>
            <param name="completionMode">If set to Verify, the system will check that the node restarted, and the API will not return until it has and NodeStatus is Up.  If set to DoNotVerify, the API returns once the node restart has been initiated.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task with information representing the target node, and the replica selected.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.
              If the ErrorCode is InvalidArgument, nodeName is invalid.
              If the errorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.
              If the ErrorCode is ReplicaDoesNotExist, the selected replica was not found.
              If the ErrorCode is PartitionNotFound, the specified partition does not exist.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.Fabric.ReplicaSelector,System.Boolean,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Restarts a cluster node.
            </summary>
            <param name="replicaSelector">This parameter is used to choose a specific replica.  This replica's corresponding node will be restarted.</param>
            <param name="completionMode">If set to Verify, the system will check that the node restarted, and the API will not return until it has and NodeStatus is Up.  If set to DoNotVerify, the API returns once the node restart has been initiated.</param>
            <param name="createFabricDump"> If set to true, the system will create the process dump for Fabric.exe on this node.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task with information representing the target node, and the replica selected.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.
              If the ErrorCode is InvalidArgument, nodeName is invalid.
              If the errorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.
              If the ErrorCode is ReplicaDoesNotExist, the selected replica was not found.
              If the ErrorCode is PartitionNotFound, the specified partition does not exist.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>A cluster node is a process, not an virtual or physical machine.If the createFabricDump parameter is set , on restart the process is crashed and the crash dump is placed in the Crash Dumps folder which the DCA can be configured to upload.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode)">
            <summary>
            Starts a cluster node.
            </summary>
            <param name="nodeName">The node name of the node to start.</param>
            <param name="nodeInstance">The node instance ID of the node, before it was stopped.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.</param>
            <param name="completionMode">If set to Verify, the system will check that the node started, and the API will not return until it has.  If set to DoNotVerify, the API returns once the node start has been initiated.</param>
            <returns>A task with information representing the target node.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.  
              If the ErrorCode is InvalidArgument, nodeName or nodeInstance is invalid.  
              If the ErrorCode is InstanceIdMismatch, the nodeInstance provided does not match the instance of the node that was stopped.  
              If the ErrorCode is NodeHasNotStoppedYet, there is a currently pending stop operation on this node.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode,System.Threading.CancellationToken)">
            <summary>
            Starts a cluster node.
            </summary>
            <param name="nodeName">The node name of the node to start.</param>
            <param name="nodeInstance">The node instance ID of the node, before it was stopped.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.</param>
            <param name="completionMode">If set to Verify, the system will check that the node started, and the API will not return until it has.  If set to DoNotVerify, the API returns once the node start has been initiated.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task with information representing the target node.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.  
              If the ErrorCode is InvalidArgument, nodeName or nodeInstance is invalid.  
              If the errorCode is InstanceIdMismatch, the nodeInstance provided does not match the instance of the node that was stopped.  
              If the ErrorCode is NodeHasNotStoppedYet, there is a currently pending stop operation on this node.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync(System.String,System.Numerics.BigInteger,System.String,System.Int32,System.Fabric.CompletionMode)">
            <summary>
            Starts a cluster node.
            </summary>
            <param name="nodeName">The node name of the node to start.</param>
            <param name="nodeInstance">The node instance ID of the node, before it was stopped.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.</param>
            <param name="ipAddressOrFQDN">The IP address or fully-qualified domain name (FQDN) of the target node.  If this parameter is specified, 'ClusterConnectionPort" also must be specified.  If neither is specified, the system internally determines these.</param>
            <param name="clusterConnectionPort">The cluster connection port of the target node.  If this parameter is specified, 'ipAddressOrFQDN' also must be specified.  If neither is specified, the system internally determines these.</param>
            <param name="completionMode">If set to Verify, the system will check that the node started, and the API will not return until it has.  If set to DoNotVerify, the API returns once the node start has been initiated.</param>
            <returns>A task with information representing the target node.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.  
              If the ErrorCode is InvalidArgument, nodeName or nodeInstance is invalid.  
              If the errorCode is InstanceIdMismatch, the nodeInstance provided does not match the instance of the node that was stopped.  
              If the ErrorCode is NodeHasNotStoppedYet, there is a currently pending stop operation on this node.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync(System.String,System.Numerics.BigInteger,System.String,System.Int32,System.Fabric.CompletionMode,System.Threading.CancellationToken)">
            <summary>
            Starts a cluster node.
            </summary>
            <param name="nodeName">The node name of the node to start.</param>
            <param name="nodeInstance">The node instance ID of the node, before it was stopped.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.</param>
            <param name="ipAddressOrFQDN">The IP address or fully-qualified domain name (FQDN) of the target node.  If this parameter is specified, <paramref name="clusterConnectionPort"/> also must be specified.  If neither is specified, the system internally determines these.</param>
            <param name="clusterConnectionPort">The cluster connection port of the target node.  If this parameter is specified, <paramref name="ipAddressOrFQDN"/> also must be specified.  If neither is specified, the system internally determines these.</param>
            <param name="completionMode">If set to Verify, the system will check that the node started, and the API will not return until it has.  If set to DoNotVerify, the API returns once the node start has been initiated.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task with information representing the target node.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.  
              If the ErrorCode is InvalidArgument, nodeName or nodeInstance is invalid.  
              If the errorCode is InstanceIdMismatch, the nodeInstance provided does not match the instance of the node that was stopped.  
              If the ErrorCode is NodeHasNotStoppedYet, there is a currently pending stop operation on this node.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync(System.String,System.Numerics.BigInteger,System.String,System.Int32,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Starts a cluster node.
            </summary>
            <param name="nodeName">The node name of the node to start.</param>
            <param name="nodeInstance">The node instance ID of the node, before it was stopped.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.</param>
            <param name="ipAddressOrFQDN">The IP address or fully-qualified domain name (FQDN) of the target node.  If this parameter is specified, <paramref name="clusterConnectionPort"/> also must be specified.  If neither is specified, the system internally determines these.</param>
            <param name="clusterConnectionPort">The cluster connection port of the target node.  If this parameter is specified, <paramref name="ipAddressOrFQDN"/> also must be specified.  If neither is specified, the system internally determines these.</param>
            <param name="completionMode">If set to Verify, the system will check that the node started, and the API will not return until it has.  If set to DoNotVerify, the API returns once the node start has been initiated.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellationToken</param>
            <returns>A task with information representing the target node.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.  
              If the ErrorCode is InvalidArgument, nodeName or nodeInstance is invalid.  
              If the errorCode is InstanceIdMismatch, the nodeInstance provided does not match the instance of the node that was stopped.  
              If the ErrorCode is NodeHasNotStoppedYet, there is a currently pending stop operation on this node.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.StopNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode)">
            <summary>
            Stops a cluster node.
            </summary>
            <param name="nodeName">The node name of the node to stop.</param>
            <param name="nodeInstance">The node instance ID of the node to stop.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.</param>
            <param name="completionMode">If set to Verify, the system will check that the node stopped, and the API will not return until it has.  If set to DoNotVerify, the API returns once the node stop has been initiated.</param>
            <returns>A task with information representing the target node.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.  
              If the ErrorCode is InvalidArgument, nodeName is invalid.  
              If the ErrorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.StopNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode,System.Threading.CancellationToken)">
            <summary>
            Stops a cluster node.
            </summary>
            <param name="nodeName">The node name of the node to stop.</param>
            <param name="nodeInstance">The node instance ID of the node to stop.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.</param>
            <param name="completionMode">If set to Verify, the system will check that the node stopped, and the API will not return until it has.  If set to DoNotVerify, the API returns once the node stop has been initiated.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task with information representing the target node.</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.  
              If the ErrorCode is InvalidArgument, nodeName is invalid.  
              If the ErrorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.StopNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Stops a cluster node.
            </summary>
            <param name="nodeName">The node name of the node to stop.</param>
            <param name="nodeInstance">The node instance ID of the node to stop.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.</param>
            <param name="completionMode">If set to Verify, the system will check that the node stopped, and the API will not return until it has.  If set to DoNotVerify, the API returns once the node stop has been initiated.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellation token.</param>
            <returns>A task with information representing the target node</returns>
            <exception cref="T:System.Fabric.FabricException">The <see cref="P:System.Fabric.FabricException.ErrorCode"/> property will indicate the reason.  
              If the ErrorCode is InvalidArgument, nodeName is invalid.  
              If the ErrorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.
            </exception>
            <exception cref="T:System.TimeoutException">The operation timed out.</exception>
            <exception cref="T:System.ArgumentNullException">An argument with a value of null was passed in.</exception>
            <remarks>A cluster node is a process, not an virtual or physical machine.</remarks>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.Uri,System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Threading.CancellationToken)">
            <summary>
            This API call restarts the code package which hosts the replica specified by the <see cref="T:System.Fabric.ReplicaSelector"/> and 
            belongs to the specified application name.
            </summary>
            <remarks>
            The <see cref="T:System.Fabric.CompletionMode"/> options are
            DoNotVerify - Return after triggering the restart of the code package
            Verify - Return after the restart completes i.e. the code package has ome back up again.
            </remarks>
            <param name="applicationName">The name of the application to which the code package belong.s</param>
            <param name="replicaSelector">The <see cref="T:System.Fabric.ReplicaSelector"/> which identifies the replica whose host code package needs to be restarted.</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the code package completes or not.</param>
            <param name="token">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist
            FabricErrorCode.CodePackageNotFound - If the selected code package was not found.</exception>
            <exception cref="T:System.InvalidOperationException">The code package was not in a valid running state.</exception>
            <returns>RestartDeployedCodePackageResult which gives information about the actual code package restarted and replica selected.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.Uri,System.Fabric.ReplicaSelector,System.Fabric.CompletionMode)">
            <summary>
            This API call restarts the code package which hosts the replica specified by the <see cref="T:System.Fabric.ReplicaSelector"/> and 
            belongs to the specified application name.
            </summary>
            <remarks>
            The <see cref="T:System.Fabric.CompletionMode"/> options are
            DoNotVerify - Return after triggering the restart of the code package
            Verify - Return after the restart completes i.e. the code package has ome back up again.
            </remarks>
            <param name="applicationName">The name of the application to which the code package belongs</param>
            <param name="replicaSelector">The <see cref="T:System.Fabric.ReplicaSelector"/> which identifies the replica whose host code package needs to be restarted.</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the code package completes or not.</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist
            FabricErrorCode.CodePackageNotFound - If the selected code package was not found</exception>
            <exception cref="T:System.InvalidOperationException">The code package was not in a valid running state.</exception>
            <returns>RestartDeployedCodePackageResult which gives information about the actual code package restarted and replica selected.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.Uri,System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            This API call restarts the code package which hosts the replica specified by the <see cref="T:System.Fabric.ReplicaSelector"/> and 
            belongs to the specified application name.
            </summary>
            <remarks>
            The <see cref="T:System.Fabric.CompletionMode"/> options are
            DoNotVerify - Return after triggering the restart of the code package
            Verify - Return after the restart completes i.e. the code package has ome back up again.
            </remarks>
            <param name="applicationName">The name of the application to which the code package belongs</param>
            <param name="replicaSelector">The <see cref="T:System.Fabric.ReplicaSelector"/> which identifies the replica whose host code package needs to be restarted.</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the code package completes or not.n</param>
            <param name="operationTimeout">The overall timeout for the operation including the timeout to wait for code package to restart if <see cref="T:System.Fabric.CompletionMode"/> is Verify</param>
            <param name="token">Cancellation token.</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist
            FabricErrorCode.CodePackageNotFound - If the selected code package was not found</exception>
            <exception cref="T:System.InvalidOperationException">The code package was not in a valid running state.</exception>
            <returns>RestartDeployedCodePackageResult which gives information about the actual code package restarted and replica selected.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.String,System.Uri,System.String,System.String,System.Int64,System.Fabric.CompletionMode,System.Threading.CancellationToken)">
            <summary>
            This API call restarts the code package as specified by the input parameters.
            </summary>
            <remarks>
            The <see cref="T:System.Fabric.CompletionMode"/> options are
            DoNotVerify - Return after triggering the restart of the code package
            Verify - Return after the restart completes i.e. the code package has ome back up again.
            </remarks>
            <param name="nodeName">The node on which the code package is hosted</param>
            <param name="applicationName">The name of the application to which the code package belongs</param>
            <param name="serviceManifestName">The name of the service manifest where the code package is defined</param>
            <param name="codePackageName">The name of the code package to be restarted</param>
            <param name="codePackageInstanceId">The code package instance id for the running code package which if specified and does not match then the restart is not processed
            If the value is 0 then the comparison is skipped</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the code package completes or not.</param>
            <param name="token">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.CodePackageNotFound - If the selected code package was not found
            FabricErrorCode.InstanceIdMismatch - If the specified instance id did not match</exception>
            <exception cref="T:System.InvalidOperationException">The code package was not in a valid running state.</exception>
            <returns>RestartDeployedCodePackageResult which gives information about the actual code package restarted. SelectedReplica is None in this overload.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.String,System.Uri,System.String,System.String,System.Int64,System.Fabric.CompletionMode)">
            <summary>
            This API call restarts the code package as specified by the input parameters.
            </summary>
            <remarks>
            The <see cref="T:System.Fabric.CompletionMode"/> options are
            DoNotVerify - Return after triggering the restart of the code package
            Verify - Return after the restart completes i.e. the code package has ome back up again.
            </remarks>
            <param name="nodeName">The node on which the code package is hosted.</param>
            <param name="applicationName">The name of the application to which the code package belongs.</param>
            <param name="serviceManifestName">The name of the service manifest where the code package is defined.</param>
            <param name="codePackageName">The name of the code package to be restarted</param>
            <param name="codePackageInstanceId">The code package instance id for the running code package which if specified and does not match then the restart is not processed
            If the value is 0 then the comparison is skipped.</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the code package completes or not.</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.CodePackageNotFound - If the selected code package was not found
            FabricErrorCode.InstanceIdMismatch - If the specified instance id did not match</exception>
            <exception cref="T:System.InvalidOperationException">The code package was not in a valid running state.</exception>
            <returns>RestartDeployedCodePackageResult which gives information about the actual code package restarted. SelectedReplica is None in this overload.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.String,System.Uri,System.String,System.String,System.Int64,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            This API call restarts the code package as specified by the input parameters.
            </summary>
            <remarks>
            The <see cref="T:System.Fabric.CompletionMode"/> options are
            DoNotVerify - Return after triggering the restart of the code package
            Verify - Return after the restart completes i.e. the code package has ome back up again.
            </remarks>
            <param name="nodeName">The node on which the code package is hosted.</param>
            <param name="applicationName">The name of the application to which the code package belongs.</param>
            <param name="serviceManifestName">The name of the service manifest where the code package is defined.</param>
            <param name="codePackageName">The name of the code package to be restarted</param>
            <param name="codePackageInstanceId">The code package instance id for the running code package which if specified and does not match then the restart is not processed
            If the value is 0 then the comparison is skipped.</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the code package completes or not.</param>
            <param name="operationTimeout">The overall timeout for the operation including the timeout to wait for code package to restart if <see cref="T:System.Fabric.CompletionMode"/> is Verify</param>
            <param name="token">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.CodePackageNotFound - If the selected code package was not found
            FabricErrorCode.InstanceIdMismatch - If the specified instance id did not match</exception>
            <exception cref="T:System.InvalidOperationException">The code package was not in a valid running state.</exception>
            <returns>RestartDeployedCodePackageResult which gives information about the actual code package restarted. SelectedReplica is None in this overload.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            This API will remove the replica (equivalent of ReportFault - Permanent) specified by the passed in <see cref="T:System.Fabric.ReplicaSelector"/>.
            </summary>
            <param name="replicaSelector">The <see cref="T:System.Fabric.ReplicaSelector"/> which indicates the replica to be removed.</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the remove of the replica is complete or not 
            DoNotVerify - Return after triggering the remove of the replica
            Verify - Return after the remove completes i.e. the replica is out of the FM view</param>
            <param name="forceRemove">Will forcefully remove the replica</param>
            <param name="token">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>RemoveReplicaResult which gives information about the actual selected replica.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Boolean)">
            <summary>
            This API will remove the replica (equivalent of ReportFault - Permanent) specified by the passed in <see cref="T:System.Fabric.ReplicaSelector"/>.
            </summary>
            <param name="replicaSelector">The <see cref="T:System.Fabric.ReplicaSelector"/> which indicates the replica to be removed.</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the remove of the replica is complete or not 
            DoNotVerify - Return after triggering the remove of the replica
            Verify - Return after the remove completes i.e. the replica is out of the FM vie.w</param>
            <param name="forceRemove">Will forcefully remove the replica</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>RemoveReplicaResult which gives information about the actual selected replica.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            This API will remove the replica (equivalent of ReportFault - Permanent) specified by the passed in <see cref="T:System.Fabric.ReplicaSelector"/>.
            </summary>
            <param name="replicaSelector">The <see cref="T:System.Fabric.ReplicaSelector"/> which indicates the replica to be removed.</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the remove of the replica is complete or not 
            DoNotVerify - Return after triggering the remove of the replica
            Verify - Return after the remove completes i.e. the replica is out of the FM view.</param>
            <param name="forceRemove">Will forcefully remove the replica.</param>
            <param name="operationTimeout">The overall timeout for the operation including the timeout to wait for replica to be removed if <see cref="T:System.Fabric.CompletionMode"/> is Verify</param>
            <param name="token">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>RemoveReplicaResult which gives information about the actual selected replica.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            This API will remove the replica (equivalent of ReportFault - Permanent) specified by the passed in <see cref="T:System.Fabric.ReplicaSelector"/>.
            </summary>
            <param name="nodeName">Node name where replica is to be moved <see cref="T:System.Fabric.ReplicaSelector"/> </param>
            <param name="partitionId">Partition Id where the replica needs to be removed </param>
            <param name="replicaId">Replica Id that needs to be removed </param>
            <param name="forceRemove">Will forcefully remove the replica</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the remove of the replica is complete or not 
            DoNotVerify - Return after triggering the remove of the replica
            Verify - Return after the remove completes i.e. the replica is out of the FM view.</param>
            <param name="token">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>RemoveReplicaResult which gives information about the actual selected replica.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode,System.Boolean)">
            <summary>
            This API will remove the replica (equivalent of ReportFault - Permanent) specified by the passed in <see cref="T:System.Fabric.ReplicaSelector"/>.
            </summary>
            <param name="nodeName">Node name where replica is to be moved <see cref="T:System.Fabric.ReplicaSelector"/> </param>
            <param name="partitionId">Partition Id where the replica needs to be removed </param>
            <param name="replicaId">Replica Id that needs to be removed </param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the replica is complete or not 
            DoNotVerify - Return after triggering the restart of the replica
            Verify - Return after the remove completes</param>
            <param name="forceRemove">Will forcefully remove the replica</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>RemoveReplicaResult which gives information about the actual selected replica.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode,System.Boolean,System.Double,System.Threading.CancellationToken)">
            <summary>
            This API will remove the replica (equivalent of ReportFault - Permanent) specified by the passed in <see cref="T:System.Fabric.ReplicaSelector"/>.
            </summary>
            <param name="nodeName">Node name where replica is to be moved <see cref="T:System.Fabric.ReplicaSelector"/> </param>
            <param name="partitionId">Partition Id where the replica needs to be removed </param>
            <param name="replicaId">Replica Id that needs to be removed </param>
            <param name="forceRemove">Will forcefully remove the replica.</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the replica is complete or not 
            DoNotVerify - Return after triggering the restart of the replica
            Verify - Return after the remove completes</param>
            <param name="operationTimeoutSec">The overall timeout in seconds for the operation including the timeout to wait for replica to be removed if <see cref="T:System.Fabric.CompletionMode"/> is Verify</param>
            <param name="token">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>RemoveReplicaResult which gives information about the actual selected replica.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Threading.CancellationToken)">
            <summary>
            This API will restart the replica (equivalent of ReportFault - Temporary) specified by the passed in ReplicaSelector.
            </summary>
            <param name="replicaSelector">The <see cref="T:System.Fabric.ReplicaSelector"/> which indicates the replica to be restarted. This API can only be called for persisted service replicas.</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the replica is complete or not 
            DoNotVerify - Return after triggering the restart of the replica
            Verify - Return after the remove completes</param>
            <param name="token">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>RestartReplicaResult which gives information about the actual selected replica.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode)">
            <summary>
            This API will restart the replica (equivalent of ReportFault - Temporary) specified by the passed in <see cref="T:System.Fabric.ReplicaSelector"/>.
            </summary>
            <param name="replicaSelector">The <see cref="T:System.Fabric.ReplicaSelector"/> which indicates the replica to be restarted. This API can only be called for persisted service replicas.</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the replica is complete or not 
            DoNotVerify - Return after triggering the restart of the replica
            Verify - Return after the remove completes</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>RestartReplicaResult which gives information about the actual selected replica.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            This API will restart the replica (equivalent of ReportFault - Temporary) specified by the passed in <see cref="T:System.Fabric.ReplicaSelector"/>.
            </summary>
            <param name="replicaSelector">The <see cref="T:System.Fabric.ReplicaSelector"/> which indicates the replica to be restarted. This API can only be called for persisted service replicas.</param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the replica is complete or not 
            DoNotVerify - Return after triggering the restart of the replica
            Verify - Return after the remove completes</param>
            <param name="operationTimeout">The overall timeout for the operation including the timeout to wait for replica to be restarted if <see cref="T:System.Fabric.CompletionMode"/> is Verify.</param>
            <param name="token">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist</exception>
            <returns>RestartReplicaResult which gives information about the actual selected replica.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode,System.Threading.CancellationToken)">
            <summary>
            This API will restart the replica (equivalent of ReportFault - Temporary) specified by the passed in ReplicaSelector.
            </summary>
            <param name="nodeName">Node name where replica needs to be restarted <see cref="T:System.Fabric.ReplicaSelector"/> </param>
            <param name="partitionId">Partition Id where the replica needs to be restarted </param>
            <param name="replicaId">Replica Id that needs to be restarted </param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the replica is complete or not 
            DoNotVerify - Return after triggering the restart of the replica
            Verify - Return after the remove completes</param>
            <param name="token">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>RestartReplicaResult which gives information about the actual selected replica.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode)">
            <summary>
            This API will restart the replica (equivalent of ReportFault - Temporary) specified by the passed in <see cref="T:System.Fabric.ReplicaSelector"/>.
            </summary>
            <param name="nodeName">Node name where replica needs to be restarted <see cref="T:System.Fabric.ReplicaSelector"/> </param>
            <param name="partitionId">Partition Id where the replica needs to be restarted </param>
            <param name="replicaId">Replica Id that needs to be restarted </param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the replica is complete or not 
            DoNotVerify - Return after triggering the restart of the replica
            Verify - Return after the remove completes</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.</exception>
            <returns>RestartReplicaResult which gives information about the actual selected replica.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode,System.Double,System.Threading.CancellationToken)">
            <summary>
            This API will restart the replica (equivalent of ReportFault - Temporary) specified by the passed in <see cref="T:System.Fabric.ReplicaSelector"/>.
            </summary>
            <param name="nodeName">Node name where replica needs to be restarted <see cref="T:System.Fabric.ReplicaSelector"/> </param>
            <param name="partitionId">Partition Id where the replica needs to be restarted </param>
            <param name="replicaId">Replica Id that needs to be restarted </param>
            <param name="completionMode">The <see cref="T:System.Fabric.CompletionMode"/> that specifies whether to wait until the restart of the replica is complete or not 
            DoNotVerify - Return after triggering the restart of the replica
            Verify - Return after the remove completes</param>
            <param name="operationTimeoutSec">The overall timeout in secondsfor the operation including the timeout to wait for replica to be restarted if <see cref="T:System.Fabric.CompletionMode"/> is Verify.</param>
            <param name="token">Cancellation token</param>
            <exception cref="T:System.TimeoutException">Action took more than its allocated time.</exception>
            <exception cref="T:System.ArgumentNullException">Any of the required arguments are null.</exception>
            <exception cref="T:System.Fabric.FabricException">These are the fabric failures
            FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found
            FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist</exception>
            <returns>RestartReplicaResult which gives information about the actual selected replica.</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector,System.Boolean)">
            <summary>
            Moves selected primary replica to new node in the cluster.
            </summary>
            <remarks>
            API uses the primary replica of the selected partition to move to new node location.
            This overload uses random node selected from current node list, where primary replica does
            not exist at the time of API call for moving primary replica.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="partitionSelector">Move primary will be called on this Selected Partition.</param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.NotReady - If Primary replica is not ready for movement
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move primary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector)">
            <summary>
            Moves selected primary replica to new node in the cluster.
            </summary>
            <remarks>
            API uses the primary replica of the selected partition to move to new node location.
            This overload uses random node selected from current node list, where primary replica does
            not exist at the time of API call for moving primary replica.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="partitionSelector">Move primary will be called on this Selected Partition.</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.NotReady - If Primary replica is not ready for movement
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move primary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Moves selected primary replica to new node in the cluster.
            </summary>
            <remarks>API uses the primary replica of the selected partition to move to new node location.
            This overload uses random node selected from current node list, where primary replica does
            not exist at the time of API call for moving primary replica.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="partitionSelector">Move primary will be called on this Selected Partition.</param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.NotReady - If Primary replica is not ready for movement
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move primary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector,System.Threading.CancellationToken)">
            <summary>
            Moves selected primary replica to new node in the cluster.
            </summary>
            <remarks>API uses the primary replica of the selected partition to move to new node location.
            This overload uses random node selected from current node list, where primary replica does
            not exist at the time of API call for moving primary replica.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="partitionSelector">Move primary will be called on this Selected Partition.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.NotReady - If Primary replica is not ready for movement
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move primary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Moves selected primary replica to new node in the cluster.
            </summary>
            <remarks>
            API uses the primary replica of the selected partition to move to new node location.
            This overload uses random node selected from current node list, where primary replica does
            not exist at the time of API call for moving primary replica.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.</remarks>
            <param name="partitionSelector">Move primary will be called on this Selected Partition. </param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.NotReady - If Primary replica is not ready for movement
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move primary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Moves selected primary replica to new node in the cluster.
            </summary>
            <remarks>
            API uses the primary replica of the selected partition to move to new node location.
            This overload uses random node selected from current node list, where primary replica does
            not exist at the time of API call for moving primary replica.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.</remarks>
            <param name="partitionSelector">Move primary will be called on this Selected Partition.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.NotReady - If Primary replica is not ready for movement
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move primary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean)">
             <summary>
             Moves selected primary replica to new node in the cluster.
             </summary>
             <remarks>
             API uses the primary replica of the selected partition to move to new node location specified by nodeName.
             This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
             </remarks>
             <param name="nodeName">Node name where primary replica to be moved</param>
             <param name="partitionSelector">Move primary will be called on this Selected Partition. </param>
             <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
             API uses the primary replica of the selected partition to move to new node location.
            
             <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
             <exception cref="T:System.InvalidOperationException">Invalid operation
             - If action called on stateless service.
             - If not enough nodes available for action
             </exception>
             <exception cref="T:System.Fabric.FabricException">
             FabricErrorCode.NotReady - If Primary replica is not ready for movement
             FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
             FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
             </exception>
             <returns>A task with move primary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector)">
            <summary>
            Moves selected primary replica to new node in the cluster.
            </summary>
            <remarks>
            API uses the primary replica of the selected partition to move to new node location specified by nodeName.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="nodeName">Node name where primary replica to be moved</param>
            <param name="partitionSelector">Move primary will be called on this Selected Partition. </param>
            API uses the primary replica of the selected partition to move to new node location.
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.NotReady - If Primary replica is not ready for movement
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move primary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)">
             <summary>
             Moves selected primary replica to new node in the cluster.
             </summary>
             <remarks>
             API uses the primary replica of the selected partition to move to new node location specified by nodeName.
             This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
             </remarks>
             <param name="nodeName">Node name where primary replica to be moved</param>
             <param name="partitionSelector">Move primary will be called on this Selected Partition. </param>
             <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
             API uses the primary replica of the selected partition to move to new node location.
            
             <param name="token">The cancellation token</param>
             <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
             <exception cref="T:System.InvalidOperationException">Invalid operation
             - If action called on stateless service.
             - If not enough nodes available for action
             </exception>
             <exception cref="T:System.Fabric.FabricException">
             FabricErrorCode.NotReady - If Primary replica is not ready for movement
             FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
             FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
             </exception>
             <returns>A task with move primary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector,System.Threading.CancellationToken)">
             <summary>
             Moves selected primary replica to new node in the cluster.
             </summary>
             <remarks>
             API uses the primary replica of the selected partition to move to new node location specified by nodeName.
             This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
             </remarks>
             <param name="nodeName">Node name where primary replica to be moved</param>
             <param name="partitionSelector">Move primary will be called on this Selected Partition. </param>
             API uses the primary replica of the selected partition to move to new node location.
            
             <param name="token">The cancellation token</param>
             <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
             <exception cref="T:System.InvalidOperationException">Invalid operation
             - If action called on stateless service.
             - If not enough nodes available for action
             </exception>
             <exception cref="T:System.Fabric.FabricException">
             FabricErrorCode.NotReady - If Primary replica is not ready for movement
             FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
             FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
             </exception>
             <returns>A task with move primary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Moves selected primary replica to new node in the cluster.
            </summary>
            <remarks>
            API uses the primary replica of the selected partition to move to new node location specified by nodeName.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="nodeName">Node name where primary replica to be moved</param>
            <param name="partitionSelector">Move primary will be called on this Selected Partition.
            API uses the primary replica of the selected partition to move to new node location.
            </param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.NotReady - If Primary replica is not ready for movement
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move primary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Moves selected primary replica to new node in the cluster.
            </summary>
            <remarks>
            API uses the primary replica of the selected partition to move to new node location specified by nodeName.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="nodeName">Node name where primary replica to be moved</param>
            <param name="partitionSelector">Move primary will be called on this Selected Partition.
            API uses the primary replica of the selected partition to move to new node location.
            </param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.NotReady - If Primary replica is not ready for movement
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move primary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector,System.Boolean)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected secondary replica inside partition selector structure
            specified by current secondary node. This API overload randomly selects current secondary
            node for random secondary replica of the selected partition and new secondary node for replica movement
            This selected replica will be moved to new node location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition. </param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If Current Secondary node is not a secondary replica
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected secondary replica inside partition selector structure
            specified by current secondary node. This API overload randomly selects current secondary
            node for random secondary replica of the selected partition and new secondary node for replica movement
            This selected replica will be moved to new node location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.
            </param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If Current Secondary node is not a secondary replica
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            This API overload randomly selects current secondary
            node for random secondary replica of the selected partition and new secondary node for replica movement
            This selected replica will be moved to new node location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If Current Secondary node is not a secondary replica
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector,System.Threading.CancellationToken)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            This API overload randomly selects current secondary
            node for random secondary replica of the selected partition and new secondary node for replica movement
            This selected replica will be moved to new node location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If Current Secondary node is not a secondary replica
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>API uses the selected secondary replica inside partition selector structure
            specified by currentNodeName. This API overload randomly selects new
            secondary node for replica movement
            This selected replica will be moved to new node location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="currentNodeName">node name where selected replica for move is currently present</param>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If Current Secondary node is not a secondary replica
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>API uses the selected secondary replica inside partition selector structure
            specified by currentNodeName. This API overload randomly selects new
            secondary node for replica movement
            This selected replica will be moved to new node location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="currentNodeName">node name where selected replica for move is currently present</param>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If Current Secondary node is not a secondary replica
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected secondary replica inside partition selector structure
            specified by currentNodeName. This API overload randomly selects new
            secondary node for replica movement
            This selected replica will be moved to new node location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="currentNodeName">node name where selected replica for move is currently present</param>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If Current Secondary node is not a secondary replica
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector,System.Threading.CancellationToken)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected secondary replica inside partition selector structure
            specified by currentNodeName. This API overload randomly selects new
            secondary node for replica movement
            This selected replica will be moved to new node location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="currentNodeName">node name where selected replica for move is currently present</param>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.
            </param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If Current Secondary node is not a secondary replica
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector,System.Boolean)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected secondary replica specified by currentNodeName and
            moves it to new node location specified by newNodeName.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="currentNodeName">node name where selected replica for move is currently present</param>
            <param name="newNodeName">node name where selected replica to be moved</param>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If Current Secondary node is not a secondary replica
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected secondary replica specified by currentNodeName and
            moves it to new node location specified by newNodeName.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="currentNodeName">node name where selected replica for move is currently present</param>
            <param name="newNodeName">node name where selected replica to be moved</param>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.
            </param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If Current Secondary node is not a secondary replica
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected secondary replica specified by currentNodeName and
            moves it to new node location specified by newNodeName.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="currentNodeName">node name where selected replica for move is currently present</param>
            <param name="newNodeName">node name where selected replica to be moved</param>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If Current Secondary node is not a secondary replica
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector,System.Threading.CancellationToken)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected secondary replica specified by currentNodeName and
            moves it to new node location specified by newNodeName.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="currentNodeName">node name where selected replica for move is currently present</param>
            <param name="newNodeName">node name where selected replica to be moved</param>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If Current Secondary node is not a secondary replica
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>API uses the selected secondary replica specified by currentNodeName.
            This selected replica will be moved to the randomly selected new node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="currentNodeName">node name where selected replica for move is currently present</param>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If Current Secondary node is not a secondary replica
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>API uses the selected secondary replica specified by currentNodeName.
            This selected replica will be moved to the randomly selected new node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="currentNodeName">node name where selected replica for move is currently present</param>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If Current Secondary node is not a secondary replica
            FabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the randomly selected secondary replica for specified partition selector.
            This API overload randomly selects new secondary node location for replica movement
            This selected replica will be moved to new node location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - Active secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If Current Secondary node is not a secondary replica
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the randomly selected secondary replica for specified partition selector.
            This API overload randomly selects new secondary node location for replica movement
            This selected replica will be moved to new node location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - Active secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If Current Secondary node is not a secondary replica
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected secondary replica inside partition selector structure
            specified by currentNodeName location. This selected replica will be moved to newNodeName location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="currentNodeName">node name where selected replica for move is currently present</param>
            <param name="newNodeName">node name where selected replica to be moved</param>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <param name="ignoreConstraints">Whether or not to ignore constraints when attempting to execute the move.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - Active secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If Current Secondary node is not a secondary replica
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Moves selected secondary replica from current node to new node in the cluster.
            </summary>
            <remarks>
            API uses the selected secondary replica inside partition selector structure
            specified by currentNodeName location. This selected replica will be moved to newNodeName location from current node location.
            This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
            </remarks>
            <param name="currentNodeName">node name where selected replica for move is currently present</param>
            <param name="newNodeName">node name where selected replica to be moved</param>
            <param name="partitionSelector">Move Secondary will be called on this Selected Partition.</param>
            <param name="operationTimeout">The timeout for this API call.</param>
            <param name="token">The cancellation token</param>
            <exception cref="T:System.TimeoutException">Retry is exhausted.</exception>
            <exception cref="T:System.InvalidOperationException">Invalid operation
            - If action called on stateless service.
            - If no active secondary replica exists
            - If not enough nodes available for action
            </exception>
            <exception cref="T:System.Fabric.FabricException">
            FabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node
            FabricErrorCode.AlreadySecondaryReplica - Active secondary replica for selected partition already exist on new node
            FabricErrorCode.InvalidReplicaStateForReplicaOperation - If Current Secondary node is not a secondary replica
            </exception>
            <returns>A task with move secondary result</returns>
        </member>
        <member name="T:System.Fabric.FabricClientSettings">
            <summary>
            <para>Represents the configuration settings for the <see cref="T:System.Fabric.FabricClient"/> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricClientSettings.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricClientSettings"/> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.FabricClientSettings.ClientFriendlyName">
            <summary>
            <para>Gets or sets the client friendly name that will appear in Service Fabric traces for debugging.</para>
            </summary>
            <value>
            <para>The client friendly name that will appear in Service Fabric traces for debugging.</para>
            </value>
            <remarks>
            <para>The default value is null and the client friendly name will automatically be generated as a GUID internally.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.FabricClientSettings.PartitionLocationCacheLimit">
            <summary>
            <para>Gets the maximum number of cached location entries on the client.</para>
            </summary>
            <value>
            <para>The maximum number of cached location entries on the client.</para>
            </value>
            <remarks>
            <para>The default value of the <see cref="P:System.Fabric.FabricClientSettings.PartitionLocationCacheLimit"/> property is 1000.</para>
            <para>The <see cref="P:System.Fabric.FabricClientSettings.PartitionLocationCacheLimit"/> property is not updatable. Setting this property will throw a <see cref="T:System.ArgumentException"/> exception.</para>
            <para>When the cache limit is reached the oldest entries are discarded first. The default value is 100.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.FabricClientSettings.PartitionLocationCacheBucketCount">
            <summary>
            <para>Gets or sets the bucket count used by the client’s service resolution cache.</para>
            </summary>
            <value>
            <para>The bucket count used by the client’s service resolution cache.</para>
            </value>
            <remarks>
            <para>The default value is 1024.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.FabricClientSettings.ServiceChangePollInterval">
            <summary>
            <para>Gets or sets the timeout on service change notification requests from the client to the gateway for all registered callbacks.</para>
            </summary>
            <value>
            <para>The timeout on service change notification requests from the client to the gateway for all registered callbacks.</para>
            </value>
            <remarks>
            <para>The default value of the <see cref="P:System.Fabric.FabricClientSettings.ServiceChangePollInterval"/> property is 120 seconds.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.FabricClientSettings.ConnectionInitializationTimeout">
            <summary>
            <para>Gets or sets the timeout after which, if the current gateway address does not respond with a valid connection, another different address is randomly selected from the gateway addresses collection.</para>
            </summary>
            <value>
            <para>The timeout after the current gateway address does not respond with a valid connection.</para>
            </value>
            <remarks>
            <para>The default value of the <see cref="P:System.Fabric.FabricClientSettings.ConnectionInitializationTimeout"/> property is 2 seconds.</para>
            <para>The <see cref="P:System.Fabric.FabricClientSettings.ConnectionInitializationTimeout"/> property must be less than the value of the <see cref="P:System.Fabric.FabricClientSettings.ServiceChangePollInterval"/> property.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.FabricClientSettings.KeepAliveInterval">
            <summary>
            <para>Gets the interval at which the <see cref="T:System.Fabric.FabricClient"/> will ping the connected endpoint.</para>
            </summary>
            <value>
            <para>The interval at which the <see cref="T:System.Fabric.FabricClient"/> will ping the connected endpoint.</para>
            </value>
            <remarks>
            <para>The default value of the <see cref="P:System.Fabric.FabricClientSettings.KeepAliveInterval"/> property is 0 seconds.</para>
            <para>This property can't be updated after the <see cref="T:System.Fabric.FabricClient"/> is opened.
            Setting this property will throw a <see cref="T:System.ArgumentException"/> exception.</para>
            <para>
                <see cref="T:System.Fabric.FabricClient"/> will continue pinging as long as it has pending operations.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.FabricClientSettings.HealthOperationTimeout">
            <summary>
            <para>Gets or sets the timeout on health operation requests from the client to the gateway.</para>
            </summary>
            <value>
            <para>The timeout on health operation requests from the client to the gateway.</para>
            </value>
            <remarks>
            <para>The default value of the <see cref="P:System.Fabric.FabricClientSettings.HealthOperationTimeout"/> property is 120 seconds.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.FabricClientSettings.HealthReportSendInterval">
            <summary>
            <para>Gets or sets the interval at which health reports are sent to Health Manager.</para>
            </summary>
            <value>
            <para>The interval at which health reports are sent to Health Manager.</para>
            </value>
            <remarks>
            <para>The default value of the <see cref="P:System.Fabric.FabricClientSettings.HealthReportSendInterval"/> property is 30 seconds.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.FabricClientSettings.HealthReportRetrySendInterval">
            <summary>
            <para>Gets or sets the retry interval at which health reports that have not yet been acknowledged by the Health Manager are resent.</para>
            </summary>
            <value>
            <para>The retry interval at which health reports that have not yet been acknowledged by the Health Manager are resent.</para>
            </value>
            <remarks>
            <para>The default value of the <see cref="P:System.Fabric.FabricClientSettings.HealthReportRetrySendInterval"/> property is 30 seconds.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.FabricClientSettings.NotificationGatewayConnectionTimeout">
            <summary>
            <para>Gets or sets the timeout for running a re-connection protocol if the client has registered for service notifications. The default value is 30 seconds. </para>
            </summary>
            <value>
            <para>The timeout for running a re-connection protocol if the client has registered for service notifications.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricClientSettings.NotificationCacheUpdateTimeout">
            <summary>
            <para>Gets or sets the timeout for updating the local cache in response to service notifications. The default value is 30 seconds.</para>
            </summary>
            <value>
            <para>The timeout for updating the local cache in response to service notifications.</para>
            </value>
        </member>
        <member name="T:System.Fabric.FabricErrorCode">
            <summary>
            <para>Defines error codes that can be associated with a <see cref="T:System.Fabric.FabricException"/>.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.Unknown">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that there was an unknown error.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidPartitionKey">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the partition key is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.UserRoleClientCertificateNotConfigured">
            <summary>
            <para>
            Indicates that certificate for user role (<see cref="F:System.Fabric.FabricClientRole.User"/>)
            <see cref="T:System.Fabric.FabricClient"/> is not setup.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.NameAlreadyExists">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the Service Fabric Name already exists.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ServiceAlreadyExists">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the service already exists.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ServiceGroupAlreadyExists">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the service group already exists.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ApplicationTypeProvisionInProgress">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the application type is currently being provisioned.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ApplicationTypeAlreadyExists">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the application type already exists.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ApplicationAlreadyExists">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the application already exists.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.NameNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the Service Fabric Name was not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.PropertyNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the property was not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.PropertyValueEmpty">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the value of the property was empty.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ServiceNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the service was not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ServiceGroupNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the service group was not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ApplicationTypeNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the application type was not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ApplicationTypeInUse">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the application type is in use.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ApplicationNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the application does not exist.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ServiceTypeNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the service type was not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ServiceManifestNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the service manifest was not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.NameNotEmpty">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the Service Fabric Name is not empty: 
            there are entities such as child Names, Service or Properties associated with it.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.NodeNotFound">
            <summary>
            <para>A   <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the node was not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.NodeIsUp">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the node is up when it is expected to be down.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.NotPrimary">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the replica is not the primary.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.NoWriteQuorum">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the service partition does not have write quorum.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ReconfigurationPending">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the reconfiguration is currently in pending state.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ReplicationQueueFull">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the replication queue is full.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ReplicationOperationTooLarge">
            <summary>
            <para>
                <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the replication operation is too large.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidAtomicGroup">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the atomic group is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ServiceOffline">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the service is offline.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.PartitionNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the partition was not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ServiceMetadataMismatch">
            <summary>
            <para>Two <see cref="T:System.Fabric.ResolvedServicePartition"/> objects cannot be compared using <see cref="M:System.Fabric.ResolvedServicePartition.CompareVersion(System.Fabric.ResolvedServicePartition)"/> 
            because they describe different replica sets.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ServiceAffinityChainNotSupported">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the service affinity chain is not supported.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.WriteConflict">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates there was a write conflict.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ApplicationUpgradeValidationError">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the application upgrade validation failed.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ServiceTypeMismatch">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that there is a mismatch in the service type.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ServiceTemplateNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the service template was not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ServiceTypeAlreadyRegistered">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the service type was already registered.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ServiceTypeNotRegistered">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the service type was not registered.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ApplicationUpgradeInProgress">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the application is currently being upgraded.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ApplicationUpdateInProgress">
            <summary>
            A FabricErrorCode that indicates the application is currently being updated.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.UpgradeDomainAlreadyCompleted">
            <summary>
            <para>
                <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the upgrade domain was already completed.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.FabricVersionNotFound">
            <summary>
            <para>The specified code or Cluster Manifest version cannot be unprovisioned or used as the target of an upgrade because it has not been provisioned.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.FabricVersionInUse">
            <summary>
            <para>The specified code or Cluster Manifest version cannot be unprovisioned because it is either being used by the cluster or is the target of a cluster upgrade.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.FabricVersionAlreadyExists">
            <summary>
            <para>The specified code or Cluster Manifest version has already been provisioned in the system.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.FabricAlreadyInTargetVersion">
            <summary>
            <para>The Service Fabric cluster is already in the target code or Cluster Manifest version specified by the upgrade request.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.FabricNotUpgrading">
            <summary>
            <para>The Service Fabric cluster is not currently being upgrade and the request is only valid during upgrade.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.FabricUpgradeInProgress">
            <summary>
            <para>The Service Fabric Cluster is currently begin upgraded and the request is not valid during upgrade.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.FabricUpgradeValidationError">
            <summary>
            <para>An error in the Service Fabric cluster upgrade request was discovered during pre-upgrade validation of the upgrade description and Cluster Manifest.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.FabricHealthMaxReportsReached">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the <see cref="T:System.Fabric.FabricClient.HealthClient"/> has reached the maximum number of health reports that can accept for processing. More reports will be accepted when progress is done with the currently accepted reports. By default, the <see cref="T:System.Fabric.FabricClient.HealthClient"/> can accept 10000 different reports.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.FabricHealthStaleReport">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the report is stale. Returned when <see cref="T:System.Fabric.FabricClient.HealthClient"/> 
            has a <see cref="T:System.Fabric.Health.HealthReport"/> for the same entity, <see cref="P:System.Fabric.Health.HealthInformation.SourceId"/> 
            and <see cref="P:System.Fabric.Health.HealthInformation.Property"/> with same or higher <see cref="P:System.Fabric.Health.HealthInformation.SequenceNumber"/>.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the health entity is not found in the Health Store. Returned when Health Store has no reports from a Service Fabric system component on the entity or on one of the hierarchical parents. This can happen if the entity or one of its parents doesn’t exist in the Service Fabric cluster, or the reports didn’t yet arrive at the health store.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ServiceTooBusy">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates Service Fabric service is too busy to accept requests at this time. This is a transient error.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.CommunicationError">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates a communication error has occurred.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ObjectClosed">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the object was closed.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.PropertyCheckFailed">
            <summary>
            <para>A   <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the a Check <see cref="T:System.Fabric.PropertyBatchOperation"/> has failed.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.EnumerationCompleted">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the enumeration completed.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ConfigurationSectionNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the configuration section was not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ConfigurationParameterNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the configuration parameter was not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidConfiguration">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the configuration was invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ImageBuilderValidationError">
            <summary>
            <para>A   <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the image builder validation error as occurred.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ReplicaDoesNotExist">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the replica does not exist.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ProcessDeactivated">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the process got deactivated.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ProcessAborted">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the process aborted.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidAddress">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the address was invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidNameUri">
            <summary>
            <para>A   <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the URI is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ValueTooLarge">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the property value is too large.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.DirectoryNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the directory was not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.PathTooLong">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the path is too long.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.FileNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the file was not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.NotReady">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the code is not ready.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.OperationTimedOut">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the operation timed out.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.OperationNotComplete">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the operation did not completed.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.CodePackageNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the code package was not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ConfigurationPackageNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that configuration package was not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.DataPackageNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the data package was not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.EndpointResourceNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the endpoint resource was not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidCredentialType">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the credential type is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidX509FindType">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the X509FindType is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the X509 store location is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidX509StoreName">
            <summary>
            <para>A   <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the X509 store name is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the X509 certificate thumbprint string is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidProtectionLevel">
            <summary>
            <para>A   <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the protection level is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidX509Store">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the X509 certificate store cannot be opened.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidSubjectName">
            <summary>
            <para>A   <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the subject name is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the format of common name list string is invalid. It should be a comma separated list</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidCredentials">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the credentials are invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.DecryptionFailed">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the decryption failed.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.EncryptionFailed">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the encryption has failed.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.CorruptedImageStoreObjectFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the image store object was corrupted.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ImageBuilderUnexpectedError">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the ImageBuilder hit an unexpected error.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ImageBuilderTimeoutError">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the ImageBuilder was not able to perform the operation in the specified timeout.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ImageBuilderAccessDeniedError">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the ImageBuilder hit an AccessDeniedException when using the ImageStore.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ImageBuilderInvalidMsiFile">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the MSI file being provisioned is not valid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ImageStoreIOException">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates there was an ImageStoreIOEception.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ImageStoreAcquireFileLockFailed">
            <summary>
            <para>
            A FabricErrorCode that indicates that the operation failed to acquire a lock.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidServiceType">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the ServiceType was not defined in the service manifest.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ApplicationNotUpgrading">
            <summary>
            <para>The application is not currently being upgraded and the request is only valid during upgrade.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ApplicationAlreadyInTargetVersion">
            <summary>
            <para>The application is already in the target version specified by an application upgrade request.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.KeyTooLarge">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the key is too large.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.KeyNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the key cannot be found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.SequenceNumberCheckFailed">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates the sequence number check failed. This usually happens when there is a conflicting operation executed on the same object which modifies the sequence number.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.TransactionNotActive">
            <summary>
            <para>
                <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the transaction is not active because it has already been committed or rolled back.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.TransactionTooLarge">
            <summary>
            <para>
                <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the transaction is too large, which typically results when the transaction either contains too many operations or the size of the data being written is too large.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.MultithreadedTransactionsNotAllowed">
            <summary>
            <para>
            FabricErrorCode that indicates that one transaction can't be used by multiple threads simultaneously.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.TransactionAborted">
            <summary>
            FabricErrorCode that indicates that the transaction was aborted.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ReliableSessionTransportStartupFailure">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the reliable session transport startup has failed.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ReliableSessionAlreadyExists">
            <summary>
            <para>A   <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the reliable session already exists.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ReliableSessionCannotConnect">
            <summary>
            <para>A   <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the reliable session cannot connect.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ReliableSessionManagerExists">
            <summary>
            <para>A   <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the reliable session manager already exists.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ReliableSessionRejected">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the reliable session was rejected.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ReliableSessionNotFound">
            <summary>
            <para>
                <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the reliable session cannot be found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ReliableSessionQueueEmpty">
            <summary>
            <para>
                <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the reliable session queue is empty.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ReliableSessionQuotaExceeded">
            <summary>
            <para>
                <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the reliable session quota exceeded.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ReliableSessionServiceFaulted">
            <summary>
            <para>
                <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the reliable session service was faulted.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ReliableSessionManagerAlreadyListening">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the reliable session manager is already listening.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ReliableSessionManagerNotFound">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the reliable session manager was not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ReliableSessionManagerNotListening">
            <summary>
            <para>A <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the reliable session manager is not listening.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ReliableSessionInvalidTargetPartition">
            <summary>
            <para>
                <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the reliable session has invalid target partition.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.RepairTaskAlreadyExists">
            <summary>
            <para>
                <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the repair task already exists.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.RepairTaskNotFound">
            <summary>
            <para>
                <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the repair task was not found.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InstanceIdMismatch">
            <summary>
            <para>
                <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the instance identifier doesn’t match.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.NodeHasNotStoppedYet">
            <summary>
            <para>
                <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the node has not stopped yet.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InsufficientClusterCapacity">
            <summary>
            <para>
                <see cref="T:System.Fabric.FabricErrorCode"/> that indicates that the cluster capacity is insufficient.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ConstraintKeyUndefined">
            <summary>
            <para>
            A FabricErrorCode that indicates the specified constraint key is undefined.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidPackageSharingPolicy">
            <summary>
            <para>
            A FabricErrorCode that indicates the package sharing policy is incorrect.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.PreDeploymentNotAllowed">
            <summary>
            <para>
            Predeployed of application package on Node not allowed. Predeployment feature requires ImageCache to be enabled on node.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidBackupSetting">
            <summary>
            <para>
            Invalid backup setting. E.g. incremental backup option is not set upfront etc.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidReplicaOperation">
            <summary>
            <para>
            Cannot restart a replica of a volatile stateful service or an instance of a stateless service
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidReplicaStateForReplicaOperation">
            <summary>
            <para>
            The replica is currently transitioning (closing or opening) and the operation cannot be performed at this time
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.MissingFullBackup">
            <summary>
            <para>
            Incremental backups can only be done after an initial full backup.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.BackupInProgress">
            <summary>
            <para>
            A backup is currently in progress.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.PLBNotReady">
            <summary>
            <para>
            The Cluster Resource Balancer is not yet ready to handle the operation.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.DuplicateServiceNotificationFilterName">
            <summary>
            <para>Indicates that a service notification filter has already been registered at the specified name by the current Fabric Client.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidPartitionOperation">
            <summary>
            A FabricErrorCode that indicates the partition operation is invalid.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.AlreadyPrimaryReplica">
            <summary>
            The replica has already Primary role.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.AlreadySecondaryReplica">
            <summary>
            The replica has already Secondary role.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.BackupDirectoryNotEmpty">
            <summary>
            <para>
            The backup directory is not empty.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ForceNotSupportedForReplicaControlOperation">
            <summary>
            <para>
            The replica belongs to a self-activated service. The ForceRemove option is not supported for such replicas
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ConnectionDenied">
            <summary>
            <para>
            A FabricErrorCode that indicates the connection was denied by the remote side.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ServerAuthenticationFailed">
            <summary>
            <para>
            A FabricErrorCode that indicates the authentication failed.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.FabricCannotConnect">
            <summary>
            <para>
            A FabricErrorCode that indicates there was a connection failure.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.FabricConnectionClosedByRemoteEnd">
            <summary>
            A FabricErrorCode that indicates the connection was closed by the remote end.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.FabricMessageTooLarge">
            <summary>
            <para>
            A FabricErrorCode that indicates the message is too large.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.ConstraintNotSatisfied">
            <summary>
            <para>
            The service's and cluster's configuration settings would result in a constraint-violating state if the operation were executed.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.FabricEndpointNotFound">
            <summary>
            <para>
            A FabricErrorCode that indicates the specified endpoint was not found.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.DeleteBackupFileFailed">
            <summary>
            Deletion of backup files/directory failed. Currently this can happen
            in a scenario where backup is used mainly to truncate logs.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.InvalidTestCommandState">
            <summary>
            The test command was not in an allowed state for this operation.
            </summary>
        </member>
        <member name="F:System.Fabric.FabricErrorCode.TestCommandOperationIdAlreadyExists">
            <summary>
            A test command with this operationId already exists.
            </summary>
        </member>
        <member name="T:System.Fabric.FabricInvalidPartitionKeyException">
            <summary>
            <para>Fabric exception that indicates failure due to the use of a partition key that is not valid.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricInvalidPartitionKeyException.#ctor">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricInvalidPartitionKeyException"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricInvalidPartitionKeyException.#ctor(System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricInvalidPartitionKeyException"/> with specified error code.</para>
            </summary>
            <param name="errorCode">
            <para>
                <see cref="T:System.Fabric.FabricErrorCode"/>defines the error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricInvalidPartitionKeyException.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricInvalidPartitionKeyException"/> with specified message.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricInvalidPartitionKeyException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricInvalidPartitionKeyException"/> with specified message and error code.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="errorCode">
            <para>
                <see cref="T:System.Fabric.FabricErrorCode"/>defines the error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricInvalidPartitionKeyException.#ctor(System.String,System.Exception)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricInvalidPartitionKeyException"/> with specified message and inner exception.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>System.Exception defines the inner exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricInvalidPartitionKeyException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricInvalidPartitionKeyException"/> with specified message, inner exception and error code.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>System.Exception defines the inner exception.</para>
            </param>
            <param name="errorCode">
            <para>
                <see cref="T:System.Fabric.FabricErrorCode"/>defines the error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricInvalidPartitionKeyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricInvalidPartitionKeyException"/> with specified info and context.</para>
            </summary>
            <param name="info">
            <para>The SerializationInfo object that contains serialized object data about the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The StreamingContext object that contains contextual information about the source or destination. The context parameter is reserved for future use, and can be specified as null.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricInvalidPartitionKeyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricInvalidPartitionKeyException"/> with specified info, context and error code.</para>
            </summary>
            <param name="info">
            <para>The SerializationInfo object that contains serialized object data about the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The StreamingContext object that contains contextual information about the source or destination. The context parameter is reserved for future use, and can be specified as null.</para>
            </param>
            <param name="errorCode">
            <para>
                <see cref="T:System.Fabric.FabricErrorCode"/>defines the error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricElementAlreadyExistsException">
            <summary>
            <para>The exception that is thrown when the fabric exception indicates failure of an operation due to the existence of a conflicting entity.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricElementAlreadyExistsException.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricElementAlreadyExistsException"/> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricElementAlreadyExistsException.#ctor(System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricElementAlreadyExistsException"/> class with the specified error code.</para>
            </summary>
            <param name="errorCode">
            <para>The <see cref="T:System.Fabric.FabricErrorCode"/> defines the error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricElementAlreadyExistsException.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricElementAlreadyExistsException"/> class with an exception message.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricElementAlreadyExistsException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricElementAlreadyExistsException"/> class with the specified error code.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="errorCode">
            <para>The <see cref="T:System.Fabric.FabricErrorCode"/> defines the error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricElementAlreadyExistsException.#ctor(System.String,System.Exception)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricElementAlreadyExistsException"/> class with the specified message and inner exception.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The <see cref="T:System.Exception"/> that defines the inner exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricElementAlreadyExistsException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricElementAlreadyExistsException"/> with the specified error code.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The <see cref="T:System.Exception"/> that defines the inner exception.</para>
            </param>
            <param name="errorCode">
            <para>The <see cref="T:System.Fabric.FabricErrorCode"/> defines the error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricElementAlreadyExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricElementAlreadyExistsException"/> class from the serialized exception.</para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object that contains serialized object data about the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext"/> object that contains contextual information about the source or destination. The context parameter is reserved for future use, and can be specified as <languageKeyword>null</languageKeyword>.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricElementAlreadyExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricElementAlreadyExistsException"/> class with the specified error code.</para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object that contains serialized object data about the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext"/> object that contains contextual information about the source or destination. The context parameter is reserved for future use, and can be specified as <languageKeyword>null</languageKeyword>.</para>
            </param>
            <param name="errorCode">
            <para>The <see cref="T:System.Fabric.FabricErrorCode"/> defines the error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricElementNotFoundException">
            <summary>
            <para>The exception that is thrown when the fabric element is not available.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricElementNotFoundException.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricElementNotFoundException"/> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricElementNotFoundException.#ctor(System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricElementNotFoundException"/> class with specified error code.</para>
            </summary>
            <param name="errorCode">
            <para>The error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricElementNotFoundException.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.StreamingContext"/> class with the given error message.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricElementNotFoundException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricElementNotFoundException"/> class with specified message and error code.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="errorCode">
            <para>The error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricElementNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.StreamingContext"/> class with the specified error message and inner exception.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The inner exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricElementNotFoundException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricElementNotFoundException"/> class with specified message, inner exception and error code.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The inner exception.</para>
            </param>
            <param name="errorCode">
            <para>The error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricElementNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricElementNotFoundException"/> class with specified info, context.</para>
            </summary>
            <param name="info">
            <para>The  <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object that contains serialized object data about the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The  <see cref="T:System.Runtime.Serialization.StreamingContext"/> object that contains contextual information about the source or destination. The context parameter is reserved for future use, and can be specified as null.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricElementNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricElementNotFoundException"/> class with specified info, context and error code.</para>
            </summary>
            <param name="info">
            <para>The  <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object that contains serialized object data about the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The  <see cref="T:System.Runtime.Serialization.StreamingContext"/> object that contains contextual information about the source or destination. The context parameter is reserved for future use, and can be specified as null.</para>
            </param>
            <param name="errorCode">
            <para>The error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricNotPrimaryException">
            <summary>
            <para>The exception that is thrown when Service Fabric is not a primary.</para>
            </summary>
            <remarks>
            <para>The <see cref="T:System.Fabric.FabricNotPrimaryException"/> indicates that the operation cannot be performed because the callee is currently not a primary. 
            An example of when this exception can be observed is if a Secondary replica attempted to replicate an operation via 
            <see cref="M:System.Fabric.IStateReplicator.ReplicateAsync(System.Fabric.OperationData,System.Threading.CancellationToken,System.Int64@)"/></para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricNotPrimaryException.#ctor">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricNotPrimaryException"/> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricNotPrimaryException.#ctor(System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricNotPrimaryException"/> class with specified error code.</para>
            </summary>
            <param name="errorCode">
            <para>The error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricNotPrimaryException.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricNotPrimaryException"/> class with specified message.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricNotPrimaryException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricNotPrimaryException"/> class with specified message and error code.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="errorCode">
            <para>The error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricNotPrimaryException.#ctor(System.String,System.Exception)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricNotPrimaryException"/> class with specified message, inner exception.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The inner exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricNotPrimaryException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricNotPrimaryException"/> class with specified message, inner exception and error code.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The inner exception.</para>
            </param>
            <param name="errorCode">
            <para>The error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricNotPrimaryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricNotPrimaryException"/> class with specified info, context.</para>
            </summary>
            <param name="info">
            <para>The  <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object that contains serialized object data about the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The  <see cref="T:System.Runtime.Serialization.StreamingContext"/> object that contains contextual information about the source or destination. The context parameter is reserved for future use, and can be specified as null.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricNotPrimaryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricNotPrimaryException"/> class with specified info, context and error code.</para>
            </summary>
            <param name="info">
            <para>The  <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object that contains serialized object data about the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The  <see cref="T:System.Runtime.Serialization.StreamingContext"/> object that contains contextual information about the source or destination. The context parameter is reserved for future use, and can be specified as null.</para>
            </param>
            <param name="errorCode">
            <para>The error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricTransientException">
            <summary>
            <para>The exception that is thrown when the fabric exception indicates failure of an operation due to a transient environmental or runtime circumstance.</para>
            </summary>
            <remarks>
            <para>For example, an operation may fail because a quorum of replicas is temporarily not reachable. TransientExceptions correspond to failed operations that are retryable.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricTransientException.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricTransientException"/> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricTransientException.#ctor(System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricTransientException"/> class with specified error code.</para>
            </summary>
            <param name="errorCode">
            <para>The <see cref="T:System.Fabric.FabricErrorCode"/> defines the error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricTransientException.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricTransientException"/> class with specified message.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricTransientException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricTransientException"/> class with specified message and error code.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="errorCode">
            <para>The <see cref="T:System.Fabric.FabricErrorCode"/> defines the error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricTransientException.#ctor(System.String,System.Exception)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricTransientException"/> class with specified message, inner exception.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>Defines the inner exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricTransientException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricTransientException"/> class with specified message, inner exception and error code.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>Defines the inner exception.</para>
            </param>
            <param name="errorCode">
            <para>The <see cref="T:System.Fabric.FabricErrorCode"/> defines the error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricTransientException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricTransientException"/> class with specified info, context.</para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object that contains serialized object data about the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext"/> object that contains contextual information about the source or destination.
            The context parameter is reserved for future use, and can be specified as <languageKeyword>null</languageKeyword>.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricTransientException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricTransientException"/> class with specified info, context and error code.</para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object that contains serialized object data about the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext"/> object that contains contextual information about the source or destination.
            The context parameter is reserved for future use, and can be specified as <languageKeyword>null</languageKeyword>.</para>
            </param>
            <param name="errorCode">
            <para>The <see cref="T:System.Fabric.FabricErrorCode"/> defines the error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricObjectClosedException">
            <summary>
            <para>The exception that is thrown when the Service Fabric object is currently closed.</para>
            </summary>
            <remarks>
            <para>Examples of when this exception can be observed are when a service attempts to perform an operation on Service Fabric or the <see cref="T:System.Fabric.FabricReplicator"/> while it is in the Closed state or when an API is invoked on a <see cref="T:System.Fabric.FabricClient"/> object when it is in the Closed state.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricObjectClosedException.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricObjectClosedException"/> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricObjectClosedException.#ctor(System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricObjectClosedException"/> class.</para>
            </summary>
            <param name="errorCode">
            <para>The error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricObjectClosedException.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricObjectClosedException"/> class.</para>
            </summary>
            <param name="message">
            <para>The error message.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricObjectClosedException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricObjectClosedException"/> class.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="errorCode">
            <para>The error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricObjectClosedException.#ctor(System.String,System.Exception)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricObjectClosedException"/> class.</para>
            </summary>
            <param name="message">
            <para>The error message.</para>
            </param>
            <param name="inner">
            <para>The inner exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricObjectClosedException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricObjectClosedException"/> class.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The inner exception.</para>
            </param>
            <param name="errorCode">
            <para>The error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricObjectClosedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricObjectClosedException"/> class.</para>
            </summary>
            <param name="info">
            <para>Contains serialized object data about the exception being thrown.</para>
            </param>
            <param name="context">
            <para>Contains contextual information about the source or destination.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricObjectClosedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.FabricObjectClosedException"/> class.</para>
            </summary>
            <param name="info">
            <para>The  <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object that contains serialized object data about the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The  <see cref="T:System.Runtime.Serialization.StreamingContext"/> object that contains contextual information about the source or destination. The context parameter is reserved for future use, and can be specified as null.</para>
            </param>
            <param name="errorCode">
            <para>The error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricConnectionDeniedException">
            <summary>
            <para>Connection request is denied by cluster/server, exception message may contain details.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricConnectionDeniedException.#ctor">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricConnectionDeniedException"/> class.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricConnectionDeniedException.#ctor(System.Fabric.FabricErrorCode)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricConnectionDeniedException"/> class with a specified <see cref="T:System.Fabric.FabricErrorCode"/>.
            </para>
            </summary>
            <param name="errorCode">
            <para>The error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricConnectionDeniedException.#ctor(System.String)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricConnectionDeniedException"/> class with a specified error message.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricConnectionDeniedException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricConnectionDeniedException"/> class with a specified error message and error code.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="errorCode">
            <para>The error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricConnectionDeniedException.#ctor(System.String,System.Exception)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricConnectionDeniedException"/> class with a specified error message and
            a reference to the inner exception that is the cause of this exception.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricConnectionDeniedException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricConnectionDeniedException"/> class with a specified error message,
            a reference to the inner exception that is the cause of this exception and an error code.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</para>
            </param>
            <param name="errorCode">
            <para>The error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricConnectionDeniedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricConnectionDeniedException"/> class with serialized data.
            </para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricConnectionDeniedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Fabric.FabricErrorCode)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricConnectionDeniedException"/> class with serialized data.
            </para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</para>
            </param>
            <param name="errorCode">
            <para>The error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricServerAuthenticationFailedException">
            <summary>
            <para>Failed to authenticate cluster/server identity, exception message may contain details</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricServerAuthenticationFailedException.#ctor">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricServerAuthenticationFailedException"/> class.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricServerAuthenticationFailedException.#ctor(System.Fabric.FabricErrorCode)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricServerAuthenticationFailedException"/> class with a specified <see cref="T:System.Fabric.FabricErrorCode"/>.
            </para>
            </summary>
            <param name="errorCode">
            <para>The error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricServerAuthenticationFailedException.#ctor(System.String)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricServerAuthenticationFailedException"/> class with a specified error message.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricServerAuthenticationFailedException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricServerAuthenticationFailedException"/> class with a specified error message and error code.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="errorCode">
            <para>The error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricServerAuthenticationFailedException.#ctor(System.String,System.Exception)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricServerAuthenticationFailedException"/> class with a specified error message and
            a reference to the inner exception that is the cause of this exception.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricServerAuthenticationFailedException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricServerAuthenticationFailedException"/> class with a specified error message,
            a reference to the inner exception that is the cause of this exception and an error code.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</para>
            </param>
            <param name="errorCode">
            <para>The error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricServerAuthenticationFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricServerAuthenticationFailedException"/> class with serialized data.
            </para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricServerAuthenticationFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Fabric.FabricErrorCode)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricServerAuthenticationFailedException"/> class with serialized data.
            </para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</para>
            </param>
            <param name="errorCode">
            <para>The error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricInvalidAddressException">
            <summary>
            <para>
            The exception that is thrown when an address is not recognized by Service fabric.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricInvalidAddressException.#ctor">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidAddressException"/> class.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricInvalidAddressException.#ctor(System.Fabric.FabricErrorCode)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidAddressException"/> class with the specified error code.
            </para>
            </summary>
            <param name="errorCode">
            <para>Error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricInvalidAddressException.#ctor(System.String)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidAddressException"/> class with the specified error message.
            </para>
            </summary>
            <param name="message">
            <para>Error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricInvalidAddressException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidAddressException"/> class with the specified error code and message.
            </para>
            </summary>
            <param name="message">
            <para>Error message that explains the reason for the exception.</para>
            </param>
            <param name="errorCode">
            <para>Error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricInvalidAddressException.#ctor(System.String,System.Exception)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidAddressException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </para>
            </summary>
            <param name="message">
            <para>Error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>Exception that is the cause of the current exception, or a null reference if no inner exception is specified.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricInvalidAddressException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidAddressException"/> class with the specified error message,
            a reference to the inner exception that is the cause of this exception and specified error code.
            </para>
            </summary>
            <param name="message">
            <para>Error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>Exception that is the cause of the current exception, or a null reference if no inner exception is specified.</para>
            </param>
            <param name="errorCode">
            <para>Error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricInvalidAddressException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidAddressException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:System.Fabric.FabricInvalidAddressException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidAddressException"/> class with serialized data and specified error code.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <param name="errorCode">Error code associated with the exception.</param>
        </member>
        <member name="T:System.Fabric.FabricInvalidAtomicGroupException">
            <summary>
            <para>The exception that is thrown when the fabric atomic group is invalid.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricInvalidAtomicGroupException.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidAtomicGroupException"/> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricInvalidAtomicGroupException.#ctor(System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidAtomicGroupException"/> class with the specified error code.</para>
            </summary>
            <param name="errorCode">
            <para>The <see cref="T:System.Fabric.FabricErrorCode"/> defines the error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricInvalidAtomicGroupException.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidAtomicGroupException"/> with the specified message.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricInvalidAtomicGroupException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidAtomicGroupException"/> class with the specified message and error code.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="errorCode">
            <para>The <see cref="T:System.Fabric.FabricErrorCode"/> defines the error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricInvalidAtomicGroupException.#ctor(System.String,System.Exception)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidAtomicGroupException"/> class with the specified message and inner exception.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The System.Exception defines the inner exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricInvalidAtomicGroupException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidAtomicGroupException"/> class with the specified message, inner exception and error code.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The System.Exception defines the inner exception.</para>
            </param>
            <param name="errorCode">
            <para>The <see cref="T:System.Fabric.FabricErrorCode"/> defines the error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricInvalidAtomicGroupException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidAtomicGroupException"/> class with the specified info and context.</para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object that contains serialized object data about the exception.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext"/> object that contains contextual information about the source or destination. The context parameter is reserved for future use, and can be specified as null.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricInvalidAtomicGroupException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidAtomicGroupException"/> class with the specified info, context and error code.</para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object that contains serialized object data about the exception.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext"/> object that contains contextual information about the source or destination. The context parameter is reserved for future use, and can be specified as null.</para>
            </param>
            <param name="errorCode">
            <para>The <see cref="T:System.Fabric.FabricErrorCode"/> defines the error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricMissingFullBackupException">
            <summary>
            <para>
            The exception that is thrown when an attempt is made to create an incremental backup of the key-value store
            before an initial full backup is created.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricMissingFullBackupException.#ctor">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricMissingFullBackupException"/> class.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricMissingFullBackupException.#ctor(System.String)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricMissingFullBackupException"/> class with a specified error message.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricMissingFullBackupException.#ctor(System.String,System.Exception)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricMissingFullBackupException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricMissingFullBackupException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricMissingFullBackupException"/> class with serialized data.
            </para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricNotReadableException">
            <summary>
            <para>Represents an exception that is thrown when a partition cannot accept reads.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricNotReadableException.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricNotReadableException"/> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricNotReadableException.#ctor(System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricNotReadableException"/> class with the specified error code.</para>
            </summary>
            <param name="errorCode">
            <para>Error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricNotReadableException.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricNotReadableException"/> class with the specified error message.</para>
            </summary>
            <param name="message">
            <para>Error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricNotReadableException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricNotReadableException"/> class with the specified error code and message.</para>
            </summary>
            <param name="message">
            <para>Error message that explains the reason for the exception.</para>
            </param>
            <param name="errorCode">
            <para>Error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricNotReadableException.#ctor(System.String,System.Exception)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricNotReadableException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.</para>
            </summary>
            <param name="message">
            <para>Error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>Exception that is the cause of the current exception, or a null reference if no inner exception is specified.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricNotReadableException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricNotReadableException"/> class with the specified error message, a reference to the inner exception that is the cause of this exception, and specified error code.</para>
            </summary>
            <param name="message">
            <para>Error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>Exception that is the cause of the current exception, or a null reference if no inner exception is specified.</para>
            </param>
            <param name="errorCode">
            <para>Error code associated with the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricNotReadableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricNotReadableException"/> class with serialized data.</para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricNotReadableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Fabric.FabricErrorCode)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.FabricNotReadableException"/> class with serialized data and error code.</para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</para>
            </param>
            <param name="errorCode">
            <para>Error code associated with the exception.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricImageStoreException">
            <summary>
            <para>
            Exception that is thrown when perform ImageStore operations.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricImageStoreException.#ctor">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricImageStoreException"/> class.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricImageStoreException.#ctor(System.Fabric.FabricErrorCode)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricImageStoreException"/> class with a specified <see cref="T:System.Fabric.FabricErrorCode"/>.
            </para>
            </summary>
            <param name="errorCode">
            <para>The error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricImageStoreException.#ctor(System.String)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricImageStoreException"/> class with a specified error message.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricImageStoreException.#ctor(System.String,System.Fabric.FabricErrorCode)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricImageStoreException"/> class with a specified error message and error code.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="errorCode">
            <para>The error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricImageStoreException.#ctor(System.String,System.Exception)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricImageStoreException"/> class with a specified error message and
            a reference to the inner exception that is the cause of this exception.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricImageStoreException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricImageStoreException"/> class with a specified error message,
            a reference to the inner exception that is the cause of this exception and an error code.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</para>
            </param>
            <param name="errorCode">
            <para>The error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricImageStoreException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricImageStoreException"/> class with serialized data.
            </para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricImageStoreException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Fabric.FabricErrorCode)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricImageStoreException"/> class with serialized data.
            </para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</para>
            </param>
            <param name="errorCode">
            <para>The error code that the exception is wrapping around.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricBackupInProgressException">
            <summary>
            <para>The exception that is thrown when an attempt is made to create a backup when a previous backup is in progress.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricBackupInProgressException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricBackupInProgressException"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricBackupInProgressException.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of the FabricBackupInProgressException class with a specified error message.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricBackupInProgressException.#ctor(System.String,System.Exception)">
            <summary>
            <para>Initializes a new instance of the FabricBackupDirectoryNotEmptyException class with a specified error message and a reference to the inner exception that is the cause of this exception.</para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricBackupInProgressException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <para>Initializes a new instance of the FabricBackupInProgressException class with serialized data.</para>
            </summary>
            <param name="info">
            <para>The SerializationInfo that holds the serialized object data about the exception being thrown.</para>
            </param>
            <param name="context">
            <para>The StreamingContext that contains contextual information about the source or destination.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricBackupDirectoryNotEmptyException">
            <summary>
            <para>
            The exception that is thrown when the user provided backup directory is not empty.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricBackupDirectoryNotEmptyException.#ctor">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricBackupDirectoryNotEmptyException"/> class.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricBackupDirectoryNotEmptyException.#ctor(System.String)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricBackupDirectoryNotEmptyException"/> class with a specified error message.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricBackupDirectoryNotEmptyException.#ctor(System.String,System.Exception)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricBackupDirectoryNotEmptyException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricBackupDirectoryNotEmptyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricBackupDirectoryNotEmptyException"/> class with serialized data.
            </para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricReplicationOperationTooLargeException">
            <summary>
            <para>
            Exception indicating that the associated replication operation is larger than the configured limit
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricReplicationOperationTooLargeException.#ctor">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricReplicationOperationTooLargeException"/> class.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricReplicationOperationTooLargeException.#ctor(System.String)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricReplicationOperationTooLargeException"/> class with a specified error message.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricReplicationOperationTooLargeException.#ctor(System.String,System.Exception)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricReplicationOperationTooLargeException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricReplicationOperationTooLargeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricReplicationOperationTooLargeException"/> class with serialized data.
            </para>
            </summary>
            <param name="info">
            <para>The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </para>
            </param>
            <param name="context">
            <para>The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</para>
            </param>
        </member>
        <member name="T:System.Fabric.FabricServiceNotFoundException">
            <summary>
            <para>
            Exception indicating that there is no Service Found by that name.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricServiceNotFoundException.#ctor">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricServiceNotFoundException"/> class.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricServiceNotFoundException.#ctor(System.String)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricServiceNotFoundException"/> class with a specified error message.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricServiceNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricServiceNotFoundException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricServiceNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricServiceNotFoundException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:System.Fabric.FabricCannotConnectException">
            <summary>
            <para>
            Exception indicating that there is CannotConnect Error
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricCannotConnectException.#ctor">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricCannotConnectException"/> class.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricCannotConnectException.#ctor(System.String)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricCannotConnectException"/> class with a specified error message.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricCannotConnectException.#ctor(System.String,System.Exception,System.Fabric.FabricErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricCannotConnectException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
            <param name="errorCode">The <see cref="T:System.Fabric.FabricErrorCode"/> that contains more information about the error.</param>
        </member>
        <member name="M:System.Fabric.FabricCannotConnectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricCannotConnectException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:System.Fabric.FabricMessageTooLargeException">
            <summary>
            <para>
            Exception indicating that Message is too large.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricMessageTooLargeException.#ctor">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricMessageTooLargeException"/> class.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricMessageTooLargeException.#ctor(System.String)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricMessageTooLargeException"/> class with a specified error message.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricMessageTooLargeException.#ctor(System.String,System.Exception)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricMessageTooLargeException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricMessageTooLargeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricMessageTooLargeException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:System.Fabric.FabricEndpointNotFoundException">
            <summary>
            <para>
            Exception indicating that the specified endpoint was not found.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricEndpointNotFoundException.#ctor">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricEndpointNotFoundException"/> class.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricEndpointNotFoundException.#ctor(System.String)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricEndpointNotFoundException"/> class with a specified error message.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricEndpointNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricEndpointNotFoundException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </para>
            </summary>
            <param name="message">
            <para>The error message that explains the reason for the exception.</para>
            </param>
            <param name="inner">
            <para>The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricEndpointNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricEndpointNotFoundException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:System.Fabric.FabricDeleteBackupFileFailedException">
            <summary>
            The exception that is thrown when deletion of a file/directory fails during backup.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricDeleteBackupFileFailedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricDeleteBackupFileFailedException"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricDeleteBackupFileFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricDeleteBackupFileFailedException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricDeleteBackupFileFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricDeleteBackupFileFailedException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:System.Fabric.FabricDeleteBackupFileFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricDeleteBackupFileFailedException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:System.Fabric.FabricInvalidTestCommandStateException">
            <summary>
            The exception that is thrown when an operation is not valid for a test command in a particular state.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricInvalidTestCommandStateException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidTestCommandStateException"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricInvalidTestCommandStateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidTestCommandStateException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricInvalidTestCommandStateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidTestCommandStateException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:System.Fabric.FabricInvalidTestCommandStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricInvalidTestCommandStateException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:System.Fabric.FabricTestCommandOperationIdAlreadyExistsException">
            <summary>
            The exception that is thrown when an the Test Command already exists (duplicate operationId)
            </summary>
        </member>
        <member name="M:System.Fabric.FabricTestCommandOperationIdAlreadyExistsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricTestCommandOperationIdAlreadyExistsException"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.FabricTestCommandOperationIdAlreadyExistsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricTestCommandOperationIdAlreadyExistsException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Fabric.FabricTestCommandOperationIdAlreadyExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricTestCommandOperationIdAlreadyExistsException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:System.Fabric.FabricTestCommandOperationIdAlreadyExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.FabricTestCommandOperationIdAlreadyExistsException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:System.Fabric.FabricReplicator">
            <summary>
            <para>Replicates state for high availability and reliability. </para>
            </summary>
            <remarks>
            <para>Provides the default implementation of the <see cref="T:System.Fabric.IStateReplicator"/>, <see cref="T:System.Fabric.IReplicator"/>, and <see cref="T:System.Fabric.IPrimaryReplicator"/> interfaces, which user services can use, along with their implementation of the <see cref="T:System.Fabric.IStateProvider"/> interface.</para>
            <para>An instance of the <see cref="T:System.Fabric.FabricReplicator"/> class is obtained via the <see cref="M:System.Fabric.IStatefulServicePartition.CreateReplicator(System.Fabric.IStateProvider,System.Fabric.ReplicatorSettings)"/> method, which can be cast to <see cref="T:System.Fabric.IStateReplicator"/> for use.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.IReplicator">
            <summary>
            <para>Defines the behavior that must be implemented by a state replicator.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.IPrimaryReplicator">
            <summary>
            <para>Defines the behaviors that must be implemented by a state replicator for a Primary replica.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.IPrimaryReplicator.OnDataLossAsync(System.Threading.CancellationToken)">
            <summary>
            <para>Indicates a <b>potential</b> data loss that might have occurred for the current partition.</para>
            </summary>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.IPrimaryReplicator.WaitForCatchUpQuorumAsync(System.Fabric.ReplicaSetQuorumMode,System.Threading.CancellationToken)">
            <summary>
            <para>Waits for a quorum or all replicas in the current configuration to receive and apply all operation that the previous replica set contains. The input parameter quorumMode
            determines the number of replicas in the current configuration that have to wait before completing this asynchronous call.</para>
            </summary>
            <param name="quorumMode">
            <para>Represents the kind of quorum that is to be achieved in order to continue with the reconfiguration protocol. It is one of the values in 
            <see cref="T:System.Fabric.ReplicaSetQuorumMode"/></para>
            </param>
            <param name="cancellationToken">
            <para>The CancellationToken object that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.IPrimaryReplicator.BuildReplicaAsync(System.Fabric.ReplicaInformation,System.Threading.CancellationToken)">
            <summary>
            <para>Builds a new replica.</para>
            </summary>
            <param name="replicaInfo">
            <para>The <see cref="T:System.Fabric.ReplicaInformation"/> of the new replica, which includes the address of the remote replicator that is to be built.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/>  object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.IPrimaryReplicator.RemoveReplica(System.Int64)">
            <summary>
            <para>Removes the replica from the primary replicator’s view.</para>
            </summary>
            <param name="replicaId">
            <para>ID of the replica to be removed.</para>
            </param>
            <remarks>
            <para>This method is typically called after an ongoing replica build is cancelled due to some reason.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IReplicator.OpenAsync(System.Threading.CancellationToken)">
            <summary>
            <para>Opens a Replicator object, so that additional actions can be taken.</para>
            </summary>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.IReplicator.ChangeRoleAsync(System.Fabric.Epoch,System.Fabric.ReplicaRole,System.Threading.CancellationToken)">
            <summary>
            <para>Changes the role of the replicator.</para>
            </summary>
            <param name="epoch">
            <para>The epoch of the current configuration</para>
            </param>
            <param name="role">
            <para>The updated <see cref="T:System.Fabric.ReplicaRole"/> that this replicator should transition to.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.IReplicator.CloseAsync(System.Threading.CancellationToken)">
            <summary>
            <para>Closes the replicator operation.</para>
            </summary>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <remarks>
            <para>Replicator can be closed due to various reasons, which include (but not limited to) upgrades, reopens due to transient faults, e.t.c</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IReplicator.Abort">
            <summary>
            <para>Terminates the replicator</para>
            </summary>
            <remarks>
            <para>Lease loss and, in response to the service or replicator, the use of <see cref="M:System.Fabric.IServicePartition.ReportFault(System.Fabric.FaultType)"/> to report a <see cref="F:System.Fabric.FaultType.Permanent"/> fault are examples of ungraceful termination. When this method is invoked, the replicator should immediately release and clean up all references and return.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IReplicator.GetCurrentProgress">
            <summary>
            <para>Retrieves the highest sequence number of the operation that is available in the replicator.</para>
            </summary>
            <returns>
            <para>The highest sequence number of the operation that is available in the replicator.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.IReplicator.GetCatchUpCapability">
            <summary>
            <para>Retrieves the lowest sequence number of the operation that is available in the replicator.</para>
            </summary>
            <returns>
            <para>The lowest sequence number of the operation that is available in the replicator.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.IReplicator.UpdateEpochAsync(System.Fabric.Epoch,System.Threading.CancellationToken)">
            <summary>
            <para>Indicates to the replicator that the configuration of a replica set has changed due to a change or attempted change to the Primary replicator. The change occurs due to failure or load balancing of the previous Primary. Epoch changes act as a barrier by segmenting operations into the exact configuration periods in which they were sent by a specific Primary.</para>
            </summary>
            <param name="epoch">
            <para>The new epoch of the current configuration</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The replicator’s connection address that is to be used by other replicators belonging to the partition for communication.</para>
            </returns>
        </member>
        <member name="F:System.Fabric.FabricReplicator.UnknownSequenceNumber">
            <summary>
            This is for internal use only
            </summary>
        </member>
        <member name="F:System.Fabric.FabricReplicator.InvalidAtomicGroupId">
            <summary>
            This is for internal use only
            </summary>
        </member>
        <member name="M:System.Fabric.FabricReplicator.System#Fabric#IReplicator#OpenAsync(System.Threading.CancellationToken)">
            <summary>
              <para/>
            </summary>
            <param name="cancellationToken">
              <para/>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task`1"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricReplicator.System#Fabric#IReplicator#ChangeRoleAsync(System.Fabric.Epoch,System.Fabric.ReplicaRole,System.Threading.CancellationToken)">
            <summary>
              <para/>
            </summary>
            <param name="epoch">
              <para/>
            </param>
            <param name="role">
              <para/>
            </param>
            <param name="cancellationToken">
              <para/>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricReplicator.System#Fabric#IReplicator#CloseAsync(System.Threading.CancellationToken)">
            <summary>
              <para/>
            </summary>
            <param name="cancellationToken">
              <para/>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricReplicator.System#Fabric#IReplicator#Abort">
            <summary>
              <para />
            </summary>
        </member>
        <member name="M:System.Fabric.FabricReplicator.System#Fabric#IReplicator#GetCurrentProgress">
            <summary>
              <para/>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.Int64"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricReplicator.System#Fabric#IReplicator#GetCatchUpCapability">
            <summary>
              <para/>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.Int64"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricReplicator.System#Fabric#IReplicator#UpdateEpochAsync(System.Fabric.Epoch,System.Threading.CancellationToken)">
            <summary>
              <para/>
            </summary>
            <param name="epoch">
              <para/>
            </param>
            <param name="cancellationToken">
              <para/>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#OnDataLossAsync(System.Threading.CancellationToken)">
            <summary>
              <para/>
            </summary>
            <param name="cancellationToken">
              <para/>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task`1"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#WaitForCatchUpQuorumAsync(System.Fabric.ReplicaSetQuorumMode,System.Threading.CancellationToken)">
            <summary>
              <para/>
            </summary>
            <param name="quorumMode">
              <para/>
            </param>
            <param name="cancellationToken">
              <para/>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#BuildReplicaAsync(System.Fabric.ReplicaInformation,System.Threading.CancellationToken)">
            <summary>
              <para/>
            </summary>
            <param name="replicaInfo">
              <para/>
            </param>
            <param name="cancellationToken">
              <para/>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#RemoveReplica(System.Int64)">
            <summary>
              <para />
            </summary>
            <param name="replicaId">
              <para />
            </param>
        </member>
        <member name="P:System.Fabric.FabricReplicator.StateReplicator">
            <summary>
            <para>Represents the <see cref="T:System.Fabric.IStateReplicator"/> which the user should </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.IStateReplicator"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricReplicator.StateReplicator2">
            <summary>
              <para />
            </summary>
            <value>
              <para />
            </value>
        </member>
        <member name="T:System.Fabric.FabricUpgradeProgress">
            <summary>
            <para>Encapsulates the progress of a Service Fabric upgrade.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricUpgradeProgress.GetChangedUpgradeDomains(System.Fabric.FabricUpgradeProgress)">
            <summary>
            <para>Gets the list of changed upgrade domains.</para>
            </summary>
            <param name="previousProgress">
            <para>The previous progress report from this  upgrade process.</para>
            </param>
            <returns>
            <para>The list of changed upgrade domains.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.FabricUpgradeProgress.UpgradeDescription">
            <summary>
            <para>Gets the upgrade parameter details that describe the behavior of the current upgrade.</para>
            </summary>
            <value>
            <para>The upgrade parameter details that describe the behavior of the current upgrade.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricUpgradeProgress.TargetCodeVersion">
            <summary>
            <para>Gets the target code version for this  upgrade.</para>
            </summary>
            <value>
            <para>The target code version for this  upgrade.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricUpgradeProgress.TargetConfigVersion">
            <summary>
            <para>Gets the target configuration version for this  upgrade.</para>
            </summary>
            <value>
            <para>The target configuration version for this  upgrade.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricUpgradeProgress.UpgradeState">
            <summary>
            <para>Gets the upgrade state for this  upgrade.</para>
            </summary>
            <value>
            <para>The upgrade state for this  upgrade.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricUpgradeProgress.UpgradeDomains">
            <summary>
            <para>Gets the list of upgrade domains.</para>
            </summary>
            <value>
            <para>The list of upgrade domains.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricUpgradeProgress.RollingUpgradeMode">
            <summary>
            <para>Gets the rolling upgrade mode for this  upgrade.</para>
            </summary>
            <value>
            <para>The rolling upgrade mode for this  upgrade.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricUpgradeProgress.NextUpgradeDomain">
            <summary>
            <para>Gets the next upgrade domain for this  upgrade.</para>
            </summary>
            <value>
            <para>The next upgrade domain for this  upgrade.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricUpgradeProgress.UpgradeDuration">
            <summary>
            <para>Gets the estimated elapsed time spent processing the current overall upgrade.</para>
            </summary>
            <value>
            <para>The estimated elapsed time spent processing the current overall upgrade.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricUpgradeProgress.CurrentUpgradeDomainDuration">
            <summary>
            <para>Gets the estimated elapsed time spent processing the current Upgrade Domain.</para>
            </summary>
            <value>
            <para>The estimated elapsed time spent processing the current Upgrade Domain.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricUpgradeProgress.UnhealthyEvaluations">
            <summary>
            <para>Gets the health evaluations which describe the data and the algorithm used by health manager to evaluate cluster health. Only populated when the cluster’s aggregated health state is  <see cref="F:System.Fabric.Health.HealthState.Error"/>. When the upgrade rolls back because of health evaluation, it provides a snapshot view of the health at the time the health check was performed.</para>
            </summary>
            <value>
            <para>The unhealthy evaluations that led to current aggregated health state. The items in the list can be of the following types: <see cref="T:System.Fabric.Health.ApplicationsHealthEvaluation"/>, <see cref="T:System.Fabric.Health.NodesHealthEvaluation"/>, <see cref="T:System.Fabric.Health.UpgradeDomainNodesHealthEvaluation"/>, <see cref="T:System.Fabric.Health.SystemApplicationHealthEvaluation"/> oror <see cref="T:System.Fabric.Health.EventHealthEvaluation"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricUpgradeProgress.CurrentUpgradeDomainProgress">
            <summary>
            <para>Gives the detailed upgrade progress for nodes in the current upgrade domain.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.UpgradeDomainProgress"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricUpgradeProgress.StartTimestampUtc">
            <summary>
            <para>
            Gets the time at which the upgrade started.
            </para>
            </summary>
            <value>
            <para>The time at which the upgrade started in UTC.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricUpgradeProgress.FailureTimestampUtc">
            <summary>
            <para>
            Gets the time at which the upgrade failed.
            </para>
            </summary>
            <value>
            <para>The time at which the upgrade failed in UTC.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricUpgradeProgress.FailureReason">
            <summary>
            <para>
            Gets the category of upgrade failure if the upgrade failed.
            </para>
            </summary>
            <value>
            <para>The category of upgrade failure. <see cref="T:System.Fabric.UpgradeFailureReason"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.FabricUpgradeProgress.UpgradeDomainProgressAtFailure">
            <summary>
            <para>
            Gets structured information about what actions were being performed by the system at the moment of upgrade failure.
            </para>
            </summary>
            <value>
            <para>The upgrade progress details. <see cref="T:System.Fabric.UpgradeDomainProgress"/>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.FabricUpgradeState">
            <summary>
            <para>Specifies the upgrade state when upgrading Service Fabric.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricUpgradeState.Invalid">
            <summary>
            <para>All Service Fabric enumerations have reserved Invalid flag.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricUpgradeState.RollingBackInProgress">
            <summary>
            <para>Specifies that the rolling back process is in progress.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricUpgradeState.RollingBackCompleted">
            <summary>
            <para>Specifies that the rolling back process has completed.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricUpgradeState.RollingForwardPending">
            <summary>
            <para>Specifies that the rolling forward process is pending.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricUpgradeState.RollingForwardInProgress">
            <summary>
            <para>Specifies that the rolling forward process is in progress.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricUpgradeState.RollingForwardCompleted">
            <summary>
            <para>Specifies that the rolling forward process has completed.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FabricUpgradeState.Failed">
            <summary>
            <para>Indicates that the upgrade has failed.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.FaultType">
            <summary>
            <para>Indicates the type of fault that a service reports: invalid, transient or permanent. </para>
            </summary>
            <remarks>
            <para>Services can report faults during runtime by using the <see cref="M:System.Fabric.IServicePartition.ReportFault(System.Fabric.FaultType)"/> method to indicate the type of fault.</para>
            </remarks>
        </member>
        <member name="F:System.Fabric.FaultType.Invalid">
            <summary>
            <para>The type is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.FaultType.Permanent">
            <summary>
            <para>A permanent fault is a fault that the replica cannot recover from. This type of fault indicates that the replica can make no further progress and should be removed and replaced. </para>
            </summary>
            <remarks>
            <para>An example of a permanent fault would be a persistent stateful service that tries to write information to disk and determines that the disk had been removed or was unusable. Calling <see cref="M:System.Fabric.IServicePartition.ReportFault(System.Fabric.FaultType)"/> and reporting a permanent fault result in the service to be Aborted via <languageKeyword>IStatefulServiceReplica.</languageKeyword><see cref="M:System.Fabric.IStatefulServiceReplica.Abort"/> or <languageKeyword>IStatelessServiceInstance.</languageKeyword><see cref="M:System.Fabric.IStatelessServiceInstance.Abort"/> without a chance to gracefully clean up state or complete operations. Therefore, if any cleanup or other long-running work is necessary, it should be performed before <see cref="M:System.Fabric.IServicePartition.ReportFault(System.Fabric.FaultType)"/> is called. Note that the distinction between permanent and transient faults is useful mainly for persistent stateful services. Other than the call sequence, the effects on other service types are the same: the replica or instance is removed, all state at that replica or instance is lost, and the replica or instance is recreated, potentially in a different location.</para>
            </remarks>
        </member>
        <member name="F:System.Fabric.FaultType.Transient">
            <summary>
            <para>A transient fault indicates that there is some temporary condition which prevents the replica from making further progress or from processing further user requests. </para>
            </summary>
            <remarks>
            <para>An example of a transient fault is a service that determines that a portion of its state or some reference file is corrupted, but can be repaired if the service were to be re-initialized. In this case, the service uses the <see cref="M:System.Fabric.IServicePartition.ReportFault(System.Fabric.FaultType)"/> method to report a transient fault. Reporting a transient fault closes the service via <languageKeyword>IStatefulServiceReplica.</languageKeyword><see cref="M:System.Fabric.IStatefulServiceReplica.CloseAsync(System.Threading.CancellationToken)"/> or <languageKeyword>IStatelessServiceInstance.</languageKeyword><see cref="M:System.Fabric.IStatelessServiceInstance.CloseAsync(System.Threading.CancellationToken)"/>. Note that for stateless and stateful services, volatile transient faults are not very useful because state is not preserved across the failure. For these services, whether to use transient or permanent faults is dependent on whether the service should be gracefully closed asynchronously with cleanup or ungracefully closed with a synchronous <languageKeyword>IStatefulServiceReplica.</languageKeyword><see cref="M:System.Fabric.IStatefulServiceReplica.Abort"/> or <languageKeyword>IStatelessServiceInstance.</languageKeyword><see cref="M:System.Fabric.IStatelessServiceInstance.Abort"/> method.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.GatewayInformation">
            <summary>
            <para>Contains information identifying a Service Fabric node in the cluster.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.GatewayInformation.NodeAddress">
            <summary>
            <para>Gets the address that Service Fabric clients use when connecting to this node (as specified in the Cluster Manifest).</para>
            </summary>
            <value>
            <para>The address that Service Fabric clients use when connecting to this node (as specified in the Cluster Manifest).</para>
            </value>
        </member>
        <member name="P:System.Fabric.GatewayInformation.NodeId">
            <summary>
            <para>The unique identifier used internally by Service Fabric to identify a node. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.NodeId"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.GatewayInformation.NodeInstanceId">
            <summary>
            <para>The instance of a Service Fabric node changes when the node is restarted.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Numerics.BigInteger"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.GatewayInformation.NodeName">
            <summary>
            <para>The friendly name of the Service Fabric node (defined in the Cluster Manifest) used to generate the NodeId.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String"/>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.GetPropertyOperation">
            <summary>
            <para>Represents a <see cref="T:System.Fabric.PropertyBatchOperation"/> that gets the specified property if it exists.</para>
            </summary>
            <remarks>
            <para>Note that if one <see cref="T:System.Fabric.PropertyBatchOperation"/> fails, the entire batch will fail and not be committed.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.GetPropertyOperation.#ctor(System.String)">
            <summary>
            <para>Instantiates a new instance of the <see cref="T:System.Fabric.GetPropertyOperation"/> class with specified property name.</para>
            </summary>
            <param name="propertyName">
            <para>The name of the property.</para>
            </param>
            <remarks>
            <para>
                <see cref="P:System.Fabric.GetPropertyOperation.IncludeValue"/> is set to <languageKeyword>true</languageKeyword>.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.GetPropertyOperation.#ctor(System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.GetPropertyOperation"/> with specified property name and include value flag.</para>
            </summary>
            <param name="propertyName">
            <para>The name of the property.</para>
            </param>
            <param name="includeValue">
            <para>Specifies whether values should be included in the return or only metadata should be returned.</para>
            </param>
        </member>
        <member name="P:System.Fabric.GetPropertyOperation.IncludeValue">
            <summary>
            <para>Gets a value indicating whether the value of the property is returned together with the metadata.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the value of the property should be included; <languageKeyword>false</languageKeyword> otherwise.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.ApplicationHealth">
            <summary>
            <para>Describes the health of an application as returned by <see cref="M:System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Fabric.Description.ApplicationHealthQueryDescription)"/>.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Health.EntityHealth">
            <summary>
            <para>Represents the base class for all entity health related classes.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.EntityHealth.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.EntityHealth"/> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.EntityHealth.AggregatedHealthState">
            <summary>
            <para>Gets the entity aggregated health state.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Health.HealthState"/> representing the aggregated health state 
            computed by Health Manager based on 
            reported events on entity and its children (if any) and desired health policy.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.EntityHealth.HealthEvents">
            <summary>
            <para>Gets the health events reported on the entity.</para>
            </summary>
            <value>
            <para>The health events reported on the entity.</para>
            </value>
            <remarks>The health events are created based on health reports sent to health store. 
            They contain additional metadata added by health store.</remarks>
        </member>
        <member name="P:System.Fabric.Health.EntityHealth.UnhealthyEvaluations">
            <summary>
            <para>Gets the unhealthy evaluations that show why the current aggregated health state
            was returned by Health Manager.</para>
            </summary>
            <value>
            <para>The unhealthy evaluations that describe why the current aggregated health state was returned by Health Manager.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealth.ApplicationName">
            <summary>
            <para>Gets the application name, which uniquely identifies the application . </para>
            </summary>
            <value>
            <para>The application name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealth.ServiceHealthStates">
            <summary>
            <para>Gets the service health states for the current application as found in the health store.</para>
            </summary>
            <value>
            <para>The services of the current application as found in the health store.</para>
            </value>
            <para>Only services that respect the <see cref="P:System.Fabric.Description.ApplicationHealthQueryDescription.ServicesFilter"/> (if specified) are returned. 
            If the input filter is not specified, all services are returned.</para>
            <para>All services are evaluated to determine the application aggregated health.</para>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealth.DeployedApplicationHealthStates">
            <summary>
            <para>Gets the deployed application health states for the current application as found in the health store.</para>
            </summary>
            <value>
            <para>deployed applications for the current application as found in the health store.</para>
            </value>
            <para>Only deployed applications that respect the <see cref="P:System.Fabric.Description.ApplicationHealthQueryDescription.DeployedApplicationsFilter"/> (if specified) are returned. 
            If the input filter is not specified, all deployed applications are returned.</para>
            <para>All deployed applications are evaluated to determine the application aggregated health.</para>
        </member>
        <member name="T:System.Fabric.Health.ApplicationHealthPolicy">
            <summary>
            <para>Defines a health policy used to evaluate the health of an application or one of its children entities.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthPolicy.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.ApplicationHealthPolicy"/> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthPolicy.ToString">
            <summary>
            Gets a string representation of the application health policy.
            </summary>
            <returns>A string representation of the application health policy.</returns>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthPolicy.ConsiderWarningAsError">
            <summary>
            <para>Gets or sets a <see cref="T:System.Boolean"/> that determines whether warnings should be treated with the same severity as errors.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if warnings should be treated as errors; <languageKeyword>false</languageKeyword> when 
            warnings should not be treated as errors.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthPolicy.MaxPercentUnhealthyDeployedApplications">
            <summary>
            <para>Gets or sets the maximum allowed percentage of unhealthy deployed applications.</para>
            </summary>
            <value>
            <para>The maximum allowed percentage of unhealthy deployed applications. Allowed values are <see cref="T:System.Byte"/> values from zero to 100.</para>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>The specified value was outside the range of integer values from zero to 100.</para>
            </exception>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthPolicy.DefaultServiceTypeHealthPolicy">
            <summary>
            <para>Gets or sets the health policy used by default to evaluate the health of a service type.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Health.ServiceTypeHealthPolicy"/> used to evaluate service type health if no service type policy is defined.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthPolicy.ServiceTypeHealthPolicyMap">
            <summary>
            <para>Gets or sets the map with <see cref="T:System.Fabric.Health.ServiceTypeHealthPolicy"/> per service type name. </para>
            </summary>
            <value>
            <para>The map with service type health policy per service type name.</para>
            </value>
            <remarks>If no policy is 
            specified for a service type name, the <see cref="P:System.Fabric.Health.ApplicationHealthPolicy.DefaultServiceTypeHealthPolicy"/> is used for evaluation.</remarks>
        </member>
        <member name="T:System.Fabric.Health.ApplicationHealthPolicyMap">
            <summary>
            <para>Represents a map that contains specific application health policies for different applications.</para>
            </summary>
            <remarks>Can be used by queries like <see cref="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.Fabric.Description.ClusterHealthQueryDescription)"/> or <see cref="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthChunkAsync(System.Fabric.Description.ClusterHealthChunkQueryDescription)"/>
            to determine how the applications are evaluated.
            </remarks>
        </member>
        <member name="T:System.Fabric.Health.ApplicationTypeHealthPolicyMap">
            <summary>
            <para>
            Defines a map with max percentages unhealthy applications for specific application types. 
            </para>
            </summary>
            <remarks>The application type health policy map can be used during cluster health evaluation
            to describe special application types. The application types included in the map are evaluated against the percentage
            included in the map, and not with the global <see cref="P:System.Fabric.Health.ClusterHealthPolicy.MaxPercentUnhealthyApplications"/>.
            The applications of application types specified in the map are not counted against the 
            global pool of applications.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ApplicationTypeHealthPolicyMap.#ctor">
            <summary>
            <para>
            Instantiates an <see cref="T:System.Fabric.Health.ApplicationTypeHealthPolicyMap"/> class.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ApplicationTypeHealthPolicyMap.Add(System.String,System.Byte)">
            <summary>
            <para>
            Adds an entry in the map for a specific application type, with max percent unhealthy applications as value.
            </para>
            </summary>
            <param name="appTypeName">
            <para>The application type name.</para>
            </param>
            <param name="value">
            <para>The max percent unhealthy applications allowed for the application type. Must be between 0 and 100.</para>
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>The specified percentage value was outside the range of integer values from zero to 100.</para>
            </exception>p
        </member>
        <member name="T:System.Fabric.Health.ApplicationHealthReport">
            <summary>
            <para>Represents a health report to be applied on an application health entity.</para>
            </summary>
            <remarks>The report can be sent to the health store using <see cref="M:System.Fabric.FabricClient.HealthClient.ReportHealth(System.Fabric.Health.HealthReport)"/>.</remarks>
        </member>
        <member name="T:System.Fabric.Health.HealthReport">
            <summary>
            <para>Represents a base class for all health reports classes.</para>
            </summary>
            <remarks>The report can be sent to the health store using <see cref="M:System.Fabric.FabricClient.HealthClient.ReportHealth(System.Fabric.Health.HealthReport)"/>.</remarks>
        </member>
        <member name="M:System.Fabric.Health.HealthReport.#ctor(System.Fabric.Health.HealthReportKind,System.Fabric.Health.HealthInformation)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.HealthReport"/> class.</para>
            </summary>
            <param name="kind">
            <para>The kind of the health report. </para>
            </param>
            <param name="healthInformation">
            <para>The <see cref="T:System.Fabric.Health.HealthInformation"/> which describes the report fields, like sourceId, property, health state. Required.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Health.HealthReport.Kind">
            <summary>
            <para>Gets the kind of the health report.</para>
            </summary>
            <value>
            <para>The kind of the health report.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.HealthReport.HealthInformation">
            <summary>
            <para>Gets the health information that describes common health fields.</para>
            </summary>
            <value>
            <para>The health information that describes common health fields.</para>
            </value>
            <remarks>The health information is persisted in the health store inside the <see cref="T:System.Fabric.Health.HealthEvent"/>.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthReport.#ctor(System.Uri,System.Fabric.Health.HealthInformation)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.ApplicationHealthReport"/> class.</para>
            </summary>
            <param name="applicationName">
            <para>The application name. Cannot be null.</para>
            </param>
            <param name="healthInformation">
            <para>The <see cref="T:System.Fabric.Health.HealthInformation"/> which describes the report fields, like sourceId, property, health state. Cannot be null.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para>A null value was passed in for a required parameter.</para>
            </exception>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthReport.ApplicationName">
            <summary>
            <para>Gets the application name.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Uri"/> representing the application name.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.ApplicationHealthState">
            <summary>
            <para>Represents the health state of an application, which contains the application identifier and the aggregated health state.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Health.EntityHealthState">
            <summary>
            <para>Represents the base class for all entity health state classes.</para>
            </summary>
            <remarks>An entity health state contains entity identifier and entity aggregated health state.</remarks>
        </member>
        <member name="M:System.Fabric.Health.EntityHealthState.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.EntityHealthState"/> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.EntityHealthState.AggregatedHealthState">
            <summary>
            <para>Gets the aggregated health state computed by Health Manager 
            based on all reported events and the desired policy.</para>
            </summary>
            <value>
            <para>The aggregated health state computed by Health Manager.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthState.ToString">
            <summary>
            Gets a string description of the application health state.
            </summary>
            <returns>String description of the application.</returns>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthState.ApplicationName">
            <summary>
            <para>Gets the application name.</para>
            </summary>
            <value>
            <para>The application name.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.ApplicationHealthStateChunk">
            <summary>
            Represents an application health state chunk, which contains basic health information about the application.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStateChunk.#ctor">
            <summary>
            Instantiates an <see cref="T:System.Fabric.Health.ApplicationHealthStateChunk"/>.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStateChunk.ToString">
            <summary>
            Creates a string description of the health state chunk.
            </summary>
            <returns>String description of the health state chunk.</returns>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthStateChunk.ApplicationName">
            <summary>
            Gets the application name.
            </summary>
            <value>The application name.</value>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthStateChunk.ApplicationTypeName">
            <summary>
            Gets the application type name.
            </summary>
            <value>The application type name.</value>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthStateChunk.HealthState">
            <summary>
            Gets the application aggregated health state, computed based on all reported health events, the children and the application health policy.
            </summary>
            <value>The application aggregated health state.</value>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthStateChunk.ServiceHealthStateChunks">
            <summary>
            Gets the list of the service health state chunks that respect the input filters.
            </summary>
            <value>The list of the service health state chunks that respect the input filters.</value>
            <remarks>
            <para>By default, no children are included in results. Users can request to include
            some children based on desired health or other information. 
            For example, users can request to include all services that have health state error.
            Regardless of filter value, all children are used to compute application aggregated health.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthStateChunk.DeployedApplicationHealthStateChunks">
            <summary>
            Gets the list of the deployed application health state chunks that respect the input filters.
            </summary>
            <value>The list of the deployed application health state chunks that respect the input filters.</value>
            <remarks>
            <para>By default, no children are included in results. Users can request to include
            some children based on desired health or other information. 
            For example, users can request to include all deployed applications that have health state error.
            Regardless of filter value, all children are used to compute application aggregated health.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.Health.ApplicationHealthStateChunkList">
            <summary>
            Represents a list that contains <see cref="T:System.Fabric.Health.ApplicationHealthStateChunk"/> items.
            </summary>
            <remarks>The list can be obtained through health state chunk queries. The queries may have as result more chunks that can fit a message.
            In this case, the list of items that fit the message is returned plus a count that shows how many total items are available.</remarks>
        </member>
        <member name="T:System.Fabric.Health.HealthStateChunkList`1">
            <summary>
            Represents a chunk list that contains a list of health state chunk items.
            </summary>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <remarks><para>The chunk list is obtained from queries that can potentially have more results than can fit a message. 
            Only the entries that fit are returned. The list included the total number of items that should have been returned if there was enough space.</para></remarks>
        </member>
        <member name="M:System.Fabric.Health.HealthStateChunkList`1.#ctor">
            <summary>
            Instantiates an empty <see cref="T:System.Fabric.Health.HealthStateChunkList`1"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.HealthStateChunkList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Instantiates a <see cref="T:System.Fabric.Health.HealthStateChunkList`1"/> class with the items of another list.
            </summary>
            <param name="list">The list with items used to create the paged list.</param>
        </member>
        <member name="M:System.Fabric.Health.HealthStateChunkList`1.IndexOf(`0)">
            <summary>
            Gets the index in this list for the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>The index in this list for the specified item. </returns>
        </member>
        <member name="M:System.Fabric.Health.HealthStateChunkList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item into this list at the specified index.
            </summary>
            <param name="index">The index where the item will be inserted.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:System.Fabric.Health.HealthStateChunkList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index from this list. 
            </summary>
            <param name="index">The index where the item will be removed.</param>
        </member>
        <member name="M:System.Fabric.Health.HealthStateChunkList`1.Add(`0)">
            <summary>
            Adds an item to this list.
            </summary>
            <param name="item">The item to add to the list.</param>
        </member>
        <member name="M:System.Fabric.Health.HealthStateChunkList`1.Clear">
            <summary>
            Removes all items from this list.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.HealthStateChunkList`1.Contains(`0)">
            <summary>
            Specifies whether the list contains a specific item.
            </summary>
            <param name="item">The item to search.</param>
            <returns>true if the list contains a specific item; otherwise, false.</returns>
        </member>
        <member name="M:System.Fabric.Health.HealthStateChunkList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies items from this list to the specified array starting at the specified index.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">The array index.</param>
        </member>
        <member name="M:System.Fabric.Health.HealthStateChunkList`1.Remove(`0)">
            <summary>
            Removes the specified item from this list. 
            </summary>
            <param name="item">The item to be removed.</param>
            <returns>true if the item is removed; otherwise, false.</returns>
        </member>
        <member name="M:System.Fabric.Health.HealthStateChunkList`1.GetEnumerator">
            <summary>
            Gets an enumerator to items in this list. 
            </summary>
            <returns>The enumerator to items in this list. </returns>
        </member>
        <member name="M:System.Fabric.Health.HealthStateChunkList`1.ToString">
            <summary>
            Returns a string representation of the chunk list.
            </summary>
            <returns>A string representation of the chunk list.</returns>
        </member>
        <member name="M:System.Fabric.Health.HealthStateChunkList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator to items in this list. 
            </summary>
            <returns>The enumerator to items in this list. </returns>
        </member>
        <member name="P:System.Fabric.Health.HealthStateChunkList`1.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The item at the specified index.</returns>
        </member>
        <member name="P:System.Fabric.Health.HealthStateChunkList`1.TotalCount">
            <summary>
            Gets the total number of items to be returned in one or more messages.
            </summary>
            <value>The total number of items available in the system, out of which the current items were returned.</value>
        </member>
        <member name="P:System.Fabric.Health.HealthStateChunkList`1.Count">
            <summary>
            Gets or sets the number of items in the list.
            </summary>
            <value>The number of items in the list.</value>
        </member>
        <member name="P:System.Fabric.Health.HealthStateChunkList`1.IsReadOnly">
            <summary>
            Gets or sets a flag that indicated whether the list can be modified.
            </summary>
            <value>Flag indicating whether the list can be modified.</value>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStateChunkList.#ctor">
            <summary>
            Instantiates an empty <see cref="T:System.Fabric.Health.ApplicationHealthStateChunkList"/>.
            </summary>
        </member>
        <member name="T:System.Fabric.Health.ApplicationHealthStateList">
            <summary>
            <para>Represents a collection of <see cref="T:System.Fabric.Health.ApplicationHealthState"/> 
            that can be individually accessed by index.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStateList.IndexOf(System.Fabric.Health.ApplicationHealthState)">
            <summary>
            <para>Determines the index of a specific item in the collection.</para>
            </summary>
            <param name="item">
            <para>The item to locate in the collection.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.Int32"/> which represents the index of the item if found in the collection; otherwise, -1.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStateList.Insert(System.Int32,System.Fabric.Health.ApplicationHealthState)">
            <summary>
            <para>Inserts an item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index at which value should be inserted.</para>
            </param>
            <param name="item">
            <para>The item to be inserted.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStateList.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the item to remove.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStateList.Add(System.Fabric.Health.ApplicationHealthState)">
            <summary>
            <para>Adds an item to the collection.</para>
            </summary>
            <param name="item">
            <para>The item to add.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStateList.Clear">
            <summary>
            <para>Removes all items from the collection.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStateList.Contains(System.Fabric.Health.ApplicationHealthState)">
            <summary>
            <para>Determines whether the collection contains a specific value.</para>
            </summary>
            <param name="item">
            <para>The item to locate in the collection.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the item is found; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStateList.CopyTo(System.Fabric.Health.ApplicationHealthState[],System.Int32)">
            <summary>
            <para>Copies the elements of the ICollection to an Array, starting at a particular Array index.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing.</para>
            </param>
            <param name="arrayIndex">
            <para>The zero-based index in array at which copying begins.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStateList.Remove(System.Fabric.Health.ApplicationHealthState)">
            <summary>
            <para>Removes the first occurrence of a specific item from the collection.</para>
            </summary>
            <param name="item">
            <para>The item to be removed.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the item was removed; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStateList.GetEnumerator">
            <summary>
            <para>Returns an enumerator that iterates through a collection.</para>
            </summary>
            <returns>
            <para>The <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStateList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <para>Returns an enumerator that iterates through a collection.</para>
            </summary>
            <returns>
            <para>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthStateList.Item(System.Int32)">
            <summary>
            <para>Gets or sets the element at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the element to get or set.</para>
            </param>
            <returns>
            <para>The <see cref="T:System.Fabric.Health.ApplicationHealthState"/> at the specified index.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthStateList.Count">
            <summary>
            <para>Gets the number of elements.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Int32"/> representing the number of elements.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthStateList.IsReadOnly">
            <summary>
            <para>Gets a value indicating whether the list is read-only.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the list is read only; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.ApplicationHealthStateFilter">
            <summary>
            Filter for <see cref="T:System.Fabric.Health.ApplicationHealthState"/> objects.
            </summary>
            <remarks>The entity health state chunk queries can specify a list of application filters to fine-grain
            select the applications that should be included in the query result.
            Note that all the applications are used to evaluate cluster aggregated health state, regardless of the filter passed in.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStateFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Health.ApplicationHealthStateFilter"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStateFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthStateFilter.HealthStateFilter">
            <summary>
            Gets or sets filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ApplicationHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ApplicationHealthState"/> entries in the collection.</value>
            <remarks>The health state filter value comes from members or bitwise combination of members of <see cref="P:System.Fabric.Health.ApplicationHealthStateFilter.HealthStateFilter"/>. 
            For an application to match the filter, its aggregated health state must match the specified health state filter.
            If the health state filter is Default, the health state filter defaults to None if there are no specific filters (application name or application type name).
            Otherwise, the Default filter is considered to apply to All.
            </remarks>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthStateFilter.ApplicationNameFilter">
            <summary>
            Gets or sets the application name filter.
            </summary>
            <value>The application name filter.</value>
            <remarks>If specified, the filter applies only to the desired application. 
            For the application to match the filter, its aggregated health state must match
            the specified health state filter.
            </remarks>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthStateFilter.ApplicationTypeNameFilter">
            <summary>
            Gets or sets the application type name filter.
            </summary>
            <value>The application type name filter.</value>
            <remarks>If specified, the filter applies to all applications of specified application type that don't have a more specific filter (for a specific application name).
            For an application to match the filter, its aggregated health state must match the specified health state filter.
            </remarks>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthStateFilter.ServiceFilters">
            <summary>
            Gets the list of <see cref="T:System.Fabric.Health.ServiceHealthStateFilter"/> to be applied to the service children health states.
            </summary>
            <value>The list of <see cref="T:System.Fabric.Health.ServiceHealthStateFilter"/> to be applied to the service children health states.</value>
            <remarks>The list can contain one default service filter or service filters for specific services to fine-grain entities returned by the query.
            All service children that match the filter will be returned as children of the application.
            If empty, the children are not returned by default.</remarks>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthStateFilter.DeployedApplicationFilters">
            <summary>
            Gets the list of <see cref="T:System.Fabric.Health.DeployedApplicationHealthStateFilter"/> to be applied to the deployed application children health states.
            </summary>
            <value>The list of <see cref="T:System.Fabric.Health.DeployedApplicationHealthStateFilter"/> to be applied to the deployed application children health states.</value>
            <remarks>The list can contain one default deployed application filter or deployed application filters for specific deployed applications to fine-grain entities returned by the query.
            All deployed application children that match the filter will be returned as children of the application.
            If empty, the children are not returned by default.</remarks>
        </member>
        <member name="T:System.Fabric.Health.ApplicationHealthStatesFilter">
            <summary>
            <para>Provides filter for <see cref="T:System.Fabric.Health.ApplicationHealthState"/> objects.</para>
            </summary>
            <remarks>The filter can be used in <see cref="T:System.Fabric.Description.ClusterHealthQueryDescription"/>
            to specify which application children of the cluster should be returned as part of <see cref="T:System.Fabric.Health.ClusterHealth"/>.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStatesFilter.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.ApplicationHealthStatesFilter"/> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ApplicationHealthStatesFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the <see cref="T:System.Fabric.Health.ApplicationHealthStatesFilter"/>.</returns>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthStatesFilter.HealthStateFilterValue">
            <summary>
            Gets or sets the filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ApplicationHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ApplicationHealthState"/> entries.</value>
            <remarks>The input collection is filtered to return only entries that respect the desired health state. 
            The filter represents a value obtained from members or bitwise combinations of members of <see cref="T:System.Fabric.Health.HealthStateFilter"/>.</remarks>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthStatesFilter.HealthStateFilter">
            <summary>
            <para>DEPRECATED. Gets or sets filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ApplicationHealthState"/> entries in the collection. </para>
            </summary>
            <value>
            <para>The value of the filter. The value comes from members or bitwise combination of members of <see cref="T:System.Fabric.Health.HealthStateFilter"/>.</para>
            </value>
            <remarks>This property is obsolete. Use <see cref="P:System.Fabric.Health.ApplicationHealthStatesFilter.HealthStateFilterValue"/> instead.</remarks>
        </member>
        <member name="T:System.Fabric.Health.ApplicationHealthEvaluation">
            <summary>
            <para>Represents health evaluation for an application, containing information about the data and the algorithm used by health store to evaluate 
            health. </para>
            </summary>
            <remarks>The evaluation is returned only when the aggregated health state is either <see cref="F:System.Fabric.Health.HealthState.Error"/> or 
            <see cref="F:System.Fabric.Health.HealthState.Warning"/>.</remarks>
        </member>
        <member name="T:System.Fabric.Health.HealthEvaluation">
            <summary>
            <para>Represents a health evaluation which describes 
            the data and the algorithm used by health store to evaluate the health of an entity.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.HealthEvaluation.#ctor(System.Fabric.Health.HealthEvaluationKind)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.HealthEvaluation"/> class.</para>
            </summary>
            <param name="kind">
            <para>The <see cref="T:System.Fabric.Health.HealthEvaluationKind"/> of the evaluation.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.HealthEvaluation.ToString">
            <summary>
            Returns a string representation of the health evaluation.
            </summary>
            <returns>A string representation of the health evaluation.</returns>
        </member>
        <member name="P:System.Fabric.Health.HealthEvaluation.Kind">
            <summary>
            <para>Gets the kind of the health evaluation.</para>
            </summary>
            <value>
            <para>A <see cref="T:System.Fabric.Health.HealthEvaluationKind"/> of the health evaluation.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.HealthEvaluation.Description">
            <summary>
            <para>Gets the description of the health evaluation, 
            which represents a summary of the evaluation process.</para>
            </summary>
            <value>
            <para>A <see cref="T:System.String"/> representing the description of the health evaluation.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.HealthEvaluation.AggregatedHealthState">
            <summary>
            <para>The aggregated health state of the evaluated entity.</para>
            </summary>
            <value>
            <para>A <see cref="T:System.Fabric.Health.HealthState"/> representing the aggregated health state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthEvaluation.ApplicationName">
            <summary>
            <para>Gets the application name.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Uri"/> representing the application name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ApplicationHealthEvaluation.UnhealthyEvaluations">
            <summary>
            <para>Gets the unhealthy evaluations that led to the current aggregated health state of the application. </para>
            </summary>
            <value>
            <para>The list of <see cref="T:System.Fabric.Health.HealthEvaluation"/> representing the unhealthy 
            evaluations that led to current aggregated health state.</para>
            </value>
            <remarks>The types of the unhealthy evaluations 
            can be <see cref="T:System.Fabric.Health.DeployedApplicationsHealthEvaluation"/>, <see cref="T:System.Fabric.Health.ServicesHealthEvaluation"/> 
            or <see cref="T:System.Fabric.Health.EventHealthEvaluation"/>.</remarks>
        </member>
        <member name="T:System.Fabric.Health.ApplicationsHealthEvaluation">
            <summary>
            <para>Represents health evaluation for applications, containing health evaluations for each unhealthy application that impacted current 
            aggregated health state.</para>
            </summary>
            <remarks>The applications evaluation can be returned during cluster health evaluation, when the aggregated health state 
            of the cluster is either <see cref="F:System.Fabric.Health.HealthState.Error"/> or <see cref="F:System.Fabric.Health.HealthState.Warning"/>.</remarks>
        </member>
        <member name="P:System.Fabric.Health.ApplicationsHealthEvaluation.UnhealthyEvaluations">
            <summary>
            <para>Gets the list of unhealthy evaluations that led to the aggregated health state.</para>
            </summary>
            <value>
            <para>A list of <see cref="T:System.Fabric.Health.HealthEvaluation"/> representing 
            the unhealthy evaluations that led to current aggregated health state.</para>
            </value>
            <remarks>
            Includes all the unhealthy 
            <see cref="T:System.Fabric.Health.ApplicationHealthEvaluation"/> that impacted the aggregated health.</remarks>
        </member>
        <member name="P:System.Fabric.Health.ApplicationsHealthEvaluation.MaxPercentUnhealthyApplications">
            <summary>
            <para>Gets the maximum allowed percentage of unhealthy applications from the <see cref="T:System.Fabric.Health.ClusterHealthPolicy"/>.</para>
            </summary>
            <value>
            <para>The maximum allowed percentage of unhealthy applications.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ApplicationsHealthEvaluation.TotalCount">
            <summary>
            <para>Gets the total number of applications in the health store.</para>
            </summary>
            <value>
            <para>An <see cref="T:System.Int64"/> representing the total count of applications in the health store.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.ApplicationTypeApplicationsHealthEvaluation">
            <summary>
            <para>
            Represents health evaluation for applications of an application type.
            </para>
            </summary>
            <remarks>
            <para>The application type applications evaluation can be returned when 
            cluster health evaluation returns unhealthy aggregated health state, 
            either <see cref="F:System.Fabric.Health.HealthState.Error"/> or <see cref="F:System.Fabric.Health.HealthState.Warning"/>.
            It contains health evaluations for each unhealthy application 
            of the included application type that impacted current aggregated health state.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Health.ApplicationTypeApplicationsHealthEvaluation.ApplicationTypeName">
            <summary>
            <para>
            Gets the application type name.
            </para>
            </summary>
            <value>
            <para>The application type name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ApplicationTypeApplicationsHealthEvaluation.UnhealthyEvaluations">
            <summary>
            <para>
            Gets the list of unhealthy evaluations that led to the aggregated health state.
            </para>
            </summary>
            <value>
            <para>The list of unhealthy evaluations for the specified application type.</para>
            </value>
            <remarks> Includes all the unhealthy 
            <see cref="T:System.Fabric.Health.ApplicationHealthEvaluation"/> of this application type that impacted the aggregated health.</remarks>
        </member>
        <member name="P:System.Fabric.Health.ApplicationTypeApplicationsHealthEvaluation.MaxPercentUnhealthyApplications">
            <summary>
            <para>
            Gets the maximum allowed percentage of unhealthy applications for the application type, specified as an entry in 
            <see cref="T:System.Fabric.Health.ApplicationTypeHealthPolicyMap"/>.
            </para>
            </summary>
            <value>
            <para>The maximum allowed percentage of unhealthy applications for the application type.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ApplicationTypeApplicationsHealthEvaluation.TotalCount">
            <summary>
            <para>
            Gets the total number of applications of the application type found in the health store.
            </para>
            </summary>
            <value>
            <para>The total number of applications of the application type.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.ClusterHealth">
            <summary>
            <para>Represents the health of the cluster, as returned by <see cref="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.Fabric.Description.ClusterHealthQueryDescription)"/>. Contains 
            the cluster aggregated health state and the cluster application and node health states.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.ClusterHealth.NodeHealthStates">
            <summary>
            <para>Gets the cluster node health states as found in the health store.</para>
            </summary>
            <value>
            <para>The cluster nodes as found in the health store.</para>
            </value>
            <para>Only nodes that respect the <see cref="P:System.Fabric.Description.ClusterHealthQueryDescription.NodesFilter"/> (if specified) are returned. 
            If the input filter is not specified, all nodes are returned.</para>
            <para>All nodes are evaluated to determine the cluster aggregated health.</para>
        </member>
        <member name="P:System.Fabric.Health.ClusterHealth.ApplicationHealthStates">
            <summary>
            <para>Gets the cluster application health states as found in the health store.</para>
            </summary>
            <value>
            <para>The cluster applications as found in the health store.</para>
            </value>
            <para>Only applications that respect the <see cref="P:System.Fabric.Description.ClusterHealthQueryDescription.ApplicationsFilter"/> (if specified) are returned. 
            If the input filter is not specified, all applications are returned.</para>
            <para>All applications are evaluated to determine the cluster aggregated health.</para>
        </member>
        <member name="T:System.Fabric.Health.ClusterHealthChunk">
            <summary>
            Represents the cluster state chunk, which includes health information about the cluster.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ClusterHealthChunk.#ctor">
            <summary>
            Instantiates a <see cref="T:System.Fabric.Health.ClusterHealthChunk"/>.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ClusterHealthChunk.ToString">
            <summary>
            Creates a string description of the cluster chunk.
            </summary>
            <returns>String description of the cluster chunk.</returns>
        </member>
        <member name="P:System.Fabric.Health.ClusterHealthChunk.HealthState">
            <summary>
            Gets the cluster aggregated health state.
            </summary>
            <value>The cluster aggregated health state.</value>
        </member>
        <member name="P:System.Fabric.Health.ClusterHealthChunk.NodeHealthStateChunks">
            <summary>
            Gets the list of the node health state chunks that respect the input filters.
            </summary>
            <value>The list of the node health state chunks that respect the input filters.</value>
            <remarks>
            <para>By default, no children are included in results. Users can request to include
            some children based on desired health or other information.</para></remarks>
        </member>
        <member name="P:System.Fabric.Health.ClusterHealthChunk.ApplicationHealthStateChunks">
            <summary>
            Gets the list of the application health state chunks that respect the input filters.
            </summary>
            <value>The list of the application health state chunks that respect the input filters.</value>
            <remarks>
            <para>By default, no children are included in results. Users can request to include
            some children based on desired health or other information.</para></remarks>
        </member>
        <member name="T:System.Fabric.Health.ClusterHealthPolicy">
            <summary>
            <para>Defines a health policy used to evaluate the health of the cluster or of a cluster node.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ClusterHealthPolicy.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.ClusterHealthPolicy"/> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ClusterHealthPolicy.ToString">
            <summary>
            Gets a string representation of the cluster health policy.
            </summary>
            <returns>A string representation of the cluster health policy.</returns>
        </member>
        <member name="P:System.Fabric.Health.ClusterHealthPolicy.ConsiderWarningAsError">
            <summary>
            <para>Gets or sets a <see cref="T:System.Boolean"/> that determines whether warnings should be treated with the same severity as errors.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if warnings should be treated as errors; <languageKeyword>false</languageKeyword> if warnings 
            should not be treated as errors.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ClusterHealthPolicy.MaxPercentUnhealthyNodes">
            <summary>
            <para>Gets or sets the maximum allowed percentage of unhealthy nodes.</para>
            </summary>
            <value>
            <para>The maximum allowed percentage of unhealthy nodes. Allowed values are integer values from zero to 100.</para>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>The specified value was outside the range of integer values from zero to 100.</para>
            </exception>
        </member>
        <member name="P:System.Fabric.Health.ClusterHealthPolicy.MaxPercentUnhealthyApplications">
            <summary>
            <para>Gets or sets the maximum allowed percentage of unhealthy applications.</para>
            </summary>
            <value>
            <para>The maximum allowed percentage of unhealthy applications. Allowed values are integer values from zero to 100.</para>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>The specified value was outside the range of integer values from zero to 100.</para>
            </exception>
        </member>
        <member name="P:System.Fabric.Health.ClusterHealthPolicy.ApplicationTypeHealthPolicyMap">
            <summary>
            <para>
            Gets the map with MaxPercentUnhealthyApplications per application type name. 
            </para>
            </summary>
            <value>
            <para>The application type health policy map with MaxPercentUnhealthyApplications per application type name.</para>
            </value>
            <remarks>The application type health policy map can be used during cluster health evaluation
            to describe special application types. The application types included in the map are evaluated against the percentage
            included in the map, and not with the global <see cref="P:System.Fabric.Health.ClusterHealthPolicy.MaxPercentUnhealthyApplications"/>.
            The applications of application types specified in the map are not counted against the 
            global pool of applications.
            If no policy is specified for an application type, the default MaxPercentUnhealthyApplications is used for evaluation.
            </remarks>
        </member>
        <member name="T:System.Fabric.Health.ClusterHealthReport">
            <summary>
            <para>Represents a health report to be applied on the cluster health entity.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ClusterHealthReport.#ctor(System.Fabric.Health.HealthInformation)">
            <summary>
            <para>Creates a cluster health report.</para>
            </summary>
            <param name="healthInformation">
            <para>The health information which describes the report parameters. Cannot be null.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para>A null value was passed in for a required parameter.</para>
            </exception>
        </member>
        <member name="T:System.Fabric.Health.ClusterUpgradeHealthPolicy">
            <summary>
            <para>Defines a health policy used to evaluate the health of the cluster specific to cluster upgrade.</para>
            </summary>
            <remarks>
            <para>It’s used together 
            with <see cref="T:System.Fabric.Health.ClusterHealthPolicy"/> to evaluate cluster health and determine whether the monitored 
            cluster upgrade is successful or needs to be rolled back.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Health.ClusterUpgradeHealthPolicy.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.ClusterUpgradeHealthPolicy"/> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.ClusterUpgradeHealthPolicy.MaxPercentDeltaUnhealthyNodes">
            <summary>
            <para>Gets or sets the maximum allowed percentage of nodes health degradation allowed during cluster upgrades.
            </para>
            </summary>
            <value>
            <para>The maximum allowed percentage of delta health degradation. Allowed values are integer values from zero to 100.</para>
            </value>
            <remarks>The delta is 
            measured between the state of the nodes at the beginning of upgrade and the state of the nodes at the time of the health evaluation. 
            The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated 
            limits. The default value is 10%.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>The specified value was outside the range of integer values from zero to 100.</para>
            </exception>
        </member>
        <member name="P:System.Fabric.Health.ClusterUpgradeHealthPolicy.MaxPercentUpgradeDomainDeltaUnhealthyNodes">
            <summary>
            <para>Gets or sets the maximum allowed percentage of upgrade domain nodes health degradation 
            allowed during cluster upgrades.</para>
            </summary>
            <value>
            <para>The maximum allowed percentage of upgrade domain delta health degradation. Allowed values are integer values from zero to 100.</para>
            </value>
            <remarks>The delta 
            is measured between the state of the upgrade domain nodes at the beginning of upgrade and the state of the upgrade domain nodes at the 
            time of the health evaluation. The check is performed after every upgrade domain upgrade completion for all completed upgrade domains 
            to make sure the state of the upgrade domains is within tolerated limits. The default value is 15%.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>The specified value was outside the range of integer values from zero to 100.</para>
            </exception>
        </member>
        <member name="T:System.Fabric.Health.DeltaNodesCheckHealthEvaluation">
            <summary>
            <para>Represents health evaluation for delta nodes, 
            containing health evaluations for each unhealthy node that impacted current 
            aggregated health state. 
            Can be returned during cluster upgrade when the aggregated health state of the cluster is 
            <see cref="F:System.Fabric.Health.HealthState.Error"/>.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.DeltaNodesCheckHealthEvaluation.BaselineErrorCount">
            <summary>
            <para>Gets the number of nodes with aggregated heath state <see cref="F:System.Fabric.Health.HealthState.Error"/> in the health store 
            at the beginning of the cluster upgrade.</para>
            </summary>
            <value>
            <para>The number of nodes with aggregated heath state <see cref="F:System.Fabric.Health.HealthState.Error"/> in the health store at 
            the beginning of the cluster upgrade.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeltaNodesCheckHealthEvaluation.BaselineTotalCount">
            <summary>
            <para>Gets the total number of nodes in the health store at the beginning of the cluster upgrade.</para>
            </summary>
            <value>
            <para>The total number of nodes in the health store at the beginning of the cluster upgrade.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeltaNodesCheckHealthEvaluation.TotalCount">
            <summary>
            <para>Gets the current total number of nodes in the health store.</para>
            </summary>
            <value>
            <para>The current total number of nodes in the health store.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeltaNodesCheckHealthEvaluation.MaxPercentDeltaUnhealthyNodes">
            <summary>
            <para>Gets the maximum allowed percentage of delta unhealthy nodes from the <see cref="T:System.Fabric.Health.ClusterUpgradeHealthPolicy"/>.</para>
            </summary>
            <value>
            <para>The maximum allowed percentage of delta unhealthy nodes.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeltaNodesCheckHealthEvaluation.UnhealthyEvaluations">
            <summary>
            <para>Gets the list of unhealthy evaluations that led to the aggregated health state. 
            Includes all the unhealthy 
            <see cref="T:System.Fabric.Health.NodeHealthEvaluation"/> that impacted the aggregated health.</para>
            </summary>
            <value>
            <para>Returns a list of the unhealthy evaluations that 
            led to current aggregated health state.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.DeployedApplicationHealth">
            <summary>
            <para>Describes the health of an application deployed on a node as returned by <see cref="M:System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Fabric.Description.DeployedApplicationHealthQueryDescription)"/>.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealth.ApplicationName">
            <summary>
            <para>Gets the application name, which uniquely identifies the application . </para>
            </summary>
            <value>
            <para>The application name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealth.NodeName">
            <summary>
            <para>Gets the node name for the node where the application is deployed.</para>
            </summary>
            <value>
            <para>The node name for the node where the application is deployed.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealth.DeployedServicePackageHealthStates">
            <summary>
            <para>Gets the deployed service package health states for the current deployed application as found in the health store.</para>
            </summary>
            <value>
            <para>The deployed service packages of the current deployed application as found in the health store.</para>
            </value>
            <para>Only deployed service packages that respect the <see cref="P:System.Fabric.Description.DeployedApplicationHealthQueryDescription.DeployedServicePackagesFilter"/> (if specified) are returned. 
            If the input filter is not specified, all deployed service packages are returned.</para>
            <para>All deployed service packages are evaluated to determine the deployed application aggregated health.</para>
        </member>
        <member name="T:System.Fabric.Health.DeployedApplicationHealthReport">
            <summary>
            <para>Represents a health report to be applied on the deployed application health entity. </para>
            </summary>
            <remarks>The report can be sent to the health store using <see cref="M:System.Fabric.FabricClient.HealthClient.ReportHealth(System.Fabric.Health.HealthReport)"/>.</remarks>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthReport.#ctor(System.Uri,System.String,System.Fabric.Health.HealthInformation)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.DeployedApplicationHealthReport"/> class.</para>
            </summary>
            <param name="applicationName">
            <para>The application name. Cannot be null.</para>
            </param>
            <param name="nodeName">
            <para>The node name. Cannot be null or empty.</para>
            </param>
            <param name="healthInformation">
            <para>The <see cref="T:System.Fabric.Health.HealthInformation"/> which describes the report fields, like sourceId, property, 
            health state. Cannot be null.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para>The <paramref name="applicationName"/> cannot be null.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>
                <paramref name="nodeName"/> cannot be empty.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>
                <paramref name="nodeName"/> cannot be null.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>
                <paramref name="healthInformation"/> cannot be null.</para>
            </exception>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthReport.ApplicationName">
            <summary>
            <para>Gets the application name.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Uri"/> representing the application name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthReport.NodeName">
            <summary>
            <para>Gets the node name where the deployed application is running.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.String"/> representing the node name.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.DeployedApplicationHealthState">
            <summary>
            <para>Represents the health state of a deployed application, which contains the entity identifier and the aggregated health state.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthState.ToString">
            <summary>
            Creates a string description of the application on the node, containing the id and the health state.
            </summary>
            <returns>String description of the <see cref="T:System.Fabric.Health.DeployedApplicationHealthState"/>.</returns>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthState.ApplicationName">
            <summary>
            <para>Gets the application name.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Uri"/> of the application.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthState.NodeName">
            <summary>
            <para>Gets the node name of the deployed application.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.String"/> representing the node name.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.DeployedApplicationHealthStateChunk">
            <summary>
            Represents a deployed application health state chunk, which contains basic health information about the deployed application.
            It is included as child of an application.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStateChunk.#ctor">
            <summary>
            Instantiates a <see cref="T:System.Fabric.Health.DeployedApplicationHealthStateChunk"/>.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStateChunk.ToString">
            <summary>
            Creates a string description of the health state chunk.
            </summary>
            <returns>String description of the health state chunk.</returns>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthStateChunk.NodeName">
            <summary>
            Gets the node name.
            </summary>
            <value>The node name.</value>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthStateChunk.HealthState">
            <summary>
            Gets the aggregated health state of the deployed application, computed based on all reported health events, the children and the application health policy.
            </summary>
            <value>The aggregated health state of the deployed application.</value>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthStateChunk.DeployedServicePackageHealthStateChunks">
            <summary>
            Gets the list of the deployed service package health state chunks children that respect the input filters.
            </summary>
            <value>The list of the deployed service package  replica health state chunks children that respect the input filters.</value>
            <remarks>
            <para>By default, no children are included in results. Users can request to include
            some children based on desired health or other information. 
            For example, users can request to include all deployed service packages that have health state error.
            Regardless of filter value, all children are used to compute the entity aggregated health.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.Health.DeployedApplicationHealthStateChunkList">
            <summary>
            Represents a list that contains <see cref="T:System.Fabric.Health.DeployedApplicationHealthStateChunk"/> items.
            </summary>
            <remarks>The list can be obtained through health state chunk queries. The queries may have as result more chunks that can fit a message.
            In this case, the list of items that fit the message is returned plus a count that shows how many total items are available.</remarks>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStateChunkList.#ctor">
            <summary>
            Instantiates an empty <see cref="T:System.Fabric.Health.DeployedApplicationHealthStateChunkList"/>.
            </summary>
        </member>
        <member name="T:System.Fabric.Health.DeployedApplicationHealthStateList">
            <summary>
            <para>Represents a collection of <see cref="T:System.Fabric.Health.DeployedApplicationHealthState"/> that can be individually accessed by index.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStateList.IndexOf(System.Fabric.Health.DeployedApplicationHealthState)">
            <summary>
            <para>Determines the index of a specific item in the collection.</para>
            </summary>
            <param name="item">
            <para>The item to locate in the collection.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.Int32"/> which represents the index of the item if found in the collection; otherwise, -1.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStateList.Insert(System.Int32,System.Fabric.Health.DeployedApplicationHealthState)">
            <summary>
            <para>Inserts an item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index at which value should be inserted.</para>
            </param>
            <param name="item">
            <para>The item to be inserted.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStateList.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the item to remove.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStateList.Add(System.Fabric.Health.DeployedApplicationHealthState)">
            <summary>
            <para>Adds an item to the collection.</para>
            </summary>
            <param name="item">
            <para>The item to add.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStateList.Clear">
            <summary>
            <para>Removes all items from the collection.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStateList.Contains(System.Fabric.Health.DeployedApplicationHealthState)">
            <summary>
            <para>Determines whether the collection contains a specific value.</para>
            </summary>
            <param name="item">
            <para>The item to locate in the collection.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the item is found; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStateList.CopyTo(System.Fabric.Health.DeployedApplicationHealthState[],System.Int32)">
            <summary>
            <para>Copies the elements of the ICollection to an Array, starting at a particular Array index.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing.</para>
            </param>
            <param name="arrayIndex">
            <para>The zero-based index in array at which copying begins.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStateList.Remove(System.Fabric.Health.DeployedApplicationHealthState)">
            <summary>
            <para>Removes the first occurrence of a specific item from the collection.</para>
            </summary>
            <param name="item">
            <para>The item to be removed.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the item was removed; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStateList.GetEnumerator">
            <summary>
            <para>Returns an enumerator that iterates through a collection.</para>
            </summary>
            <returns>
            <para>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStateList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <para>Returns an enumerator that iterates through a collection.</para>
            </summary>
            <returns>
            <para>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthStateList.Item(System.Int32)">
            <summary>
            <para>Gets or sets the element at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the element to get or set.</para>
            </param>
            <returns>
            <para>The <see cref="T:System.Fabric.Health.DeployedApplicationHealthState"/> at the specified index.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthStateList.Count">
            <summary>
            <para>Gets the number of elements in the collection.</para>
            </summary>
            <value>
            <para>An <see cref="T:System.Int32"/> representing the number of elements in the collection.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthStateList.IsReadOnly">
            <summary>
            <para>Gets a value indicating whether the list is read-only.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the collection is read-only; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.DeployedApplicationHealthStateFilter">
            <summary>
            Filter for <see cref="T:System.Fabric.Health.DeployedApplicationHealthState"/> objects.
            </summary>
            <remarks>The health state chunk queries can specify a list of deployed application filters to fine-grain
            select the deployed applications that should be included in the query result.
            Note that all the deployed applications are used to evaluate parents' aggregated health state, regardless of the filter passed in.</remarks>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStateFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Health.DeployedApplicationHealthStateFilter"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStateFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthStateFilter.HealthStateFilter">
            <summary>
            Gets or sets filter for the aggregated health state of the <see cref="T:System.Fabric.Health.DeployedApplicationHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.DeployedApplicationHealthState"/> entries in the collection.</value>
            <remarks>The health state filter value comes from members or bitwise combination of members of <see cref="P:System.Fabric.Health.DeployedApplicationHealthStateFilter.HealthStateFilter"/>. 
            For a deployed application to match the filter, its aggregated health state must match the specified health state filter.</remarks>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthStateFilter.NodeNameFilter">
            <summary>
            Gets or sets the node name filter.
            </summary>
            <value>The node name filter.</value>
            <remarks>If not specified, all deployed applications that match the parent filters (if any) are taken into consideration and matched against the other filter members, like health state filter.
            Otherwise, the filter only applies to applications deployed on the specified node.</remarks>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthStateFilter.DeployedServicePackageFilters">
            <summary>
            Gets the list of <see cref="T:System.Fabric.Health.DeployedServicePackageHealthStateFilter"/> to be applied to the deployed service package health states.
            </summary>
            <value>The list of <see cref="T:System.Fabric.Health.DeployedServicePackageHealthStateFilter"/> to be applied to the deployed service package health states.</value>
            <remarks>All deployed service packages that match the filter will be returned as children of the deployed application.
            If empty, the children are not returned by default.</remarks>
        </member>
        <member name="T:System.Fabric.Health.DeployedApplicationHealthStatesFilter">
            <summary>
            <para>Represents the filter for <see cref="T:System.Fabric.Health.DeployedApplicationHealthState"/> objects.</para>
            </summary>
            <remarks>The filter can be used in <see cref="T:System.Fabric.Description.ApplicationHealthQueryDescription"/>
            to specify which deployed application children should be returned as part of <see cref="T:System.Fabric.Health.ApplicationHealth"/>.</remarks>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStatesFilter.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.DeployedApplicationHealthStatesFilter"/> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.DeployedApplicationHealthStatesFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the <see cref="T:System.Fabric.Health.DeployedApplicationHealthStatesFilter"/>.</returns>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthStatesFilter.HealthStateFilterValue">
            <summary>
            Gets or sets the filter for the aggregated health state of the <see cref="T:System.Fabric.Health.DeployedApplicationHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.DeployedApplicationHealthState"/> entries.</value>
            <remarks>The input collection is filtered to return only entries that respect the desired health state. 
            The filter represents a value obtained from members or bitwise combinations of members of <see cref="T:System.Fabric.Health.HealthStateFilter"/>.</remarks>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthStatesFilter.HealthStateFilter">
            <summary>
            <para>DEPRECATED. Gets or sets the filter for the aggregated health state of the <see cref="T:System.Fabric.Health.DeployedApplicationHealthState"/> entries 
            in the collection. Represents a value obtained from members or bitwise combinations of members of <see cref="T:System.Fabric.Health.HealthStateFilter"/>.</para>
            </summary>
            <value>
            <para>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.DeployedApplicationHealthState"/> entries in the collection.</para>
            </value>
            <remarks>This property is obsolete. Use <see cref="P:System.Fabric.Health.DeployedApplicationHealthStatesFilter.HealthStateFilterValue"/> instead.</remarks>
        </member>
        <member name="T:System.Fabric.Health.DeployedApplicationHealthEvaluation">
            <summary>
            <para>Represents health evaluation for a deployed application,
            containing information about the data and the algorithm used by health store 
            to evaluate health. </para>
            </summary>
            <remarks>The evaluation is returned only when the aggregated health state is either <see cref="F:System.Fabric.Health.HealthState.Error"/> 
            or <see cref="F:System.Fabric.Health.HealthState.Warning"/>.</remarks>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthEvaluation.ApplicationName">
            <summary>
            <para>Gets the application name.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Uri"/> representing the application name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthEvaluation.NodeName">
            <summary>
            <para>Gets the name of the node where the deployed application is running.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.String"/> representing the node name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationHealthEvaluation.UnhealthyEvaluations">
            <summary>
            <para>Gets the unhealthy evaluations that led to the current aggregated health state 
            of the deployed application. The types of the 
            unhealthy evaluations can be <see cref="T:System.Fabric.Health.DeployedServicePackagesHealthEvaluation"/> or 
            <see cref="T:System.Fabric.Health.EventHealthEvaluation"/>.</para>
            </summary>
            <value>
            <para>The list of unhealthy evaluations that led to the current aggregated health state.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.DeployedApplicationsHealthEvaluation">
            <summary>
            <para>Represents health evaluation for deployed applications, 
            containing health evaluations for each unhealthy deployed application that impacted 
            current aggregated health state. 
            Can be returned when evaluating application health and the aggregated health state is 
            either <see cref="F:System.Fabric.Health.HealthState.Error"/> or <see cref="F:System.Fabric.Health.HealthState.Warning"/>.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationsHealthEvaluation.UnhealthyEvaluations">
            <summary>
            <para>Gets the list of unhealthy evaluations that led to the aggregated health state. 
            Includes all the unhealthy 
            <see cref="T:System.Fabric.Health.DeployedApplicationHealthEvaluation"/> that impacted the aggregated health.</para>
            </summary>
            <value>
            <para>A list of unhealthy 
            evaluations that led to current aggregated health state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationsHealthEvaluation.MaxPercentUnhealthyDeployedApplications">
            <summary>
            <para>Gets the maximum allowed percentage of unhealthy deployed applications
            from the <see cref="T:System.Fabric.Health.ApplicationHealthPolicy"/>.</para>
            </summary>
            <value>
            <para>A <see cref="T:System.Byte"/> representing the maximum allowed percentage 
            of unhealthy deployed applications.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedApplicationsHealthEvaluation.TotalCount">
            <summary>
            <para>Gets the total number of deployed applications of the application in the health store.</para>
            </summary>
            <value>
            <para>An <see cref="T:System.Int64"/> representing the total count of 
            deployed applications of the application in the health store.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.DeployedServicePackageHealth">
            <summary>
            <para>Describes the health of a deployed service package 
            as returned by <see cref="M:System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Fabric.Description.DeployedServicePackageHealthQueryDescription)"/>.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealth.ApplicationName">
            <summary>
            <para>Gets the application name, which uniquely identifies the application.</para>
            </summary>
            <value>
            <para>The application name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealth.ServiceManifestName">
            <summary>
            <para>Gets the service manifest name.</para>
            </summary>
            <value>
            <para>The service manifest name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealth.NodeName">
            <summary>
            <para>Gets the node name where the deployed service package is running.</para>
            </summary>
            <value>
            <para>The node name where the deployed service package is running.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.DeployedServicePackageHealthReport">
            <summary>
            <para>Represents a health report to be applied on the deployed service package health entity. </para>
            </summary>
            <remarks>The report can be sent to the health store using <see cref="M:System.Fabric.FabricClient.HealthClient.ReportHealth(System.Fabric.Health.HealthReport)"/>.</remarks>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthReport.#ctor(System.Uri,System.String,System.String,System.Fabric.Health.HealthInformation)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.DeployedServicePackageHealthReport"/> class.</para>
            </summary>
            <param name="applicationName">
            <para>The application name. Cannot be null or empty.</para>
            </param>
            <param name="serviceManifestName">
            <para>Service manifest name. Cannot be null or empty.</para>
            </param>
            <param name="nodeName">
            <para>The node name. Cannot be null or empty.</para>
            </param>
            <param name="healthInformation">
            <para>The <see cref="T:System.Fabric.Health.HealthInformation"/> which describes the report fields, like sourceId, property, health state. Required.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para>The application name cannot be null.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Node name is invalid.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Node name cannot be null.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Health information cannot be null.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Service manifest name cannot be null.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Service manifest name is invalid.</para>
            </exception>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthReport.ApplicationName">
            <summary>
            <para>Gets the application name.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Uri"/> representing the application name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthReport.ServiceManifestName">
            <summary>
            <para>Gets the service manifest name.</para>
            </summary>
            <value>
            <para>A <see cref="T:System.String"/> representing the service manifest name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthReport.NodeName">
            <summary>
            <para>Gets the name of the node where the deployed service package is running.</para>
            </summary>
            <value>
            <para>A <see cref="T:System.String"/> representing the node name.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.DeployedServicePackageHealthState">
            <summary>
            <para>Represents the health state of a deployed service package, containing the entity identifier and the aggregated health state.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthState.ToString">
            <summary>
            Creates a string description of the deployed service package health state, containing the identifier and the aggregated health state.
            </summary>
            <returns>String description of the <see cref="T:System.Fabric.Health.DeployedServicePackageHealthState"/>.</returns>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthState.ApplicationName">
            <summary>
            <para>Gets the application name.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Uri"/> representing the application name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthState.ServiceManifestName">
            <summary>
            <para>Gets the service manifest name.</para>
            </summary>
            <value>
            <para>A <see cref="T:System.String"/> representing the service manifest name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthState.NodeName">
            <summary>
            <para>Gets the node name of the node where the deployed service package is running.</para>
            </summary>
            <value>
            <para>A <see cref="T:System.String"/> representing the node name.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.DeployedServicePackageHealthStateChunk">
            <summary>
            Represents a deployed service package health state chunk, which contains basic health information about the deployed service package.
            It is included as child of a deployed application.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthStateChunk.#ctor">
            <summary>
            Instantiates a <see cref="T:System.Fabric.Health.DeployedServicePackageHealthStateChunk"/>.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthStateChunk.ToString">
            <summary>
            Creates a string description of the deployed service package health state chunk.
            </summary>
            <returns>String description of the health state chunk.</returns>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthStateChunk.ServiceManifestName">
            <summary>
            Gets the service manifest name, which is part of the deployed service package unique identifier, together with node name and application name.
            </summary>
            <value>The service manifest name.</value>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthStateChunk.HealthState">
            <summary>
            Gets the aggregated health state of the deployed service package, computed based on all reported health events and the application health policy.
            </summary>
            <value>The aggregated health state of the deployed service package .</value>
        </member>
        <member name="T:System.Fabric.Health.DeployedServicePackageHealthStateChunkList">
            <summary>
            Represents a list that contains <see cref="T:System.Fabric.Health.DeployedServicePackageHealthStateChunk"/> items.
            </summary>
            <remarks>The list can be obtained through health state chunk queries. The queries may have as result more chunks that can fit a message.
            In this case, the list of items that fit the message is returned plus a count that shows how many total items are available.</remarks>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthStateChunkList.#ctor">
            <summary>
            Instantiates an empty <see cref="T:System.Fabric.Health.DeployedServicePackageHealthStateChunkList"/>.
            </summary>
        </member>
        <member name="T:System.Fabric.Health.DeployedServicePackageHealthStateList">
            <summary>
            <para>Represents a collection of <see cref="T:System.Fabric.Health.DeployedServicePackageHealthState"/> that can be individually accessed by index.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthStateList.IndexOf(System.Fabric.Health.DeployedServicePackageHealthState)">
            <summary>
            <para>Determines the index of a specific item in the collection.</para>
            </summary>
            <param name="item">
            <para>The item to locate in the collection.</para>
            </param>
            <returns>
            <para>An <see cref="T:System.Int32"/> which represents the index of the item if found in the collection; otherwise, -1.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthStateList.Insert(System.Int32,System.Fabric.Health.DeployedServicePackageHealthState)">
            <summary>
            <para>Inserts an item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index at which value should be inserted.</para>
            </param>
            <param name="item">
            <para>The item to be inserted.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthStateList.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the item to remove.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthStateList.Add(System.Fabric.Health.DeployedServicePackageHealthState)">
            <summary>
            <para>Adds an item to the collection.</para>
            </summary>
            <param name="item">
            <para>The item to add.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthStateList.Clear">
            <summary>
            <para>Removes all items from the collection.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthStateList.Contains(System.Fabric.Health.DeployedServicePackageHealthState)">
            <summary>
            <para>Determines whether the collection contains a specific value.</para>
            </summary>
            <param name="item">
            <para>The item to locate in the collection.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the item is found; otherwise, <languageKeyword>false</languageKeyword>. </para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthStateList.CopyTo(System.Fabric.Health.DeployedServicePackageHealthState[],System.Int32)">
            <summary>
            <para>Copies the elements of the ICollection to an Array, starting at a particular Array index.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing.</para>
            </param>
            <param name="arrayIndex">
            <para>The zero-based index in array at which copying begins.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthStateList.Remove(System.Fabric.Health.DeployedServicePackageHealthState)">
            <summary>
            <para>Removes the first occurrence of a specific item from the collection.</para>
            </summary>
            <param name="item">
            <para>The item to be removed.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the item was removed; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthStateList.GetEnumerator">
            <summary>
            <para>Returns an enumerator that iterates through a collection.</para>
            </summary>
            <returns>
            <para>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthStateList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <para>Returns an enumerator that iterates through a collection.</para>
            </summary>
            <returns>
            <para>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthStateList.Item(System.Int32)">
            <summary>
            <para>Gets or sets the element at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the element to get or set.</para>
            </param>
            <returns>
            <para>The <see cref="T:System.Fabric.Health.DeployedServicePackageHealthState"/> at the specified index.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthStateList.Count">
            <summary>
            <para>Gets the number of elements.</para>
            </summary>
            <value>
            <para>An <see cref="T:System.Int32"/> representing the number of elements.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthStateList.IsReadOnly">
            <summary>
            <para>Gets a value indicating whether the list is read-only.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the collection is read-only; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.DeployedServicePackageHealthStateFilter">
            <summary>
            Filter for <see cref="T:System.Fabric.Health.DeployedServicePackageHealthState"/> objects.
            </summary>
            <remarks>The health state chunk queries can specify a list of deployed service package filters to fine-grain
            select the deployed service packages that should be included in the query result.
            Note that all the deployed service packages are used to evaluate parents aggregated health state, regardless of the filter passed in.</remarks>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthStateFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Health.DeployedServicePackageHealthStateFilter"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthStateFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthStateFilter.HealthStateFilter">
            <summary>
            Gets or sets filter for the aggregated health state of the <see cref="T:System.Fabric.Health.DeployedServicePackageHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.DeployedServicePackageHealthState"/> entries in the collection.</value>
            <remarks>The health state filter value comes from members or bitwise combination of members of <see cref="P:System.Fabric.Health.DeployedServicePackageHealthStateFilter.HealthStateFilter"/>. 
            For a deployed service package to match the filter, its aggregated health state must match the specified health state filter.</remarks>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthStateFilter.ServiceManifestNameFilter">
            <summary>
            Gets or sets the service manifest name filter.
            </summary>
            <value>The service manifest name filter.</value>
            <remarks>If not specified, all deployed service packages that match the parent filters (if any) and the specified health state filters match the filter.
            Otherwise, the filter only applies to the deployed service package for the specified service manifest name and the health state filter will be matched against it.</remarks>
        </member>
        <member name="T:System.Fabric.Health.DeployedServicePackageHealthStatesFilter">
            <summary>
            <para>Represents the filter for <see cref="T:System.Fabric.Health.DeployedServicePackageHealthState"/> objects.</para>
            </summary>
            <remarks>The filter can be used in <see cref="T:System.Fabric.Description.DeployedApplicationHealthQueryDescription"/>
            to specify which deployed service package children should be returned as part of <see cref="T:System.Fabric.Health.DeployedApplicationHealth"/>.</remarks>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthStatesFilter.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.DeployedServicePackageHealthStatesFilter"/> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.DeployedServicePackageHealthStatesFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthStatesFilter.HealthStateFilterValue">
            <summary>
            Gets or sets the filter for the aggregated health state of the <see cref="T:System.Fabric.Health.DeployedServicePackageHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.DeployedServicePackageHealthState"/> entries.</value>
            <remarks>The input collection is filtered to return only entries that respect the desired health state. 
            The filter represents a value obtained from members or bitwise combinations of members of <see cref="T:System.Fabric.Health.HealthStateFilter"/>.</remarks>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthStatesFilter.HealthStateFilter">
            <summary>
            <para>DEPRECATED. Gets or sets the filter for the aggregated health state of the <see cref="T:System.Fabric.Health.DeployedServicePackageHealthState"/> 
            entries in the collection. Represents a value obtained from members or bitwise combinations of members of <see cref="T:System.Fabric.Health.HealthStateFilter"/>.</para>
            </summary>
            <value>
            <para>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.DeployedServicePackageHealthState"/> entries in the collection.</para>
            </value>
            <remarks>This property is obsolete. Use <see cref="P:System.Fabric.Health.ApplicationHealthStatesFilter.HealthStateFilterValue"/> instead.</remarks>
        </member>
        <member name="T:System.Fabric.Health.DeployedServicePackageHealthEvaluation">
            <summary>
            <para>Represents health evaluation for a deployed service package,
            containing information about the data and the algorithm used by 
            health store to evaluate health.
            The evaluation is returned only when the aggregated health state is either 
            <see cref="F:System.Fabric.Health.HealthState.Error"/> or <see cref="F:System.Fabric.Health.HealthState.Warning"/>.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthEvaluation.ApplicationName">
            <summary>
            <para>Gets the name of the application.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Uri"/> representing the application name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthEvaluation.NodeName">
            <summary>
            <para>Gets the name of the node where the deployed service package is running.</para>
            </summary>
            <value>
            <para>A <see cref="T:System.String"/> representing the node name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthEvaluation.ServiceManifestName">
            <summary>
            <para>Gets the service manifest name.</para>
            </summary>
            <value>
            <para>The service manifest name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackageHealthEvaluation.UnhealthyEvaluations">
            <summary>
            <para>Gets the unhealthy evaluations that led to the current aggregated health state. 
            The type of the unhealthy evaluations can 
            be <see cref="T:System.Fabric.Health.EventHealthEvaluation"/>.</para>
            </summary>
            <value>
            <para>The unhealthy evaluations that led to current aggregated health state.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.DeployedServicePackagesHealthEvaluation">
            <summary>
            <para>Represents health evaluation for deployed service packages, 
            containing health evaluations for each unhealthy deployed service 
            package that impacted current aggregated health state. 
            Can be returned when evaluating deployed application health and the aggregated 
            health state is either <see cref="F:System.Fabric.Health.HealthState.Error"/> or <see cref="F:System.Fabric.Health.HealthState.Warning"/>.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackagesHealthEvaluation.UnhealthyEvaluations">
            <summary>
            <para>Gets the list of unhealthy evaluations that led to the aggregated health state. 
            Includes all the unhealthy 
            <see cref="T:System.Fabric.Health.DeployedServicePackageHealthEvaluation"/> that impacted the aggregated health.</para>
            </summary>
            <value>
            <para>The unhealthy evaluations that led to current aggregated health state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.DeployedServicePackagesHealthEvaluation.TotalCount">
            <summary>
            <para>Gets the total number of deployed service packages of the deployed application in the health store.</para>
            </summary>
            <value>
            <para>An <see cref="T:System.Int64"/> representing the total count of 
            deployed service packages of the deployed 
            application in the health store.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.EventHealthEvaluation">
            <summary>
            <para>Represents health evaluation of a <see cref="T:System.Fabric.Health.HealthEvent"/>. 
            Can be returned when evaluating health of an 
            entity returns <see cref="F:System.Fabric.Health.HealthState.Error"/> or <see cref="F:System.Fabric.Health.HealthState.Warning"/>.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.EventHealthEvaluation.UnhealthyEvent">
            <summary>
            <para>Gets the unhealthy event details.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Health.HealthEvent"/> that led to current aggregated health state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.EventHealthEvaluation.ConsiderWarningAsError">
            <summary>
            <para>Gets <see cref="T:System.Boolean"/> that indicates whether warnings are treated 
            with the same severity as errors. The field is 
            specified in the health policy used to evaluate the entity.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if warnings are treated as errors; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.HealthEvaluationKind">
            <summary>
            <para>Enumerates the kinds of health evaluation.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.Invalid">
            <summary>
            <para>Indicates that the health evaluation is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.Event">
            <summary>
            <para>Indicates that the health evaluation is for a health event.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.Replicas">
            <summary>
            <para>Indicates that the health evaluation is for the replicas of a partition.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.Partitions">
            <summary>
            <para>Indicates that the health evaluation is for the partitions of a service.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.DeployedServicePackages">
            <summary>
            <para>Indicates that the health evaluation is for the deployed service packages of a deployed application.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.DeployedApplications">
            <summary>
            <para>Indicates that the health evaluation is for the deployed applications of an application.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.Services">
            <summary>
            <para>Indicates that the health evaluation is for services of an application.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.Nodes">
            <summary>
            <para>Indicates that the health evaluation is for the cluster nodes.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.Applications">
            <summary>
            <para>Indicates that the health evaluation is for the cluster applications.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.SystemApplication">
            <summary>
            <para>Indicates that the health evaluation is for the system application.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.UpgradeDomainDeployedApplications">
            <summary>
            <para>Indicates that the health evaluation is for the deployed applications of an application in an upgrade domain.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.UpgradeDomainNodes">
            <summary>
            <para>Indicates that the health evaluation is for the cluster nodes in an upgrade domain.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.Replica">
            <summary>
            <para>Indicates that the health evaluation is for a replica.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.Partition">
            <summary>
            <para>Indicates that the health evaluation is for a partition.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.DeployedServicePackage">
            <summary>
            <para>Indicates that the health evaluation is for a deployed service package.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.DeployedApplication">
            <summary>
            <para>Indicates that the health evaluation is for a deployed application.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.Service">
            <summary>
            <para>Indicates that the health evaluation is for a service.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.Node">
            <summary>
            <para>Indicates that the health evaluation is for a node.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.Application">
            <summary>
            <para>Indicates that the health evaluation is for an application.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.DeltaNodesCheck">
            <summary>
            <para>Indicates that the health evaluation is for the delta of unhealthy cluster nodes.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.UpgradeDomainDeltaNodesCheck">
            <summary>
            <para>Indicates that the health evaluation is for the delta of unhealthy upgrade domain cluster nodes.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthEvaluationKind.ApplicationTypeApplications">
            <summary>
            <para>
            Indicates that the health evaluation is for the application type applications.
            </para>
            </summary>
        </member>
        <member name="T:System.Fabric.Health.HealthEvent">
            <summary>
            <para>Represents health information reported on a health entity, such as cluster, application or node,
            with additional metadata added by the Health Manager.</para>
            </summary>
            <remarks>Health events are returned by health queries such as <see cref="M:System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.Fabric.Description.ClusterHealthQueryDescription)"/>.
            They contain <see cref="P:System.Fabric.Health.HealthEvent.HealthInformation"/> sent to Health Manager in a <see cref="T:System.Fabric.Health.HealthReport"/>.</remarks>
        </member>
        <member name="M:System.Fabric.Health.HealthEvent.ToString">
            <summary>
            Gets a string representation of the health event.
            </summary>
            <returns>A string representation of the health event.</returns>
        </member>
        <member name="P:System.Fabric.Health.HealthEvent.SourceUtcTimestamp">
            <summary>
            <para>Gets the date and time when the health report was sent by the source.</para>
            </summary>
            <value>
            <para>The date and time when the health report was sent by the source.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.HealthEvent.LastModifiedUtcTimestamp">
            <summary>
            <para>Gets the date and time when the health report was processed by the health store.</para>
            </summary>
            <value>
            <para>The date and time when the health report was processed by the health store.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.HealthEvent.IsExpired">
            <summary>
            <para>Gets a value that indicates whether the health event has expired.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the health event has expired; <languageKeyword>false</languageKeyword> if the health event has not expired.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.HealthEvent.LastOkTransitionAt">
            <summary>
            <para>If the current <see cref="P:System.Fabric.Health.HealthInformation.HealthState"/> is <see cref="F:System.Fabric.Health.HealthState.Ok"/>, 
            returns the time at which the health report was first reported with <see cref="F:System.Fabric.Health.HealthState.Ok"/>. For periodic reporting, 
            many reports with the same state may have been generated.</para>
            <para>If the current <see cref="P:System.Fabric.Health.HealthInformation.HealthState"/> is <see cref="F:System.Fabric.Health.HealthState.Error"/> 
            or <see cref="F:System.Fabric.Health.HealthState.Warning"/>, returns the time at which the health state was last in 
            <see cref="F:System.Fabric.Health.HealthState.Ok"/>, before transitioning to a different state. If the <see cref="P:System.Fabric.Health.HealthInformation.HealthState"/> 
            has never been <see cref="F:System.Fabric.Health.HealthState.Ok"/>, the value will be System.DateTime.FromFileTimeUtc(0).</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.DateTime"/> representing the last transition time (UTC) involving <see cref="F:System.Fabric.Health.HealthState.Ok"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.HealthEvent.LastWarningTransitionAt">
            <summary>
            <para>If the current <see cref="P:System.Fabric.Health.HealthInformation.HealthState"/> is <see cref="F:System.Fabric.Health.HealthState.Warning"/>, 
            returns the time at which the health report was first reported with <see cref="F:System.Fabric.Health.HealthState.Warning"/>. For periodic reporting, 
            many reports with the same state may have been generated.</para>
            <para>If the current <see cref="P:System.Fabric.Health.HealthInformation.HealthState"/> is <see cref="F:System.Fabric.Health.HealthState.Ok"/> or 
            <see cref="F:System.Fabric.Health.HealthState.Error"/>, returns the time at which the health state was last in <see cref="F:System.Fabric.Health.HealthState.Warning"/>, 
            before transitioning to a different state. If the <see cref="P:System.Fabric.Health.HealthInformation.HealthState"/> has never been 
            <see cref="F:System.Fabric.Health.HealthState.Warning"/>, the value will be System.DateTime.FromFileTimeUtc(0).</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.DateTime"/> representing the last transition time (UTC) involving <see cref="F:System.Fabric.Health.HealthState.Warning"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.HealthEvent.LastErrorTransitionAt">
            <summary>
            <para>If the current <see cref="P:System.Fabric.Health.HealthInformation.HealthState"/> is <see cref="F:System.Fabric.Health.HealthState.Error"/>, returns 
            the time at which the health report was first reported with <see cref="F:System.Fabric.Health.HealthState.Error"/>. For periodic reporting, many reports 
            with the same state may have been generated.</para>
            <para>If the current <see cref="P:System.Fabric.Health.HealthInformation.HealthState"/> is <see cref="F:System.Fabric.Health.HealthState.Ok"/> or 
            <see cref="F:System.Fabric.Health.HealthState.Warning"/>, returns the time at which the health state was last in <see cref="F:System.Fabric.Health.HealthState.Error"/>, 
            before transitioning to a different state. If the <see cref="P:System.Fabric.Health.HealthInformation.HealthState"/> has never been 
            <see cref="F:System.Fabric.Health.HealthState.Error"/>, the value will be System.DateTime.FromFileTimeUtc(0).</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.DateTime"/> representing the last transition time (UTC) involving <see cref="F:System.Fabric.Health.HealthState.Error"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.HealthEvent.HealthInformation">
            <summary>
            <para>Gets the health information that was sent to health store in a <see cref="T:System.Fabric.Health.HealthReport"/>.</para>
            </summary>
            <value>
            <para>The health information that was sent to health store in a <see cref="T:System.Fabric.Health.HealthReport"/>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.HealthEventsFilter">
            <summary>
            <para>Represents the filter for <see cref="T:System.Fabric.Health.HealthEvent"/> objects.</para>
            </summary>
            <remarks>The filter can be used in health queries to filter which events are returned in entity health.</remarks>
        </member>
        <member name="M:System.Fabric.Health.HealthEventsFilter.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.HealthEventsFilter"/> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.HealthEventsFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="P:System.Fabric.Health.HealthEventsFilter.HealthStateFilterValue">
            <summary>
            Gets or sets the filter for the aggregated health state of the <see cref="T:System.Fabric.Health.HealthEvent"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.HealthEvent"/> entries.</value>
            <remarks>The input collection is filtered to return only entries that respect the desired health state. 
            The filter represents a value obtained from members or bitwise combinations of members of <see cref="T:System.Fabric.Health.HealthStateFilter"/>.</remarks>
        </member>
        <member name="P:System.Fabric.Health.HealthEventsFilter.HealthStateFilter">
            <summary>
            <para>DERECATED. Gets or sets the filter for the aggregated health state of the <see cref="T:System.Fabric.Health.HealthEvent"/> entries in the 
            collection. Represents a value obtained from members or bitwise combinations of members of <see cref="T:System.Fabric.Health.HealthStateFilter"/>.</para>
            </summary>
            <value>
            <para>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.HealthEvent"/> entries in the collection.</para>
            </value>
            <remarks>This property is obsolete. Use <see cref="P:System.Fabric.Health.HealthEventsFilter.HealthStateFilterValue"/> instead.</remarks>
        </member>
        <member name="T:System.Fabric.Health.HealthInformation">
            <summary>
            <para>Represents common health report information. 
            It is included in all health reports sent to health store and in all health events returned by health queries.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthInformation.UnknownSequenceNumber">
            <summary>
            Unknown sequence number, which is an invalid sequence number that is not accepted by the health store.
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthInformation.AutoSequenceNumber">
            <summary>
            Auto sequence number, replaced with a valid sequence number by the health client.
            </summary>
            <remarks>When a health client receives a report with Auto sequence number,
            it replaces the auto sequence number with a valid sequence number.
            The sequence number is guaranteed to increase in the same process,
            even if the client machine time goes backwards.</remarks>
        </member>
        <member name="M:System.Fabric.Health.HealthInformation.#ctor(System.String,System.String,System.Fabric.Health.HealthState)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.HealthInformation"/> class.</para>
            </summary>
            <param name="sourceId">
            <para>The source of the report. Cannot be <languageKeyword>null</languageKeyword> or empty.
            It can't start with "System", which is reserved keyword for system components reporting.</para>
            </param>
            <param name="property">
            <para>The property of the report. Cannot be <languageKeyword>null</languageKeyword> or empty.</para>
            </param>
            <param name="healthState">
            <para>The health state of the report. Must be specified. Must be one of the <see cref="F:System.Fabric.Health.HealthState.Error"/>, 
            <see cref="F:System.Fabric.Health.HealthState.Warning"/> or <see cref="F:System.Fabric.Health.HealthState.Ok"/> values.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para>
                <paramref name="sourceId"/> cannot be <languageKeyword>null</languageKeyword>.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>
                <paramref name="property"/> cannot be <languageKeyword>null</languageKeyword>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>
                <paramref name="sourceId"/> cannot be empty.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>
                <paramref name="property"/> cannot be empty.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Specified <paramref name="healthState"/> is not supported.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.Health.HealthInformation.ToString">
            <summary>
            Creates a string description of the health information.
            </summary>
            <returns>String description of the health information.</returns>
        </member>
        <member name="P:System.Fabric.Health.HealthInformation.SourceId">
            <summary>
            <para>Get the source Identifier which identifies the watchdog/system component 
            which generated the health information.</para>
            </summary>
            <value>
            <para>A <see cref="T:System.String"/> representing the source of the health report.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.HealthInformation.Property">
            <summary>
            <para>Gets the property of the health report.</para>
            </summary>
            <value>
            <para>A <see cref="T:System.String"/> representing the property of the health report. 
            Together with the source id it uniquely 
            identifies the health information.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.HealthInformation.HealthState">
            <summary>
            <para>Gets the health state of the health information.</para>
            </summary>
            <value>
            <para>A <see cref="T:System.Fabric.Health.HealthState"/> representing the reported health state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.HealthInformation.Description">
            <summary>
            <para>Gets or sets the description of the health information. 
            It represents free text used to add human readable information about the report.</para>
            </summary>
            <value>
            <para>A <see cref="T:System.String"/> which describes the health information.</para>
            </value>
            <remarks>
            <para>The maximum string length for the description is 4096 characters.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Health.HealthInformation.TimeToLive">
            <summary>
            <para>Gets or sets the time to live of the health report. Must be larger than TimeSpan.Zero.</para>
            </summary>
            <value>
            <para>A <see cref="T:System.TimeSpan"/> representing the time to live of the health report.</para>
            </value>
            <remarks><para>When clients report periodically, they should send reports 
            with higher frequency than time to live.
            If clients report on transition, they can set the time to live to infinite.</para>
            <para>When time to live expires, the health event that contains the health information
            is either removed from health store, if <see cref="P:System.Fabric.Health.HealthInformation.RemoveWhenExpired"/> is 
            <languageKeyword>true</languageKeyword> or evaluated at error, if <see cref="P:System.Fabric.Health.HealthInformation.RemoveWhenExpired"/> is <languageKeyword>true</languageKeyword>.
            </para></remarks>
            <exception cref="T:System.ArgumentException">
            <para>The specified value was invalid. Please provide a duration that is larger than 0.</para>
            </exception>
        </member>
        <member name="P:System.Fabric.Health.HealthInformation.RemoveWhenExpired">
            <summary>
            <para>Gets or sets a value that indicates whether the report is removed from health store when it expires. 
            If set to <languageKeyword>false</languageKeyword>, the 
            report is treated as an error when expired. <languageKeyword>false</languageKeyword> by default.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the report should be removed from health store when expired; otherwise, 
            <languageKeyword>false</languageKeyword>.</para>
            </value>
            <remarks><para>When clients report periodically, they should set <see cref="P:System.Fabric.Health.HealthInformation.RemoveWhenExpired"/> <languageKeyword>false</languageKeyword> (default).
            This way, is the reporter has issues (eg. deadlock) and can't report, 
            the entity is evaluated at error when the health report
            expires, and this will flag the entity as <see cref="F:System.Fabric.Health.HealthState.Error"/>.
            Periodic health clients should send reports 
            with higher frequency than time to live to account for delays due to health client batching, 
            message transport over the wire and health store processing.</para></remarks>
        </member>
        <member name="P:System.Fabric.Health.HealthInformation.SequenceNumber">
            <summary>
            <para>Gets or sets the sequence number associated with the report. 
            Must be greater than <see cref="F:System.Fabric.Health.HealthInformation.UnknownSequenceNumber"/>.</para>
            </summary>
            <value>
            <para>An <see cref="T:System.Int64"/> representing the report sequence number.</para>
            </value>
            <remarks>
            <para>The report sequence number is used by health store to detect stale reports.
            </para>
            <para>Most of the times, the reporter doesn't need to specify the sequence number. The default value
            <see cref="F:System.Fabric.Health.HealthInformation.AutoSequenceNumber"/> can be used instead. When a health client receives a report with Auto sequence number,
            it replaces the auto sequence number with a valid sequence number.
            The sequence number is guaranteed to increase in the same process,
            even if the client machine time goes backwards.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.Health.HealthReportKind">
            <summary>
            <para>Represents the health report kind.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthReportKind.Invalid">
            <summary>
            <para>Indicates that the health report kind is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthReportKind.StatefulServiceReplica">
            <summary>
            <para>Indicates that the health report is for a stateful service replica.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthReportKind.StatelessServiceInstance">
            <summary>
            <para>Indicates that the health report is for a stateless service instance.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthReportKind.Partition">
            <summary>
            <para>Indicates that the health report is for a partition.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthReportKind.Node">
            <summary>
            <para>Indicates that the health report is for a node.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthReportKind.Service">
            <summary>
            <para>Indicates that the health report is for a service.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthReportKind.Application">
            <summary>
            <para>Indicates that the health report is for an application.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthReportKind.DeployedApplication">
            <summary>
            <para>Indicates that the health report is for a deployed application.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthReportKind.DeployedServicePackage">
            <summary>
            <para>Indicates that the health report is for a deployed service package.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthReportKind.Cluster">
            <summary>
            <para>Indicates that the health report is for cluster.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Health.HealthState">
            <summary>
            <para>Represents the health state.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthState.Invalid">
            <summary>
            <para>Indicates that the health state is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthState.Ok">
            <summary>
            <para>Indicates that the health state is ok.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthState.Warning">
            <summary>
            <para>Indicates that the health state is warning. There may something wrong that requires investigation.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthState.Error">
            <summary>
            <para>Indicates that the health state is error, there is something wrong that needs to be investigated.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthState.Unknown">
            <summary>
            <para>Indicates that the health state is unknown.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Health.HealthStateChunkListHelper">
            <summary>
            Extensions for health state chunk list operations.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.HealthStateChunkListHelper.ToArray``1(System.Fabric.Health.HealthStateChunkList{``0})">
            <summary>
            Returns an array with the items in the chunk list.
            </summary>
            <typeparam name="T">The type of the list objects.</typeparam>
            <param name="list">The health state chunk list.</param>
            <returns>The array.</returns>
        </member>
        <member name="T:System.Fabric.Health.HealthStateFilter">
            <summary>
            <para>Enumerates filters for parameters of type <see cref="T:System.Fabric.Health.HealthState"/>. 
            This enumeration has a <see cref="T:System.FlagsAttribute"/> 
            that allows a bitwise combination of its member values.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthStateFilter.Default">
            <summary>
            <para>Default value. Depending on usage, may match any <see cref="T:System.Fabric.Health.HealthState"/> or none.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthStateFilter.None">
            <summary>
            <para>Filter that doesn’t match any <see cref="T:System.Fabric.Health.HealthStateFilter"/>. 
            Used in order to return no results on a given collection of states.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthStateFilter.Ok">
            <summary>
            <para>Filter that matches input with value <see cref="F:System.Fabric.Health.HealthState.Ok"/>.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthStateFilter.Warning">
            <summary>
            <para>Filter that matches input with value <see cref="F:System.Fabric.Health.HealthState.Warning"/>.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthStateFilter.Error">
            <summary>
            <para>Filter that matches input with value <see cref="F:System.Fabric.Health.HealthState.Error"/>.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Health.HealthStateFilter.All">
            <summary>
            <para>Filter that matches any <see cref="T:System.Fabric.Health.HealthState"/>.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Health.NodeHealth">
            <summary>
            <para>Describes the health of a node as returned by <see cref="M:System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.Fabric.Description.NodeHealthQueryDescription)"/>.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.NodeHealth.NodeName">
            <summary>
            <para>Gets the node name.</para>
            </summary>
            <value>
            <para>The node name.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.NodeHealthReport">
            <summary>
            <para>Represents a health report to be applied on the node health entity. 
            The report is sent to health store with 
            <see cref="M:System.Fabric.FabricClient.HealthClient.ReportHealth(System.Fabric.Health.HealthReport)"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthReport.#ctor(System.String,System.Fabric.Health.HealthInformation)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.NodeHealthReport"/> class.</para>
            </summary>
            <param name="nodeName">
            <para>The node name. Can’t be null or empty.</para>
            </param>
            <param name="healthInformation">
            <para>The <see cref="T:System.Fabric.Health.HealthInformation"/> which describes the report fields, like sourceId, 
            property, health state. Required.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para>Node name can’t be null.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <para>Health information can’t be null.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <para>Node name can’t be empty.</para>
            </exception>
        </member>
        <member name="P:System.Fabric.Health.NodeHealthReport.NodeName">
            <summary>
            <para>Gets the node name.</para>
            </summary>
            <value>
            <para>The node name.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.NodeHealthState">
            <summary>
            <para>Represents the health state of a node, which contains the node identifier and its aggregated health state.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthState.ToString">
            <summary>
            Creates a string description of the node health state.
            </summary>
            <returns>String description of the <see cref="T:System.Fabric.Health.NodeHealthState"/>.</returns>
        </member>
        <member name="P:System.Fabric.Health.NodeHealthState.NodeName">
            <summary>
            <para>Gets the name of the node.</para>
            </summary>
            <value>
            <para>The name of the node.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.NodeHealthStateChunk">
            <summary>
            Represents a node health state chunk, which contains basic health information about the node.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthStateChunk.ToString">
            <summary>
            Creates a string description of the node health state chunk.
            </summary>
            <returns>String description of the <see cref="T:System.Fabric.Health.NodeHealthStateChunk"/>.</returns>
        </member>
        <member name="P:System.Fabric.Health.NodeHealthStateChunk.NodeName">
            <summary>
            Gets the node name.
            </summary>
            <value>The node name.</value>
        </member>
        <member name="P:System.Fabric.Health.NodeHealthStateChunk.HealthState">
            <summary>
            Gets the aggregated health state of the node, computed based on all reported health events and the cluster health policy.
            </summary>
            <value>The aggregated health state of the node.</value>
        </member>
        <member name="T:System.Fabric.Health.NodeHealthStateChunkList">
            <summary>
            Represents a list that contains <see cref="T:System.Fabric.Health.NodeHealthStateChunk"/> items.
            </summary>
            <remarks>The list can be obtained through health state chunk queries. The queries may have as result more chunks that can fit a message.
            In this case, the list of items that fit the message is returned plus a count that shows how many total items are available.</remarks>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthStateChunkList.#ctor">
            <summary>
            Instantiates an empty <see cref="T:System.Fabric.Health.NodeHealthStateChunkList"/>.
            </summary>
        </member>
        <member name="T:System.Fabric.Health.NodeHealthStateList">
            <summary>
            <para>Represents a collection of <see cref="T:System.Fabric.Health.NodeHealthState"/> that can be individually accessed by index.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthStateList.IndexOf(System.Fabric.Health.NodeHealthState)">
            <summary>
            <para>Determines the index of a specific item in the collection.</para>
            </summary>
            <param name="item">
            <para>The item to locate in the collection.</para>
            </param>
            <returns>
            <para>The index of the item if found in the collection; -1 otherwise.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthStateList.Insert(System.Int32,System.Fabric.Health.NodeHealthState)">
            <summary>
            <para>Inserts an item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index at which value should be inserted.</para>
            </param>
            <param name="item">
            <para>The item to be inserted.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthStateList.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the item to remove.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthStateList.Add(System.Fabric.Health.NodeHealthState)">
            <summary>
            <para>Adds an item to the collection.</para>
            </summary>
            <param name="item">
            <para>The item to add.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthStateList.Clear">
            <summary>
            <para>Removes all items from the collection.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthStateList.Contains(System.Fabric.Health.NodeHealthState)">
            <summary>
            <para>Determines whether the collection contains a specific value.</para>
            </summary>
            <param name="item">
            <para>The item to locate in the collection.</para>
            </param>
            <returns>
            <para>Returns <languageKeyword>true</languageKeyword> if the item is found; <languageKeyword>false</languageKeyword> otherwise.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthStateList.CopyTo(System.Fabric.Health.NodeHealthState[],System.Int32)">
            <summary>
            <para>Copies the elements of the ICollection to an Array, starting at a particular Array index.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing.</para>
            </param>
            <param name="arrayIndex">
            <para>The zero-based index in array at which copying begins.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthStateList.Remove(System.Fabric.Health.NodeHealthState)">
            <summary>
            <para>Removes the first occurrence of a specific item from the collection.</para>
            </summary>
            <param name="item">
            <para>The item to be removed.</para>
            </param>
            <returns>
            <para>Returns <languageKeyword>true</languageKeyword> if the item was removed; <languageKeyword>false</languageKeyword> otherwise.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthStateList.GetEnumerator">
            <summary>
            <para>Returns an enumerator that iterates through a collection.</para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthStateList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <para>Returns an enumerator that iterates through a collection.</para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Health.NodeHealthStateList.Item(System.Int32)">
            <summary>
            <para>Gets or sets the element at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the element to get or set.</para>
            </param>
            <returns>
            <para>The specified index.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Health.NodeHealthStateList.Count">
            <summary>
            <para>Gets the number of elements.</para>
            </summary>
            <value>
            <para>The number of elements.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.NodeHealthStateList.IsReadOnly">
            <summary>
            <para>Gets a value indicating whether the list is read-only.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the list is read-only; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.NodeHealthStateFilter">
            <summary>
            Filter for <see cref="T:System.Fabric.Health.NodeHealthState"/> objects.
            </summary>
            <remarks>The cluster health state chunk queries can specify a list of node filters to fine-grain
            select the nodes that should be included in the query result.
            Note that all the nodes are used to evaluate cluster aggregated health state, regardless of the filter passed in.</remarks>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthStateFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Health.NodeHealthStateFilter"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthStateFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="P:System.Fabric.Health.NodeHealthStateFilter.HealthStateFilter">
            <summary>
            Gets or sets filter for the aggregated health state of the <see cref="T:System.Fabric.Health.NodeHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.NodeHealthState"/> entries in the collection.</value>
            <remarks>The health state filter value comes from members or bitwise combination of members of <see cref="P:System.Fabric.Health.NodeHealthStateFilter.HealthStateFilter"/>. 
            For a node to match the filter, its aggregated health state must match the specified health state filter.</remarks>
        </member>
        <member name="P:System.Fabric.Health.NodeHealthStateFilter.NodeNameFilter">
            <summary>
            Gets or sets the node name filter.
            </summary>
            <value>The node name filter.</value>
            <remarks>If not specified, all nodes that match the parent filters (if any) are taken into consideration and matched against the other filter members, like health state filter.
            Otherwise, the filter only applies to the specfied node.</remarks>
        </member>
        <member name="T:System.Fabric.Health.NodeHealthStatesFilter">
            <summary>
            <para>Represents the filter for <see cref="T:System.Fabric.Health.NodeHealthState"/> objects.</para>
            </summary>
            <remarks>The filter can be used in <see cref="T:System.Fabric.Description.ClusterHealthQueryDescription"/>
            to specify which node children of the cluster should be returned as part of <see cref="T:System.Fabric.Health.ClusterHealth"/>.</remarks>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthStatesFilter.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.NodeHealthStatesFilter"/> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.NodeHealthStatesFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="P:System.Fabric.Health.NodeHealthStatesFilter.HealthStateFilterValue">
            <summary>
            Gets or sets the filter for the aggregated health state of the <see cref="T:System.Fabric.Health.NodeHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.NodeHealthState"/> entries.</value>
            <remarks>The input collection is filtered to return only entries that respect the desired health state. 
            The filter represents a value obtained from members or bitwise combinations of members of <see cref="P:System.Fabric.Health.NodeHealthStatesFilter.HealthStateFilter"/>.</remarks>
        </member>
        <member name="P:System.Fabric.Health.NodeHealthStatesFilter.HealthStateFilter">
            <summary>
            <para>DEPRECATED. Gets or sets the filter for the aggregated health state of the <see cref="T:System.Fabric.Health.NodeHealthState"/> entries in 
            the collection. Represents a value obtained from members or bitwise combinations of members of <see cref="T:System.Fabric.Health.HealthStateFilter"/>.</para>
            </summary>
            <value>
            <para>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.NodeHealthState"/> entries in the collection. 
            Represents a value obtained from members or bitwise combinations of members of <see cref="T:System.Fabric.Health.HealthStateFilter"/>.</para>
            </value>
            <remarks>This property is obsolete. Use <see cref="P:System.Fabric.Health.NodeHealthStatesFilter.HealthStateFilterValue"/> instead.</remarks>
        </member>
        <member name="T:System.Fabric.Health.NodeHealthEvaluation">
            <summary>
            <para>Represents health evaluation for a node, 
            containing information about the data and the algorithm used by health store to 
            evaluate health. 
            The evaluation is returned only when the aggregated health state is either <see cref="F:System.Fabric.Health.HealthState.Error"/> 
            or <see cref="F:System.Fabric.Health.HealthState.Warning"/>.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.NodeHealthEvaluation.NodeName">
            <summary>
            <para>Gets the node name.</para>
            </summary>
            <value>
            <para>The node name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.NodeHealthEvaluation.UnhealthyEvaluations">
            <summary>
            <para>Gets the unhealthy evaluations that led to the current aggregated health state of the node. 
            The types of the unhealthy 
            evaluations can be <see cref="T:System.Fabric.Health.EventHealthEvaluation"/>.</para>
            </summary>
            <value>
            <para>The unhealthy evaluations that led to current aggregated health state.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.NodesHealthEvaluation">
            <summary>
            <para>Represents health evaluation for nodes, 
            containing health evaluations for each unhealthy node that impacted current aggregated 
            health state. Can be returned when evaluating cluster health and the aggregated health state is either 
            <see cref="F:System.Fabric.Health.HealthState.Error"/> or <see cref="F:System.Fabric.Health.HealthState.Warning"/>.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.NodesHealthEvaluation.UnhealthyEvaluations">
            <summary>
            <para>Gets the list of unhealthy evaluations that led to the aggregated health state. 
            Includes all the unhealthy 
            <see cref="T:System.Fabric.Health.NodeHealthEvaluation"/> that impacted the aggregated health.</para>
            </summary>
            <value>
            <para>The unhealthy evaluations 
            that led to current aggregated health state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.NodesHealthEvaluation.MaxPercentUnhealthyNodes">
            <summary>
            <para>Gets the maximum allowed percentage of unhealthy nodes from the <see cref="T:System.Fabric.Health.ClusterHealthPolicy"/>.</para>
            </summary>
            <value>
            <para>The maximum allowed percentage of unhealthy nodes.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.NodesHealthEvaluation.TotalCount">
            <summary>
            <para>Gets the total number of nodes in the health store.</para>
            </summary>
            <value>
            <para>The total number of nodes in the health store.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.PartitionHealth">
            <summary>
            <para>Describes health of a partition as returned by <see cref="M:System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Fabric.Description.PartitionHealthQueryDescription)"/>.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealth.PartitionId">
            <summary>
            <para>Gets the partition ID, which uniquely identifies the partition.</para>
            </summary>
            <value>
            <para>The partition ID.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealth.ReplicaHealthStates">
            <summary>
            <para>Gets the replica health states for the current partition as found in the health store.</para>
            </summary>
            <value>
            <para>The replicas of the current partition as found in the health store.</para>
            </value>
            <para>Only replicas that respect the <see cref="P:System.Fabric.Description.PartitionHealthQueryDescription.ReplicasFilter"/> (if specified) are returned. 
            If the input filter is not specified, all replicas are returned.</para>
            <para>All replicas are evaluated to determine the partition aggregated health.</para>
        </member>
        <member name="T:System.Fabric.Health.PartitionHealthReport">
            <summary>
            <para>Represents a health report to be applied on a partition health entity. 
            The report is sent to health store with 
            <see cref="M:System.Fabric.FabricClient.HealthClient.ReportHealth(System.Fabric.Health.HealthReport)"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthReport.#ctor(System.Guid,System.Fabric.Health.HealthInformation)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.PartitionHealthReport"/> class.</para>
            </summary>
            <param name="partitionId">
            <para>The partition ID. Required.</para>
            </param>
            <param name="healthInformation">
            <para>The <see cref="T:System.Fabric.Health.HealthInformation"/> which describes the report fields, like sourceId, property, 
            health state. Required.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para>A null value was passed in for a required parameter.</para>
            </exception>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealthReport.PartitionId">
            <summary>
            <para>Gets the partition ID.</para>
            </summary>
            <value>
            <para>The partition ID.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.PartitionHealthState">
            <summary>
            <para>Represents the health state of a partition, which contains the partition identifier and its aggregated health state.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthState.ToString">
            <summary>
            Creates a string description of the partition health state.
            </summary>
            <returns>String description of the <see cref="T:System.Fabric.Health.PartitionHealthState"/>.</returns>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealthState.PartitionId">
            <summary>
            <para>Gets the partition ID.</para>
            </summary>
            <value>
            <para>The partition ID.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.PartitionHealthStateChunk">
            <summary>
            Represents a partition health state chunk, which contains basic health information about the partition.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStateChunk.#ctor">
            <summary>
            Instantiates a <see cref="T:System.Fabric.Health.PartitionHealthStateChunk"/>.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStateChunk.ToString">
            <summary>
            Creates a string description of the partition health state chunk.
            </summary>
            <returns>String description of the health state chunk.</returns>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealthStateChunk.PartitionId">
            <summary>
            Gets the partition id.
            </summary>
            <value>The partition id.</value>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealthStateChunk.HealthState">
            <summary>
            Gets the partition aggregated health state, computed based on all reported health events, the replica children and the application health policy.
            </summary>
            <value>The aggregated health state of the partition.</value>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealthStateChunk.ReplicaHealthStateChunks">
            <summary>
            Gets the list of the partition replica health state chunks that respect the input filters.
            </summary>
            <value>The list of the partition replica health state chunks that respect the input filters.</value>
            <remarks>
            <para>By default, no children are included in results. Users can request to include
            some children based on desired health or other information. 
            For example, users can request to include all replicas that have health state error.
            Regardless of filter value, all children are used to compute partition aggregated health.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.Health.PartitionHealthStateChunkList">
            <summary>
            Represents a list that contains <see cref="T:System.Fabric.Health.PartitionHealthStateChunk"/> items.
            </summary>
            <remarks>The list can be obtained through health state chunk queries. The queries may have as result more chunks that can fit a message.
            In this case, the list of items that fit the message is returned plus a count that shows how many total items are available.</remarks>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStateChunkList.#ctor">
            <summary>
            Instantiates an empty <see cref="T:System.Fabric.Health.PartitionHealthStateChunkList"/>.
            </summary>
        </member>
        <member name="T:System.Fabric.Health.PartitionHealthStateList">
            <summary>
            <para>Represents a collection of <see cref="T:System.Fabric.Health.PartitionHealthState"/> that can be individually accessed by index.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStateList.IndexOf(System.Fabric.Health.PartitionHealthState)">
            <summary>
            <para>Determines the index of a specific item in the collection.</para>
            </summary>
            <param name="item">
            <para>The item to locate in the collection.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Int32"/> which represents the index of the item if found in the collection; -1 otherwise.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStateList.Insert(System.Int32,System.Fabric.Health.PartitionHealthState)">
            <summary>
            <para>Inserts an item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index at which value should be inserted.</para>
            </param>
            <param name="item">
            <para>The item to be inserted.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStateList.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the item to remove.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStateList.Add(System.Fabric.Health.PartitionHealthState)">
            <summary>
            <para>Adds an item to the collection.</para>
            </summary>
            <param name="item">
            <para>The item to add.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStateList.Clear">
            <summary>
            <para>Removes all items from the collection.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStateList.Contains(System.Fabric.Health.PartitionHealthState)">
            <summary>
            <para>Determines whether the collection contains a specific value.</para>
            </summary>
            <param name="item">
            <para>The item to locate in the collection.</para>
            </param>
            <returns>
            <para>Returns <languageKeyword>true</languageKeyword> if the item is found; <languageKeyword>false</languageKeyword> otherwise.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStateList.CopyTo(System.Fabric.Health.PartitionHealthState[],System.Int32)">
            <summary>
            <para>Copies the elements of the ICollection to an Array, starting at a particular Array index.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing.</para>
            </param>
            <param name="arrayIndex">
            <para>The zero-based index in array at which copying begins.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStateList.Remove(System.Fabric.Health.PartitionHealthState)">
            <summary>
            <para>Removes the first occurrence of a specific item from the collection.</para>
            </summary>
            <param name="item">
            <para>The item to be removed.</para>
            </param>
            <returns>
            <para>Returns <languageKeyword>true</languageKeyword> if the item was removed; <languageKeyword>false</languageKeyword> otherwise.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStateList.GetEnumerator">
            <summary>
            <para>Returns an enumerator that iterates through a collection.</para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStateList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <para>Returns an enumerator that iterates through a collection.</para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealthStateList.Item(System.Int32)">
            <summary>
            <para>Gets or sets the element at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the element to get or set.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Fabric.Health.PartitionHealthState"/> at the specified index.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealthStateList.Count">
            <summary>
            <para>Gets the number of elements.</para>
            </summary>
            <value>
            <para>The number of elements.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealthStateList.IsReadOnly">
            <summary>
            <para>Gets a value indicating whether the list is read-only.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the list is read-only; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.PartitionHealthStateFilter">
            <summary>
            Filter for <see cref="T:System.Fabric.Health.PartitionHealthState"/> objects.
            </summary>
            <remarks>The health state chunk queries can specify a list of partition filters to fine-grain
            select the partitions that should be included in the query result.
            Note that all the partitions are used to evaluate parents' aggregated health state, regardless of the filter passed in.</remarks>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStateFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Health.PartitionHealthStateFilter"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStateFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealthStateFilter.HealthStateFilter">
            <summary>
            Gets or sets filter for the aggregated health state of the <see cref="T:System.Fabric.Health.PartitionHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.PartitionHealthState"/> entries in the collection.</value>
            <remarks>The health state filter value comes from members or bitwise combination of members of <see cref="P:System.Fabric.Health.PartitionHealthStateFilter.HealthStateFilter"/>. 
            For a partition to match the filter, its aggregated health state must match the specified health state filter.</remarks>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealthStateFilter.PartitionIdFilter">
            <summary>
            Gets or sets the partition id filter.
            </summary>
            <value>The partition id filter.</value>
            <remarks>If not specified, all partitions that match the parent filters (if any) and the specified health state filter match the filter.
            Otherwise, the filter only applies to the partition identified by the partition id. All the other filter members, like health state filter and replicas filter, are applied to this partition.</remarks>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealthStateFilter.ReplicaFilters">
            <summary>
            Gets the list of <see cref="T:System.Fabric.Health.ReplicaHealthStateFilter"/> to be applied to the replica children health states.
            </summary>
            <value>The list of <see cref="T:System.Fabric.Health.ReplicaHealthStateFilter"/> to be applied to the replica children health states.</value>
            <remarks>All replica children that match the filter will be returned as children of the partition.
            If empty, the children are not returned by default.</remarks>
        </member>
        <member name="T:System.Fabric.Health.PartitionHealthStatesFilter">
            <summary>
            <para>Represents the filter for <see cref="T:System.Fabric.Health.PartitionHealthState"/> objects.</para>
            </summary>
            <remarks>The filter can be used in <see cref="T:System.Fabric.Description.ServiceHealthQueryDescription"/>
            to specify which partition children should be returned as part of <see cref="T:System.Fabric.Health.ServiceHealth"/>.</remarks>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStatesFilter.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.PartitionHealthStatesFilter"/> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.PartitionHealthStatesFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealthStatesFilter.HealthStateFilterValue">
            <summary>
            Gets or sets the filter for the aggregated health state of the <see cref="T:System.Fabric.Health.PartitionHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.PartitionHealthState"/> entries.</value>
            <remarks>The input collection is filtered to return only entries that respect the desired health state. 
            The filter represents a value obtained from members or bitwise combinations of members of <see cref="P:System.Fabric.Health.PartitionHealthStatesFilter.HealthStateFilter"/>.</remarks>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealthStatesFilter.HealthStateFilter">
            <summary>
            <para>DEPRECATED. Gets or sets the filter for the aggregated health state of the <see cref="T:System.Fabric.Health.PartitionHealthState"/> entries 
            in the collection. Represents a value obtained from members or bitwise combinations of members of <see cref="T:System.Fabric.Health.HealthStateFilter"/>.</para>
            </summary>
            <value>
            <para>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.PartitionHealthState"/> entries in the collection. 
            The value comes from members or bitwise combination of members of <see cref="T:System.Fabric.Health.HealthStateFilter"/>.</para>
            </value>
            <remarks>This property is obsolete. Use <see cref="P:System.Fabric.Health.PartitionHealthStatesFilter.HealthStateFilterValue"/> instead.</remarks>
        </member>
        <member name="T:System.Fabric.Health.PartitionsHealthEvaluation">
            <summary>
            <para>Represents health evaluation for the partitions of a service, 
            containing health evaluations for each unhealthy partition 
            that impacts current aggregated health state. 
            Can be returned when evaluating service health and the aggregated health state is 
            either <see cref="F:System.Fabric.Health.HealthState.Error"/> or <see cref="F:System.Fabric.Health.HealthState.Warning"/>.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.PartitionsHealthEvaluation.UnhealthyEvaluations">
            <summary>
            <para>Gets the list of unhealthy evaluations that led to the aggregated health state. 
            Includes all the unhealthy 
            <see cref="T:System.Fabric.Health.PartitionHealthEvaluation"/> that impacted the aggregated health.</para>
            </summary>
            <value>
            <para>The unhealthy evaluations that led to current aggregated health state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.PartitionsHealthEvaluation.MaxPercentUnhealthyPartitionsPerService">
            <summary>
            <para>Gets the maximum allowed percentage of unhealthy partitions per service from the <see cref="T:System.Fabric.Health.ServiceTypeHealthPolicy"/>.</para>
            </summary>
            <value>
            <para>The maximum allowed percentage of unhealthy partitions per service.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.PartitionsHealthEvaluation.TotalCount">
            <summary>
            <para>Gets the total number of partitions of the service from the health store.</para>
            </summary>
            <value>
            <para>The total number of partitions of the service.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.PartitionHealthEvaluation">
            <summary>
            <para>Represents health evaluation for a partition, 
            containing information about the data and the algorithm used by health store 
            to evaluate health. The evaluation is returned only when the aggregated health state is either <see cref="F:System.Fabric.Health.HealthState.Error"/> 
            or <see cref="F:System.Fabric.Health.HealthState.Warning"/>.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealthEvaluation.PartitionId">
            <summary>
            <para>Gets the partition ID.</para>
            </summary>
            <value>
            <para>The partition ID.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.PartitionHealthEvaluation.UnhealthyEvaluations">
            <summary>
            <para>Gets the unhealthy evaluations that led to the current aggregated health state of the partition. 
            The types of the unhealthy 
            evaluations can be <see cref="T:System.Fabric.Health.ReplicasHealthEvaluation"/> or <see cref="T:System.Fabric.Health.EventHealthEvaluation"/>.</para>
            </summary>
            <value>
            <para>The unhealthy evaluations that 
            led to current aggregated health state.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.ReplicaHealth">
            <summary>
            <para>Describes the health of a stateful service replica or a stateless service instance as returned by <see cref="M:System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Fabric.Description.ReplicaHealthQueryDescription)"/>.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.ReplicaHealth.Kind">
            <summary>
            <para>Gets the kind of the replica, either stateless or stateful. Based on this, the replica health can be converted to either 
            <see cref="T:System.Fabric.Health.StatefulServiceReplicaHealth"/> or <see cref="T:System.Fabric.Health.StatelessServiceInstanceHealth"/>.</para>
            </summary>
            <value>
            <para>The service kind, which indicates whether the replica is stateful or stateless.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ReplicaHealth.PartitionId">
            <summary>
            <para>Gets the partition identifier.</para>
            </summary>
            <value>
            <para>The partition ID.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ReplicaHealth.Id">
            <summary>
            <para>Gets the stateful replica ID or the stateless service instance ID.</para>
            </summary>
            <value>
            <para>The stateful replica ID or stateless instance ID.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.ReplicaHealthState">
            <summary>
            <para>Represents a base class for stateful service replica or stateless service instance health state.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthState.ToString">
            <summary>
            Creates a string description of the replica health state.
            </summary>
            <returns>String description of the health state.</returns>
        </member>
        <member name="P:System.Fabric.Health.ReplicaHealthState.Kind">
            <summary>
            <para>Gets the kind of the service replica.</para>
            </summary>
            <value>
            <para>The service replica kind.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ReplicaHealthState.PartitionId">
            <summary>
            <para>Gets the partition ID.</para>
            </summary>
            <value>
            <para>The partition ID.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ReplicaHealthState.Id">
            <summary>
            <para>Gets the stateful replica ID or stateless service instance ID.</para>
            </summary>
            <value>
            <para>The replica or instance ID.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.ReplicaHealthStateChunk">
            <summary>
            Represents a replica health state chunk, which contains basic health information about the replica.
            It is included as child of a partition.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthStateChunk.#ctor">
            <summary>
            Instantiates a <see cref="T:System.Fabric.Health.ReplicaHealthStateChunk"/>.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthStateChunk.ToString">
            <summary>
            Creates a string description of the replica health state chunk.
            </summary>
            <returns>String description of the health state chunk.</returns>
        </member>
        <member name="P:System.Fabric.Health.ReplicaHealthStateChunk.HealthState">
            <summary>
            Gets the aggregated health state of the replica, computed based on all reported health events and the application health policy.
            </summary>
            <value>The aggregated health state of the replica.</value>
        </member>
        <member name="P:System.Fabric.Health.ReplicaHealthStateChunk.ReplicaOrInstanceId">
            <summary>
            Gets the replica id or the instance id, depending on the service kind.
            </summary>
            <value>The replica id or the instance id, depending on the service kind.</value>
        </member>
        <member name="T:System.Fabric.Health.ReplicaHealthStateList">
            <summary>
            <para>Represents a collection of <see cref="T:System.Fabric.Health.ReplicaHealthState"/> that can be individually accessed by index.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthStateList.IndexOf(System.Fabric.Health.ReplicaHealthState)">
            <summary>
            <para>Determines the index of a specific item in the collection.</para>
            </summary>
            <param name="item">
            <para>The item to locate in the collection.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Int32"/> which represents the index of the item if found in the collection; -1 otherwise.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthStateList.Insert(System.Int32,System.Fabric.Health.ReplicaHealthState)">
            <summary>
            <para>Inserts an item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index at which value should be inserted.</para>
            </param>
            <param name="item">
            <para>The item to be inserted.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthStateList.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the item to remove.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthStateList.Add(System.Fabric.Health.ReplicaHealthState)">
            <summary>
            <para>Adds an item to the collection.</para>
            </summary>
            <param name="item">
            <para>The item to add.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthStateList.Clear">
            <summary>
            <para>Removes all items from the collection.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthStateList.Contains(System.Fabric.Health.ReplicaHealthState)">
            <summary>
            <para>Determines whether the collection contains a specific value.</para>
            </summary>
            <param name="item">
            <para>The item to locate in the collection.</para>
            </param>
            <returns>
            <para>Returns <languageKeyword>true</languageKeyword> if the item is found; <languageKeyword>false</languageKeyword> otherwise.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthStateList.CopyTo(System.Fabric.Health.ReplicaHealthState[],System.Int32)">
            <summary>
            <para>Copies the elements of the ICollection to an Array, starting at a particular Array index.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing.</para>
            </param>
            <param name="arrayIndex">
            <para>The zero-based index in array at which copying begins.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthStateList.Remove(System.Fabric.Health.ReplicaHealthState)">
            <summary>
            <para>Removes the first occurrence of a specific item from the collection.</para>
            </summary>
            <param name="item">
            <para>The item to be removed.</para>
            </param>
            <returns>
            <para>Returns <languageKeyword>true</languageKeyword> if the item was removed; <languageKeyword>false</languageKeyword> otherwise.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthStateList.GetEnumerator">
            <summary>
            <para>Returns an enumerator that iterates through a collection.</para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthStateList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <para>Returns an enumerator that iterates through a collection.</para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Health.ReplicaHealthStateList.Item(System.Int32)">
            <summary>
            <para>Gets or sets the element at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the element to get or set.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Fabric.Health.ReplicaHealthState"/> at the specified index.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Health.ReplicaHealthStateList.Count">
            <summary>
            <para>Gets the number of elements.</para>
            </summary>
            <value>
            <para>The number of elements.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ReplicaHealthStateList.IsReadOnly">
            <summary>
            <para>Gets a value indicating whether the list is read-only.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the list is read-only; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.ReplicaHealthStateChunkList">
            <summary>
            Represents a list that contains <see cref="T:System.Fabric.Health.ReplicaHealthStateChunk"/> items.
            </summary>
            <remarks>The list can be obtained through health state chunk queries. The queries may have as result more chunks that can fit a message.
            In this case, the list of items that fit the message is returned plus a count that shows how many total items are available.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthStateChunkList.#ctor">
            <summary>
            Instantiates an empty <see cref="T:System.Fabric.Health.ReplicaHealthStateChunkList"/>.
            </summary>
        </member>
        <member name="T:System.Fabric.Health.ReplicaHealthStateFilter">
            <summary>
            Filter for <see cref="T:System.Fabric.Health.ReplicaHealthState"/> objects.
            </summary>
            <remarks>The entity health state chunk queries can specify a list of replica filters to fine-grain
            select the replicas that should be included in the query result.
            Note that all the replicas are used to evaluate parents aggregated health state, regardless of the filter passed in.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthStateFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Health.ReplicaHealthStateFilter"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthStateFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="P:System.Fabric.Health.ReplicaHealthStateFilter.HealthStateFilter">
            <summary>
            Gets or sets filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ReplicaHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ReplicaHealthState"/> entries in the collection.</value>
            <remarks>The health state filter value comes from members or bitwise combination of members of <see cref="P:System.Fabric.Health.ReplicaHealthStateFilter.HealthStateFilter"/>. 
            For a replica to match the filter, its aggregated health state must match the specified health state filter.</remarks>
        </member>
        <member name="P:System.Fabric.Health.ReplicaHealthStateFilter.ReplicaOrInstanceIdFilter">
            <summary>
            Gets or sets the stateful service replica id or the stateless instance id filter.
            </summary>
            <value>The stateful service replica id or the stateless instance id filter.</value>
            <remarks>If not specified, all replicas that match the parent filters (if any) and the specified health state filter match the filter.
            Otherwise, the filter only applies to the replica identified by the given id.</remarks>
        </member>
        <member name="T:System.Fabric.Health.ReplicaHealthStatesFilter">
            <summary>
            <para>Represents the filter for <see cref="T:System.Fabric.Health.ReplicaHealthState"/> objects.</para>
            </summary>
            <remarks>The filter can be used in <see cref="T:System.Fabric.Description.PartitionHealthQueryDescription"/>
            to specify which replica children should be returned as part of <see cref="T:System.Fabric.Health.PartitionHealth"/>.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthStatesFilter.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.ReplicaHealthStatesFilter"/> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ReplicaHealthStatesFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="P:System.Fabric.Health.ReplicaHealthStatesFilter.HealthStateFilterValue">
            <summary>
            Gets or sets the filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ReplicaHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ReplicaHealthState"/> entries.</value>
            <remarks>The input collection is filtered to return only entries that respect the desired health state. 
            The filter represents a value obtained from members or bitwise combinations of members of <see cref="P:System.Fabric.Health.ReplicaHealthStatesFilter.HealthStateFilter"/>.</remarks>
        </member>
        <member name="P:System.Fabric.Health.ReplicaHealthStatesFilter.HealthStateFilter">
            <summary>
            <para>DEPRECATED. Gets or sets the filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ReplicaHealthState"/> entries in 
            the collection. Represents a value obtained from members or bitwise combinations of members of <see cref="T:System.Fabric.Health.HealthStateFilter"/>.</para>
            </summary>
            <value>
            <para> The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ReplicaHealthState"/> entries in the 
            collection. The value comes from members or bitwise combination of members of <see cref="T:System.Fabric.Health.HealthStateFilter"/>.</para>
            </value>
            <remarks>This property is obsolete. Use <see cref="P:System.Fabric.Health.ReplicaHealthStatesFilter.HealthStateFilterValue"/> instead.</remarks>
        </member>
        <member name="T:System.Fabric.Health.ReplicaHealthEvaluation">
            <summary>
            <para>Represents health evaluation for a replica, 
            containing information about the data and the algorithm used by health store to 
            evaluate health. The evaluation is returned only when the aggregated health state is either <see cref="F:System.Fabric.Health.HealthState.Error"/> 
            or <see cref="F:System.Fabric.Health.HealthState.Warning"/>.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.ReplicaHealthEvaluation.PartitionId">
            <summary>
            <para>Gets the partition ID.</para>
            </summary>
            <value>
            <para>The partition ID.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ReplicaHealthEvaluation.UnhealthyEvaluations">
            <summary>
            <para>Gets the unhealthy evaluations that led to the current aggregated health state of the replica. The types of the unhealthy 
            evaluations can be <see cref="T:System.Fabric.Health.EventHealthEvaluation"/>.</para>
            </summary>
            <value>
            <para>The unhealthy evaluations that led to current aggregated health state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ReplicaHealthEvaluation.ReplicaOrInstanceId">
            <summary>
            <para>Gets the stateful service replica ID or the stateless service instance ID.</para>
            </summary>
            <value>
            <para>The replica or instance ID.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.ReplicasHealthEvaluation">
            <summary>
            <para>Represents health evaluation for replicas,
            containing health evaluations for each unhealthy replica that impacted current 
            aggregated health state.
            Can be returned when evaluating partition health and the aggregated health state is either <see cref="F:System.Fabric.Health.HealthState.Error"/> or <see cref="F:System.Fabric.Health.HealthState.Warning"/>.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.ReplicasHealthEvaluation.UnhealthyEvaluations">
            <summary>
            <para>Gets the list of unhealthy evaluations that led to the aggregated health state.
            Includes all the unhealthy 
            <see cref="T:System.Fabric.Health.ReplicaHealthEvaluation"/> that impacted the aggregated health.</para>
            </summary>
            <value>
            <para>The unhealthy evaluations that led to current aggregated health state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ReplicasHealthEvaluation.MaxPercentUnhealthyReplicasPerPartition">
            <summary>
            <para>Gets the maximum allowed percentage of 
            unhealthy replicas per partition from the <see cref="T:System.Fabric.Health.ApplicationHealthPolicy"/>.</para>
            </summary>
            <value>
            <para>The maximum allowed percentage of unhealthy replicas per partition.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ReplicasHealthEvaluation.TotalCount">
            <summary>
            <para>Gets the total number of replicas in the partition from the health store.</para>
            </summary>
            <value>
            <para>The total number of replicas in the partition.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.ServiceHealth">
            <summary>
            <para>Describes the health of a service as returned by <see cref="M:System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Fabric.Description.ServiceHealthQueryDescription)"/>.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealth.ServiceName">
            <summary>
            <para>Gets the service name which uniquely identifies the service health entity.</para>
            </summary>
            <value>
            <para>The service name which uniquely identifies the service health entity.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealth.PartitionHealthStates">
            <summary>
            <para>Gets partition health states for the current service.</para>
            </summary>
            <value>
            <para>The partition health states for the current service.</para>
            </value>
            <remarks>
            <para>Only partitions that respect the <see cref="P:System.Fabric.Description.ServiceHealthQueryDescription.PartitionsFilter"/> (if specified) are returned. 
            If the input filter is not specified, all partitions are returned.</para>
            <para>All partitions are evaluated to determine the service aggregated health.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.Health.ServiceHealthReport">
            <summary>
            <para>Represents a health report to be applied on a service health entity.
            The report is sent to health store with 
            <see cref="M:System.Fabric.FabricClient.HealthClient.ReportHealth(System.Fabric.Health.HealthReport)"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthReport.#ctor(System.Uri,System.Fabric.Health.HealthInformation)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.Health.ServiceHealthReport"/>.</para>
            </summary>
            <param name="serviceName">
            <para>The service name. Required.</para>
            </param>
            <param name="healthInformation">
            <para>The HealthInformation which describes the report fields, like sourceId, property, health state. Required.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para>A null value was passed in for a required parameter.</para>
            </exception>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealthReport.ServiceName">
            <summary>
            <para>Gets the name of the service.</para>
            </summary>
            <value>
            <para>The name of the service.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.ServiceHealthState">
            <summary>
            <para>Represents the health state of a service, which contains the service identifier and its aggregated health state.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthState.ToString">
            <summary>
            Creates a string description of the service health state.
            </summary>
            <returns>String description of the <see cref="T:System.Fabric.Health.ServiceHealthState"/>.</returns>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealthState.ServiceName">
            <summary>
            <para>Gets the service name.</para>
            </summary>
            <value>
            <para>The service name.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.ServiceHealthStateChunk">
            <summary>
            Represents a service health state chunk, which contains basic health information about the service.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStateChunk.#ctor">
            <summary>
            Instantiates a <see cref="T:System.Fabric.Health.ServiceHealthStateChunk"/>.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStateChunk.ToString">
            <summary>
            Creates a string description of the service health state chunk.
            </summary>
            <returns>String description of the health state chunk.</returns>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealthStateChunk.ServiceName">
            <summary>
            Gets the service name, which uniquely identifies the service.
            </summary>
            <value>The service name.</value>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealthStateChunk.HealthState">
            <summary>
            Gets the aggregated health state of the service, computed based on all reported health events, its children and the application health policy.
            </summary>
            <value>The aggregated health state of the service.</value>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealthStateChunk.PartitionHealthStateChunks">
            <summary>
            Gets the list of the service partition health state chunks that respect the input filters.
            </summary>
            <value>The list of the partition health state chunks that respect the input filters.</value>
            <remarks>
            <para>By default, no children are included in results. Users can request to include
            some children based on desired health or other information. 
            For example, users can request to include all partitions that have health state error.
            Regardless of filter value, all children are used to compute service aggregated health.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.Health.ServiceHealthStateChunkList">
            <summary>
            Represents a list that contains <see cref="T:System.Fabric.Health.ServiceHealthStateChunk"/> items.
            </summary>
            <remarks>The list can be obtained through health state chunk queries. The queries may have as result more chunks that can fit a message.
            In this case, the list of items that fit the message is returned plus a count that shows how many total items are available.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStateChunkList.#ctor">
            <summary>
            Instantiates an empty <see cref="T:System.Fabric.Health.ServiceHealthStateChunkList"/>.
            </summary>
        </member>
        <member name="T:System.Fabric.Health.ServiceHealthStateList">
            <summary>
            <para>Represents a collection of <see cref="T:System.Fabric.Health.ServiceHealthState"/> that can be individually accessed by index.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStateList.IndexOf(System.Fabric.Health.ServiceHealthState)">
            <summary>
            <para>Determines the index of a specific item in the collection.</para>
            </summary>
            <param name="item">
            <para>The item to locate in the collection.</para>
            </param>
            <returns>
            <para>The index of the item if found in the collection; -1 otherwise.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStateList.Insert(System.Int32,System.Fabric.Health.ServiceHealthState)">
            <summary>
            <para>Inserts an item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index at which value should be inserted.</para>
            </param>
            <param name="item">
            <para>The item to be inserted.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStateList.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the item to remove.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStateList.Add(System.Fabric.Health.ServiceHealthState)">
            <summary>
            <para>Adds an item to the collection.</para>
            </summary>
            <param name="item">
            <para>The item to add.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStateList.Clear">
            <summary>
            <para>Removes all items from the collection.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStateList.Contains(System.Fabric.Health.ServiceHealthState)">
            <summary>
            <para>Determines whether the collection contains a specific value.</para>
            </summary>
            <param name="item">
            <para>The item to locate in the collection.</para>
            </param>
            <returns>
            <para>Returns <languageKeyword>true</languageKeyword> if the item is found; <languageKeyword>false</languageKeyword> otherwise.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStateList.CopyTo(System.Fabric.Health.ServiceHealthState[],System.Int32)">
            <summary>
            <para>Copies the elements of the ICollection to an Array, starting at a particular Array index.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing.</para>
            </param>
            <param name="arrayIndex">
            <para>The zero-based index in array at which copying begins.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStateList.Remove(System.Fabric.Health.ServiceHealthState)">
            <summary>
            <para>Removes the first occurrence of a specific item from the collection.</para>
            </summary>
            <param name="item">
            <para>The item to be removed.</para>
            </param>
            <returns>
            <para>Returns <languageKeyword>true</languageKeyword> if the item was removed; <languageKeyword>false</languageKeyword> otherwise.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStateList.GetEnumerator">
            <summary>
            <para>Returns an enumerator that iterates through a collection.</para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStateList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <para>Returns an enumerator that iterates through a collection.</para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealthStateList.Item(System.Int32)">
            <summary>
            <para>Gets or sets the element at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the element to get or set.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Fabric.Health.ServiceHealthState"/> at the specified index.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealthStateList.Count">
            <summary>
            <para>Gets the number of elements.</para>
            </summary>
            <value>
            <para>The number of elements.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealthStateList.IsReadOnly">
            <summary>
            <para>Gets a value indicating whether the list is read-only.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the list is read-only; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.ServiceHealthStateFilter">
            <summary>
            Filter for <see cref="T:System.Fabric.Health.ServiceHealthState"/> objects.
            </summary>
            <remarks>The entity health state chunk queries can specify a list of service filters to fine-grain
            select the services that should be included in the query result.
            Note that all the services are used to evaluate parents aggregated health state, regardless of the filter passed in.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStateFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.Health.ServiceHealthStateFilter"/> class.
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStateFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealthStateFilter.HealthStateFilter">
            <summary>
            Gets or sets filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ServiceHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ServiceHealthState"/> entries in the collection.</value>
            <remarks>The health state filter value comes from members or bitwise combination of members of <see cref="P:System.Fabric.Health.ServiceHealthStateFilter.HealthStateFilter"/>. 
            For a service to match the filter, its aggregated health state must match the specified health state filter.</remarks>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealthStateFilter.ServiceNameFilter">
            <summary>
            Gets or sets the service name filter.
            </summary>
            <value>The service name filter.</value>
            <remarks>If not specified, all services that match the parent filters (if any) and the specified health state filter match the filter.
            Otherwise, the filter only applies to the specified service. All the other filter members, like health state filter, are applied to this service.</remarks>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealthStateFilter.PartitionFilters">
            <summary>
            Gets the list of <see cref="T:System.Fabric.Health.PartitionHealthStateFilter"/> to be applied to the partition children health states.
            </summary>
            <value>The list of <see cref="T:System.Fabric.Health.PartitionHealthStateFilter"/> to be applied to the partition children health states.</value>
            <remarks>The list can contain one default partition filter and/or partition filters for specific partitions to fine-grain entities returned by the query.
            All partition children that match the filter will be returned as children of the service.
            If empty, the children are not returned by default.</remarks>
        </member>
        <member name="T:System.Fabric.Health.ServiceHealthStatesFilter">
            <summary>
            <para>Represents filter for <see cref="T:System.Fabric.Health.ServiceHealthState"/> objects.</para>
            </summary>
            <remarks>The filter can be used in <see cref="T:System.Fabric.Description.ApplicationHealthQueryDescription"/>
            to specify which service children should be returned as part of <see cref="T:System.Fabric.Health.ApplicationHealth"/>.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStatesFilter.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Health.ServiceHealthStatesFilter"/> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ServiceHealthStatesFilter.ToString">
            <summary>
            Returns a string representation of the filter.
            </summary>
            <returns>A string representation of the filter.</returns>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealthStatesFilter.HealthStateFilterValue">
            <summary>
            Gets or sets the filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ServiceHealthState"/> entries in the collection. 
            </summary>
            <value>The filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ServiceHealthState"/> entries.</value>
            <remarks>The input collection is filtered to return only entries that respect the desired health state. 
            The filter represents a value obtained from members or bitwise combinations of members of <see cref="P:System.Fabric.Health.ServiceHealthStatesFilter.HealthStateFilter"/>.</remarks>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealthStatesFilter.HealthStateFilter">
            <summary>
            <para>DEPRECATED. Gets or sets the filter for the aggregated health state of the <see cref="T:System.Fabric.Health.ServiceHealthState"/> entries in the collection. </para>
            </summary>
            <value>
            <para>The value of the filter. The value comes from members or bitwise combination of members of <see cref="T:System.Fabric.Health.HealthStateFilter"/>.</para>
            </value>
            <remarks>This property is obsolete. Use <see cref="P:System.Fabric.Health.ApplicationHealthStatesFilter.HealthStateFilterValue"/> instead.</remarks>
        </member>
        <member name="T:System.Fabric.Health.ServiceHealthEvaluation">
            <summary>
            <para>Represents health evaluation for a service,
            containing information about the data and the algorithm used by health store to 
            evaluate health.
            The evaluation is returned only when the aggregated health state is either <see cref="F:System.Fabric.Health.HealthState.Error"/> 
            or <see cref="F:System.Fabric.Health.HealthState.Warning"/>.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealthEvaluation.ServiceName">
            <summary>
            <para>Gets the service name.</para>
            </summary>
            <value>
            <para>The service name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ServiceHealthEvaluation.UnhealthyEvaluations">
            <summary>
            <para>Gets the unhealthy evaluations that led to the current aggregated health state of the service. The types of the unhealthy 
            evaluations can be <see cref="T:System.Fabric.Health.PartitionsHealthEvaluation"/> or <see cref="T:System.Fabric.Health.EventHealthEvaluation"/>.</para>
            </summary>
            <value>
            <para>The unhealthy evaluations that led to current aggregated health state.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.ServicesHealthEvaluation">
            <summary>
            <para>Represents health evaluation for services of a certain service type belonging to an application,
            containing health evaluations for 
            each unhealthy service that impacted current aggregated health state.
            Can be returned when evaluating application health and the aggregated 
            health state is either <see cref="F:System.Fabric.Health.HealthState.Error"/> or <see cref="F:System.Fabric.Health.HealthState.Warning"/>.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.ServicesHealthEvaluation.ServiceTypeName">
            <summary>
            <para>Gets the service type name.</para>
            </summary>
            <value>
            <para>The service type name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ServicesHealthEvaluation.UnhealthyEvaluations">
            <summary>
            <para>Gets the list of unhealthy evaluations that led to the aggregated health state.
            Includes all the unhealthy 
            <see cref="T:System.Fabric.Health.ServiceHealthEvaluation"/> that impacted the aggregated health.</para>
            </summary>
            <value>
            <para>The unhealthy evaluations that led to current aggregated health state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ServicesHealthEvaluation.MaxPercentUnhealthyServices">
            <summary>
            <para>Gets the maximum allowed percentage of 
            unhealthy services from the <see cref="T:System.Fabric.Health.ServiceTypeHealthPolicy"/>.</para>
            </summary>
            <value>
            <para>The maximum allowed percentage of unhealthy services.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.ServicesHealthEvaluation.TotalCount">
            <summary>
            <para>Gets the total number of services of the current service type in the application from the health store.</para>
            </summary>
            <value>
            <para>The total number of services of the current service type in the specified application.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.ServiceTypeHealthPolicy">
            <summary>
            <para>Represents the health policy used to evaluate the health of services belonging to a service type.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.ServiceTypeHealthPolicy.#ctor">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.Health.ServiceTypeHealthPolicy"/> class.</para>
            </summary>
            <remarks>By default, no errors or warnings are tolerated.</remarks>
        </member>
        <member name="M:System.Fabric.Health.ServiceTypeHealthPolicy.ToString">
            <summary>
            Gets a string representation of the service type health policy.
            </summary>
            <returns>A string representation of the service type health policy.</returns>
        </member>
        <member name="P:System.Fabric.Health.ServiceTypeHealthPolicy.MaxPercentUnhealthyServices">
            <summary>
            <para>Gets or sets the maximum allowed percentage of unhealthy services.</para>
            </summary>
            <value>
            <para>Returns the maximum allowed percentage of unhealthy services. 
            Allowed values are <see cref="T:System.Byte"/> values from zero to 100.</para>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>The specified value was outside the range of integer values from zero to 100.</para>
            </exception>
        </member>
        <member name="P:System.Fabric.Health.ServiceTypeHealthPolicy.MaxPercentUnhealthyPartitionsPerService">
            <summary>
            <para>Gets or sets the maximum allowed percentage of unhealthy partitions per service.</para>
            </summary>
            <value>
            <para>Returns the maximum allowed percentage of unhealthy partitions per service.
            Allowed values are <see cref="T:System.Byte"/> values from zero to 100.</para>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>The specified value was outside the range of integer values from zero to 100.</para>
            </exception>
        </member>
        <member name="P:System.Fabric.Health.ServiceTypeHealthPolicy.MaxPercentUnhealthyReplicasPerPartition">
            <summary>
            <para>Gets or sets the maximum allowed percentage of unhealthy replicas per partition.</para>
            </summary>
            <value>
            <para>Returns the maximum allowed percentage of unhealthy replicas per partition.
            Allowed values are <see cref="T:System.Byte"/> values from zero to 100.</para>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>The specified value was outside the range of integer values from zero to 100.</para>
            </exception>
        </member>
        <member name="T:System.Fabric.Health.StatefulServiceReplicaHealth">
            <summary>
            <para>Describes the health of a stateful service replica as returned by <see cref="M:System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Fabric.Description.ReplicaHealthQueryDescription)"/>.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.StatefulServiceReplicaHealth.ReplicaId">
            <summary>
            <para>Gets the replica ID.</para>
            </summary>
            <value>
            <para>The replica ID.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.StatefulServiceReplicaHealthReport">
            <summary>
            <para>Represents a health report to be applied on a stateful service replica health entity.
            The report is sent to health store with 
            <see cref="M:System.Fabric.FabricClient.HealthClient.ReportHealth(System.Fabric.Health.HealthReport)"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.StatefulServiceReplicaHealthReport.#ctor(System.Guid,System.Int64,System.Fabric.Health.HealthInformation)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.Health.StatefulServiceReplicaHealthReport"/>.</para>
            </summary>
            <param name="partitionId">
            <para>The partition ID.</para>
            </param>
            <param name="replicaId">
            <para>The replica ID.</para>
            </param>
            <param name="healthInformation">
            <para>The <see cref="T:System.Fabric.Health.HealthInformation"/> which describes the report fields, like sourceId, 
            property, health state. Required.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para>A null value was passed in for a required parameter.</para>
            </exception>
        </member>
        <member name="P:System.Fabric.Health.StatefulServiceReplicaHealthReport.PartitionId">
            <summary>
            <para>Gets the partition ID.</para>
            </summary>
            <value>
            <para>The partition ID.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.StatefulServiceReplicaHealthReport.ReplicaId">
            <summary>
            <para>Gets the replica ID.</para>
            </summary>
            <value>
            <para>The replica ID.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.StatefulServiceReplicaHealthState">
            <summary>
            <para>Represents the health state of the stateful service replica, which contains the replica is and the aggregated health state.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.StatefulServiceReplicaHealthState.ReplicaId">
            <summary>
            <para>Gets the replica ID.</para>
            </summary>
            <value>
            <para>The replica ID.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.StatelessServiceInstanceHealth">
            <summary>
            <para>Describes the health of the stateless instance as returned by <see cref="M:System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Fabric.Description.ReplicaHealthQueryDescription)"/>.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.StatelessServiceInstanceHealth.InstanceId">
            <summary>
            <para>Gets the instance ID of the stateless service instance.</para>
            </summary>
            <value>
            <para>The instance ID.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.StatelessServiceInstanceHealthReport">
            <summary>
            <para>Represents a health report to be applied on a stateless service health entity.
            The report is sent to health store with 
            <see cref="M:System.Fabric.FabricClient.HealthClient.ReportHealth(System.Fabric.Health.HealthReport)"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Health.StatelessServiceInstanceHealthReport.#ctor(System.Guid,System.Int64,System.Fabric.Health.HealthInformation)">
            <summary>
            <para>Initializes a new instance of <see cref="T:System.Fabric.Health.StatelessServiceInstanceHealthReport"/>.</para>
            </summary>
            <param name="partitionId">
            <para>The partition ID.</para>
            </param>
            <param name="instanceId">
            <para>The instance ID.</para>
            </param>
            <param name="healthInformation">
            <para>The <see cref="T:System.Fabric.Health.HealthInformation"/> which describes the report fields, like sourceId, property, 
            health state. Required.</para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <para>A null value was passed in for a required parameter.</para>
            </exception>
        </member>
        <member name="P:System.Fabric.Health.StatelessServiceInstanceHealthReport.PartitionId">
            <summary>
            <para>Gets the partition ID.</para>
            </summary>
            <value>
            <para>The partition ID.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.StatelessServiceInstanceHealthReport.InstanceId">
            <summary>
            <para>Gets the instance ID.</para>
            </summary>
            <value>
            <para>The instance ID.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.StatelessServiceInstanceHealthState">
            <summary>
            <para>Represents the health state of a stateless service instance health entity, which contains the instance id and the aggregated health state.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.StatelessServiceInstanceHealthState.InstanceId">
            <summary>
            <para>Gets the instance ID.</para>
            </summary>
            <value>
            <para>The instance ID.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.SystemApplicationHealthEvaluation">
            <summary>
            <para>Represents health evaluation for the fabric:/System application,
            containing information about the data and the algorithm used by health 
            store to evaluate health. The evaluation is returned only when the aggregated health state of the cluster is either 
            <see cref="F:System.Fabric.Health.HealthState.Error"/> or <see cref="F:System.Fabric.Health.HealthState.Warning"/>.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.SystemApplicationHealthEvaluation.UnhealthyEvaluations">
            <summary>
            <para>Gets the unhealthy evaluations that led to the current aggregated health state of the system application. The types of the 
            unhealthy evaluations can be <see cref="T:System.Fabric.Health.DeployedApplicationsHealthEvaluation"/>, 
            <see cref="T:System.Fabric.Health.ServicesHealthEvaluation"/> or <see cref="T:System.Fabric.Health.EventHealthEvaluation"/>.</para>
            </summary>
            <value>
            <para>The unhealthy evaluations that 
            led to current aggregated health state.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.UpgradeDomainDeltaNodesCheckHealthEvaluation">
            <summary>
            <para>Represents health evaluation for delta unhealthy cluster nodes in an upgrade domain, containing health evaluations for each 
            unhealthy node that impacted current aggregated health state.
            Can be returned during cluster upgrade when cluster aggregated health 
            state is <see cref="F:System.Fabric.Health.HealthState.Error"/>.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.UpgradeDomainDeltaNodesCheckHealthEvaluation.UpgradeDomainName">
            <summary>
            <para>Gets the name of the upgrade domain where nodes health is currently evaluated.</para>
            </summary>
            <value>
            <para>The upgrade domain name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.UpgradeDomainDeltaNodesCheckHealthEvaluation.BaselineErrorCount">
            <summary>
            <para>Gets the number of upgrade domain nodes with aggregated heath state 
            <see cref="F:System.Fabric.Health.HealthState.Error"/> in 
            the health store at the beginning of the cluster upgrade.</para>
            </summary>
            <value>
            <para>The number of upgrade domain nodes with aggregated heath state 
            <see cref="F:System.Fabric.Health.HealthState.Error"/> in the 
            health store at the beginning of the cluster upgrade.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.UpgradeDomainDeltaNodesCheckHealthEvaluation.BaselineTotalCount">
            <summary>
            <para>Gets the total number of upgrade domain nodes in the health store
            at the beginning of the cluster upgrade.</para>
            </summary>
            <value>
            <para>T he total number of upgrade domain nodes in the health store
            at the beginning of the cluster upgrade.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.UpgradeDomainDeltaNodesCheckHealthEvaluation.TotalCount">
            <summary>
            <para>Gets the current total number of upgrade domain nodes in the health store.</para>
            </summary>
            <value>
            <para>The current total number of upgrade domain nodes in the health store.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.UpgradeDomainDeltaNodesCheckHealthEvaluation.MaxPercentUpgradeDomainDeltaUnhealthyNodes">
            <summary>
            <para>Gets the maximum allowed percentage of upgrade domain delta unhealthy nodes
            from the <see cref="T:System.Fabric.Health.ClusterUpgradeHealthPolicy"/>.</para>
            </summary>
            <value>
            <para>The maximum allowed percentage of upgrade domain delta unhealthy nodes.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.UpgradeDomainDeltaNodesCheckHealthEvaluation.UnhealthyEvaluations">
            <summary>
            <para>Gets the list of unhealthy evaluations that led to the aggregated health state. Includes all the unhealthy 
            <see cref="T:System.Fabric.Health.NodeHealthEvaluation"/> that impacted the aggregated health.</para>
            </summary>
            <value>
            <para>The unhealthy evaluations that 
            led to current aggregated health state.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.UpgradeDomainDeployedApplicationsHealthEvaluation">
            <summary>
            <para>Represents health evaluation for deployed applications of an application in an upgrade domain,
            containing health evaluations for 
            each unhealthy deployed application that impacted current aggregated health state.
            </para>
            </summary>
            <remarks>Can be returned when evaluating application health 
            during cluster or application upgrade and the aggregated health state is either <see cref="F:System.Fabric.Health.HealthState.Error"/> 
            or <see cref="F:System.Fabric.Health.HealthState.Warning"/>.</remarks>
        </member>
        <member name="P:System.Fabric.Health.UpgradeDomainDeployedApplicationsHealthEvaluation.UpgradeDomainName">
            <summary>
            <para>Gets the name of the upgrade domain where the application health is currently evaluated.</para>
            </summary>
            <value>
            <para>The upgrade domain name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.UpgradeDomainDeployedApplicationsHealthEvaluation.UnhealthyEvaluations">
            <summary>
            <para>Gets the list of unhealthy evaluations that led to the aggregated health state. Includes all the unhealthy 
            <see cref="T:System.Fabric.Health.DeployedApplicationHealthEvaluation"/> that impacted the aggregated health.</para>
            </summary>
            <value>
            <para>The unhealthy evaluations 
            that led to current aggregated health state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.UpgradeDomainDeployedApplicationsHealthEvaluation.MaxPercentUnhealthyDeployedApplications">
            <summary>
            <para>Gets the maximum allowed percentage of unhealthy deployed applications
            from the <see cref="T:System.Fabric.Health.ApplicationHealthPolicy"/>.</para>
            </summary>
            <value>
            <para>The maximum allowed percentage of unhealthy deployed applications.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.UpgradeDomainDeployedApplicationsHealthEvaluation.TotalCount">
            <summary>
            <para>Gets the total number of deployed applications of the current application
            in the current upgrade domain.</para>
            </summary>
            <value>
            <para>The total number of deployed applications of the current application
            in the current upgrade domain.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Health.UpgradeDomainNodesHealthEvaluation">
            <summary>
            <para>Represents health evaluation for cluster nodes in an upgrade domain,
            containing health evaluations for each unhealthy node that 
            impacted current aggregated health state.
            Can be returned when evaluating cluster health during cluster upgrade and the aggregated health 
            state is either <see cref="F:System.Fabric.Health.HealthState.Error"/> or <see cref="F:System.Fabric.Health.HealthState.Warning"/>.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Health.UpgradeDomainNodesHealthEvaluation.UpgradeDomainName">
            <summary>
            <para>Gets the name of the upgrade domain where nodes health is currently evaluated.</para>
            </summary>
            <value>
            <para>The upgrade domain name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.UpgradeDomainNodesHealthEvaluation.UnhealthyEvaluations">
            <summary>
            <para>Gets the list of unhealthy evaluations that led to the aggregated health state.
            Includes all the unhealthy 
            <see cref="T:System.Fabric.Health.NodeHealthEvaluation"/> that impacted the aggregated health.</para>
            </summary>
            <value>
            <para>The unhealthy evaluations that led to current aggregated health state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.UpgradeDomainNodesHealthEvaluation.MaxPercentUnhealthyNodes">
            <summary>
            <para>Gets the maximum allowed percentage of unhealthy nodes from the <see cref="T:System.Fabric.Health.ClusterHealthPolicy"/>.</para>
            </summary>
            <value>
            <para>The maximum allowed percentage of unhealthy nodes.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Health.UpgradeDomainNodesHealthEvaluation.TotalCount">
            <summary>
            <para>Gets the total number of nodes in the current upgrade domain.</para>
            </summary>
            <value>
            <para>The total number of nodes in the current upgrade domain.</para>
            </value>
        </member>
        <member name="T:System.Fabric.ICodePackageActivationContext">
            <summary>
            Represents activation context for the Service Fabric activated service.
            </summary>
            <remarks>Includes information from the service manifest as well as information
            about the currently activated code package like work directory, context id etc.</remarks>
        </member>
        <member name="M:System.Fabric.ICodePackageActivationContext.GetServiceTypes">
            <summary>
            Retrieves the list of Service types in the service manifest.
            </summary>
            <returns>The list of service types in the service manifest.</returns>
        </member>
        <member name="M:System.Fabric.ICodePackageActivationContext.GetServiceGroupTypes">
            <summary>
            Retrieves the list of Service Group types in the service manifest.
            </summary>
            <returns>The list of Service Group types in the service manifest.</returns>
        </member>
        <member name="M:System.Fabric.ICodePackageActivationContext.GetApplicationPrincipals">
            <summary>
            Retrieves the principals defined in the application manifest.
            </summary>
            <returns>The principals defined in the application manifest.</returns>
        </member>
        <member name="M:System.Fabric.ICodePackageActivationContext.GetEndpoints">
            <summary>
            Retrieves the endpoint resources in the service manifest.
            </summary>
            <returns>The endpoint resources in the service manifest.</returns>
        </member>
        <member name="M:System.Fabric.ICodePackageActivationContext.GetEndpoint(System.String)">
            <summary>
            Retrieves the endpoint resource with a given name from the service manifest.
            </summary>
            <param name="endpointName">The name of the endpoint.</param>
            <returns>The endpoint resource with the specified name.</returns>
        </member>
        <member name="M:System.Fabric.ICodePackageActivationContext.GetCodePackageNames">
            <summary>
            Retrieves the list of code package names in the service manifest.
            </summary>
            <returns>The list of code package names in the service manifest.</returns>
        </member>
        <member name="M:System.Fabric.ICodePackageActivationContext.GetConfigurationPackageNames">
            <summary>
            Retrieves the list of configuration package names in the service manifest.
            </summary>
            <returns>The list of configuration package names in the service manifest.</returns>
        </member>
        <member name="M:System.Fabric.ICodePackageActivationContext.GetDataPackageNames">
            <summary>
            Retrieves the list of data package names in the service manifest.
            </summary>
            <returns>The list of data package names in the service manifest.</returns>
        </member>
        <member name="M:System.Fabric.ICodePackageActivationContext.GetCodePackageObject(System.String)">
            <summary>
            Returns the <see cref="T:System.Fabric.CodePackage"/> object from Service Package that matches the desired package name.
            </summary>
            <param name="packageName">The name of the code package.</param>
            <returns>The <see cref="T:System.Fabric.CodePackage"/> object from Service Package that matches the desired package name.</returns>
            /// <remarks>Throws KeyNotFoundException exception if the package is not found.</remarks>
        </member>
        <member name="M:System.Fabric.ICodePackageActivationContext.GetConfigurationPackageObject(System.String)">
            <summary>
            Returns the <see cref="T:System.Fabric.ConfigurationPackage"/> object from Service Package that matches the desired package name.
            </summary>
            <param name="packageName">The name of the configuration package.</param>
            <returns>The <see cref="T:System.Fabric.ConfigurationPackage"/> object from Service Package that matches the desired package name.</returns>
            <remarks>Throws KeyNotFoundException exception if the package is not found.</remarks>
        </member>
        <member name="M:System.Fabric.ICodePackageActivationContext.GetDataPackageObject(System.String)">
            <summary>
            Returns the <see cref="T:System.Fabric.DataPackage"/> object from Service Package that matches the desired package name.
            </summary>
            <param name="packageName">The name of the data package.</param>
            <returns>The <see cref="T:System.Fabric.DataPackage"/> object from Service Package that matches the desired package name.</returns>
            /// <remarks>Throws KeyNotFoundException exception if the package is not found.</remarks>
        </member>
        <member name="M:System.Fabric.ICodePackageActivationContext.GetServiceManifestName">
            <summary>
            Retrieves the name of the service manifest.
            </summary>
            <returns>The name of the service manifest.</returns>
        </member>
        <member name="M:System.Fabric.ICodePackageActivationContext.GetServiceManifestVersion">
            <summary>
            Retrieves the version of the service manifest.
            </summary>
            <returns>The version of the service manifest.</returns>
        </member>
        <member name="E:System.Fabric.ICodePackageActivationContext.CodePackageAddedEvent">
            <summary>
            Event raised when new <see cref="T:System.Fabric.CodePackage"/> is added to the service manifest.
            </summary>
        </member>
        <member name="E:System.Fabric.ICodePackageActivationContext.CodePackageRemovedEvent">
            <summary>
            Event raised when a <see cref="T:System.Fabric.CodePackage"/> is removed from the service manifest.
            </summary>
        </member>
        <member name="E:System.Fabric.ICodePackageActivationContext.CodePackageModifiedEvent">
            <summary>
            Event raised when a <see cref="T:System.Fabric.CodePackage"/> in the service manifest is modified.
            </summary>
        </member>
        <member name="E:System.Fabric.ICodePackageActivationContext.ConfigurationPackageAddedEvent">
            <summary>
            Event raised when new <see cref="T:System.Fabric.ConfigurationPackage"/> is added to the service manifest.
            </summary>
        </member>
        <member name="E:System.Fabric.ICodePackageActivationContext.ConfigurationPackageRemovedEvent">
            <summary>
            Event raised when a <see cref="T:System.Fabric.ConfigurationPackage"/> is removed from the service manifest.
            </summary>
        </member>
        <member name="E:System.Fabric.ICodePackageActivationContext.ConfigurationPackageModifiedEvent">
            <summary>
            Event raised when a <see cref="T:System.Fabric.ConfigurationPackage"/> in the service manifest is modified.
            </summary>
        </member>
        <member name="E:System.Fabric.ICodePackageActivationContext.DataPackageAddedEvent">
            <summary>
            Event raised when new <see cref="T:System.Fabric.DataPackage"/> is added to the service manifest.
            </summary>
        </member>
        <member name="E:System.Fabric.ICodePackageActivationContext.DataPackageRemovedEvent">
            <summary>
            Event raised when a <see cref="T:System.Fabric.DataPackage"/> is removed from the service manifest.
            </summary>
        </member>
        <member name="E:System.Fabric.ICodePackageActivationContext.DataPackageModifiedEvent">
            <summary>
            Event raised when a <see cref="T:System.Fabric.DataPackage"/> in the service manifest is modified.
            </summary>
        </member>
        <member name="P:System.Fabric.ICodePackageActivationContext.WorkDirectory">
            <summary>
            Gets the path to the Work directory that the application can use.
            </summary>
            <value>The path to the code package Work directory.</value>
        </member>
        <member name="P:System.Fabric.ICodePackageActivationContext.LogDirectory">
            <summary>
            Gets the path to the Log directory that the application can use.
            </summary>
            <value>The path to the code package Log directory.</value>
        </member>
        <member name="P:System.Fabric.ICodePackageActivationContext.TempDirectory">
            <summary>
            Gets the path to the Temp directory that the application can use.
            </summary>
            <value>The path to the code package Temp directory.</value>
        </member>
        <member name="P:System.Fabric.ICodePackageActivationContext.ContextId">
            <summary>
            Gets the context id.
            </summary>
            <value>The context id.</value>
            <remarks>The context id is the same for all code packages in the same service manifest.</remarks>
        </member>
        <member name="P:System.Fabric.ICodePackageActivationContext.CodePackageName">
            <summary>
            Gets the name of the fabric activated code package.
            </summary>
            <value>The name of the fabric activated code package.</value>
        </member>
        <member name="P:System.Fabric.ICodePackageActivationContext.CodePackageVersion">
            <summary>
            Gets the version of the fabric activated code package.
            </summary>
            <value>The version of the fabric activated code package.</value>
        </member>
        <member name="P:System.Fabric.ICodePackageActivationContext.ApplicationName">
            <summary>
            Gets the application name.
            </summary>
            <value>The name of the application.</value>
        </member>
        <member name="P:System.Fabric.ICodePackageActivationContext.ApplicationTypeName">
            <summary>
            Gets the application type name.
            </summary>
            <value>The name of the application type.</value>
        </member>
        <member name="T:System.Fabric.CodePackageActivationContext">
            <summary>
            <para>Represents activation context for the Service Fabric service. 
            This is valid for fabric activated service only.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.Finalize">
            <summary>
            <para>
            Performs cleanup operations on unmanaged resources held by the current object before the object is destroyed.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetServiceTypes">
            <summary>
            <para>Retrieves the list of Service types in the service manifest.</para>
            </summary>
            <returns>
            <para>The list of service types.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetServiceGroupTypes">
            <summary>
            <para>Retrieves the list of Service Group types in the service manifest.</para>
            </summary>
            <returns>
            <para>The list of Service Group types in the service manifest.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetApplicationPrincipals">
            <summary>
            <para>Retrieves all the principals defined in the application manifest.</para>
            </summary>
            <returns>
            <para>The principals defined in the application manifest.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetEndpoints">
            <summary>
            <para>Retrieves all the end point names in the service manifest.</para>
            </summary>
            <returns>
            <para>The end point names in the service manifest.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetEndpoint(System.String)">
            <summary>
            <para>Retrieves the endpoint by name.</para>
            </summary>
            <param name="endpointName">
            <para>The name of the endpoint.</para>
            </param>
            <returns>
            <para>The endpoint with a specified name.</para>
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <para>Package Name is null or empty</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Package Name not found</para>
            </exception>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetCodePackageNames">
            <summary>
            <para>Retrieves the list of code package names in the service manifest.</para>
            </summary>
            <returns>
            <para>The list of code package names in the service manifest.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetConfigurationPackageNames">
            <summary>
            <para>Retrieves the list of configuration package names in the service manifest.</para>
            </summary>
            <returns>
            <para>The list of configuration package names in the service manifest.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetDataPackageNames">
            <summary>
            <para>Retrieves all data packages by name.</para>
            </summary>
            <returns>
            <para>A list of data packages.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetCodePackageObject(System.String)">
            <summary>
            <para>Returns the CodePackage object from Service Package that matches the packageName parameter</para>
            </summary>
            <param name="packageName">
            <para>Name of the CodePackage</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Fabric.CodePackage"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetConfigurationPackageObject(System.String)">
            <summary>
            <para>Returns ConfigurationPackage object from Service Package that matches the packageName parameter</para>
            </summary>
            <param name="packageName">
            <para>Name of the ConfigurationPackage</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Fabric.ConfigurationPackage"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetDataPackageObject(System.String)">
            <summary>
            <para>Returns DataPackage object from Service Package that matches the packageName parameter</para>
            </summary>
            <param name="packageName">
            <para>Name of the DataPackage</para>
            </param>
            <returns>
            <para>Returns DataPackage object from Service Package that matches the packageName parameter.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetCodePackage(System.String)">
            <summary>
            <para>Retrieves a Code Package by name.</para>
            </summary>
            <param name="packageName">
            <para>The name of the code package.</para>
            </param>
            <returns>
            <para>The code package.</para>
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <para>Package Name is null or empty.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Package Name not found.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetConfigurationPackage(System.String)">
            <summary>
            <para>Retrieves a configuration package by name.</para>
            </summary>
            <param name="packageName">
            <para>The name of the package.</para>
            </param>
            <returns>
            <para>A configuration package.</para>
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <para>Package Name is null or empty.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Package Name not found.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetDataPackage(System.String)">
            <summary>
            <para>Retrieves a data package by name.</para>
            </summary>
            <param name="packageName">
            <para>The name of the package.</para>
            </param>
            <returns>
            <para>A data package.</para>
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <para>Package Name is null or empty.</para>
            </exception>
            <exception cref="T:System.Fabric.FabricElementNotFoundException">
            <para>Package Name not found.</para>
            </exception>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetServiceManifestName">
            <summary>
            <para>Retrieves the name of the service manifest.</para>
            </summary>
            <returns>
            <para>The name of the service manifest.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.GetServiceManifestVersion">
            <summary>
            <para>Retrieves the version of the service manifest.</para>
            </summary>
            <returns>
            <para>The version of the service manifest.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.ReportApplicationHealth(System.Fabric.Health.HealthInformation)">
            <summary>
            Reports health for current application. 
            </summary>
            <param name="healthInfo">Health information that is to be reported.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.ReportDeployedApplicationHealth(System.Fabric.Health.HealthInformation)">
            <summary>
            Reports health for current deployed application. 
            </summary>
            <param name="healthInfo">Health information that is to be reported.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.ReportDeployedServicePackageHealth(System.Fabric.Health.HealthInformation)">
            <summary>
            Reports health for current deployed service package. 
            </summary>
            <param name="healthInfo">Health information that is to be reported.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.CodePackageActivationContext.Dispose">
            <summary>
            <para>
            Disposes of the code package activation context.
            </para>
            </summary>
        </member>
        <member name="E:System.Fabric.CodePackageActivationContext.CodePackageAdded">
            <summary>
            Raised when a new code package is added to the service manifest.
            </summary>
            <remarks>Obsolete. Use CodePackageAddedEvent instead.</remarks>
        </member>
        <member name="E:System.Fabric.CodePackageActivationContext.CodePackageRemoved">
            <summary>
            Raised when the code package is removed from the service manifest.
            </summary>
            <remarks>Obsolete. Use CodePackageRemovedEvent instead.</remarks>
        </member>
        <member name="E:System.Fabric.CodePackageActivationContext.CodePackageModified">
            <summary>
            Raised when an existing code package is modified in the service manifest.
            </summary>
            <remarks>Obsolete. Use CodePackageModifiedEvent instead.</remarks>
        </member>
        <member name="E:System.Fabric.CodePackageActivationContext.ConfigurationPackageAdded">
            <summary>
            Raised when a new configuration package is added to the service manifest.
            </summary>
            <remarks>Obsolete. Use ConfigurationPackageAddedEvent instead.</remarks>
        </member>
        <member name="E:System.Fabric.CodePackageActivationContext.ConfigurationPackageRemoved">
            <summary>
            Raised when a configuration package is removed from the service manifest.
            </summary>
            <remarks>Obsolete. Use ConfigurationPackageRemovedEvent instead.</remarks>
        </member>
        <member name="E:System.Fabric.CodePackageActivationContext.ConfigurationPackageModified">
            <summary>
            Raised when a configuration package is modified in the service manifest.
            </summary>
            <remarks>Obsolete. Use ConfigurationPackageModifiedEvent instead.</remarks>
        </member>
        <member name="E:System.Fabric.CodePackageActivationContext.DataPackageAdded">
            <summary>
            Raised when a data package is added to the service manifest.
            </summary>
            <remarks>Obsolete. Use DataPackageAddedEvent instead.</remarks>
        </member>
        <member name="E:System.Fabric.CodePackageActivationContext.DataPackageRemoved">
            <summary>
            Raised when a data package is removed from the service manifest.
            </summary>
            <remarks>Obsolete. Use DataPackageRemovedEvent instead.</remarks>
        </member>
        <member name="E:System.Fabric.CodePackageActivationContext.DataPackageModified">
            <summary>
            Raised when a data package is modified in the service manifest.
            </summary>
            <remarks>Obsolete. Use DataPackageModifiedEvent instead.</remarks>
        </member>
        <member name="E:System.Fabric.CodePackageActivationContext.CodePackageAddedEvent">
            <summary>
            Raised when a new code package is added to the service manifest.
            </summary>
        </member>
        <member name="E:System.Fabric.CodePackageActivationContext.CodePackageRemovedEvent">
            <summary>
            Raised when the code package is removed from the service manifest.
            </summary>
        </member>
        <member name="E:System.Fabric.CodePackageActivationContext.CodePackageModifiedEvent">
            <summary>
            Raised when an existing code package is modified in the service manifest.
            </summary>
        </member>
        <member name="E:System.Fabric.CodePackageActivationContext.ConfigurationPackageAddedEvent">
            <summary>
            Raised when a new configuration package is added to the service manifest.
            </summary>
        </member>
        <member name="E:System.Fabric.CodePackageActivationContext.ConfigurationPackageRemovedEvent">
            <summary>
            Raised when a configuration package is removed from the service manifest.
            </summary>
        </member>
        <member name="E:System.Fabric.CodePackageActivationContext.ConfigurationPackageModifiedEvent">
            <summary>
            Raised when a configuration package is modified in the service manifest.
            </summary>
        </member>
        <member name="E:System.Fabric.CodePackageActivationContext.DataPackageAddedEvent">
            <summary>
            Raised when a data package is added to the service manifest.
            </summary>
        </member>
        <member name="E:System.Fabric.CodePackageActivationContext.DataPackageRemovedEvent">
            <summary>
            Raised when a data package is removed from the service manifest.
            </summary>
        </member>
        <member name="E:System.Fabric.CodePackageActivationContext.DataPackageModifiedEvent">
            <summary>
            Raised when a data package is modified in the service manifest.
            </summary>
        </member>
        <member name="P:System.Fabric.CodePackageActivationContext.WorkDirectory">
            <summary>
            <para>Gets the path to the Work directory that the Application can use.</para>
            </summary>
            <value>
            <para>The path to the Work directory.</para>
            </value>
        </member>
        <member name="P:System.Fabric.CodePackageActivationContext.LogDirectory">
            <summary>
            <para>Gets the path to the log directory that the application can use.</para>
            </summary>
            <value>
            <para>The path to the application logs directory.</para>
            </value>
        </member>
        <member name="P:System.Fabric.CodePackageActivationContext.TempDirectory">
            <summary>
            <para>Gets the path to the Temp directory that the Application can use.</para>
            </summary>
            <value>
            <para>The path to the Temp directory.</para>
            </value>
        </member>
        <member name="P:System.Fabric.CodePackageActivationContext.ContextId">
            <summary>
            <para>Gets the ID that represents the service package name qualified with Application package name.</para>
            </summary>
            <value>
            <para>The context ID.</para>
            </value>
        </member>
        <member name="P:System.Fabric.CodePackageActivationContext.CodePackageName">
            <summary>
            <para>Gets the name of the fabric activated code package.</para>
            </summary>
            <value>
            <para>The name of the fabric activated code package.</para>
            </value>
        </member>
        <member name="P:System.Fabric.CodePackageActivationContext.CodePackageVersion">
            <summary>
            <para>Gets the version of the fabric activated code package</para>
            </summary>
            <value>
            <para>The version of the fabric activated code package.</para>
            </value>
        </member>
        <member name="P:System.Fabric.CodePackageActivationContext.ApplicationName">
            <summary>
            <para>Gets the name of the application.</para>
            </summary>
            <value>
            <para>The name of the application.</para>
            </value>
        </member>
        <member name="P:System.Fabric.CodePackageActivationContext.ApplicationTypeName">
            <summary>
            <para>Gets the name of the application type.</para>
            </summary>
            <value>
            <para>The name of the application type.</para>
            </value>
        </member>
        <member name="P:System.Fabric.CodePackageActivationContext.NativeActivationContext">
            <summary>
            The native activation context
            </summary>
        </member>
        <member name="T:System.Fabric.PackageAddedEventArgs`1">
            <summary>
            <para>Describes a package added event. </para>
            </summary>
            <typeparam name="TPackage">
            <para>Type of the package being described. See <see cref="T:System.Fabric.CodePackage"/>, <see cref="T:System.Fabric.ConfigurationPackage"/>, <see cref="T:System.Fabric.DataPackage"/>.</para>
            </typeparam>
            <remarks>
            <para>See <see cref="E:System.Fabric.CodePackageActivationContext.CodePackageAddedEvent"/>, 
            <see cref="E:System.Fabric.CodePackageActivationContext.ConfigurationPackageAddedEvent"/>, and <see cref="E:System.Fabric.CodePackageActivationContext.DataPackageAddedEvent"/>.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.PackageAddedEventArgs`1.Package">
            <summary>
            <para>Gets or sets the code, data, or configuration package that was added to the Service Manifest.</para>
            </summary>
            <value>
            <para>The code, data, or configuration package that was added to the Service Manifest.</para>
            </value>
        </member>
        <member name="T:System.Fabric.PackageRemovedEventArgs`1">
            <summary>
            <para>Describes a package removed event. </para>
            </summary>
            <typeparam name="TPackage">
            <para>The type of the package being described. See <see cref="T:System.Fabric.CodePackage"/>, <see cref="T:System.Fabric.ConfigurationPackage"/>, <see cref="T:System.Fabric.DataPackage"/>.</para>
            </typeparam>
            <remarks>
            <para>See <see cref="E:System.Fabric.CodePackageActivationContext.CodePackageRemovedEvent"/>, <see cref="E:System.Fabric.CodePackageActivationContext.ConfigurationPackageRemovedEvent"/>, and <see cref="E:System.Fabric.CodePackageActivationContext.DataPackageRemovedEvent"/>.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.PackageRemovedEventArgs`1.Package">
            <summary>
            <para>Gets or sets the code, configuration, or data package that was removed from the Service Manifest.</para>
            </summary>
            <value>
            <para>The code, configuration, or data package that was removed from the Service Manifest.</para>
            </value>
        </member>
        <member name="T:System.Fabric.PackageModifiedEventArgs`1">
            <summary>
              Represents the event arguments for package modification.
            </summary>
            <typeparam name="TPackage">
              The type of the modified package.
            </typeparam>
        </member>
        <member name="M:System.Fabric.PackageModifiedEventArgs`1.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:System.Fabric.PackageModifiedEventArgs`1"/> class.
            </summary>
        </member>
        <member name="P:System.Fabric.PackageModifiedEventArgs`1.OldPackage">
            <summary>
              Gets or sets the old package that is modified.
            </summary>
            <value>
            <para>The old package that is modified.</para>
            </value>
        </member>
        <member name="P:System.Fabric.PackageModifiedEventArgs`1.NewPackage">
            <summary>
              Gets or sets the new package.
            </summary>
            <value>
            <para>The new package that replaces the old package.</para>
            </value>
        </member>
        <member name="T:System.Fabric.IStatelessServiceFactory">
            <summary>
            <para>Represents a stateless service factory that is responsible for creating instances of a specific type of stateless service. </para>
            </summary>
            <remarks>
            <para>Stateless service factories are registered with the <see cref="T:System.Fabric.FabricRuntime"/> by service hosts via 
            <see cref="M:System.Fabric.FabricRuntime.RegisterStatelessServiceFactory(System.String,System.Fabric.IStatelessServiceFactory)"/> or 
            <see cref="M:System.Fabric.FabricRuntime.RegisterStatelessServiceFactoryAsync(System.String,System.Fabric.IStatelessServiceFactory,System.TimeSpan,System.Threading.CancellationToken)"/>.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IStatelessServiceFactory.CreateInstance(System.String,System.Uri,System.Byte[],System.Guid,System.Int64)">
            <summary>
            <para>Creates a stateless service instance for a particular service. This method is called by Service Fabric.</para>
            </summary>
            <param name="serviceTypeName">
            <para>The service type that Service Fabric requests to be created.</para>
            </param>
            <param name="serviceName">
            <para>The <c>fabric:/ name</c> (Uri) of the service with which this replica is associated. </para>
            </param>
            <param name="initializationData">
            <para>A byte array that contains the initialization data which was originally passed as a part of this service’s <see cref="T:System.Fabric.Description.ServiceDescription"/>.</para>
            </param>
            <param name="partitionId">
            <para>The partition ID (GUID) with which this replica is associated. </para>
            </param>
            <param name="instanceId">
            <para>The replica ID for this replica of type <see cref="T:System.Int64"/>.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Fabric.IStatelessServiceInstance"/>.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.IStatefulServiceFactory">
            <summary>
            <para>Represents a stateful service factory that is responsible for creating replicas of a specific type of stateful service. 
            Stateful service factories are registered with the <see cref="T:System.Fabric.FabricRuntime"/> by service hosts via 
            <see cref="M:System.Fabric.FabricRuntime.RegisterStatefulServiceFactory(System.String,System.Fabric.IStatefulServiceFactory)"/> or 
            <see cref="M:System.Fabric.FabricRuntime.RegisterStatefulServiceFactoryAsync(System.String,System.Fabric.IStatefulServiceFactory,System.TimeSpan,System.Threading.CancellationToken)"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.IStatefulServiceFactory.CreateReplica(System.String,System.Uri,System.Byte[],System.Guid,System.Int64)">
            <summary>
            <para>Called by Service Fabric to create a stateful service replica for a particular service.</para>
            </summary>
            <param name="serviceTypeName">
            <para>The service type that Service Fabric requests to be created.</para>
            </param>
            <param name="serviceName">
            <para>The fabric:/ name (Uri) of the service with which this replica is associated.</para>
            </param>
            <param name="initializationData">
            <para>A byte array that contains the initialization data which was originally passed as a part of this 
            service’s <see cref="T:System.Fabric.Description.ServiceDescription"/>.</para>
            </param>
            <param name="partitionId">
            <para>The partition ID of type, a GUID, with which this replica is associated.</para>
            </param>
            <param name="replicaId">
            <para>The replica ID of type long for this replica. </para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Fabric.IStatefulServiceReplica"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Hosting.IFabricHostEntryPoint.Start(System.String,System.String,System.String,System.String)">
            <summary>
            Called when the object has been instantiated in its own app domain
            All internal initialization can be done here
            <param name="hostEntryPointManagerUniqueId">A unique identifier for the host entry point manager. Useful for creating trace file names etc</param>
            </summary>
        </member>
        <member name="M:System.Fabric.Hosting.IFabricHostEntryPoint.ActivateCodePackage(System.String,System.String,System.IntPtr,System.IntPtr)">
            <summary>
            Activate a code package
            All service types associated with the code package should be registered at this point
            </summary>
            <param name="activationContextId">a unique identifier for this particular activation request. the same value will be passed into Deactivate</param>
            <param name="codePackageNameToActivate">the name of the code package to activate</param>
            <param name="nativeCodePackageActivationContext">the code package activation context as obtained from native code</param>
            <param name="nativeFabricRuntime">the raw IFabricRuntime that should be used for all operations pertaining to this code package</param>
        </member>
        <member name="M:System.Fabric.Hosting.IFabricHostEntryPoint.DeactivateCodePackage(System.String)">
            <summary>
            Deactivate a code package
            The code package id is the same as passed in to the Activate call
            The same IFabricRuntime should be used to unregister the factory that was used in the activate call
            The IFabricRuntime should be released at this point
            </summary>
            <param name="activationContextId"></param>
        </member>
        <member name="M:System.Fabric.Hosting.IFabricHostEntryPoint.Stop">
            <summary>
            Called before the appdomain hosting this entrypoint is unloaded
            Any active code packages should now be unloaded
            </summary>
        </member>
        <member name="P:System.Fabric.Hosting.IFabricHostEntryPoint.ActiveCodePackageCount">
            <summary>
            The number of code packages that are currently active
            </summary>
        </member>
        <member name="T:System.Fabric.FabricRuntime">
            <summary>
            <para>Allows user created hosts to obtain their <see cref="T:System.Fabric.CodePackageActivationContext"/>, well as to register the 
            necessary service factories [ <see cref="T:System.Fabric.IStatelessServiceFactory"/>, <see cref="T:System.Fabric.IStatefulServiceFactory"/>, or 
            <see cref="T:System.Fabric.ServiceGroupFactory"/>] or service types directly.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricRuntime.#ctor(System.Fabric.CodePackageActivationContext,System.Action)">
            <summary>
            Called by FabricRuntime.Create
            </summary>
        </member>
        <member name="M:System.Fabric.FabricRuntime.GetActivationContext">
            <summary>
            <para>Retrieves the current <see cref="T:System.Fabric.FabricRuntime"/>’s <see cref="T:System.Fabric.CodePackageActivationContext"/>.</para>
            </summary>
            <returns>
            <para>The activation context.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricRuntime.GetActivationContextAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Retrieves the current <see cref="T:System.Fabric.FabricRuntime"/>’s <see cref="T:System.Fabric.CodePackageActivationContext"/> asynchronously 
            with the specified <paramref name="timeout"/> and <paramref name="cancellationToken"/>.</para>
            </summary>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing.  It can be used to send a notification that 
            the operation should be canceled.  Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The task representing the asynchronous operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricRuntime.GetNodeContext">
            <summary>
            <para>Gets the Node Context object that contains information about Fabric Node. </para>
            </summary>
            <returns>
            <para>The node context.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricRuntime.GetNodeContextAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Gets Node Context from Fabric Node asynchronously with timeout and cancellation token.</para>
            </summary>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing. It can be used to send a notification that 
            the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The task representing the asynchronous operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricRuntime.Create">
            <summary>
            <para>Creates the <see cref="T:System.Fabric.FabricRuntime"/> object.</para>
            </summary>
            <returns>
            <para>A newly created <see cref="T:System.Fabric.FabricRuntime"/> object.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricRuntime.Create(System.Action)">
            <summary>
            <para>Creates the <see cref="T:System.Fabric.FabricRuntime"/> object with a specified callback function which will be executed if the 
            underlying runtime terminates or exits for any reason.</para>
            </summary>
            <param name="fabricExitCallback">
            <para>The Action to be executed when the runtime exits or terminates.</para>
            </param>
            <returns>
            <para>A newly created <see cref="T:System.Fabric.FabricRuntime"/>object.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricRuntime.CreateAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Creates the <see cref="T:System.Fabric.FabricRuntime"/> object asynchronously with the specified <paramref name="timeout"/> and 
            <paramref name="cancellationToken"/>.</para>
            </summary>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing.  It can be used to send a notification that 
            the operation should be canceled.  Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The task representing the asynchronous operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricRuntime.CreateAsync(System.Action,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Creates the <see cref="T:System.Fabric.FabricRuntime"/> object asynchronously with the specified callback function which will be executed 
            if the underlying runtime terminates or exits for any reason, <paramref name="timeout"/>, and <paramref name="cancellationToken"/>. </para>
            </summary>
            <param name="fabricExitCallback">
            <para>The Action to be executed when the runtime exits or terminates.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing.  It can be used to send a notification that the 
            operation should be canceled.  Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The task representing the asynchronous operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricRuntime.RegisterServiceType(System.String,System.Type)">
            <summary>
            <para>Associates the specified <paramref name="serviceTypeName"/> with the actual managed Type that implements it. </para>
            </summary>
            <param name="serviceTypeName">
            <para>The type name of the service type (as a string).  This should match the type of the service group type as specified in the manifests and/or 
            the CreateService command.</para>
            </param>
            <param name="serviceTypeImplementation">
            <para>The qualified service Type that implements the specified <paramref name="serviceTypeName"/>.</para>
            </param>
            <remarks>
            <para>Note that this mechanism for service type registration does not require a custom <see cref="T:System.Fabric.IStatelessServiceFactory"/> or 
            <see cref="T:System.Fabric.IStatefulServiceFactory"/> to be provided at registration time.  Service Fabric will generate one at runtime and utilize 
            it automatically.  If there is a need for a custom implementation of the factory, you can implement <see cref="T:System.Fabric.IStatelessServiceFactory"/> 
            or <see cref="T:System.Fabric.IStatefulServiceFactory"/> and then provide those via the corresponding factory registration methods 
            (<see cref="M:System.Fabric.FabricRuntime.RegisterStatelessServiceFactoryAsync(System.String,System.Fabric.IStatelessServiceFactory,System.TimeSpan,System.Threading.CancellationToken)"/> or <see cref="M:System.Fabric.FabricRuntime.RegisterStatefulServiceFactoryAsync(System.String,System.Fabric.IStatefulServiceFactory,System.TimeSpan,System.Threading.CancellationToken)"/>)</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.FabricRuntime.RegisterStatelessServiceFactory(System.String,System.Fabric.IStatelessServiceFactory)">
            <summary>
            <para>Registers the specified <see cref="T:System.Fabric.IStatelessServiceFactory"/> for the specified service type.</para>
            </summary>
            <param name="serviceTypeName">
            <para>The type name of the service type (as a string).  This should match the type of the service group type as specified in the manifests and/or the 
            CreateService command.</para>
            </param>
            <param name="factory">
            <para>The <see cref="T:System.Fabric.IStatelessServiceFactory"/> which can create the specified service type.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricRuntime.RegisterStatefulServiceFactory(System.String,System.Fabric.IStatefulServiceFactory)">
            <summary>
            <para>Registers the specified <see cref="T:System.Fabric.IStatefulServiceFactory"/> for the specified service type.</para>
            </summary>
            <param name="serviceTypeName">
            <para>The type name of the service type (as a string).  This should match the type of the service group type as specified in the manifests 
            and/or the CreateService command.</para>
            </param>
            <param name="factory">
            <para>The <see cref="T:System.Fabric.IStatefulServiceFactory"/> which can create the specified service type.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricRuntime.RegisterServiceGroupFactory(System.String,System.Fabric.ServiceGroupFactory)">
            <summary>
            <para>Registers the specified <see cref="T:System.Fabric.ServiceGroupFactory"/> for the specified type.</para>
            </summary>
            <param name="serviceGroupTypeName">
            <para>The type name of the ServiceGroup service type (as a string).  This should match the type of the service group type as specified in the 
            manifests and/or the CreateServiceGroup command.</para>
            </param>
            <param name="factory">
            <para>The <see cref="T:System.Fabric.ServiceGroupFactory"/> which can create the specified service group type.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricRuntime.RegisterServiceTypeAsync(System.String,System.Type,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously associates the specified serviceTypeName with the actual managed Type that implements it, with the specified <paramref name="timeout"/> 
            and <paramref name="cancellationToken"/></para>
            </summary>
            <param name="serviceTypeName">
            <para>The type name of the service type (as a string).  This should match the type of the service group type as specified in the manifests 
            and/or the CreateService command.</para>
            </param>
            <param name="serviceTypeImplementation">
            <para>The qualified service Type that implements the specified <paramref name="serviceTypeName"/>.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing.  It can be used to send a notification that the 
            operation should be canceled.  Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The task representing the asynchronous operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricRuntime.RegisterStatelessServiceFactoryAsync(System.String,System.Fabric.IStatelessServiceFactory,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously registers the specified <see cref="T:System.Fabric.IStatelessServiceFactory"/> for the specified service type, with the 
            specified <paramref name="timeout"/> and <paramref name="cancellationToken"/></para>
            </summary>
            <param name="serviceTypeName">
            <para>The type name of the service type (as a string).  This should match the type of the service group type as specified in the manifests 
            and/or the CreateService command.</para>
            </param>
            <param name="factory">
            <para>The <see cref="T:System.Fabric.IStatelessServiceFactory"/> which can create the specified service type.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing.  It can be used to send a notification that 
            the operation should be canceled.  Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The task representing the asynchronous operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricRuntime.RegisterStatefulServiceFactoryAsync(System.String,System.Fabric.IStatefulServiceFactory,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Registers the specified <see cref="T:System.Fabric.IStatefulServiceFactory"/> for the specified service type with the specified 
            <paramref name="timeout"/> and <paramref name="cancellationToken"/>.</para>
            </summary>
            <param name="serviceTypeName">
            <para>The type name of the service type (as a string).  This should match the type of the service group type as specified in the manifests 
            and/or the CreateService command.</para>
            </param>
            <param name="factory">
            <para>The <see cref="T:System.Fabric.IStatefulServiceFactory"/> which can create the specified service type.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing.  It can be used to send a notification that 
            the operation should be canceled.  Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The representing the asynchronous operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricRuntime.RegisterServiceGroupFactoryAsync(System.String,System.Fabric.ServiceGroupFactory,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Asynchronously registers the specified <see cref="T:System.Fabric.ServiceGroupFactory"/> for the specified service group type with the 
            specified <paramref name="timeout"/> and <paramref name="cancellationToken"/>.</para>
            </summary>
            <param name="serviceGroupTypeName">
            <para>The type name of the ServiceGroup service type (as a string).  This should match the type of the service group type as specified in 
            the manifests and/or the CreateServiceGroup command.</para>
            </param>
            <param name="factory">
            <para>The <see cref="T:System.Fabric.ServiceGroupFactory"/> which can create the specified service group type.</para>
            </param>
            <param name="timeout">
            <para>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> that the operation is observing. It can be used to send a notification that the 
            operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>The task representing the asynchronous operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FabricRuntime.Dispose">
            <summary>
            <para>Disposes of the <see cref="T:System.Fabric.FabricRuntime"/>.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.FabricWorkerEntryPoint">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.FabricWorkerEntryPoint.Activate(System.Fabric.FabricRuntime,System.Fabric.CodePackageActivationContext)">
            <summary>
            <para> Reserved for future use.</para>
            </summary>
            <param name="runtime">
            <para>Reserved for future use.</para>
            </param>
            <param name="activationContext">
            <para>Reserved for future use.</para>
            </param>
        </member>
        <member name="M:System.Fabric.FabricWorkerEntryPoint.Deactivate">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Hosting.IHostEntryPointManager.EndDeactivate(System.IntPtr,System.Int32@,System.String@,System.String@)">
            <summary>
            
            </summary>
            <param name="appDomainId">the app domain id in which the context was running</param>
            <param name="codePackageDirectory">the directory of the code package for this activation context</param>
            <param name="workDirectory">the work directory for this activation context</param>
        </member>
        <member name="T:System.Fabric.PackageSharingPolicyScope">
            <summary>
            <para>Represents the scope for the <see cref="T:System.Fabric.PackageSharingPolicy"/>.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.PackageSharingPolicyScope.None">
            <summary>
            <para>No package sharing policy scope.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.PackageSharingPolicyScope.All">
            <summary>
            <para>Share all code, config and data packages from corresponding service manifest.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.PackageSharingPolicyScope.Code">
            <summary>
            <para>Share all code packages from corresponding service manifest.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.PackageSharingPolicyScope.Config">
            <summary>
            <para>Share all config packages from corresponding service manifest.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.PackageSharingPolicyScope.Data">
            <summary>
            <para>Share all data packages from corresponding service manifest</para>
            </summary>
        </member>
        <member name="T:System.Fabric.PackageSharingPolicy">
            <summary>
            <para>Represents a policy for the package sharing.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.PackageSharingPolicy.#ctor(System.String,System.Fabric.PackageSharingPolicyScope)">
            <summary>
            <para>
            Creates PackageSharingPolicy object.
            </para>
            </summary>
            <param name="packageName">
            <para>Name of specific package that should be shared. </para>
            </param>
            <param name="sharingScope">
            <para>PackageSharingPolicyScope parameter to indicate whether Code, Config, Data or All packages should be shared. </para>
            </param>
        </member>
        <member name="P:System.Fabric.PackageSharingPolicy.PackageName">
            <summary>
            <para>Gets the name of code, configuration or data package that should be shared.</para>
            </summary>
            <value>
            <para>The name of code, configuration or data package that should be shared.</para>
            </value>
        </member>
        <member name="P:System.Fabric.PackageSharingPolicy.SharingScope">
            <summary>
            <para>Gets the scope for package sharing policy.</para>
            </summary>
            <value>
            <para>The scope for package sharing policy.</para>
            </value>
        </member>
        <member name="T:System.Fabric.PackageSharingPolicyList">
            <summary>
            <para>Represents a list of PackageSharingPolicy objects.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.PackageSharingPolicyList.#ctor">
            <summary>
            <para>Initializes A new instance of the <see cref="T:System.Fabric.PackageSharingPolicyList"/> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.PackageSharingPolicyList.#ctor(System.Collections.Generic.IList{System.Fabric.PackageSharingPolicy})">
            <summary>
            <para>Initializes A new instance of the <see cref="T:System.Fabric.PackageSharingPolicyList"/> class.</para>
            </summary>
            <param name="packageSharingPolicies">
            <para>The collection of policies for sharing packages.</para>
            </param>
        </member>
        <member name="P:System.Fabric.PackageSharingPolicyList.PackageSharingPolicies">
            <summary>
            <para>Gets the collection of policies for sharing packages.</para>
            </summary>
            <value>
            <para>The collection of policies for sharing packages.</para>
            </value>
        </member>
        <member name="T:System.Fabric.ServiceGroupFactory">
            <summary>
            <para>Creates a service group factory that is used to create actual service groups from the provided type factories at runtime.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.ServiceGroupFactory.#ctor">
            <summary>
            <para>Creates an empty <see cref="T:System.Fabric.ServiceGroupFactory"/> object.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.ServiceGroupFactory.AddServiceType(System.String,System.Type)">
            <summary>
            <para>Registers a particular stateful or stateless service type with the service group factory so that it can be created as 
            a member of the service group.</para>
            </summary>
            <param name="serviceTypeName">
            <para>The service type name as a string. It should match the service type that is specified in the manifest or 
            the <see cref="T:System.Fabric.Description.ServiceGroupMemberDescription"/> of the <see cref="T:System.Fabric.Description.ServiceGroupDescription"/> 
            that is provided during the <see cref="M:System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupAsync(System.Fabric.Description.ServiceGroupDescription)"/> call.</para>
            </param>
            <param name="serviceTypeImplementation">
            <para>The fully qualified C# type of the service that implements the Service Fabric service.</para>
            </param>
        </member>
        <member name="M:System.Fabric.ServiceGroupFactory.AddStatelessServiceFactory(System.String,System.Fabric.IStatelessServiceFactory)">
            <summary>
            <para>Adds the specified stateless service factory to the service group factory.</para>
            </summary>
            <param name="serviceTypeName">
            <para>The service type name as a string. It should match the service type that is specified in the manifest 
            or the <see cref="T:System.Fabric.Description.ServiceGroupMemberDescription"/> of the <see cref="T:System.Fabric.Description.ServiceGroupDescription"/> 
            that is provided during the <see cref="M:System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupAsync(System.Fabric.Description.ServiceGroupDescription)"/> call.</para>
            </param>
            <param name="factory">
            <para>The stateless service factory to add.</para>
            </param>
        </member>
        <member name="M:System.Fabric.ServiceGroupFactory.AddStatefulServiceFactory(System.String,System.Fabric.IStatefulServiceFactory)">
            <summary>
            <para>Adds the specified stateful service factory to the service group factory.</para>
            </summary>
            <param name="serviceTypeName">
            <para>Indicates the service type name as a string. It should match the service type that is specified in the manifest or 
            the <see cref="T:System.Fabric.Description.ServiceGroupMemberDescription"/> of the <see cref="T:System.Fabric.Description.ServiceGroupDescription"/> that 
            is provided during the <see cref="M:System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupAsync(System.Fabric.Description.ServiceGroupDescription)"/> call.</para>
            </param>
            <param name="factory">
            <para>The stateful service factory to add.</para>
            </param>
        </member>
        <member name="M:System.Fabric.ServiceGroupFactory.RemoveServiceFactory(System.String)">
            <summary>
            <para>Removes the service factory.</para>
            </summary>
            <param name="serviceTypeName">
            <para>The service type name as a string. It should match the service type that was specified when the factory was registered. </para>
            </param>
        </member>
        <member name="T:System.Fabric.ServiceContext">
            <summary>
            Represents the service context that the service is operating under.
            </summary>
        </member>
        <member name="M:System.Fabric.ServiceContext.#ctor(System.Fabric.NodeContext,System.Fabric.ICodePackageActivationContext,System.String,System.Uri,System.Byte[],System.Guid,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.ServiceContext"/> class.
            </summary>
            <param name="nodeContext">The node context.</param>
            <param name="codePackageActivationContext">The code package activation context.</param>
            <param name="serviceTypeName">The service type name.</param>
            <param name="serviceName">The service name.</param>
            <param name="initializationData">The initialization data.</param>
            <param name="partitionId">The partition id.</param>
            <param name="replicaOrInstanceId">The replica or instance id.</param>
        </member>
        <member name="P:System.Fabric.ServiceContext.NodeContext">
            <summary>
            Gets the node context for the node where the service replica is instantiated.
            </summary>
            <value>The node context.</value>
        </member>
        <member name="P:System.Fabric.ServiceContext.CodePackageActivationContext">
            <summary>
            Gets the code package activation context.
            </summary>
            <value>The code package activation context.</value>
        </member>
        <member name="P:System.Fabric.ServiceContext.ServiceTypeName">
            <summary>
            Gets the service type name.
            </summary>
            <value>The service type name.</value>
        </member>
        <member name="P:System.Fabric.ServiceContext.ServiceName">
            <summary>
            Get the service name.
            </summary>
            <value>The service name.</value>
        </member>
        <member name="P:System.Fabric.ServiceContext.InitializationData">
            <summary>
            Gets the initialization data of the service.
            </summary>
            <value>The initialization data.</value>
        </member>
        <member name="P:System.Fabric.ServiceContext.PartitionId">
            <summary>
            Gets the partition id.
            </summary>
            <value>The partition id.</value>
        </member>
        <member name="P:System.Fabric.ServiceContext.ReplicaOrInstanceId">
            <summary>
            Gets the stateful service replica id or the stateless service instance id.
            </summary>
            <value>The stateful service replica id or the stateless service instance id.</value>
        </member>
        <member name="P:System.Fabric.ServiceContext.TraceId">
            <summary>
            Gets the trace id of the service.
            </summary>
            <value>The trace id of the service.</value>
            <remarks>The trace id can be used as an identifier for generated traces.</remarks>
        </member>
        <member name="T:System.Fabric.StatefulServiceContext">
            <summary>
            Represents the service context that the stateful service is operating under.
            </summary>
        </member>
        <member name="M:System.Fabric.StatefulServiceContext.#ctor(System.Fabric.NodeContext,System.Fabric.ICodePackageActivationContext,System.String,System.Uri,System.Byte[],System.Guid,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.StatefulServiceContext"/> class.
            </summary>
            <param name="nodeContext">The node context.</param>
            <param name="codePackageActivationContext">The code package activation context.</param>
            <param name="serviceTypeName">The service type name.</param>
            <param name="serviceName">The service name.</param>
            <param name="initializationData">The service initialization data.</param>
            <param name="partitionId">The partition id.</param>
            <param name="replicaId">The replica id.</param>
        </member>
        <member name="P:System.Fabric.StatefulServiceContext.ReplicaId">
            <summary>
            Gets the stateful service replica id.
            </summary>
            <value>The stateful service replica id.</value>
        </member>
        <member name="T:System.Fabric.StatelessServiceContext">
            <summary>
            Represents the service context that the stateless service is operating under.
            </summary>
        </member>
        <member name="M:System.Fabric.StatelessServiceContext.#ctor(System.Fabric.NodeContext,System.Fabric.ICodePackageActivationContext,System.String,System.Uri,System.Byte[],System.Guid,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.StatelessServiceContext"/> class.
            </summary>
            <param name="nodeContext">The node context.</param>
            <param name="codePackageActivationContext">The code package activation context.</param>
            <param name="serviceTypeName">The service type name.</param>
            <param name="serviceName">The service name.</param>
            <param name="initializationData">The service initialization data.</param>
            <param name="partitionId">The partition id.</param>
            <param name="instanceId">The instance id.</param>
        </member>
        <member name="P:System.Fabric.StatelessServiceContext.InstanceId">
            <summary>
            Gets the stateless service instance id.
            </summary>
            <value>The stateless service instance id.</value>
        </member>
        <member name="T:System.Fabric.IAtomicGroupStateProvider">
            <summary>
            <para>Describes additional methods of the <see cref="T:System.Fabric.IAtomicGroupStateProvider"/> interface that a user service must implement to take advantage of the atomic group functionality of a service group. </para>
            </summary>
        </member>
        <member name="T:System.Fabric.IStateProvider">
            <summary>
            <para>Defines the behavior that a service must implement to interact with the <see cref="T:System.Fabric.FabricReplicator"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.IStateProvider.GetLastCommittedSequenceNumber">
            <summary>
            <para>Obtains the last sequence number that the service has committed. </para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.Int64"/>.</para>
            </returns>
            <remarks>
            <para>This method is called on a service when it first starts up, in case it has any persistent state, and when data loss is suspected. 
            When a stateful service replica starts up, it has the option to restore any data that might have persisted from previous updates.
            If it restores some state in this manner, its current progress is the last written sequence number for that data. A volatile service can simply return 0.
            Note that this method is not called to determine a new primary election during failover, 
            because the current committed progress is already known by the <see cref="T:System.Fabric.FabricReplicator"/> class at that time. </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IStateProvider.UpdateEpochAsync(System.Fabric.Epoch,System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>Indicates to a replica that the configuration of a replica set has changed due to a change or attempted change to the Primary replica. 
            The change occurs due to failure or load balancing of the previous Primary replica. Epoch changes act as a barrier by segmenting operations 
            into the exact configuration periods in which they were sent by a specific Primary replica.</para>
            </summary>
            <param name="epoch">
            <para>The new <see cref="T:System.Fabric.Epoch"/>.</para>
            </param>
            <param name="previousEpochLastSequenceNumber">
            <para> The maximum sequence number (LSN) that should have been observed in the previous epoch.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> object that the operation is observing. It can be used to send a notification 
            that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task"/>.</para>
            </returns>
            <remarks>
            <para>This method is called because the Primary replica of the replica set has changed, or a change was attempted. 
            Secondary replicas receive this method either when they are about to become the new Primary replica, or, if they are not the new Primary replica, 
            they receive it when they attempt to get the first operation from the new Primary replica from the replication stream. 
            Primary replicas might occasionally receive this method if there is an attempt to swap the Primary replica, which fails.</para>
            <para>The information in the <see cref="M:System.Fabric.IStateProvider.UpdateEpochAsync(System.Fabric.Epoch,System.Int64,System.Threading.CancellationToken)"/> 
            method enables the service to maintain a progress vector, which is a list of each epoch that the replica has received, and the maximum LSN that they contained. The progress vector data along with the current applied maximum LSN is useful for a Secondary replica to send during the copy operation  to describe how far the operation has progressed. Comparing progress vectors that are received from Secondary replicas during the copy operation enables Primary replicas to determine whether the Secondary replica is up-to-date, what state must be sent to the Secondary replica, and whether the Secondary replica has made false progress. False progress means that an LSN in a previous epoch was greater than the LSN that the Primary replica receives. </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IStateProvider.OnDataLossAsync(System.Threading.CancellationToken)">
            <summary>
            <para>Indicates that a write quorum of replicas in this replica set  has been lost, and that therefore data loss might have occurred. 
            The replica set consists of a majority of replicas, which includes the Primary replica. </para>
            </summary>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> object that the operation is observing. 
            It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task`1"/> of type <see cref="T:System.Boolean"/>, that indicates whether state changed. 
            When it changed, the method returns true or when it did not change, the method returns false.</para>
            </returns>
            <remarks>
            <para>When the Service Fabric runtime observes the failure of a quorum of replicas, which includes the Primary replica, 
            it elects a new Primary replica and immediately calls this method on the new Primary replica. A Primary replica that is informed of possible data loss
            can choose to restore its state from some external data source or can continue to run with the state that it currently has. If the service continues to run with its current state,
            it should return false from this method, which indicates that no state change has been made. If it has restored or altered its state,
            such as rolling back incomplete work, it should return true. If true is returned, then the state in other replicas must be assumed to be incorrect.
            Therefore, the Service Fabric runtime removes the other replicas from the replica set and recreates them.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IStateProvider.GetCopyContext">
            <summary>
            <para>Obtains context on a Secondary replica after it is created and opened to send context to the Primary replica.</para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.Fabric.IOperationDataStream"/>.</para>
            </returns>
            <remarks>
            <para>The Primary replica analyzes the context and sends back state via <see cref="M:System.Fabric.IStateProvider.GetCopyState(System.Int64,System.Fabric.IOperationDataStream)"/>.</para>
            <para>
                <see cref="M:System.Fabric.IStateProvider.GetCopyContext"/> is called on newly created, idle Secondary replicas and provides
                a mechanism to asynchronously establish a bidirectional conversation with the Primary replica. The Secondary replica sends <see cref="T:System.Fabric.OperationData"/>
                objects with which the Primary replica can determine the progress of collecting context on the Secondary replica. The Primary replica responds by sending the required state back.
                See <see cref="M:System.Fabric.IStateProvider.GetCopyState(System.Int64,System.Fabric.IOperationDataStream)"/> at the Primary replica for the other half of the exchange. </para>
            <para>For in-memory services, the <see cref="M:System.Fabric.IStateProvider.GetCopyContext"/> method is not called, 
            as the state of the Secondary replicas is known (they are empty and will require all of the state).</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IStateProvider.GetCopyState(System.Int64,System.Fabric.IOperationDataStream)">
            <summary>
            <para>Obtains state on a Primary replica that is required to build a Secondary replica.</para>
            </summary>
            <param name="upToSequenceNumber">
            <para>The maximum last sequence number (LSN) that should be placed in the copy stream via the <see cref="M:System.Fabric.IStateReplicator.GetCopyStream"/> method.
            LSNs greater than this number are delivered to the Secondary replica as a part of the replication stream via the <see cref="M:System.Fabric.IStateReplicator.GetReplicationStream"/> method.</para>
            </param>
            <param name="copyContext">
            <para>An <see cref="T:System.Fabric.IOperationDataStream"/> that contains the <see cref="T:System.Fabric.OperationData"/> objects that are created by the Secondary replica. </para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Fabric.IOperationDataStream"/>.</para>
            </returns>
            <remarks>
            <para>Just as <see cref="M:System.Fabric.IStateProvider.GetCopyContext"/> enables the Secondary replica to send context to the Primary replica via
            an <see cref="T:System.Fabric.IOperationDataStream"/>, <see cref="M:System.Fabric.IStateProvider.GetCopyState(System.Int64,System.Fabric.IOperationDataStream)"/> enables the Primary replica to respond with an <see cref="T:System.Fabric.IOperationDataStream"/>. The stream contains objects that are delivered to the Secondary replica via the <see cref="M:System.Fabric.IStateReplicator.GetCopyStream"/> method of the <see cref="T:System.Fabric.FabricReplicator"/> class. The objects implement <see cref="T:System.Fabric.IOperation"/> and contain the specified data. </para>
            <para> When the Primary replica receives this call, it should create and return another <see cref="T:System.Fabric.IOperationDataStream"/> 
            that contains <see cref="T:System.Fabric.OperationData"/>. <see cref="T:System.Fabric.OperationData"/> represents the data/state that the Secondary replica
            requires to catch up to the provided <paramref name="upToSequenceNumber"/> maximum LSN. 
            How much and which state has to be sent can be determined via the context information that the Secondary replica provides and is obtained via the provided 
            <paramref name="copyContext"/> method of the <see cref="T:System.Fabric.IOperationDataStream"/> interface.  </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IAtomicGroupStateProvider.AtomicGroupCommitAsync(System.Int64,System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>Commits a particular atomic group.</para>
            </summary>
            <param name="atomicGroupId">
            <para>The ID of the group to be committed.</para>
            </param>
            <param name="commitSequenceNumber">
            <para>The sequence number for the commit operation.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> object that the operation is observing. 
            It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.IAtomicGroupStateProvider.AtomicGroupRollbackAsync(System.Int64,System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>Rolls back a particular atomic group.</para>
            </summary>
            <param name="atomicGroupId">
            <para>The ID of the group to roll back.</para>
            </param>
            <param name="rollbackSequenceNumber">
            <para>The sequence number for the rollback operation.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.IAtomicGroupStateProvider.AtomicGroupUndoProgressAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>Indicates that progress beyond a particular commit sequence number that is provided via <see cref="M:System.Fabric.IAtomicGroupStateProvider.AtomicGroupCommitAsync(System.Int64,System.Int64,System.Threading.CancellationToken)"/> should be undone. </para>
            </summary>
            <param name="fromCommitSequenceNumber">
            <para>The LSN of a commit operation. All progress past this point should be undone.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.FaultAnalysisServiceBroker.System#Fabric#Interop#NativeFaultAnalysisService#IFabricFaultAnalysisService#BeginStartPartitionQuorumLoss(System.IntPtr,System.UInt32,System.Fabric.Interop.NativeCommon.IFabricAsyncOperationCallback)">
            InvokeQuorumLoss
        </member>
        <member name="T:System.Fabric.Int64RangePartitionInformation">
            <summary>
            <para>Describes the partition information for the integer range that is based on partition schemes. Services observe this type of <see cref="T:System.Fabric.ServicePartitionInformation"/> when the service is created with the <see cref="T:System.Fabric.Description.UniformInt64RangePartitionSchemeDescription"/> class. <see cref="T:System.Fabric.Int64RangePartitionInformation"/> derives from <see cref="T:System.Fabric.IServicePartition"/> and is provided to services as part of the <see cref="T:System.Fabric.IStatefulServicePartition"/> or <see cref="T:System.Fabric.IStatelessServicePartition"/>, which is passed in via the stateful <see cref="M:System.Fabric.IStatefulServiceReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)"/> or the stateless <see cref="M:System.Fabric.IStatelessServiceInstance.OpenAsync(System.Fabric.IStatelessServicePartition,System.Threading.CancellationToken)"/> methods.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.ServicePartitionInformation">
            <summary>
            <para>Represents the base class for describing partitions.</para>
            </summary>
            <remarks>
            <para>
                <see cref="T:System.Fabric.Int64RangePartitionInformation"/>, <see cref="T:System.Fabric.NamedPartitionInformation"/>, and <see cref="T:System.Fabric.SingletonPartitionInformation"/> 
            all derive from this type.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ServicePartitionInformation.Id">
            <summary>
            <para>Specifies the partition ID for this partition as a GUID.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Guid"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ServicePartitionInformation.Kind">
            <summary>
            <para>Describes the type of partition.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.ServicePartitionKind"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Int64RangePartitionInformation.LowKey">
            <summary>
            <para>Specifies the minimum key value for this partition.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Int64"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Int64RangePartitionInformation.HighKey">
            <summary>
            <para>Specifies the maximum key value for this partition.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Int64"/>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Interop.InteropHelpers">
            <summary>
            All WF interop helpers used within System.Fabric
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_ERROR_CODE.FABRIC_E_INVALID_BACKUP_SETTING">
            <summary>
            Invalid backup setting. E.g. incremental backup option is not set upfront etc.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_ERROR_CODE.FABRIC_E_MISSING_FULL_BACKUP">
            <summary>
            Incremental backups can only be done after an initial full backup.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_ERROR_CODE.FABRIC_E_BACKUP_IN_PROGRESS">
            <summary>
            A backup is currently in progress.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_ERROR_CODE.FABRIC_E_BACKUP_DIRECTORY_NOT_EMPTY">
            <summary>
            The backup directory is not empty.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_ERROR_CODE.FABRIC_E_DELETE_BACKUP_FILE_FAILED">
            <summary>
            Deletion of backup files/directory failed. Currently this can happen
            in a scenario where backup is used mainly to truncate logs.
            </summary>            
        </member>
        <member name="T:System.Fabric.Interop.NativeTypes.FABRIC_STORE_BACKUP_OPTION">
            <summary>
            Backup options for the store.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_STORE_BACKUP_OPTION.FABRIC_STORE_BACKUP_OPTION_FULL">
            <summary>
            A full backup.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_STORE_BACKUP_OPTION.FABRIC_STORE_BACKUP_OPTION_INCREMENTAL">
            <summary>
            Incremental backup. i.e. only the changes to the store since the last backup are backed up.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_STORE_BACKUP_OPTION.FABRIC_STORE_BACKUP_OPTION_TRUNCATE_LOGS_ONLY">
            <summary>
            Truncates the transaction logs of the store without creating a folder containing the backed up files.
            </summary>
        </member>
        <member name="T:System.Fabric.Interop.NativeTypes.FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS">
            <summary>
            Falgs for updating application.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS.FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS_NONE">
            <summary>
            No update.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS.FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS_MINNODES">
            <summary>
            Update minimum node count.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS.FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS_MAXNODES">
            <summary>
            Update maximum node count.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS.FABRIC_APPLICATION_UPDATE_DESCRIPTION_FLAGS_METRICS">
            <summary>
            Update metrics and capacities.
            </summary>
        </member>
        <member name="T:System.Fabric.Interop.NativeTypes.FABRIC_START_NODE_DESCRIPTION_USING_NODE_NAME">
            <summary>
            StartNode
            </summary>
        </member>
        <member name="T:System.Fabric.Interop.NativeTypes.FABRIC_STOP_NODE_DESCRIPTION_USING_NODE_NAME">
            <summary>
            StopNode
            </summary>
        </member>
        <member name="T:System.Fabric.Interop.NativeTypes.FABRIC_RESTART_DEPLOYED_CODE_PACKAGE_DESCRIPTION_USING_NODE_NAME">
            <summary>
            RestartDeployedCodePackage
            </summary>
        </member>
        <member name="T:System.Fabric.Interop.NativeTypes.FABRIC_MOVE_PRIMARY_DESCRIPTION_USING_NODE_NAME">
            <summary>
            Move Primary
            </summary>
            
        </member>
        <member name="T:System.Fabric.Interop.NativeTypes.FABRIC_MOVE_SECONDARY_DESCRIPTION_USING_NODE_NAME">
            <summary>
            Move Secondary
            </summary>
            
        </member>
        <member name="T:System.Fabric.Interop.NativeTypes.FABRIC_STORE_BACKUP_INFO">
            <summary>
            Provides info about the backup created on the store.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_STORE_BACKUP_INFO.BackupFolder">
            <summary>
            The folder where the backup was created.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_STORE_BACKUP_INFO.BackupOption">
            <summary>
            The backup option used.
            </summary>
        </member>
        <member name="F:System.Fabric.Interop.NativeTypes.FABRIC_STORE_BACKUP_INFO.Reserved">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="M:System.Fabric.Interop.PinCollection.AddObject(System.String)">
            <summary>
            Use this method instead of AddBlittable() if empty strings should also be converted to null.
            Use AddBlittable() method if empty string should not be converted to null.
            </summary>
            <param name="pin">Object to pin.</param>
            <returns>Pointer to object.</returns>
        </member>
        <member name="T:System.Fabric.Interop.SharedNativeObject`1.ReferenceCount">
            <summary>
            A utility class to count references/usage. In addition to the regular add/release, conditional add is also supported.
            The conditional add fails if the current count is zero.
            </summary>
        </member>
        <member name="M:System.Fabric.Interop.Utility.ReleaseFail(System.String,System.Object[])">
            <summary>
            Fail in release mode
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:System.Fabric.Interop.Utility.TryTranslateManagedExceptionToCOM(System.Exception)">
            <summary>
            Translates a managed exception to a COMException for native. We try to translate to an appropriate COMException when possible.
            The caller would use this for setting the Exception on Tasks with a more appropriate exception to send to native code.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Fabric.Interop.Utility.TryTranslateManagedExceptionToCOMAndThrow(System.Exception)">
            <summary>
            Translates a managed exception to rethrow to native. We try to translate to an appropriate COMException when possible.
            The caller would use this to re-throw the more appropriate exception to send to native code.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:System.Fabric.IOperation">
            <summary>
            <para>Describes the data that is obtained from a replicator. </para>
            </summary>
            <remarks>
            <para>
                <see cref="T:System.Fabric.IOperation"/> is the base interface that describes state changes that are delivered to a Secondary replica. They contain the <see cref="M:System.Fabric.IStateReplicator.ReplicateAsync(System.Fabric.OperationData,System.Threading.CancellationToken,System.Int64@)"/> and the sequence number and other identifying information.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IOperation.Acknowledge">
            <summary>
            <para>Acknowledges that this operation has been successfully applied at the Secondary replica.  </para>
            </summary>
            <remarks>
            <para>Services should call this method when they have obtained an <see cref="T:System.Fabric.IOperation"/>
            from the replicator and successfully applied it to their local store.
            For persistent services, calling this method is mandatory because the <see cref="T:System.Fabric.FabricReplicator"/>
            does not release additional objects that implement <see cref="T:System.Fabric.IOperation"/>. For volatile services, the replicator
            implicitly acknowledges operations when they are received unless they are configured otherwise by setting the value
            <see cref="P:System.Fabric.ReplicatorSettings.RequireServiceAck"/> to true.
            An operation must be acknowledged by a quorum of replicas before the Primary replica receives the
            <see cref="M:System.Fabric.IStateReplicator.ReplicateAsync(System.Fabric.OperationData,System.Threading.CancellationToken,System.Int64@)"/> operation complete responses.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.IOperation.OperationType">
            <summary>
            <para>Gets the type of this operation. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.OperationType"/>.</para>
            </value>
            <remarks>
            <para>The <see cref="T:System.Fabric.OperationType"/> indicates the type of operation. "Normal" operations are those operations that are sent by non-service grouped services as part of either the copy or replication streams. Other types of operations represent control operations that are specific to service groups.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.IOperation.SequenceNumber">
            <summary>
            <para>Gets the sequence number of this operation. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Int64"/>.</para>
            </value>
            <remarks>
            <para>The sequence number is provided as a part of the <see cref="P:System.Fabric.IOperation.SequenceNumber"/>
            provided for the Secondary replica is the same that the Primary replica that are receives from <see cref="M:System.Fabric.IStateReplicator.ReplicateAsync(System.Fabric.OperationData,System.Threading.CancellationToken,System.Int64@)"/>.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.IOperation.AtomicGroupId">
            <summary>
            <para>Identifies the atomic group, if this object that implements <see cref="T:System.Fabric.IOperation"/>
            is a part of an atomic group. Atomic groups are only available when a service is a part of service group.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Int64"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.IOperation.Data">
            <summary>
            <para>Gets the <see cref="T:System.Fabric.OperationData"/> that are provided by the Primary replica.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.OperationData"/>.</para>
            </value>
            <remarks>
              <para/>
            </remarks>
        </member>
        <member name="T:System.Fabric.IOperationData">
            <summary>
            <para>Interface for the data being transferred.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.IOperationStream">
            <summary>
            <para>Represents a stream of replication or copy operations that are sent from the Primary to the Secondary replica.  </para>
            </summary>
            <exception cref="T:System.TimeoutException">
            <para>The exception that is thrown when the time allotted for a process or operation has expired.</para>
            </exception>
            <remarks>
            <para>The streams returned from <see cref="M:System.Fabric.IStateReplicator.GetCopyStream"/> and <see cref="M:System.Fabric.IStateReplicator.GetReplicationStream"/> 
            are objects that implement <see cref="T:System.Fabric.IOperationStream"/>.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IOperationStream.GetOperationAsync(System.Threading.CancellationToken)">
            <summary>
            <para>Gets the next object that implements <see cref="T:System.Fabric.IOperation"/> from the underlying <see cref="T:System.Fabric.IOperationStream"/>.</para>
            </summary>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> object that the operation is observing. It can be used to send a notification that 
            the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task`1"/> of type <see cref="T:System.Fabric.IOperation"/>.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.IStatefulServiceReplica">
            <summary>
            <para>Defines behavior that governs the lifecycle of a replica, such as startup, initialization, role changes, and shutdown. </para>
            </summary>
            <remarks>
            <para>Stateful service types must implement this interface. The logic of a stateful service type includes behavior that is invoked on Primary replicas and behavior that is invoked on Secondary replicas. If the service author wants to make use of the provided <see cref="T:System.Fabric.FabricReplicator"/>, then the service must also implement <see cref="T:System.Fabric.IStateProvider"/> to correspond with the implementation of <see cref="T:System.Fabric.IStateReplicator"/> that is provided by <see cref="T:System.Fabric.FabricReplicator"/>.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IStatefulServiceReplica.Initialize(System.Fabric.StatefulServiceInitializationParameters)">
            <summary>
            <para>Initializes a newly created service replica.</para>
            </summary>
            <param name="initializationParameters">
            <para>The <see cref="T:System.Fabric.StatefulServiceInitializationParameters"/> for this replica.</para>
            </param>
        </member>
        <member name="M:System.Fabric.IStatefulServiceReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)">
            <summary>
            <para>Opens an initialized service replica so that additional actions can be taken.</para>
            </summary>
            <param name="openMode">
            <para>The <see cref="T:System.Fabric.ReplicaOpenMode"/> for this replica that indicates whether it is new or a recovered replica.</para>
            </param>
            <param name="partition">
            <para>The <see cref="T:System.Fabric.IStatefulServicePartition"/> information for this replica.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task`1"/>&lt;<see cref="T:System.Fabric.IReplicator"/>&gt;, 
            the <see cref="T:System.Fabric.IReplicator"/> that is used by the stateful service. To use the Service Fabric implementation, 
            in <see cref="M:System.Fabric.IStatefulServiceReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)"/>, 
            the replica should return a <see cref="T:System.Fabric.FabricReplicator"/> that is obtained 
            from  <see cref="M:System.Fabric.IStatefulServicePartition.CreateReplicator(System.Fabric.IStateProvider,System.Fabric.ReplicatorSettings)"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.IStatefulServiceReplica.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)">
            <summary>
            <para>Changes the role of a Primary or Secondary replica. </para>
            </summary>
            <param name="newRole">
            <para>The updated <see cref="T:System.Fabric.ReplicaRole"/> that this replica should transition to.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> object that the operation is observing. It can be used to send a notification that the operation should be canceled.
            Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task`1"/> of type <see cref="T:System.String"/>, the service’s new connection address that is to be associated
            with the replica via Service Fabric Naming.</para>
            </returns>
            <remarks>
            <para>The new role is indicated as a parameter. When the service transitions to the new role, the service has a chance to update its current listening address.
            The listening address is the address where clients connect to it. This enables the service when it is a Primary replica to only claim some resources such as ports 
            when communication from clients is expected.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IStatefulServiceReplica.CloseAsync(System.Threading.CancellationToken)">
            <summary>
            <para>Closes the service replica when it is being shut down.</para>
            </summary>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> object that the operation is observing. It can be used to send a notification that the operation should be canceled. 
            Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.IStatefulServiceReplica.Abort">
            <summary>
            <para>Ungracefully terminates an instance.</para>
            </summary>
            <remarks>
            <para>Lease loss and, in response to the service, the use of <see cref="M:System.Fabric.IServicePartition.ReportFault(System.Fabric.FaultType)"/> 
            to report a <see cref="F:System.Fabric.FaultType.Permanent"/> fault are examples of ungraceful termination. When this method is invoked, 
            the service instance should immediately release and clean up all references and return.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.IStatelessServiceInstance">
            <summary>
            <para>Stateless services are those which have no state that requires management by Service Fabric. Stateless service types must implement this interface.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.IStatelessServiceInstance.Initialize(System.Fabric.StatelessServiceInitializationParameters)">
            <summary>
            <para> Initializes a newly created service instance.</para>
            </summary>
            <param name="initializationParameters">
            <para>The <see cref="T:System.Fabric.StatelessServiceInitializationParameters"/> for this service.</para>
            </param>
        </member>
        <member name="M:System.Fabric.IStatelessServiceInstance.OpenAsync(System.Fabric.IStatelessServicePartition,System.Threading.CancellationToken)">
            <summary>
            <para>Opens an initialized service instance so that it can be contacted by clients.</para>
            </summary>
            <param name="partition">
            <para>The <see cref="T:System.Fabric.IStatelessServicePartition"/> that this instance is associated with and that the service should use for
            <see cref="M:System.Fabric.IServicePartition.ReportFault(System.Fabric.FaultType)"/>, <see cref="M:System.Fabric.IServicePartition.ReportLoad(System.Collections.Generic.IEnumerable{System.Fabric.LoadMetric})"/>, and to obtain information about the partition.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> object that the operation is observing. It can be used to send a notification that the operation
            should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task`1"/> of type <see cref="T:System.String"/>.</para>
            </returns>
            <remarks>
            <para>Opening a stateless service indicates that the service is now resolvable and discoverable by service clients. The string that is returned
            is the address of this service instance. The address is associated with the service name via Service Fabric naming and returned to clients 
            that resolve the service via <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)"/>.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IStatelessServiceInstance.CloseAsync(System.Threading.CancellationToken)">
            <summary>
            <para>Closes this service instance gracefully when the service instance is being shut down.</para>
            </summary>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> object that the operation is observing. It can be used to send a notification
            that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.IStatelessServiceInstance.Abort">
            <summary>
            <para> Terminates this instance ungracefully with this synchronous method call. </para>
            </summary>
            <remarks>
            <para>Examples of ungraceful termination are lease loss and, in response to the service, the use of 
            <see cref="M:System.Fabric.IServicePartition.ReportFault(System.Fabric.FaultType)"/> to report a <see cref="F:System.Fabric.FaultType.Permanent"/> fault. 
            When the service instance receives this method, it should immediately release and clean up all references and return.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.IStatelessServicePartition">
            <summary>
            <para>Represents a partition that is associated with a stateless service instance.</para>
            </summary>
            <remarks>
            <para>Provided to a stateless service as a parameter to the <see cref="T:System.Fabric.IServicePartition"/>.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.IStatelessServicePartition.ReportInstanceHealth(System.Fabric.Health.HealthInformation)">
            <summary>
            Reports health of the current instance associated with this partition. 
            </summary>
            <param name="healthInfo">Health information that is to be reported.</param>
            <returns></returns>
        </member>
        <member name="T:System.Fabric.KeyValueStoreEnumerator">
            <summary>
            <para>Reads the local store contents of a secondary replica within the context of a copy completion callback. 
            See <see cref="M:System.Fabric.KeyValueStoreReplica.OnCopyComplete(System.Fabric.KeyValueStoreEnumerator)"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.KeyValueStoreEnumerator.Enumerate(System.String)">
            <summary>
            <para>Enumerates the local store contents and includes the data value for all enumerated key-value pairs.</para>
            </summary>
            <param name="keyPrefix">
            <para>Specifies an optional key-prefix filter to apply during enumeration.</para>
            </param>
            <returns>
            <para>The local store contents.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreEnumerator.EnumerateMetadata(System.String)">
            <summary>
            <para>Enumerates the local store contents but excludes the data value for all enumerated key-value pairs.</para>
            </summary>
            <param name="keyPrefix">
            <para>Specifies an optional prefix filter to apply during enumeration.</para>
            </param>
            <returns>
            <para>The local store contents</para>
            </returns>
        </member>
        <member name="T:System.Fabric.KeyValueStoreItem">
            <summary>
            <para>Represents an item in the key/value store.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.KeyValueStoreItem.Metadata">
            <summary>
            <para>Gets a <see cref="T:System.Fabric.KeyValueStoreItemMetadata"/> object that represents the metadata for an item in the key/value store. </para>
            </summary>
            <value>
            <para>A <see cref="T:System.Fabric.KeyValueStoreItemMetadata"/> object that represents the metadata for an item in the key/value store.</para>
            </value>
        </member>
        <member name="P:System.Fabric.KeyValueStoreItem.Value">
            <summary>
            <para>Gets a <see cref="T:System.Byte"/> that represents the value of an item in the key/value store.</para>
            </summary>
            <value>
            <para>A <see cref="T:System.Byte"/> that represents the value of an item in the key/value store.</para>
            </value>
        </member>
        <member name="T:System.Fabric.KeyValueStoreItemMetadata">
            <summary>
            <para>Represents the metadata that are associated with a <see cref="T:System.Fabric.KeyValueStoreItem"/> object in the Key/Value store.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.KeyValueStoreItemMetadata.Key">
            <summary>
            <para>Gets the key of the associated <see cref="T:System.Fabric.KeyValueStoreItem"/> object.</para>
            </summary>
            <value>
            <para>A <see cref="T:System.String"/> that represents the key of the <see cref="T:System.Fabric.KeyValueStoreItem"/> object.</para>
            </value>
        </member>
        <member name="P:System.Fabric.KeyValueStoreItemMetadata.ValueSizeInBytes">
            <summary>
            <para>Gets the size in bytes of the sequence number of the <see cref="T:System.Fabric.KeyValueStoreItem"/> object.</para>
            </summary>
            <value>
            <para>The size in bytes of the <see cref="T:System.Fabric.KeyValueStoreItem"/> object, as a <see cref="T:System.Int32"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.KeyValueStoreItemMetadata.SequenceNumber">
            <summary>
            <para>Gets the sequence number of the <see cref="T:System.Fabric.KeyValueStoreItem"/> object.</para>
            </summary>
            <value>
            <para>The sequence number of the <see cref="T:System.Fabric.KeyValueStoreItem"/> object, as a <see cref="T:System.Int64"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.KeyValueStoreItemMetadata.LastModifiedUtc">
            <summary>
            <para>Gets the last modified time (UTC) of the <see cref="T:System.Fabric.KeyValueStoreItem"/> object.</para>
            </summary>
            <value>
            <para>A <see cref="T:System.DateTime"/> that represents the last modified time of the <see cref="T:System.Fabric.KeyValueStoreItem"/> object.</para>
            </value>
        </member>
        <member name="T:System.Fabric.KeyValueStoreNotification">
            <summary>
            <para>Contains all the information for a replicated operation received by a secondary replica.</para>
            </summary>
            <remarks>
            <para>See <see cref="M:System.Fabric.KeyValueStoreReplica.OnReplicationOperation(System.Collections.Generic.IEnumerator{System.Fabric.KeyValueStoreNotification})"/>.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.KeyValueStoreNotification.Metadata">
            <summary>
            <para>Gets or sets the metadata describing this replicated operation.</para>
            </summary>
            <value>
            <para>The metadata describing this replicated operation.</para>
            </value>
        </member>
        <member name="P:System.Fabric.KeyValueStoreNotification.Value">
            <summary>
            <para>Gets or sets the data (if any) for this replicated operation. Null if this is a delete operation.</para>
            </summary>
            <value>
            <para>The data (if any) for this replicated operation. Null if this is a delete operation.</para>
            </value>
        </member>
        <member name="P:System.Fabric.KeyValueStoreNotification.IsDelete">
            <summary>
            <para>Indicates that this is a replicated delete operation.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if this is a replicated delete operation; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.KeyValueStoreReplica">
            <summary>
            <para>Provides a transactional, replicated, associative data storage to service writers – ready for integration into any Service Fabric service.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.KeyValueStoreReplica"/> class with the specified key/value store name.</para>
            </summary>
            <param name="storeName">
            <para>The name of the key/value store.</para>
            </param>
            <remarks>
            <para>The store name should conform to valid filename characters.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.#ctor(System.String,System.Fabric.LocalStoreSettings)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.KeyValueStoreReplica"/> class with the specified key/value store name and local store settings.</para>
            </summary>
            <param name="storeName">
            <para>The name of the key/value store.</para>
            </param>
            <param name="localStoreSettings">
            <para>The optional settings for the local store.</para>
            </param>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.#ctor(System.String,System.Fabric.ReplicatorSettings)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.KeyValueStoreReplica"/> class with the specified key/value store name and store replicator settings.</para>
            </summary>
            <param name="storeName">
            <para>The name of the key/value store.</para>
            </param>
            <param name="replicatorSettings">
            <para>The option settings for the key/value store replicator.</para>
            </param>
            <remarks>
            <para>The store name should conform to valid filename characters.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.#ctor(System.String,System.Fabric.LocalStoreSettings,System.Fabric.ReplicatorSettings)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.KeyValueStoreReplica"/> class with the specified key/value store name, local store settings, and replicator settings.</para>
            </summary>
            <param name="storeName">
            <para>The name of the key/value store.</para>
            </param>
            <param name="localStoreSettings">
            <para>The optional settings for the local store.</para>
            </param>
            <param name="replicatorSettings">
            <para>The option settings for the key/value store replicator.</para>
            </param>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.#ctor(System.String,System.Fabric.LocalStoreSettings,System.Fabric.ReplicatorSettings,System.Fabric.KeyValueStoreReplica.SecondaryNotificationMode)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.KeyValueStoreReplica"/> class with the specified key/value store name, local store settings, and replicator settings. Secondary replica notifications are enabled via the notification mode.</para>
            </summary>
            <param name="storeName">
            <para>The name of the key/value store.</para>
            </param>
            <param name="localStoreSettings">
            <para>The optional settings for the local store.</para>
            </param>
            <param name="replicatorSettings">
            <para>The option settings for the key/value store replicator.</para>
            </param>
            <param name="notificationMode">
            <para>The secondary notification mode to enable <see cref="M:System.Fabric.KeyValueStoreReplica.OnCopyComplete(System.Fabric.KeyValueStoreEnumerator)"/> 
            and <see cref="M:System.Fabric.KeyValueStoreReplica.OnReplicationOperation(System.Collections.Generic.IEnumerator{System.Fabric.KeyValueStoreNotification})"/> 
            callbacks on this replica.</para>
            </param>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.#ctor(System.String,System.Fabric.LocalStoreSettings,System.Fabric.ReplicatorSettings,System.Fabric.KeyValueStoreReplicaSettings)">
            <summary>
            Initializes a new instance of the KeyValueStoreReplica class with the specified 
            key/value store name, local store settings, replicator settings, and replica settings.
            </summary>
            <param name="storeName">The name of the key/value store.</param>
            <param name="localStoreSettings">The optional settings for the local store.</param>
            <param name="replicatorSettings">The optional settings for the key/value store replicator.</param>
            <param name="kvsSettings">The optional settings for the key/value store replica.</param>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.OnDatalossReported(System.EventArgs)">
            <summary>
            <para>Signals that the replica set may have experienced data loss. The application can either override this method or listen for the
            <see cref="E:System.Fabric.KeyValueStoreReplica.DataLossReported"/> Event. Both represent the same event</para>
            </summary>
            <param name="args">
            <para>Currently contains no data. Reserved for future use.</para>
            </param>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.OnDataLossAsync(System.Threading.CancellationToken)">
            <summary>
            Signals that the replica set may have experienced data loss. The application can either override this method to process the event asynchronously 
            or use the <see cref="E:System.Fabric.KeyValueStoreReplica.DataLossReported"/> event to process synchronously. Both represent the same event.
            </summary>
            <param name="cancellationToken">The token used to check for cancellation of the operation.</param>
            <returns>True to indicate that data was modified during recovery and the replica set needs to be resynchronized. Otherwise, false to indicate that data has not been modified.</returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.Initialize(System.Fabric.StatefulServiceInitializationParameters)">
            <summary>
            <para>Initializes the replica in preparation for opening.</para>
            </summary>
            <param name="initializationParameters">
            <para>The initialization information for the replica.</para>
            </param>
            <remarks>
            <para>This method does not need to be called explicitly if the application replica derives from <see cref="T:System.Fabric.KeyValueStoreReplica"/>,
            which is the recommended pattern. In this case, the application replica should override
            <see cref="M:System.Fabric.KeyValueStoreReplica.OnInitialize(System.Fabric.StatefulServiceInitializationParameters)"/> instead.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)">
            <summary>
            <para>Opens the replica and its replicator in preparation for coming online in a replica set.</para>
            </summary>
            <param name="openMode">
            <para>Specifies the context under which this replica is begin opened.</para>
            </param>
            <param name="partition">
            <para>Contains information describing the replica set to which this replica belongs.</para>
            </param>
            <param name="cancellationToken">
            <para>Current unused. Reserved for future use.</para>
            </param>
            <returns>
            <para>A Task to indicate completion of the open <see cref="T:System.Threading.Tasks.Task`1"/>.</para>
            </returns>
            <remarks>
            <para>This method does not need to be called explicitly if the application replica derives from <see cref="T:System.Fabric.KeyValueStoreReplica"/>, 
            which is the recommended pattern. In this case, the application replica should override OnOpenAsync instead.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)">
            <summary>
            <para>Changes the replica role of the replica and its replicator.</para>
            </summary>
            <param name="newRole">
            <para>The target replica role.</para>
            </param>
            <param name="cancellationToken">
            <para>Currently unused. Reserved for future use.</para>
            </param>
            <returns>
            <para>A task whose result is the address of this replica.</para>
            </returns>
            <remarks>
            <para>This method does not need to be called explicitly if the application replica derives from <see cref="T:System.Fabric.KeyValueStoreReplica"/>, 
            which is the recommended pattern. In this case, the application replica should override <see cref="M:System.Fabric.KeyValueStoreReplica.OnChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)"/> instead.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.CloseAsync(System.Threading.CancellationToken)">
            <summary>
            <para>Closes the replica and its replicator in preparation for going offline from a replica set.</para>
            </summary>
            <param name="cancellationToken">
            <para>Currently unused. Reserved for future use.</para>
            </param>
            <returns>
            <para>A task that represents the asynchronous operation.</para>
            </returns>
            <remarks>
            <para>The replica has not necessarily been removed permanently from the replica set and may be re-opened at a later time. The most common causes for closing a replica is graceful shutdown in preparation for upgrade or load balancing. This method does not need to be called explicitly if the application replica derives from <see cref="T:System.Fabric.KeyValueStoreReplica"/>, which is the recommended pattern. In this case, the application replica should override <see cref="M:System.Fabric.KeyValueStoreReplica.OnCloseAsync(System.Threading.CancellationToken)"/> instead.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.Abort">
            <summary>
            <para>Aborts this instance of the <see cref="T:System.Fabric.KeyValueStoreReplica"/> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.GetCurrentEpoch">
            <summary>
            <para>Gets the current epoch for the key/value store.</para>
            </summary>
            <returns>
            <para>The current epoch for the key/value store.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.UpdateReplicatorSettings(System.Fabric.ReplicatorSettings)">
            <summary>
            <para>Updates the key/value store replicator with the settings in the specified <see cref="T:System.Fabric.ReplicatorSettings"/> object.</para>
            </summary>
            <param name="settings">
            <para>The settings used to update the key/value store replicator.</para>
            </param>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.CreateTransaction">
            <summary>
            <para>Creates a unique <see cref="T:System.Fabric.Transaction"/> instance, which is used to commit or rollback groups of key/value store operations.</para>
            </summary>
            <returns>
            <para>A <see cref="T:System.Fabric.Transaction"/> object representing a transaction.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.CreateTransaction(System.Fabric.KeyValueStoreTransactionSettings)">
            <summary>
            <para>Creates a unique <see cref="T:System.Fabric.Transaction"/> instance, which is used to commit or rollback groups of key/value store operations.</para>
            </summary>
            <param name="settings">
            <para>The transaction settings.</para>
            </param>
            <returns>
            <para>A <see cref="T:System.Fabric.Transaction"/> object representing a transaction.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.Add(System.Fabric.TransactionBase,System.String,System.Byte[])">
            <summary>
            <para>Adds a value indexed by the specified key to the key/value store.</para>
            </summary>
            <param name="transactionBase">
            <para>The transaction instance.</para>
            </param>
            <param name="key">
            <para>The key or index of the value to be added (as a string). Limited to 800 characters in length.</para>
            </param>
            <param name="value">
            <para>The value (as a byte array) to be stored, limited to 2GB in length.</para>
            </param>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.Remove(System.Fabric.TransactionBase,System.String)">
            <summary>
            <para>Removes the stored value associated with the specified key.</para>
            </summary>
            <param name="transactionBase">
            <para>The transaction instance.</para>
            </param>
            <param name="key">
            <para>The key, or index, of the value to be removed (as a string). Limited to 800 characters in length.</para>
            </param>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.Remove(System.Fabric.TransactionBase,System.String,System.Int64)">
            <summary>
            <para>Removes the stored value associated with the specified key.</para>
            </summary>
            <param name="transactionBase">
            <para>The transaction instance.</para>
            </param>
            <param name="key">
            <para>The key, or index, of the value to be removed (as a string). Limited to 800 characters in length.</para>
            </param>
            <param name="checkSequenceNumber">
              <para />
            </param>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.Update(System.Fabric.TransactionBase,System.String,System.Byte[])">
            <summary>
            <para>Updates the stored value associated with the specified key.</para>
            </summary>
            <param name="transactionBase">
            <para>The transaction instance.</para>
            </param>
            <param name="key">
            <para>The key or index of the value to be updated (as a string). Limited to 800 characters in length.</para>
            </param>
            <param name="value">
            <para>The value (as a byte array) to be stored, limited to 2GB in length.</para>
            </param>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.Update(System.Fabric.TransactionBase,System.String,System.Byte[],System.Int64)">
            <summary>
            <para>Updates the stored value associated with the specified key.</para>
            </summary>
            <param name="transactionBase">
            <para>The transaction instance.</para>
            </param>
            <param name="key">
            <para>The key or index of the value to be updated (as a string). Limited to 800 characters in length.</para>
            </param>
            <param name="value">
            <para>The value (as a byte array) to be stored, limited to 2GB in length.</para>
            </param>
            <param name="checkSequenceNumber">
              <para />
            </param>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.Contains(System.Fabric.TransactionBase,System.String)">
            <summary>
            <para>Determines a flag that indicates whether a value is contained in the key/value store.</para>
            </summary>
            <param name="transactionBase">
            <para>The transaction instance.</para>
            </param>
            <param name="key">
            <para>The key or index of the value to look up (as a string). Limited to 800 characters in length.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the value is contained in the key/value store; <languageKeyword>false</languageKeyword>, otherwise.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.Get(System.Fabric.TransactionBase,System.String)">
            <summary>
            <para>Gets the stored value, as a <see cref="T:System.Fabric.KeyValueStoreItem"/> object, associated with the specified key.</para>
            </summary>
            <param name="transactionBase">
            <para>The transaction instance.</para>
            </param>
            <param name="key">
            <para>The key or index of the value to be retrieved (as a string). Limited to 800 characters in length.</para>
            </param>
            <returns>
            <para>A <see cref="T:System.Fabric.KeyValueStoreItem"/> object representing the stored value.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.GetValue(System.Fabric.TransactionBase,System.String)">
            <summary>
            <para>Gets the stored value as a byte array, associated with the specified key.</para>
            </summary>
            <param name="transactionBase">
            <para>The transaction instance.</para>
            </param>
            <param name="key">
            <para>The key or index of the value to be retrieved (as a string). Limited to 800 characters in length.</para>
            </param>
            <returns>
            <para>A byte array representing the stored value.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.GetMetadata(System.Fabric.TransactionBase,System.String)">
            <summary>
            <para>Gets the metadata, as a <see cref="T:System.Fabric.KeyValueStoreItemMetadata"/> object, for the value associated with the specified key.</para>
            </summary>
            <param name="transactionBase">
            <para>The transaction instance.</para>
            </param>
            <param name="key">
            <para>The key or index of the value to be retrieved (as a string). Limited to 800 characters in length.</para>
            </param>
            <returns>
            <para>A <see cref="T:System.Fabric.KeyValueStoreItemMetadata"/> object representing the metadata associated with the specified value.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.Enumerate(System.Fabric.TransactionBase)">
            <summary>
            <para>Returns an enumerator that iterates through the <see cref="T:System.Fabric.KeyValueStoreItem"/> values in the key/value store.</para>
            </summary>
            <param name="transactionBase">
            <para>The transaction instance.</para>
            </param>
            <returns>
            <para>A <see cref="T:System.Fabric.KeyValueStoreItem"/> enumerator.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.Enumerate(System.Fabric.TransactionBase,System.String)">
            <summary>
            <para>Returns an enumerator that iterates through the <see cref="T:System.Fabric.KeyValueStoreItem"/> values in the key/value store, where the value keys match the specified key prefix.</para>
            </summary>
            <param name="transactionBase">
            <para>The transaction instance.</para>
            </param>
            <param name="keyPrefix">
            <para>The key, or index, prefix to match (as a string). Limited to 800 characters in length.</para>
            </param>
            <returns>
            <para>A <see cref="T:System.Fabric.KeyValueStoreItem"/> enumerator.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.EnumerateMetadata(System.Fabric.TransactionBase)">
            <summary>
            <para>Returns an enumerator that iterates through the <see cref="T:System.Fabric.KeyValueStoreItemMetadata"/> values in the key/value store.</para>
            </summary>
            <param name="transactionBase">
            <para>The transaction instance.</para>
            </param>
            <returns>
            <para>A <see cref="T:System.Fabric.KeyValueStoreItemMetadata"/> enumerator.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.EnumerateMetadata(System.Fabric.TransactionBase,System.String)">
            <summary>
            <para>Returns an enumerator that iterates through the <see cref="T:System.Fabric.KeyValueStoreItemMetadata"/> values in the key/value store, where the value keys match the specified key prefix.</para>
            </summary>
            <param name="transactionBase">
            <para>The transaction instance.</para>
            </param>
            <param name="keyPrefix">
            <para>The key, or index, prefix to match (as a string). Limited to 800 characters in length.</para>
            </param>
            <returns>
            <para>A <see cref="T:System.Fabric.KeyValueStoreItemMetadata"/> enumerator.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.Backup(System.String)">
            <summary>
            <para>DEPRECATED. Performs a full backup of the replica’s local store to the specified destination directory. </para>
            </summary>
            <param name="backupDirectory">
            <para>The full path of the backup destination directory.</para>
            </param>
            <remarks>
            <para>
            This method is obsolete. Use <see cref="M:System.Fabric.KeyValueStoreReplica.BackupAsync(System.String,System.Fabric.StoreBackupOption,System.Func{System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task{System.Boolean}})"/> instead.</para>
            <para>
            Incremental backups are not supported after creating a full backup using this method. 
            Use <see cref="M:System.Fabric.KeyValueStoreReplica.BackupAsync(System.String,System.Fabric.StoreBackupOption,System.Func{System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task{System.Boolean}})"/> to create
            a full backup if subsequent incremental backups are to be created.
            </para>
            </remarks>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.BackupAsync(System.String,System.Fabric.StoreBackupOption,System.Func{System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            <para>Asynchronously creates a backup of the key-value store.</para>
            </summary>
            <param name="backupDirectory">
            The directory where the backup is to be stored. 
            If <b>backupOption</b> is <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly"/>, then this parameter should be null.
            Otherwise, this parameter cannot be null, empty or contain just whitespace. 
            UNC paths may also be provided.
            If the directory doesn't exist, it is created. If it exists and isn't empty, then incremental backup fails with
            <see cref="T:System.Fabric.FabricBackupDirectoryNotEmptyException"/>.
            </param>
            <param name="backupOption">
            <para>The options for the backup.</para>
            </param>
            <param name="postBackupAsyncFunc">
            The post backup asynchronous method that is invoked by Windows Fabric to allow the user to complete
            any post backup activity before returning control to the system.
            If <B>null</B> is passed in for this, incremental backups are disallowed.
            If the post-backup method returns false, then again, incremental backups are disallowed.
            </param>
            <returns>A task that represents the asynchronous backup operation.</returns>
            <exception cref="T:System.ArgumentNullException">backupDirectory is <b>null</b> when backupOption is not <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly"/>.</exception>
            <exception cref="T:System.ArgumentException">
            backupDirectory is empty or contains just whitespaces when backupOption is not <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly"/> or
            backupDirectory is not <b>null</b> when backupOption is <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly"/>.
            </exception>        
            <exception cref="T:System.Fabric.FabricBackupDirectoryNotEmptyException">
            When backupOption is <see cref="F:System.Fabric.StoreBackupOption.Incremental"/> and the backup directory already contains files or sub-directories.        
            </exception>
            <exception cref="T:System.Fabric.FabricBackupInProgressException">
            When a previously initiated backup is currently in progress.
            </exception>
            <remarks>
            The <b>postBackupAsyncFunc</b> is not invoked if there is an error during backup. Also, it is not invoked when 
            <b>backupOption</b> is <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly"/> since there is no further action needed
            from the user in this case to complete a single backup cycle.
            </remarks>
            <example>
            Below is an example of a simple implementation of <B>postBackupAsyncFunc</B>
            <code>
            private async Task&lt;bool&gt; SimplePostBackupHandler(StoreBackupInfo info)
            {
                bool result = await CopyBackupToAzureBlobStorage(info);
                return result;
            }
            </code>
            </example>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.BackupAsync(System.String,System.Fabric.StoreBackupOption,System.Func{System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates a backup of the key-value store.
            </summary>
            <param name="backupDirectory">
            The directory where the backup is to be stored. 
            If <b>backupOption</b> is <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly"/>, then this parameter should be null.
            Otherwise, this parameter cannot be null, empty or contain just whitespace. 
            UNC paths may also be provided.
            If the directory doesn't exist, it is created. If it exists and isn't empty, then incremental backup fails with
            <see cref="T:System.Fabric.FabricBackupDirectoryNotEmptyException"/>.
            </param>
            <param name="backupOption">
            <para>The options for the backup.</para>
            </param>
            <param name="postBackupAsyncFunc">
            The post backup asynchronous method that is invoked by Windows Fabric to allow the user to complete
            any post backup activity before returning control to the system.
            If <B>null</B> is passed in for this, incremental backups are disallowed.
            If the post-backup method returns false, then again, incremental backups are disallowed.
            </param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous backup operation.</returns>
            <exception cref="T:System.ArgumentNullException">backupDirectory is <b>null</b> when backupOption is not <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly"/>.</exception>
            <exception cref="T:System.ArgumentException">
            backupDirectory is empty or contains just whitespaces when backupOption is not <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly"/> or
            backupDirectory is not <b>null</b> when backupOption is <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly"/>.
            </exception>        
            <exception cref="T:System.Fabric.FabricBackupDirectoryNotEmptyException">
            When backupOption is <see cref="F:System.Fabric.StoreBackupOption.Incremental"/> and the backup directory already contains files or sub-directories.        
            </exception>
            <exception cref="T:System.Fabric.FabricBackupInProgressException">
            When a previously initiated backup is currently in progress.
            </exception>
            <remarks>
            The <b>postBackupAsyncFunc</b> is not invoked if there is an error during backup. Also, it is not invoked when 
            <b>backupOption</b> is <see cref="F:System.Fabric.StoreBackupOption.TruncateLogsOnly"/> since there is no further action needed
            from the user in this case to complete a single backup cycle.
            </remarks>
            <example>
            Below is an example of a simple implementation of <B>postBackupAsyncFunc</B>
            <code>
            private async Task&lt;bool&gt; SimplePostBackupHandler(StoreBackupInfo info)
            {
                bool result = await CopyBackupToAzureBlobStorage(info);
                return result;
            }
            </code>
            </example>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.Restore(System.String)">
            <summary>
            <para>Restores this replica’s local store database from a backup that was previously created by calling Backup.</para>
            </summary>
            <param name="backupDirectory">
            <para>The full path to a backup created by previously calling Backup.</para>
            </param>
            <remarks>
            <para>This is only a local replica restore and the replica set is not automatically restored. The entire replica set must be restored by taking additional steps to cause a natural build of other replicas via reconfiguration. The recommended approach is to restore to an empty service with only a single replica and increase the target replica set size afterwards with a call to UpdateService if needed.</para>
            <para>If the restore is successful, then the replica will restart itself and start using the restored local data after coming back online given that the recommendation to restore to a replica set containing only a single replica was followed.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.RestoreAsync(System.String)">
            <summary>
            <para>Restores this replica’s local store database from a backup that was previously created by calling Backup</para>
            </summary>
            <param name="backupDirectory">
            The directory where the replica is to be restored from.
            This parameter cannot be null, empty or contain just whitespace. 
            UNC paths may also be provided.
            </param>
            <returns>A task that represents the asynchronous restore operation.</returns>
            <exception cref="T:System.ArgumentNullException">backupDirectory is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">
            backupDirectory is empty or contains just whitespaces.
            </exception>        
            <exception cref="T:System.IO.DirectoryNotFoundException">backupDirectory does not exist.</exception>
            <remarks>
            <para>It is recommended to not perform any write operations to the key-value store while 
            restore is underway since the updated data would be lost when the store is restored from
            the files in backupDirectory. </para>
            <para>This is only a local replica restore and the replica set is not automatically restored. The entire replica set must be restored by taking additional steps 
            to cause a natural build of other replicas via reconfiguration. The recommended approach is to restore to an empty service with only a single replica and increase the target 
            replica set size afterwards with a call to UpdateService if needed.</para>
            <para>If the restore is successful, then the replica will restart itself and start using the restored local data after coming back online 
            given that the recommendation to restore to a replica set containing only a single replica was followed.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.RestoreAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            <para>Restores this replica’s local store database from a backup that was previously created by calling Backup</para>
            </summary>
            <param name="backupDirectory">
            The directory where the replica is to be restored from.
            This parameter cannot be null, empty or contain just whitespace. 
            UNC paths may also be provided.
            </param>
            <param name="cancellationToken">
            <para>The cancellation token</para>
            </param>
            <returns>A task that represents the asynchronous restore operation.</returns>
            <exception cref="T:System.ArgumentNullException">backupDirectory is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">
            backupDirectory is empty or contains just whitespaces.
            </exception>        
            <exception cref="T:System.IO.DirectoryNotFoundException">backupDirectory does not exist.</exception>
            <remarks>
            <para>It is recommended to not perform any write operations to the key-value store while 
            restore is underway since the updated data would be lost when the store is restored from
            the files in backupDirectory. </para>
            <para>This is only a local replica restore and the replica set is not automatically restored. The entire replica set must be restored by taking additional steps 
            to cause a natural build of other replicas via reconfiguration. The recommended approach is to restore to an empty service with only a single replica and increase the target 
            replica set size afterwards with a call to UpdateService if needed.</para>
            <para>If the restore is successful, then the replica will restart itself and start using the restored local data after coming back online 
            given that the recommendation to restore to a replica set containing only a single replica was followed.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.RestoreAsync(System.String,System.Fabric.RestoreSettings,System.Threading.CancellationToken)">
            <summary>
            Asynchronously restores the key-value store replica.
            </summary>
            <param name="backupDirectory">
            The directory where the replica is to be restored from.
            This parameter cannot be null, empty or contain just whitespace. 
            UNC paths may also be provided.
            </param>
            <param name="settings">
            Settings to modify restore behavior.
            </param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous restore operation.</returns>
            <exception cref="T:System.ArgumentNullException">backupDirectory is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">
            backupDirectory is empty or contains just whitespaces.
            </exception>        
            <exception cref="T:System.IO.DirectoryNotFoundException">backupDirectory does not exist.</exception>
            <remarks>
            It is recommended to not perform any write operations to the key-value store while 
            restore is underway since the updated data would be lost when the store is restored from
            the files in backupDirectory. 
            </remarks>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.OnInitialize(System.Fabric.StatefulServiceInitializationParameters)">
            <summary>
            <para>Initializes a newly created service replica.</para>
            </summary>
            <param name="initializationParameters">
            <para>The initialization parameters for the service replica, represented as a <see cref="T:System.Fabric.StatefulServiceInitializationParameters"/> object.</para>
            </param>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.OnOpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)">
            <summary>
            <para>Called on an initialized service replica to open it so that additional actions can be taken.</para>
            </summary>
            <param name="openMode">
            <para>A <see cref="T:System.Fabric.ReplicaOpenMode"/> object specifying for this replica whether it is new or recovered.</para>
            </param>
            <param name="partition">
            <para>A <see cref="T:System.Fabric.IStatefulServicePartition"/> object representing the stateful service partition information for this replica. </para>
            </param>
            <param name="cancellationToken">
            <para>A <see cref="T:System.Threading.CancellationToken"/> object that the operation is monitoring, which can be used to notify the task of cancellation.</para>
            </param>
            <returns>
            <para>A <see cref="T:System.Threading.Tasks.Task"/> object representing the asynchronous operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.OnChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)">
            <summary>
            <para>Indicates that this replica is changing roles.</para>
            </summary>
            <param name="newRole">
            <para>The target role.</para>
            </param>
            <param name="cancellationToken">
            <para>Currently unused. Reserved for future use.</para>
            </param>
            <returns>
            <para>A task whose result is the resolvable address of this replica..</para>
            </returns>
            <remarks>
            <para>The application replica should override this method if deriving from <see cref="T:System.Fabric.KeyValueStoreReplica"/>, which is the recommended pattern. The application replica should return a Task whose result is the address of this replica. This replica address is stored by the system as is and can be retrieved (unmodified) using ResolveServiceAsync. The application must take care to complete the role change in a timely manner since reconfiguration of the replica set will be blocked behind the completion of all outstanding change role calls.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.OnCloseAsync(System.Threading.CancellationToken)">
            <summary>
            <para>Called when this service replica is being shut down and needs to close.</para>
            </summary>
            <param name="cancellationToken">
            <para>A <see cref="T:System.Threading.CancellationToken"/> object that the operation is monitoring, which can be used to notify the task of cancellation.</para>
            </param>
            <returns>
            <para>The asynchronous operation.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.OnAbort">
            <summary>
            <para>Called to shut down this instance.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.OnCopyComplete(System.Fabric.KeyValueStoreEnumerator)">
            <summary>
            <para>Called by the system on secondary replicas when they have finished building from the primary and are ready to start applying replication operations.</para>
            <para>This method will only be called on secondary replicas if the <see cref="T:System.Fabric.KeyValueStoreReplica"/> object was constructed with a <see cref="T:System.Fabric.KeyValueStoreReplica.SecondaryNotificationMode"/> parameter.</para>
            </summary>
            <param name="enumerator">
            <para>The enumerator used to read data on the secondary.</para>
            </param>
            <remarks>
            <para>The <see cref="T:System.Fabric.KeyValueStoreEnumerator"/> object can be used to read data on the secondary within the context of this method before any replication operations are applied. The <see cref="T:System.Fabric.KeyValueStoreEnumerator"/> object is no longer valid after this method returns and cannot be used outside the context of this method. The application must take care to complete this callback in a timely manner since replication operations are being queued on the secondary replica and will not start getting applied until this method returns. The <see cref="T:System.Fabric.KeyValueStoreEnumerator"/> object is backed by a single underlying local transaction and is not thread-safe.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.KeyValueStoreReplica.OnReplicationOperation(System.Collections.Generic.IEnumerator{System.Fabric.KeyValueStoreNotification})">
            <summary>
            <para>Called by the system on secondary replicas for incoming replication operations. Each <see cref="T:System.Fabric.KeyValueStoreNotification"/> object contains all the data for a single atomic replication operation.</para>
            </summary>
            <param name="enumerator">
            <para>The enumerator used to read the data in this replication operation.</para>
            </param>
            <remarks>
            <para>This method will only be called on secondary replicas if the <see cref="T:System.Fabric.KeyValueStoreReplica"/> object was constructed with a valid <see cref="T:System.Fabric.KeyValueStoreReplica.SecondaryNotificationMode"/>.</para>
            <para>If the BlockSecondaryAck mode was specified, then the incoming replication operation is not applied locally on the secondary replica and acknowledged to the primary until the method returns. This implies that the application must take care to return from this method in a timely manner to avoiding blocking the replication stream. Since the acknowledgment is not sent to the primary until this method returns, it cannot be assumed that the observed replication operation has already been (or is guaranteed to be in the future) applied by a quorum of replicas in the replica set.</para>
            <para>If the NonBlockingQuorumAcked mode was specified, then the observed replication operation is guaranteed to have already been applied by a quorum of replicas in the replica set. Furthermore, the observed replication operation may have already been applied locally by this secondary and acknowledged to the primary at the time the method is invoked by the system. The method callback will not block the replication stream in this mode, but it will still block the replication operation notification stream. That is, there will only be one outstanding OnReplicationOperation method callback at any given time.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.KeyValueStoreReplica.StoreName">
            <summary>
            <para>Gets or sets the name of the key/value store.</para>
            </summary>
            <value>
            <para>The name of the key/value store.</para>
            </value>
            <remarks>
            <para>The store name should conform to valid filename characters.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.KeyValueStoreReplica.LocalStoreSettings">
            <summary>
            <para>Gets or sets the option settings for the local key/value store.</para>
            </summary>
            <value>
            <para>The local store option settings.</para>
            </value>
        </member>
        <member name="P:System.Fabric.KeyValueStoreReplica.ReplicatorSettings">
            <summary>
            <para>Gets or sets the option settings for the key/value store replicator.</para>
            </summary>
            <value>
            <para>The store replicator option settings.</para>
            </value>
        </member>
        <member name="P:System.Fabric.KeyValueStoreReplica.NotificationMode">
            <summary>
            <para>Gets the secondary notification mode specified during construction of this replica.</para>
            </summary>
            <value>
            <para>The current secondary notification mode</para>
            </value>
        </member>
        <member name="T:System.Fabric.KeyValueStoreReplica.SecondaryNotificationMode">
            <summary>
            <para>Specifies the secondary notifications on the <see cref="T:System.Fabric.KeyValueStoreReplica"/> 
            and describes the desired behavior of <see cref="M:System.Fabric.KeyValueStoreReplica.OnReplicationOperation(System.Collections.Generic.IEnumerator{System.Fabric.KeyValueStoreNotification})"/> if enabled.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.KeyValueStoreTransactionSettings">
            <summary>
            <para>Specifies the optional settings to describe the behavior of transactions supported by <see cref="T:System.Fabric.KeyValueStoreReplica"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.KeyValueStoreTransactionSettings.#ctor">
            <summary>
            <para>Creates anew instance of the <see cref="T:System.Fabric.KeyValueStoreTransactionSettings"/> class..</para>
            </summary>
        </member>
        <member name="P:System.Fabric.KeyValueStoreTransactionSettings.SerializationBlockSize">
            <summary>
            <para>Specifies the block size (in bytes) to use when allocating memory for replication operations.</para>
            </summary>
            <value>
            <para>The block size (in bytes) to use when allocating memory for replication operations.</para>
            </value>
        </member>
        <member name="T:System.Fabric.LoadMetric">
            <summary>
            <para>Represents the name of a metric and a runtime value as a name-value pair that is reported to Service Fabric. The metric loads are used by Service Fabric to ensure that the cluster is evenly used and that nodes do not exceed their capacities for given metrics. <see cref="T:System.Fabric.LoadMetric"/> reports are provided to Service Fabric via <see cref="M:System.Fabric.IServicePartition.ReportLoad(System.Collections.Generic.IEnumerable{System.Fabric.LoadMetric})"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.LoadMetric.#ctor(System.String,System.Int32)">
            <summary>
            <para>Creates and initializes a <see cref="T:System.Fabric.LoadMetric"/> object with the specified name and load value.</para>
            </summary>
            <param name="name">
            <para>The name of the metric. This string must match the names of the metrics that are specified in the <see cref="P:System.Fabric.Description.ServiceDescription.Metrics"/> collection, or they will be ignored.</para>
            </param>
            <param name="value">
            <para>The current value of the metric as an integer.</para>
            </param>
        </member>
        <member name="P:System.Fabric.LoadMetric.Name">
            <summary>
            <para>Indicates the name of the metric that the service plans to report. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.LoadMetric.Value">
            <summary>
            <para>Indicates the current load of the metric.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Int32"/>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.MoveCost">
            <summary>
            <para>Describes the move cost of a replica.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.MoveCost.Zero">
            <summary>
            <para>Specifies the move cost of a replica as Zero.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.MoveCost.Low">
            <summary>
            <para>Specifies the move cost of a replica as Low.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.MoveCost.Medium">
            <summary>
            <para>Specifies the move cost of a replica as Medium.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.MoveCost.High">
            <summary>
            <para>Specifies the move cost of a replica as High.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.LocalEseStoreSettings">
            <summary>
            <para>Represents the optional settings for a local ESE store.</para>
            </summary>
            <remarks>
            <para>Please see  HYPERLINK "http://msdn.microsoft.com/library/gg294139(v=exchg.10).aspx" http://msdn.microsoft.com/library/gg294139(v=exchg.10).aspx for documentation on ESE parameters.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.LocalStoreSettings">
            <summary>
            <para>Represents the option settings for a local store.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.LocalStoreSettings.#ctor(System.Fabric.LocalStoreKind)">
            <summary>
            <para>Initializes a new instance of the class with the specified store provider type.</para>
            </summary>
            <param name="storeKind">
            <para>A <see cref="T:System.Fabric.LocalStoreKind"/> object representing the store provider type.</para>
            </param>
        </member>
        <member name="P:System.Fabric.LocalStoreSettings.StoreKind">
            <summary>
            <para>Gets the store provider type.</para>
            </summary>
            <value>
            <para>The store provider type as a <see cref="T:System.Fabric.LocalStoreKind"/> object.</para>
            </value>
        </member>
        <member name="M:System.Fabric.LocalEseStoreSettings.#ctor">
            <summary>
            <para>Creates and initializes a new instance of the <see cref="T:System.Fabric.LocalEseStoreSettings"/> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.LocalEseStoreSettings.LoadFrom(System.Fabric.CodePackageActivationContext,System.String,System.String)">
            <summary>
            Convenience method to create an instance of this class initialized with property values loaded from the application configuration package.
            </summary>
            <param name="codePackageActivationContext">The activation context under which this code is running. Retrieved from <see cref="T:System.Fabric.FabricRuntime"/>.</param>
            <param name="configPackageName">The name of the configuration package (specified in the Service Manifest) containing the settings to load.</param>
            <param name="sectionName">The name of the section in Settings.xml within the specified configuration package containing the settings to load.</param>
            <returns>The initialized settings object.</returns>
        </member>
        <member name="P:System.Fabric.LocalEseStoreSettings.DbFolderPath">
            <summary>
            <para>Gets the file path that contains the local store file.</para>
            </summary>
            <value>
            <para>The file path that contains the local store file.</para>
            </value>
        </member>
        <member name="P:System.Fabric.LocalEseStoreSettings.LogFileSizeInKB">
            <summary>
            <para>Maps directly to JET_paramLogFileSize on the local ESE store.
            </para>
            </summary>
            <value>
            <para>The log file size in KB.</para>
            </value>
        </member>
        <member name="P:System.Fabric.LocalEseStoreSettings.LogBufferSizeInKB">
            <summary>
            <para>Maps to JET_paramLogBuffers on the local ESE store. There is a conversion from KB to 512 bytes (volume sector size) in the mapping.</para>
            </summary>
            <value>
            <para>The log buffer size in KB.</para>
            </value>
        </member>
        <member name="P:System.Fabric.LocalEseStoreSettings.MaxCursors">
            <summary>
            <para>Maps directly to JET_paramMaxCursors on the local ESE store.
            </para>
            </summary>
            <value>
            <para>The maximum number of allowed database cursors.</para>
            </value>
        </member>
        <member name="P:System.Fabric.LocalEseStoreSettings.MaxVerPages">
            <summary>
            <para>Maps directly to JET_paramMaxVerPages on the local ESE store.
            </para>
            </summary>
            <value>
            <para>The maximum number of allowed version pages.</para>
            </value>
        </member>
        <member name="P:System.Fabric.LocalEseStoreSettings.MaxAsyncCommitDelay">
            <summary>
            <para>Maps directly to the cmsecDurableCommit parameter on the JetCommitTransaction2() ESE API calls when local commits are performed.
            </para>
            </summary>
            <value>
            <para>The durable lazy commit duration.</para>
            </value>
        </member>
        <member name="P:System.Fabric.LocalEseStoreSettings.EnableIncrementalBackup">
            <summary>
            <para>Gets or sets a value indicating whether the incremental backup feature is enabled for use.</para>
            </summary>
            <value>
            Returns <languageKeyword>true</languageKeyword> if incremental backup is enabled; otherwise, <languageKeywork>false</languageKeywork>.
            </value>
        </member>
        <member name="T:System.Fabric.LocalStoreKind">
            <summary>
            <para>Specifies the local store provider type.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.LocalStoreKind.Invalid">
            <summary>
            <para>Reserved for future use. Does not indicate a valid database provider.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.LocalStoreKind.Ese">
            <summary>
            <para>Indicates an Extensible Store Engine (ESE) database provider. Please see http://msdn.microsoft.com/library/gg269245(v=exchg.10).aspx for documentation on ESE.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.NamedPartitionInformation">
            <summary>
            <para>Describes the partition information for the name as a string that is based on partition schemes.
            Services observe this type of <see cref="T:System.Fabric.ServicePartitionInformation"/> when the service is created with the <see cref="T:System.Fabric.Description.NamedPartitionSchemeDescription"/>. <see cref="T:System.Fabric.NamedPartitionInformation"/> derives from the <see cref="T:System.Fabric.IServicePartition"/> interface and is provided to services as part of the <see cref="T:System.Fabric.IStatefulServicePartition"/> or <see cref="T:System.Fabric.IStatelessServicePartition"/> interface, which is passed in during the stateful <see cref="M:System.Fabric.IStatefulServiceReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)"/> or the stateless <see cref="M:System.Fabric.IStatelessServiceInstance.OpenAsync(System.Fabric.IStatelessServicePartition,System.Threading.CancellationToken)"/>.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.NamedPartitionInformation.Name">
            <summary>
            <para>Indicates the name of this partition of the service.</para>
            </summary>
            <value>
            <para>The name of this partition of the service.</para>
            </value>
        </member>
        <member name="T:System.Fabric.NamedProperty">
            <summary>
            <para>Represents a property that is managed by using the <see cref="T:System.Fabric.FabricClient.PropertyManagementClient"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.NamedProperty.GetValue``1">
            <summary>
            <para>Gets the value of the property.</para>
            </summary>
            <typeparam name="T">
            <para>The type of the property value.</para>
            </typeparam>
            <returns>
            <para>The value of the property as type <typeparamref name="T"/>.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.NamedProperty.Metadata">
            <summary>
            <para>Gets the metadata that is associated with the property, which includes its name.</para>
            </summary>
            <value>
            <para>The metadata that is associated with the property, which includes its name.</para>
            </value>
        </member>
        <member name="T:System.Fabric.NamedPropertyMetadata">
            <summary>
            <para>The metadata associated with a <see cref="T:System.Fabric.NamedProperty"/>, including the property’s name.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.NamedPropertyMetadata.PropertyName">
            <summary>
            <para>Gets the name of the Property. It could be thought of as the key for a key value pair.</para>
            </summary>
            <value>
            <para>The property name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.NamedPropertyMetadata.Parent">
            <summary>
            <para>Gets the name of the parent Service Fabric Name for the Property. It could be thought of as the namespace/table under which the property exists.</para>
            </summary>
            <value>
            <para>The name of the parent Service Fabric Name for the Property.</para>
            </value>
        </member>
        <member name="P:System.Fabric.NamedPropertyMetadata.TypeId">
            <summary>
            <para>Indicates whether the value of the Property is a Binary, <see cref="T:System.Int64"/>, <see cref="T:System.Double"/>, <see cref="T:System.String"/> or <see cref="T:System.Guid"/>. 
            A common use of this field is to determine the type to use for the <see cref="M:System.Fabric.NamedProperty.GetValue``1"/>.</para>
            </summary>
            <value>
            <para>The property type of the property.</para>
            </value>
            <remarks>
            <para>All Service Fabric enumerations have a reserved Invalid value.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.NamedPropertyMetadata.ValueSize">
            <summary>
            <para>Indicates the length of the serialized Property value.</para>
            </summary>
            <value>
            <para>The length of the serialized Property value.</para>
            </value>
        </member>
        <member name="P:System.Fabric.NamedPropertyMetadata.SequenceNumber">
            <summary>
            <para>Gets the version of the Property. Every time a Property is modified, its sequence number is increased.</para>
            </summary>
            <value>
            <para>The version of the property.</para>
            </value>
            <remarks>
            <para>Sequence numbers will be guaranteed to always increase. However, the increase may not be monotonic.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.NamedPropertyMetadata.LastModifiedUtc">
            <summary>
            <para>Gets when the Property was last modified. Only write operations will cause this field to be updated.</para>
            </summary>
            <value>
            <para>The last time the property was modified, UTC.</para>
            </value>
        </member>
        <member name="P:System.Fabric.NamedPropertyMetadata.CustomTypeId">
            <summary>
            <para>Gets the custom type id.</para>
            </summary>
            <value>
            <para>The custom type id.</para>
            </value>
            <remarks>
            <para>Using this property, the user is able to tag the type of the value of the property. 
            Common use case for this property is the following. Assume you have property called configuration. 
            The value of this property can be JSON or XML, depending on who last updated the property. 
            In this scenario the updaters can use custom type id property to communicate the type of the property to the consumer of the property.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.NameEnumerationResult">
            <summary>
            <para>A collection of Service Fabric names,
            as returned by <see cref="M:System.Fabric.FabricClient.PropertyManagementClient.EnumerateSubNamesAsync(System.Uri,System.Fabric.NameEnumerationResult,System.Boolean)"/>.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.NameEnumerationResult.HasMoreData">
            <summary>
            <para>Indicates whether there are more remaining pages. 
            If the value is true, then <see cref="M:System.Fabric.FabricClient.PropertyManagementClient.EnumerateSubNamesAsync(System.Uri,System.Fabric.NameEnumerationResult,System.Boolean)"/> 
            can be called to acquire the next page.</para>
            </summary>
            <value>
            <para><languageKeyword>true</languageKeyword> if the enumeration has more data;
            <languageKeyword>false</languageKeyword> otherwise.</para>
            </value>
        </member>
        <member name="P:System.Fabric.NameEnumerationResult.IsFinished">
            <summary>
            <para>Indicates whether there are no more remaining pages.</para>
            </summary>
            <value>
            <para><languageKeyword>true</languageKeyword> if the enumeration is finished;
            <languageKeyword>false</languageKeyword> otherwise.</para>
            </value>
        </member>
        <member name="P:System.Fabric.NameEnumerationResult.IsBestEffort">
            <summary>
            <para>Indicates whether any name under the given name has been modified during the enumeration. If there was a modification, this property value is true.</para>
            </summary>
            <value>
            <para><languageKeyword>true</languageKeyword> if the enumeration is best effort;
            <languageKeyword>false</languageKeyword> otherwise.</para>
            </value>
        </member>
        <member name="P:System.Fabric.NameEnumerationResult.IsConsistent">
            <summary>
            <para>Indicates whether any name under the given name has been modified during the enumeration. If there was a modification, this property value  is false.</para>
            </summary>
            <value>
            <para><languageKeyword>true</languageKeyword> if the enumeration is consistent;
            <languageKeyword>false</languageKeyword> otherwise.</para>
            </value>
        </member>
        <member name="P:System.Fabric.NameEnumerationResult.IsValid">
            <summary>
            <para>Indicates whether the enumeration result is valid. Do not use the result, if it is not valid.</para>
            </summary>
            <value>
            <para><languageKeyword>true</languageKeyword> if the enumeration result is valid;
            <languageKeyword>false</languageKeyword> otherwise.</para>
            </value>
        </member>
        <member name="T:System.Fabric.NodeContext">
            <summary>
            <para>Class to encapsulate a node context.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.NodeContext.#ctor(System.String,System.Fabric.NodeId,System.Numerics.BigInteger,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Fabric.NodeContext"/> class.
            </summary>
            <param name="nodeName">The node name.</param>
            <param name="nodeId">The node id.</param>
            <param name="nodeInstanceId">The node instance id.</param>
            <param name="nodeType">The node type.</param>
            <param name="ipAddressOrFQDN">The IP address or FQDN of the node.</param>
        </member>
        <member name="P:System.Fabric.NodeContext.NodeId">
            <summary>
            <para>Gets the node ID.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.NodeId"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.NodeContext.NodeInstanceId">
            <summary>
            <para>Gets the node instance ID.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Numerics.BigInteger"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.NodeContext.NodeName">
            <summary>
            <para>Gets the node name.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.NodeContext.NodeType">
            <summary>
            <para>Gets the node type.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.NodeContext.IPAddressOrFQDN">
            <summary>
            <para>Gets the IP address or the fully qualified domain name of the node.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String"/>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.NodeDeactivationIntent">
            <summary>
            <para>Describes the reason why the node is being shut down.</para>
            </summary>
            <remarks>
            <para>The <see cref="T:System.Fabric.NodeDeactivationIntent"/> enumeration is provided as a part of the <see cref="M:System.Fabric.FabricClient.ClusterManagementClient.DeactivateNodeAsync(System.String,System.Fabric.NodeDeactivationIntent)"/> method. Service Fabric uses this information to take the correct actions at the node to provide a graceful shutdown of the node. The intents have a general progression or severity. A deactivation that is started with one intent can be increased to subsequent higher levels of intent. The general order of this progression is: Pause, Restart, Stop, ForceStop.</para>
            </remarks>
        </member>
        <member name="F:System.Fabric.NodeDeactivationIntent.Invalid">
            <summary>
            <para>Indicates that a deactivation intent is invalid. This value is not used.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.NodeDeactivationIntent.Pause">
            <summary>
            <para>Indicates that the node should be paused. </para>
            </summary>
            <remarks>
            <para>When this intent is used, Service Fabric  prevents changes to the specified node. No new services are placed on the node, and services are not moved or shut down.</para>
            <para>The <see cref="F:System.Fabric.NodeDeactivationIntent.Pause"/> intent is useful when one or more services on a node encounter issues and that node has to be isolated so that further investigation can be performed. This investigation includes accessing the remote machine to investigate such activities as reviewing local logs, taking memory dumps, and observing other information. The purpose of this mode is to attempt to preserve the node so that additional debugging can be performed under the same conditions that existed when the error occurred.</para>
            <para>Note that specifying this mode does not guarantee that all changes to the node can be prevented. For example, services on the node might crash of their own volition after the intent to pause the node has been received. As another example, failures in another location in the cluster might cause a Secondary replica on the node to be promoted to the Primary replica.</para>
            </remarks>
        </member>
        <member name="F:System.Fabric.NodeDeactivationIntent.Restart">
            <summary>
            <para>Indicates that the intent is for the node to be restarted after a short period of time.</para>
            </summary>
            <remarks>
            <para>A replica might be shut down, for example, to perform a small OS configuration update or a Service Fabric code update. 
            In this mode, Service Fabric prevents new replicas from being placed on the node. Additionally, Service Fabric takes the following actions:
            Stateless services have replacement instances that were created in another location, and the instances on the deactivated node receive
            <see cref="M:System.Fabric.IStatelessServiceInstance.CloseAsync(System.Threading.CancellationToken)"/>.
            Volatile services have a replacement replica built in another location, and the replicas on the deactivated node receive an
            <see cref="M:System.Fabric.IStatefulServiceReplica.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)"/> 
            to <see cref="F:System.Fabric.ReplicaRole.None"/>, followed by <see cref="M:System.Fabric.IStatefulServiceReplica.CloseAsync(System.Threading.CancellationToken)"/>. 
            For persistent services on the node, new replicas are <b>not</b> to be built, because the intention is to restart this node 
            and to recover the persistent state after the restart Persistent stateful replicas, those with the <see cref="P:System.Fabric.Description.StatefulServiceDescription.HasPersistedState"/> 
            value set to true, receive a <see cref="M:System.Fabric.IStatefulServiceReplica.CloseAsync(System.Threading.CancellationToken)"/>.</para>
            <para>Note that for persistent replicas, at this time Service Fabric starts to track the <see cref="P:System.Fabric.Description.StatefulServiceDescription.ReplicaRestartWaitDuration"/> property for this replica.
            If the node stays deactivated and this duration expires, another replica is built in another location in the cluster.</para>
            </remarks>
        </member>
        <member name="F:System.Fabric.NodeDeactivationIntent.RemoveData">
            <summary>
            <para>Indicates that the node is being decommissioned and is not expected to return in a timely manner.</para>
            </summary>
            <remarks>
            <para>When Service Fabric receives this intent, it ensures that all the replicas that are up on the node are gracefully closed. 
            Replacement replicas should be built in another location, and the replicas on the node
            receive a <see cref="M:System.Fabric.IStatefulServiceReplica.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)"/> 
            to <see cref="F:System.Fabric.ReplicaRole.None"/>.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.NodeDeactivationStatus">
            <summary>
            <para>Specified the status for a node deactivation task.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.NodeDeactivationStatus.None">
            <summary>
            <para>No status is associated with the task.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.NodeDeactivationStatus.SafetyCheckInProgress">
            <summary>
            <para>Safety checks are in progress for the task.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.NodeDeactivationStatus.SafetyCheckComplete">
            <summary>
            <para>All the safety checks have been completed for the task.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.NodeDeactivationStatus.Completed">
            <summary>
            <para>The task is completed.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.NodeDeactivationTaskType">
            <summary>
            <para>Specifies the different types of node deactivation tasks.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.NodeDeactivationTaskType.Invalid">
            <summary>
            <para>Invalid task type.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.NodeDeactivationTaskType.Infrastructure">
            <summary>
            <para>Specifies the task created by the Azure MR.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.NodeDeactivationTaskType.Repair">
            <summary>
            <para>Specifies the task that was created by the Repair Manager service.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.NodeDeactivationTaskType.Client">
            <summary>
            <para>Specifies that the task was created by calling the public API.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.NodeId">
            <summary>
            <para>Class to encapsulate a node ID.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.NodeId.TryParse(System.String,System.Fabric.NodeId@)">
            <summary>
            <para>Converts the string representation of a node ID to its <see cref="T:System.Fabric.NodeId"/> object equivalent. A return value indicates whether the operation succeeded.</para>
            </summary>
            <param name="from">
            <para>A string containing the node ID to convert.</para>
            </param>
            <param name="parsedNodeId">
            <para>When this method returns, contains a new <see cref="T:System.Fabric.NodeId"/> object equivalent to the node ID contained in <paramref name="from"/>, 
            if the conversion succeeded, or <languageKeyword>null</languageKeyword> if the conversion failed. This parameter is passed uninitialized.</para>
            </param>
            <returns>
            <returns>A boolean indicating if the parse was successful</returns>
            </returns>
        </member>
        <member name="M:System.Fabric.NodeId.op_Equality(System.Fabric.NodeId,System.Fabric.NodeId)">
            <summary>
            <para>Determines whether two <see cref="T:System.Fabric.NodeId"/> objects have the same value.</para>
            </summary>
            <param name="value1">
            <para>A <see cref="T:System.Fabric.NodeId"/> object to compare with <paramref name="value2"/>.</para>
            </param>
            <param name="value2">
            <para>A <see cref="T:System.Fabric.NodeId"/> object to compare with <paramref name="value1"/>.</para>
            </param>
            <returns>
            <para>Returns a <see cref="T:System.Boolean"/> value that is <languageKeyword>true</languageKeyword> if the objects are equivalent;
            otherwise <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.NodeId.op_Inequality(System.Fabric.NodeId,System.Fabric.NodeId)">
            <summary>
            <para>Determines whether two <see cref="T:System.Fabric.NodeId"/> objects have different values.</para>
            </summary>
            <param name="value1">
            <para>A <see cref="T:System.Fabric.NodeId"/> object to compare with <paramref name="value2"/>.</para>
            </param>
            <param name="value2">
            <para>A <see cref="T:System.Fabric.NodeId"/> object to compare with <paramref name="value1"/>.</para>
            </param>
            <returns>
            <para>Returns a <see cref="T:System.Boolean"/> value that is <languageKeyword>true</languageKeyword> if the objects have different values; 
            otherwise <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.NodeId.GetHashCode">
            <summary>
            <para>Returns the hash code for this <see cref="T:System.Fabric.NodeId"/> object.</para>
            </summary>
            <returns>
            <para>A 32-bit signed integer hash code.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.NodeId.Equals(System.Object)">
            <summary>
            <para>Indicates whether this <see cref="T:System.Fabric.NodeId"/> object and the specified object are equal.</para>
            </summary>
            <param name="obj">
            <para>The object to compare with the current <see cref="T:System.Fabric.NodeId"/>.</para>
            </param>
            <returns>
            <para>Returns a <see cref="T:System.Boolean"/> value that is <languageKeyword>true</languageKeyword> 
            if the objects are the same type and represent the same value; otherwise <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.NodeId.ToString">
            <summary>
            <para>Creates and returns a string representation of the current node ID.</para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.String"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.NodeId.ConvertFromHexString(System.String)">
            <summary>
            Creates a new <code>WinfabricNodeId</code> from a hexadecimal string. The string must be of the format from ToString.
            </summary>
            <param name="hexValue">hexadecimal representation of the NodeId</param>
            <returns><code>WinFabricNodeId</code> generated from the string</returns>
            <exception cref="T:System.ArgumentException">thrown when the argument is an invalid hexadecimal representation</exception>
            <exception cref="T:System.FormatException">thrown when the argument is invalid hexadecimal</exception>
        </member>
        <member name="P:System.Fabric.NodeId.Low">
            <summary>
            <para>The low order component of the <see cref="T:System.Fabric.NodeId"/> object.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Numerics.BigInteger"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.NodeId.High">
            <summary>
            <para>The high order component of the <see cref="T:System.Fabric.NodeId"/> object.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Numerics.BigInteger"/>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.OperationData">
            <summary>
            <para>An <see cref="T:System.Fabric.OperationData"/> is used to transfer copy state changes and copy context between replicas.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.OperationData.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.OperationData"/> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.OperationData.#ctor(System.Collections.Generic.IEnumerable{System.ArraySegment{System.Byte}})">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.OperationData"/> class from the specified collection of 
            <see cref="T:System.ArraySegment`1"/> of bytes.</para>
            </summary>
            <param name="operationData">
            <para>The bytes from which to create 
            the <see cref="T:System.Fabric.OperationData"/> object.</para>
            </param>
        </member>
        <member name="M:System.Fabric.OperationData.#ctor(System.ArraySegment{System.Byte})">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.OperationData"/> class from the specified <see cref="T:System.ArraySegment`1"/> of bytes.</para>
            </summary>
            <param name="operationData">
            <para>The <see cref="T:System.ArraySegment`1"/> of bytes from which to create the <see cref="T:System.Fabric.OperationData"/> object.</para>
            </param>
        </member>
        <member name="M:System.Fabric.OperationData.#ctor(System.Collections.Generic.IEnumerable{System.Byte[]})">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.OperationData"/> class from the specified collection of byte arrays.</para>
            </summary>
            <param name="operationData">
            <para>The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of byte arrays from which to create the <see cref="T:System.Fabric.OperationData"/> object.</para>
            </param>
        </member>
        <member name="M:System.Fabric.OperationData.#ctor(System.Byte[])">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.OperationData"/> class from the specified byte array.</para>
            </summary>
            <param name="operationData">
            <para>The byte array from which to create the <see cref="T:System.Fabric.OperationData"/> object.</para>
            </param>
        </member>
        <member name="T:System.Fabric.OperationType">
            <summary>
            <para>Specifies the type of operation that is received via the copy or replication stream.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.OperationType.Invalid">
            <summary>
            <para>Specifies that the operation is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.OperationType.Normal">
            <summary>
            <para>Specifies that the operation is not part of an atomic group and should be processed as a standalone copy or replication operation.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.OperationType.EndOfStream">
            <summary>
              <para />
            </summary>
        </member>
        <member name="F:System.Fabric.OperationType.CreateAtomicGroup">
            <summary>
            <para>Specifies that a particular atomic group to be created.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.OperationType.AtomicGroupOperation">
            <summary>
            <para>Specifies that the operation is a part of an atomic group.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.OperationType.CommitAtomicGroup">
            <summary>
            <para>Specifies that a particular atomic group to be committed.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.OperationType.RollbackAtomicGroup">
            <summary>
            <para>Specifies that a particular atomic group should be rolled back.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.OperationType.HasAtomicGroupMask">
            <summary>
            <para>Specifies that the operation has an atomic group mask.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.PartitionAccessStatus">
            <summary>
            <para>Enumerates the access status of the partition. </para>
            </summary>
            <remarks>
            <para>
                <see cref="T:System.Fabric.PartitionAccessStatus"/> is used to check that a read or write operation is allowed. When service 
            replicas handle a client request, they should verify that the system is in a state that allows processing. By checking the 
            <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus"/> or <see cref="P:System.Fabric.IStatefulServicePartition.WriteStatus"/> as 
            appropriate, the replica can be notified of conditions that prevent correct operation. Note that write operations might still see an 
            exception from the replicator for one of these conditions, because the condition might change between the 
            <see cref="P:System.Fabric.IStatefulServicePartition.WriteStatus"/> check and the call 
            to <see cref="M:System.Fabric.IStateReplicator.ReplicateAsync(System.Fabric.OperationData,System.Threading.CancellationToken,System.Int64@)"/>. </para>
            </remarks>
        </member>
        <member name="F:System.Fabric.PartitionAccessStatus.Invalid">
            <summary>
            <para>Indicates that the read or write operation access status is not valid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.PartitionAccessStatus.Granted">
            <summary>
            <para>Indicates that the read or write operation access is granted. </para>
            </summary>
            <remarks>
              <para />
            </remarks>
        </member>
        <member name="F:System.Fabric.PartitionAccessStatus.ReconfigurationPending">
            <summary>
            <para>Indicates that the client should try again later, because a reconfiguration is in progress. After the reconfiguration is completed, a 
            new status is returned that gives further instructions. </para>
            </summary>
            <remarks>
              <para />
            </remarks>
        </member>
        <member name="F:System.Fabric.PartitionAccessStatus.NotPrimary">
            <summary>
            <para>Indicates that this client request was received by a replica that is not a Primary replica. The read or write operation cannot be 
            performed at this replica.  </para>
            </summary>
            <remarks>
              <para />
            </remarks>
        </member>
        <member name="F:System.Fabric.PartitionAccessStatus.NoWriteQuorum">
            <summary>
            <para>Indicates that no write quorum is available and, therefore, no write operation can be accepted. </para>
            </summary>
            <remarks>
              <para />
            </remarks>
        </member>
        <member name="T:System.Fabric.PropertyBatchOperationKind">
            <summary>
            <para>Specifies the kind of the BatchPropertyOperation.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.PropertyBatchOperationKind.Invalid">
            <summary>
            <para>All Service Fabric enumerations have a reserved “Invalid” flag.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.PropertyBatchOperationKind.Put">
            <summary>
            <para>Indicates that the <see cref="T:System.Fabric.PropertyBatchOperation"/> is of type <see cref="T:System.Fabric.PutPropertyOperation"/>.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.PropertyBatchOperationKind.Get">
            <summary>
            <para>Indicates that the <see cref="T:System.Fabric.PropertyBatchOperation"/> is of type <see cref="T:System.Fabric.GetPropertyOperation"/>.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.PropertyBatchOperationKind.CheckExists">
            <summary>
            <para>Indicates that the <see cref="T:System.Fabric.PropertyBatchOperation"/> is of type <see cref="T:System.Fabric.CheckExistsPropertyOperation"/>.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.PropertyBatchOperationKind.CheckSequence">
            <summary>
            <para>Indicates that the <see cref="T:System.Fabric.PropertyBatchOperation"/> is of type <see cref="T:System.Fabric.CheckSequencePropertyOperation"/>.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.PropertyBatchOperationKind.Delete">
            <summary>
            <para>Indicates that the <see cref="T:System.Fabric.PropertyBatchOperation"/> is of type <see cref="T:System.Fabric.DeletePropertyOperation"/>.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.PropertyBatchOperationKind.PutCustom">
            <summary>
            <para>Indicates that the <see cref="T:System.Fabric.PropertyBatchOperation"/> is of type <see cref="T:System.Fabric.PutCustomPropertyOperation"/>.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.PropertyBatchOperationKind.CheckValue">
            <summary>
            <para>Indicates that the <see cref="T:System.Fabric.PropertyBatchOperation"/> is of type <see cref="T:System.Fabric.CheckValuePropertyOperation"/>.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.PropertyBatchResult">
            <summary>
            <para>Specifies the batch that contains the results from the <see cref="M:System.Fabric.FabricClient.PropertyManagementClient.SubmitPropertyBatchAsync(System.Uri,System.Collections.Generic.ICollection{System.Fabric.PropertyBatchOperation},System.TimeSpan,System.Threading.CancellationToken)"/> method call.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.PropertyBatchResult.GetProperty(System.Int32)">
            <summary>
            <para>Gets the <see cref="T:System.Fabric.NamedProperty"/> object that is returned by the <see cref="T:System.Fabric.PropertyBatchOperation"/> in the specified index.</para>
            </summary>
            <param name="index">
            <para>An <see cref="T:System.Int32"/> that indicates the index in the batch that was submitted.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Fabric.NamedProperty"/>.</para>
            </returns>
            <remarks>
            <para>Note that whether <see cref="T:System.Fabric.NamedPropertyMetadata"/> is returned is dependent on the <languagekeyword>includeValues</languagekeyword> 
            argument to the <see cref="T:System.Fabric.GetPropertyOperation"/>. Returns an error when the operation has a different type than specified.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.PropertyBatchResult.FailedOperationIndex">
            <summary>
            <para>Gets the failed operation index. This parameter contains the index of the 
            unsuccessful <see cref="T:System.Fabric.PropertyBatchOperation"/> in the batch.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Int32"/>.</para>
            </value>
            <remarks>
            <para>Note that if none of the operations in the batch fail, this property will be set to -1.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.PropertyBatchResult.FailedOperationException">
            <summary>
            <para>Gets the failed operation exception. This parameter contains the exception thrown due to the first 
            unsuccessful <see cref="T:System.Fabric.PropertyBatchOperation"/> object in the batch.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Exception"/>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.PropertyEnumerationResult">
            <summary>
            <para>Represents an enumeration of properties that is returned from an operation by the property manager.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.PropertyEnumerationResult.HasMoreData">
            <summary>
            <para>Indicates that there are more remaining pages. 
            <see cref="M:System.Fabric.FabricClient.PropertyManagementClient.EnumeratePropertiesAsync(System.Uri,System.Boolean,System.Fabric.PropertyEnumerationResult,System.TimeSpan,System.Threading.CancellationToken)"/> should be called to get the next page.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Boolean"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.PropertyEnumerationResult.IsFinished">
            <summary>
            <para>Indicates that there are no more remaining pages.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Boolean"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.PropertyEnumerationResult.IsBestEffort">
            <summary>
            <para>Indicates whether the name under the given name has been modified during the enumeration. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Boolean"/>.</para>
            </value>
            <remarks>
            <para>If there was a modification, this property is true.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.PropertyEnumerationResult.IsConsistent">
            <summary>
            <para>Indicates whether the any name under the given name has been modified during the enumeration. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Boolean"/>.</para>
            </value>
            <remarks>
            <para>If there was a modification, this property is false.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.PropertyEnumerationResult.IsValid">
            <summary>
            <para>Indicates whether the enumeration result is valid. Do not use the result if it is not valid.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Boolean"/>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.PropertyTypeId">
            <summary>
            <para>Enumerates the possible property types.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.PropertyTypeId.Invalid">
            <summary>
            <para>Indicates that the type of the property is Invalid. </para>
            </summary>
        </member>
        <member name="F:System.Fabric.PropertyTypeId.Binary">
            <summary>
            <para>Indicates that the type of the property is Binary.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.PropertyTypeId.Int64">
            <summary>
            <para>Indicates that the type of the property is Int64. </para>
            </summary>
        </member>
        <member name="F:System.Fabric.PropertyTypeId.Double">
            <summary>
            <para>Indicates that the type of the property is Double. </para>
            </summary>
        </member>
        <member name="F:System.Fabric.PropertyTypeId.String">
            <summary>
            <para>Indicates that the type of the property is String. </para>
            </summary>
        </member>
        <member name="F:System.Fabric.PropertyTypeId.Guid">
            <summary>
            <para>Indicates that the type of the property is GUID. </para>
            </summary>
        </member>
        <member name="T:System.Fabric.PutCustomPropertyOperation">
            <summary>
            <para>Represents the specified property under the specified name and sets the custom type information for custom interpretation of the property value.</para>
            </summary>
            <remarks>
            The custom type is information that is not processed by Service Fabric, 
            but can be used by user to serialize/deserialize custom type objects.</remarks>
        </member>
        <member name="M:System.Fabric.PutCustomPropertyOperation.#ctor(System.String,System.Byte[],System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.PutCustomPropertyOperation"/> class with the specified property name 
            and byte[] value, and sets the custom type accordingly.</para>
            </summary>
            <param name="propertyName">
            <para>The name of the property.</para>
            </param>
            <param name="value">
            <para>The value for the property.</para>
            </param>
            <param name="customTypeId">
            <para>The user defined custom type.</para>
            </param>
        </member>
        <member name="M:System.Fabric.PutCustomPropertyOperation.#ctor(System.String,System.Int64,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.PutCustomPropertyOperation"/> class with the specified property name 
            and Int64 value, and sets the custom type accordingly.</para>
            </summary>
            <param name="propertyName">
            <para>The name of the property.</para>
            </param>
            <param name="value">
            <para>The value for the property.</para>
            </param>
            <param name="customTypeId">
            <para>The user defined custom type.</para>
            </param>
        </member>
        <member name="M:System.Fabric.PutCustomPropertyOperation.#ctor(System.String,System.Guid,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.PutCustomPropertyOperation"/> class with the specified property name and GUID 
            value, and sets the custom type accordingly.</para>
            </summary>
            <param name="propertyName">
            <para>The name of the property.</para>
            </param>
            <param name="value">
            <para>The value for the property.</para>
            </param>
            <param name="customTypeId">
            <para>The user defined custom type.</para>
            </param>
        </member>
        <member name="M:System.Fabric.PutCustomPropertyOperation.#ctor(System.String,System.String,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.PutCustomPropertyOperation"/> class with the specified property name and 
            string value, and sets the custom type accordingly.</para>
            </summary>
            <param name="propertyName">
            <para>The name of the property.</para>
            </param>
            <param name="value">
            <para>The value for the property.</para>
            </param>
            <param name="customTypeId">
            <para>The user defined custom type.</para>
            </param>
        </member>
        <member name="M:System.Fabric.PutCustomPropertyOperation.#ctor(System.String,System.Double,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.PutCustomPropertyOperation"/> class with the specified property name and 
            double value, and sets the custom type accordingly.</para>
            </summary>
            <param name="propertyName">
            <para>The name of the property.</para>
            </param>
            <param name="value">
            <para>The value for the property.</para>
            </param>
            <param name="customTypeId">
            <para>The user defined custom type.</para>
            </param>
        </member>
        <member name="P:System.Fabric.PutCustomPropertyOperation.PropertyValue">
            <summary>
            <para>Gets the property value.</para>
            </summary>
            <value>
            <para>The property value.</para>
            </value>
        </member>
        <member name="P:System.Fabric.PutCustomPropertyOperation.PropertyType">
            <summary>
            <para>Gets the property type.</para>
            </summary>
            <value>
            <para>The property type.</para>
            </value>
        </member>
        <member name="P:System.Fabric.PutCustomPropertyOperation.CustomTypeId">
            <summary>
            <para>Gets the custom type information. This information can be used by users to serialize/de-serialize custom type objects.</para>
            </summary>
            <value>
            <para>The custom type information.</para>
            </value>
        </member>
        <member name="T:System.Fabric.PutPropertyOperation">
            <summary>
            <para>Puts the specified property under the specified name.</para>
            </summary>
            <remarks>
            <para>Note that if one <see cref="T:System.Fabric.PropertyBatchOperation"/> fails, the entire batch fails and is not committed.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.PutPropertyOperation.#ctor(System.String,System.Byte[])">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.PutPropertyOperation"/> class with the specified property name and byte[] value.</para>
            </summary>
            <param name="propertyName">
            <para>A <see cref="T:System.String"/> that defines the name of the property.</para>
            </param>
            <param name="value">
            <para>A <see cref="T:System.Byte"/> array that defines the value for the property.</para>
            </param>
        </member>
        <member name="M:System.Fabric.PutPropertyOperation.#ctor(System.String,System.Int64)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.PutPropertyOperation"/> class with the specified property name and Int64 value.</para>
            </summary>
            <param name="propertyName">
            <para>A <see cref="T:System.String"/> that defines the name of the property.</para>
            </param>
            <param name="value">
            <para>An <see cref="T:System.Int64"/> that defines the value for the property.</para>
            </param>
        </member>
        <member name="M:System.Fabric.PutPropertyOperation.#ctor(System.String,System.Guid)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.PutPropertyOperation"/> class with the specified property name and GUID value.</para>
            </summary>
            <param name="propertyName">
            <para>A <see cref="T:System.String"/> that defines the name of the property.</para>
            </param>
            <param name="value">
            <para>A <see cref="T:System.Guid"/> that defines the value for the property.</para>
            </param>
        </member>
        <member name="M:System.Fabric.PutPropertyOperation.#ctor(System.String,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.PutPropertyOperation"/> class with the specified property name and string value.</para>
            </summary>
            <param name="propertyName">
            <para>A <see cref="T:System.String"/> that defines the name of the property.</para>
            </param>
            <param name="value">
            <para>A <see cref="T:System.String"/> that defines the value for the property.</para>
            </param>
        </member>
        <member name="M:System.Fabric.PutPropertyOperation.#ctor(System.String,System.Double)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.PutPropertyOperation"/> class with the specified property name and double value.</para>
            </summary>
            <param name="propertyName">
            <para>A <see cref="T:System.String"/> that defines the name of the property.</para>
            </param>
            <param name="value">
            <para>A <see cref="T:System.Double"/> that defines the value for the property.</para>
            </param>
        </member>
        <member name="P:System.Fabric.PutPropertyOperation.PropertyValue">
            <summary>
            <para>Gets the property value.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Object"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.PutPropertyOperation.PropertyType">
            <summary>
            <para>Gets the property type.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.PropertyTypeId"/>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.TestCommandStateFilter">
            <summary>
            This is used when calling GetTestCommandStatusListAsync(), and indicates the filter to use on TestCommandState's.    Multiple filter values may be specified.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.TestCommandStateFilter.Default">
            <summary>
            The default filter.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.TestCommandStateFilter.All">
            <summary>
            Indicates not to do any filtering on TestCommandState.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.TestCommandStateFilter.Running">
            <summary>
            This filter selects Running test commands.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.TestCommandStateFilter.RollingBack">
            <summary>
            This filter selects RollingBack test commands.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.TestCommandStateFilter.CompletedSuccessfully">
            <summary>
            This filter selects Completed test commands.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.TestCommandStateFilter.Failed">
            <summary>
            This filter selects Failed test commands.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.TestCommandStateFilter.Cancelled">
            <summary>
            This filter selects Cancelled test commands.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.TestCommandStateFilter.ForceCancelled">
            <summary>
            This filter selects ForceCancelled test commands.
            </summary>
        </member>
        <member name="T:System.Fabric.Query.TestCommandTypeFilter">
            <summary>
            This is used when calling GetTestCommandStatusListAsync(), and indicates the filter to use on TestCommandType's.    Multiple filter values may be specified.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.TestCommandTypeFilter.Default">
            <summary>
            The default filter.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.TestCommandTypeFilter.All">
            <summary>
            Indicates to not do any filtering on TestCommandType.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.TestCommandTypeFilter.PartitionDataLoss">
            <summary>
            Indicates to select test commands of TestCommandType PartitionDataLoss.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.TestCommandTypeFilter.PartitionQuorumLoss">
            <summary>
            Indicates to select test commands of TestCommandType PartitionQuorumLoss.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.TestCommandTypeFilter.PartitionRestart">
            <summary>
            Indicates to select test commands of TestCommandType PartitionRestart.
            </summary>
        </member>
        <member name="T:System.Fabric.Query.ApplicationList">
            <summary>
            <para>Represents the list of <see cref="T:System.Fabric.Query.Application"/> retrieved by calling 
            <see cref="M:System.Fabric.FabricClient.QueryClient.GetApplicationListAsync(System.Uri)"/>.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.PagedList`1">
            <summary>
            <para>
            Represents a paged list that contains a list of items and a continuation token.
            </para>
            </summary>
            <typeparam name="T">
            <para>The type of the items returned by query.</para>
            </typeparam>
            <remarks>
            <para>The paged list is obtained from queries that have more results than can fit a message. 
            The next results can be obtained by executing the same query with the previous continuation token.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.#ctor">
            <summary>
            <para>
            Instantiates an empty PagedList class.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            <para>
            Instantiates a PagedList class with the items of another list.
            </para>
            </summary>
            <param name="list">
            <para>The list with items used to create the paged list.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.IndexOf(`0)">
            <summary>
            <para>
            Gets the index in this list for the specified item.
            </para>
            </summary>
            <param name="item">
            <para>The item.</para>
            </param>
            <returns>
            <para>The index in this list for the specified item. </para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.Insert(System.Int32,`0)">
            <summary>
            <para>
            Inserts an item into this list at the specified index.
            </para>
            </summary>
            <param name="index">
            <para>The index where the item will be inserted.</para>
            </param>
            <param name="item">
            <para>The item to insert.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.RemoveAt(System.Int32)">
            <summary>
            <para>
            Removes the item at the specified index from this list. 
            </para>
            </summary>
            <param name="index">
            <para>The index where the item will be removed.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.Add(`0)">
            <summary>
            <para>
            Adds an item to this list.
            </para>
            </summary>
            <param name="item">
            <para>The item to add to the list.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.Clear">
            <summary>
            <para>
            Removes all items from this list.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.Contains(`0)">
            <summary>
            <para>
            Specifies whether the list contains a specific item.
            </para>
            </summary>
            <param name="item">
            <para>The item to search.</para>
            </param>
            <returns>
            <para>true if the list contains a specific item; otherwise, false.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.CopyTo(`0[],System.Int32)">
            <summary>
            <para>
            Copies items from this list to the specified array starting at the specified index.
            </para>
            </summary>
            <param name="array">
            <para>The array.</para>
            </param>
            <param name="arrayIndex">
            <para>The array index.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.Remove(`0)">
            <summary>
            <para>
            Removes the specified item from this list. 
            </para>
            </summary>
            <param name="item">
            <para>The item to be removed.</para>
            </param>
            <returns>
            <para>true if the item is removed; otherwise, false.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.GetEnumerator">
            <summary>
            <para>
            Gets an enumerator to items in this list. 
            </para>
            </summary>
            <returns>
            <para>The enumerator to items in this list. </para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.PagedList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <para>
            Gets an enumerator to items in this list. 
            </para>
            </summary>
            <returns>
            <para>The enumerator to items in this list. </para>
            </returns>
        </member>
        <member name="P:System.Fabric.Query.PagedList`1.Item(System.Int32)">
            <summary>
            <para>
            Gets the item at the specified index.
            </para>
            </summary>
            <param name="index">
            <para>The index.</para>
            </param>
            <returns>
            <para>The item at the specified index.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Query.PagedList`1.ContinuationToken">
            <summary>
            <para>
            The continuation token. Can be used by queries to get next pages of results.
            </para>
            </summary>
            <value>
            <para>Gets or sets the continuation token.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.PagedList`1.Count">
            <summary>
            <para>
            Gets or sets the number of items in the list.
            </para>
            </summary>
            <value>
            <para>The number of items in the list.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.PagedList`1.IsReadOnly">
            <summary>
            <para>
            Gets or sets a flag that indicated whether the list can be modified.
            </para>
            </summary>
            <value>
            <para>Flag indicating whether the list can be modified.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Query.ApplicationList.#ctor">
            <summary>
            <para> Creates an application list. </para>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.Application">
            <summary>
            <para>Describes an application instance.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.Application.ApplicationName">
            <summary>
            <para>Gets the name of the application.</para>
            </summary>
            <value>
            <para>The name of the application.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Application.ApplicationTypeName">
            <summary>
            <para>Gets the application type name as specified in the Application Manifest.</para>
            </summary>
            <value>
            <para>The application type name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Application.ApplicationTypeVersion">
            <summary>
            <para>Gets the application type version as specified in the Application Manifest.</para>
            </summary>
            <value>
            <para>The application type version.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Application.ApplicationStatus">
            <summary>
            <para>Gets the status of the application.</para>
            </summary>
            <value>
            <para>The status of the application.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Application.HealthState">
            <summary>
            <para>Gets the aggregated health state of the application.</para>
            </summary>
            <value>
            <para>The aggregated health of the application.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Application.ApplicationParameters">
            <summary>
            <para>Gets the parameters of the application.</para>
            </summary>
            <value>
            <para>The parameters of the application.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Application.UpgradeTypeVersion">
            <summary>
            <para>Deprecated: Do not use. See <see cref="T:System.Fabric.ApplicationUpgradeProgress"/> instead.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Application.UpgradeParameters">
            <summary>
            <para>Deprecated: Do not use. See <see cref="T:System.Fabric.ApplicationUpgradeProgress"/> instead.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.Description.ApplicationParameterList"/>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.ApplicationStatus">
            <summary>
            <para>Specifies the status of the application.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ApplicationStatus.Invalid">
            <summary>
            <para>Invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ApplicationStatus.Ready">
            <summary>
            <para>Ready.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ApplicationStatus.Upgrading">
            <summary>
            <para>Currently being upgraded.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ApplicationStatus.Creating">
            <summary>
            Currently being created.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ApplicationStatus.Deleting">
            <summary>
            Currently being deleted.
            </summary>
        </member>
        <member name="T:System.Fabric.Query.ApplicationTypeList">
            <summary>
            <para>Represents the list of the <see cref="T:System.Fabric.Query.ApplicationType"/> retrieved by calling 
            <see cref="M:System.Fabric.FabricClient.QueryClient.GetApplicationTypeListAsync(System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ApplicationTypeList.IndexOf(System.Fabric.Query.ApplicationType)">
            <summary>
            <para>Returns the index of the specified item in this list.</para>
            </summary>
            <param name="item">
            <para>The specified item in the list.</para>
            </param>
            <returns>
            <para>The index of the specified item in this list.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ApplicationTypeList.Insert(System.Int32,System.Fabric.Query.ApplicationType)">
            <summary>
            <para>Inserts an item into this list at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index at which item should be inserted.</para>
            </param>
            <param name="item">
            <para>The object to insert into the list.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.ApplicationTypeList.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the item at the specified index from the list.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the item to remove.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.ApplicationTypeList.Add(System.Fabric.Query.ApplicationType)">
            <summary>
            <para>Adds an item to this list.</para>
            </summary>
            <param name="item">
            <para>The item to add in the list.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.ApplicationTypeList.Clear">
            <summary>
            <para>Removes all items from this list.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ApplicationTypeList.Contains(System.Fabric.Query.ApplicationType)">
            <summary>
            <para>Returns true if the specified item is in the list.</para>
            </summary>
            <param name="item">
            <para>The specified item in the list.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the specified item is in the list; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ApplicationTypeList.CopyTo(System.Fabric.Query.ApplicationType[],System.Int32)">
            <summary>
            <para>Copies items from this list to the specified array starting at the specified index.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional array that is the destination of elements copied from <see cref="T:System.Fabric.Query.ApplicationTypeList"/>. The 
            array must have zero-based indexing.</para>
            </param>
            <param name="arrayIndex">
            <para>The zero-based index in array at which copying begins.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.ApplicationTypeList.Remove(System.Fabric.Query.ApplicationType)">
            <summary>
            <para>Removes the specified item from the list.</para>
            </summary>
            <param name="item">
            <para>The object to remove from the list.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the item was successfully removed from the list; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ApplicationTypeList.GetEnumerator">
            <summary>
            <para>Returns an enumerator to items in this list.</para>
            </summary>
            <returns>
            <para>An enumerator to items in this list.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ApplicationTypeList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <para>Gets an enumerator to items in this list.</para>
            </summary>
            <returns>
            <para>An enumerator to items in this list.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Query.ApplicationTypeList.Item(System.Int32)">
            <summary>
            <para>Gets the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The specified index.</para>
            </param>
            <returns>
            <para>The item at the specified index.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Query.ApplicationTypeList.Count">
            <summary>
            <para>Gets the number of items in this list.</para>
            </summary>
            <value>
            <para>The number of items in this list.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ApplicationTypeList.IsReadOnly">
            <summary>
            <para>Gets or sets a value whether the list can only be modified if this property is false.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the list can only be modified; otherwise <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.ApplicationType">
            <summary>
            <para>Represents an application type.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.ApplicationType.ApplicationTypeName">
            <summary>
            <para>Gets the application type name.</para>
            </summary>
            <value>
            <para>The application type name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ApplicationType.ApplicationTypeVersion">
            <summary>
            <para>Gets the application type version.</para>
            </summary>
            <value>
            <para>The application type version.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ApplicationType.DefaultParameters">
            <summary>
            <para>Gets the default application parameters applied to this instance of the application.</para>
            </summary>
            <value>
            <para>The default application parameters applied to this instance of the application.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.ClusterLoadInformation">
            <summary>
            <para>Represents the cluster load information.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ClusterLoadInformation.ToString">
            <summary>
            <para>
            Pretty print out details of <see cref="T:System.Fabric.Query.ClusterLoadInformation"/>.
            </para>
            </summary>
            <returns>A string representation of the <see cref="T:System.Fabric.Query.ClusterLoadInformation"/>.</returns>
            <example>
            LastBalancingStartTimeUtc : 11/9/2015 8:40:35 PM
            LastBalancingEndTimeUtc   : 11/9/2015 8:40:35 PM
            LoadMetricInformation     :
                LoadMetricName        : Metric1
                IsBalancedBefore      : True
                IsBalancedAfter       : True
                DeviationBefore       : 2
                DeviationAfter        : 2
                BalancingThreshold    : 1
                Action    : NoActionNeeded
                ActivityThreshold     : 3
                ClusterCapacity       : 100
                ClusterLoad           : 1
                ClusterRemainingCapacity : 0
                NodeBufferPercentage  : 0
                ClusterBufferedCapacity : 0
                ClusterRemainingBufferedCapacity : 0
                ClusterCapacityViolation : True
                MinNodeLoadValue      : 0
                MinNodeLoadNodeId     : 1ca9521d70301383417536df0c96f671
                MaxNodeLoadValue      : 1
                MaxNodeLoadNodeId     : cf68563e16a44f808e86197a9cf83de5
            </example>
        </member>
        <member name="P:System.Fabric.Query.ClusterLoadInformation.LastBalancingStartTimeUtc">
            <summary>
            <para>Gets the starting time (in UTC) of last resource balancing run.</para>
            </summary>
            <value>
            <para>The starting time of last resource balancing run.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ClusterLoadInformation.LastBalancingEndTimeUtc">
            <summary>
            <para>Gets the end time (in UTC) of last resource balancing run.</para>
            </summary>
            <value>
            <para>The end time of last resource balancing run.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ClusterLoadInformation.LoadMetricInformationList">
            <summary>
            <para>Gets a list of load metrics information object. Each entry is for a certain metrics.</para>
            </summary>
            <value>
            <para>A list of load metrics information object.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.NodeLoadInformation">
            <summary>
            <para>Represents the data structure that holds a summary of all metrics and their load on a certain node.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.NodeLoadInformation.NodeName">
            <summary>
            <para>Gets the name of the node.</para>
            </summary>
            <value>
            <para>The name of the node.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.NodeLoadInformation.NodeLoadMetricInformationList">
            <summary>
            <para>Gets the list that contains metrics and their load information on a node.</para>
            </summary>
            <value>
            <para>The list that contains metrics and their load information on a node.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.PartitionLoadInformation">
            <summary>
            <para>Represents the partition load information.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.PartitionLoadInformation.#ctor">
            <summary>
            <para>Initializes an instance of the <see cref="T:System.Fabric.Query.PartitionLoadInformation"/> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.PartitionLoadInformation.PartitionId">
            <summary>
            <para>Gets the partition ID. This command can be used as piping purpose.</para>
            </summary>
            <value>
            <para>The partition ID.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.PartitionLoadInformation.PrimaryLoadMetricReports">
            <summary>
            <para>Gets the list of load reports for primary role of this partition.</para>
            </summary>
            <value>
            <para>The list of load reports for primary role of this partition.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.PartitionLoadInformation.SecondaryLoadMetricReports">
            <summary>
            <para>Gets the list of load reports for secondary role of this partition.</para>
            </summary>
            <value>
            <para>The list of load reports for secondary role of this partition.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.ReplicaLoadInformation">
            <summary>
            <para>Represents the data structure that contains metric load information for a replica.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ReplicaLoadInformation.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Query.ReplicaLoadInformation"/> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.ReplicaLoadInformation.PartitionId">
            <summary>
            <para>Gets the partition Identifier.</para>
            </summary>
            <value>
            <para>The partition Identifier.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ReplicaLoadInformation.ReplicaOrInstanceId">
            <summary>
            <para>Gets the replica Identifer (stateful service), or instanceId (stateless service).</para>
            </summary>
            <value>
            <para>The replica Identifier (stateful service), or instanceId (stateless service).</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ReplicaLoadInformation.LoadMetricReports">
            <summary>
            <para>Gets a list of metric and their load for a replica.</para>
            </summary>
            <value>
            <para>The list of metric and their load for a replica.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.UnplacedReplicaInformation">
            <summary>
            <para>
            Contains information for an unplaced replica.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.UnplacedReplicaInformation.#ctor(System.String,System.Guid,System.Collections.Generic.IList{System.String})">
            <summary>
            <para> 
            Constructor that creates an object of UnplacedReplicaInformation.
            </para>
            </summary>
            <param name="serviceName">
            <para>The name of the service whose replica could not be placed. </para>
            </param>
            <param name="partitionId">
            <para>The Partition Id (as a Guid) of the service whose replica could not be placed. </para>
            </param>
            <param name="reasonsList">
            <para>The reasons (as a list of strings) why a service's replicas could not be placed. </para>
            </param>
        </member>
        <member name="P:System.Fabric.Query.UnplacedReplicaInformation.ServiceName">
            <summary>
            <para> 
            Gets the name of the service whose replica could not be placed.
            </para>
            </summary>
            <value>
            <para> The string to which ServiceName will be set. </para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.UnplacedReplicaInformation.PartitionId">
            <summary>
            <para> 
            Gets the Partition Id (as a Guid) of the service whose replica could not be placed.
            </para>
            </summary>
            <value>
            <para> The Guid to which PartitionId will be set. </para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.UnplacedReplicaInformation.UnplacedReplicaReasons">
            <summary>
            <para> 
            Gets the reasons (as a list of strings) why a service's replicas could not be placed.
            </para>
            </summary>
            <value>
            <para>The reasons why service replicas could not be placed.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.CodePackageEntryPoint">
            <summary>
            <para>Represents a code package entry point.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.CodePackageEntryPoint.EntryPointLocation">
            <summary>
            <para>Gets the entry point location.</para>
            </summary>
            <value>
            <para>The entry point location.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.CodePackageEntryPoint.ProcessId">
            <summary>
            <para>Gets the process ID.</para>
            </summary>
            <value>
            <para>The process ID.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.CodePackageEntryPoint.RunAsUserName">
            <summary>
            <para>Gets the run as user name.</para>
            </summary>
            <value>
            <para>The run as user name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.CodePackageEntryPoint.Statistics">
            <summary>
            <para>Gets the statistics.</para>
            </summary>
            <value>
            <para>The statistics.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.CodePackageEntryPoint.EntryPointStatus">
            <summary>
            <para>Gets the entry point status.</para>
            </summary>
            <value>
            <para>The entry point status.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.CodePackageEntryPoint.NextActivationUtc">
            <summary>
            <para>Gets the next activation UTC.</para>
            </summary>
            <value>
            <para>The next activation UTC.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.CodePackageEntryPoint.CodePackageInstanceId">
            <summary>
            <para>
            Gets the code package instance id.
            </para>
            </summary>
            <value>
            <para>The code package instance id.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.CodePackageEntryPointStatistics">
            <summary>
            <para>Represents a code package entry point statistic.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.CodePackageEntryPointStatistics.LastExitCode">
            <summary>
            <para>Gets the exit code.</para>
            </summary>
            <value>
            <para>The last exit code.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.CodePackageEntryPointStatistics.LastActivationUtc">
            <summary>
            <para>Gets the last activation time in UTC.</para>
            </summary>
            <value>
            <para>The last activation time in UTC.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.CodePackageEntryPointStatistics.LastExitUtc">
            <summary>
            <para>Gets the last exit time in UTC.</para>
            </summary>
            <value>
            <para>The last exit time in UTC.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.CodePackageEntryPointStatistics.LastSuccessfulActivationUtc">
            <summary>
            <para>Gets the last successful activation time in UTC.</para>
            </summary>
            <value>
            <para>The last successful activation time in UTC.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.CodePackageEntryPointStatistics.LastSuccessfulExitUtc">
            <summary>
            <para>Gets the last successful exit time in UTC.</para>
            </summary>
            <value>
            <para>The last successful exit time in UTC.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.CodePackageEntryPointStatistics.ActivationCount">
            <summary>
            <para>Gets the activation count.</para>
            </summary>
            <value>
            <para>The activation count.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.CodePackageEntryPointStatistics.ActivationFailureCount">
            <summary>
            <para>Gets the activation failure count.</para>
            </summary>
            <value>
            <para>The activation failure count.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.CodePackageEntryPointStatistics.ContinuousActivationFailureCount">
            <summary>
            <para>Gets the continuous activation failure count.</para>
            </summary>
            <value>
            <para>The continuous activation failure count.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.CodePackageEntryPointStatistics.ExitCount">
            <summary>
            <para>Gets the exit count.</para>
            </summary>
            <value>
            <para>The exit count.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.CodePackageEntryPointStatistics.ExitFailureCount">
            <summary>
            <para>Gets the exit failure count.</para>
            </summary>
            <value>
            <para>The exit failure count.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.CodePackageEntryPointStatistics.ContinuousExitFailureCount">
            <summary>
            <para>Gets the continuous exit failure count.</para>
            </summary>
            <value>
            <para>The continuous exit failure count.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.DeployedApplicationList">
            <summary>
            <para>Represents the list of <see cref="T:System.Fabric.Query.DeployedApplication"/> objects.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.DeployedApplicationList.IndexOf(System.Fabric.Query.DeployedApplication)">
            <summary>
            <para>Gets the index of the specified item in this list.</para>
            </summary>
            <param name="item">
            <para>The specific item.</para>
            </param>
            <returns>
            <para>The index of the specified item in this list.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedApplicationList.Insert(System.Int32,System.Fabric.Query.DeployedApplication)">
            <summary>
            <para>Inserts the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The index where the item will be inserted.</para>
            </param>
            <param name="item">
            <para>The item to insert.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.DeployedApplicationList.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the item at the specified index</para>
            </summary>
            <param name="index">
            <para>The index of the item.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.DeployedApplicationList.Add(System.Fabric.Query.DeployedApplication)">
            <summary>
            <para>Adds the specified item to the list</para>
            </summary>
            <param name="item">
            <para>The item to add.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.DeployedApplicationList.Clear">
            <summary>
            <para>Removes all items from the list</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.DeployedApplicationList.Contains(System.Fabric.Query.DeployedApplication)">
            <summary>
            <para>Indicates a flag that specifies whether the list contains a specific item.</para>
            </summary>
            <param name="item">
            <para>The item to search.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the list contains a specific item; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedApplicationList.CopyTo(System.Fabric.Query.DeployedApplication[],System.Int32)">
            <summary>
            <para>Copies items from the list to the specified array at the specified starting index.</para>
            </summary>
            <param name="array">
            <para>The array of index where the items will be copied to.</para>
            </param>
            <param name="arrayIndex">
            <para>The array index.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.DeployedApplicationList.Remove(System.Fabric.Query.DeployedApplication)">
            <summary>
            <para>Remove the specified item from this list</para>
            </summary>
            <param name="item">
            <para>The item to remove.</para>
            </param>
            <returns>
            <para>The list with removed item.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedApplicationList.GetEnumerator">
            <summary>
            <para>Gets an enumerator to items in this list.</para>
            </summary>
            <returns>
            <para>The item enumerator.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedApplicationList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <para>Gets an enumerator for items in this list.</para>
            </summary>
            <returns>
            <para>The enumerator for items in this list.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Query.DeployedApplicationList.Item(System.Int32)">
            <summary>
            <para>Gets the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The item location.</para>
            </param>
            <returns>
            <para>The item at the specified index.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Query.DeployedApplicationList.Count">
            <summary>
            <para>Gets or sets the number of items in this list.</para>
            </summary>
            <value>
            <para>The number of items in this list.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedApplicationList.IsReadOnly">
            <summary>
            <para>Gets or sets a flag that indicates whether the list can be modified.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the list can be modified; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.DeployedApplication">
            <summary>
            <para>Describes an instance of an application’s service host running on a Service Fabric Node.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.DeployedApplication.ApplicationName">
            <summary>
            <para>Gets the application name.</para>
            </summary>
            <value>
            <para>The application name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedApplication.ApplicationTypeName">
            <summary>
            <para>Gets the application type name.</para>
            </summary>
            <value>
            <para>The application type name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedApplication.DeployedApplicationStatus">
            <summary>
            <para>Gets the status of the deployed application instance.</para>
            </summary>
            <value>
            <para>The status of the deployed application instance.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedApplication.WorkDirectory">
            <summary>
            <para>Gets the work directory path used by the deployed application instance.</para>
            </summary>
            <value>
            <para>The work directory path used by the deployed application instance.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedApplication.LogDirectory">
            <summary>
            <para>Gets the log directory path used by the deployed application instance.</para>
            </summary>
            <value>
            <para>The log directory path used by the deployed application instance.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedApplication.TempDirectory">
            <summary>
            <para>Gets the temp directory path used by the deployed application instance.</para>
            </summary>
            <value>
            <para>The temp directory path used by the deployed application instance.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.DeployedCodePackageList">
            <summary>
            <para>Represents this list that can be modified only if this property is false.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.DeployedCodePackageList.IndexOf(System.Fabric.Query.DeployedCodePackage)">
            <summary>
            <para>Gets the index of the specified item in this list.</para>
            </summary>
            <param name="item">
            <para>The specified index of the item.</para>
            </param>
            <returns>
            <para>The index of the specified item in this list.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedCodePackageList.Insert(System.Int32,System.Fabric.Query.DeployedCodePackage)">
            <summary>
            <para>Inserts the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index at which item should be inserted.</para>
            </param>
            <param name="item">
            <para>The object to insert into the list.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.DeployedCodePackageList.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the item to remove.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.DeployedCodePackageList.Add(System.Fabric.Query.DeployedCodePackage)">
            <summary>
            <para>Adds the specified item to the list.</para>
            </summary>
            <param name="item">
            <para>The item to be added.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.DeployedCodePackageList.Clear">
            <summary>
            <para>Removes all items from the list.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.DeployedCodePackageList.Contains(System.Fabric.Query.DeployedCodePackage)">
            <summary>
            <para>Returns true if the specified item is in the list.</para>
            </summary>
            <param name="item">
            <para>The specified item that contained in the list.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the list contains the specified item; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedCodePackageList.CopyTo(System.Fabric.Query.DeployedCodePackage[],System.Int32)">
            <summary>
            <para>Copies items from the list to the specified array at the specified starting index.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional array.</para>
            </param>
            <param name="arrayIndex">
            <para>The index in the destination array to start copying.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.DeployedCodePackageList.Remove(System.Fabric.Query.DeployedCodePackage)">
            <summary>
            <para>Removes the specified item from this list.</para>
            </summary>
            <param name="item">
            <para>The object to remove from the list.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the item was successfully removed from the list; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedCodePackageList.GetEnumerator">
            <summary>
            <para>Gets an enumerator to items in this list.</para>
            </summary>
            <returns>
            <para>An enumerator to items in this list </para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedCodePackageList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <para>Gets an enumerator for items in this list.</para>
            </summary>
            <returns>
            <para>An enumerator for items in this list.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Query.DeployedCodePackageList.Item(System.Int32)">
            <summary>
            <para>Gets the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The specified index of the item.</para>
            </param>
            <returns>
            <para>The deployed item at the specified index.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Query.DeployedCodePackageList.Count">
            <summary>
            <para>Gets or sets a value that indicates the number of items in this list.</para>
            </summary>
            <value>
            <para>The number of items in this list.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedCodePackageList.IsReadOnly">
            <summary>
            <para>Gets or sets a value that indicates whether this list can be modified only if this property is false.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the list can only be modified; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.DeployedCodePackage">
            <summary>
            <para>Represents a deployed code package.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.DeployedCodePackage.CodePackageName">
            <summary>
            <para>Gets the code package name.</para>
            </summary>
            <value>
            <para>The code package name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedCodePackage.CodePackageVersion">
            <summary>
            <para>Gets the code package version.</para>
            </summary>
            <value>
            <para>The code package version.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedCodePackage.SetupEntryPoint">
            <summary>
            <para>Gets the setup entry point.</para>
            </summary>
            <value>
            <para>The setup entry point.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedCodePackage.ServiceManifestName">
            <summary>
            <para>Gets the service manifest name.</para>
            </summary>
            <value>
            <para>The service manifest name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedCodePackage.RunFrequencyInterval">
            <summary>
            <para>Gets the run frequency interval.</para>
            </summary>
            <value>
            <para>The run frequency interval.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedCodePackage.DeployedCodePackageStatus">
            <summary>
            <para>Gets the code package status.</para>
            </summary>
            <value>
            <para>The status of the deployed code package.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedCodePackage.EntryPoint">
            <summary>
            <para>Gets the entry point.</para>
            </summary>
            <value>
            <para>The entry point.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.DeployedServicePackageList">
            <summary>
            <para>Represents a list of <see cref="T:System.Fabric.Query.DeployedServicePackage"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.DeployedServicePackageList.IndexOf(System.Fabric.Query.DeployedServicePackage)">
            <summary>
            <para>Gets the index of the specified item in this list</para>
            </summary>
            <param name="item">
            <para>The item.</para>
            </param>
            <returns>
            <para>The index of the specified item in this list.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedServicePackageList.Insert(System.Int32,System.Fabric.Query.DeployedServicePackage)">
            <summary>
            <para>Inserts the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index at which <paramref name="item" /> should be inserted.</para>
            </param>
            <param name="item">
            <para>The object to insert.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.DeployedServicePackageList.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the item to remove.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.DeployedServicePackageList.Add(System.Fabric.Query.DeployedServicePackage)">
            <summary>
            <para>Adds the specified item to the list.</para>
            </summary>
            <param name="item">
            <para>The item to add.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.DeployedServicePackageList.Clear">
            <summary>
            <para>Removes all items from the list.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.DeployedServicePackageList.Contains(System.Fabric.Query.DeployedServicePackage)">
            <summary>
            <para>Indicates whether the specified item is in the list.</para>
            </summary>
            <param name="item">
            <para>The item to search.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the specified item is in the list; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedServicePackageList.CopyTo(System.Fabric.Query.DeployedServicePackage[],System.Int32)">
            <summary>
            <para>Copies items from the list to the specified array at the specified starting index.</para>
            </summary>
            <param name="array">
            <para>The destination of the items copied from the list.</para>
            </param>
            <param name="arrayIndex">
            <para>The zero-based index in <paramref name="array" /> at which copying begins.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.DeployedServicePackageList.Remove(System.Fabric.Query.DeployedServicePackage)">
            <summary>
            <para>Removes the specified item from this list.</para>
            </summary>
            <param name="item">
            <para>The item to remove from the list.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if successfully removed; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedServicePackageList.GetEnumerator">
            <summary>
            <para>Gets an enumerator to items in this list.</para>
            </summary>
            <returns>
            <para>An enumerator to items in this list.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedServicePackageList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <para>Gets an enumerator for items in this list.</para>
            </summary>
            <returns>
            <para>An enumerator for items in this list.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Query.DeployedServicePackageList.Item(System.Int32)">
            <summary>
            <para>Gets the item at the specified index</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the item to get.</para>
            </param>
            <returns>
            <para>The item at the specified index.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Query.DeployedServicePackageList.Count">
            <summary>
            <para>Gets the number of items in this list</para>
            </summary>
            <value>
            <para>The number of items in this list.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServicePackageList.IsReadOnly">
            <summary>
            <para>Gets a value indicating whether the list is read-only.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the list is read-only; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.DeployedServicePackage">
            <summary>
            <para>Represents a deployed service package.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.DeployedServicePackage.ServiceManifestName">
            <summary>
            <para>Gets the service manifest name.</para>
            </summary>
            <value>
            <para>The service manifest name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServicePackage.ServiceManifestVersion">
            <summary>
            <para>Gets the service manifest version.</para>
            </summary>
            <value>
            <para>The service manifest version.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServicePackage.DeployedServicePackageStatus">
            <summary>
            <para>Gets the deployed service package status.</para>
            </summary>
            <value>
            <para>The status of the deployed service package.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.DeployedServiceReplicaDetail">
            <summary>
            <para>Represents a replica running in the code package.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceReplicaDetail.#ctor(System.Fabric.Query.ServiceKind)">
            <summary>
            <para>
            Instantiates a <see cref="T:System.Fabric.Query.DeployedServiceReplicaDetail"/> object with specified service kind.
            </para>
            </summary>
            <param name="serviceKind">
            <para>The type of the service</para>
            </param>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplicaDetail.ServiceKind">
            <summary>
            <para>
            Gets the type of the service 
            </para>
            </summary>
            <value>
            <para>The service kind representing the type of the service this replica belongs to</para>
            </value>
            <remarks>
            <para>
            Based on the value of this property this object can be
            downcasted to DeployedStatefulServiceReplicaDetail or DeployedStatelessServiceInstanceDetail
            </para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplicaDetail.ServiceName">
            <summary>
            <para>Gets or sets the service name to which this replica belongs.</para>
            </summary>
            <value>
            <para>The service name to which this replica belongs.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplicaDetail.PartitionId">
            <summary>
            <para>Gets or sets the partition id associated with this replica.</para>
            </summary>
            <value>
            <para>The partition id associated with this replica.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplicaDetail.CurrentServiceOperation">
            <summary>
            <para>Gets or sets the current API call that is being executed on the replica.</para>
            </summary>
            <value>
            <para>The current API call that is being executed on the replica.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplicaDetail.CurrentServiceOperationStartTimeUtc">
            <summary>
            <para>Gets or sets the start time of the current service operation in UTC format.</para>
            </summary>
            <value>
            <para>The start time of the current service operation in UTC format.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplicaDetail.ReportedLoad">
            <summary>
            <para>Gets or sets the load reported by this replica.</para>
            </summary>
            <value>
            <para>The load reported by this replica.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.DeployedServiceReplicaList">
            <summary>
            <para>Contains list of deployed service replica.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceReplicaList.IndexOf(System.Fabric.Query.DeployedServiceReplica)">
            <summary>
            <para>Gets the index of specified item in this list.</para>
            </summary>
            <param name="item">
            <para>The item to locate in the collection.</para>
            </param>
            <returns>
            <para>The index of the specified item in this list.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceReplicaList.Insert(System.Int32,System.Fabric.Query.DeployedServiceReplica)">
            <summary>
            <para>Inserts an item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index at which value should be inserted.</para>
            </param>
            <param name="item">
            <para>The item to be inserted.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceReplicaList.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the item to remove.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceReplicaList.Add(System.Fabric.Query.DeployedServiceReplica)">
            <summary>
            <para>Adds an item to the collection.</para>
            </summary>
            <param name="item">
            <para>The item to be added to the collection.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceReplicaList.Clear">
            <summary>
            <para>Removes all items from the collection.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceReplicaList.Contains(System.Fabric.Query.DeployedServiceReplica)">
            <summary>
            <para>Determines whether the collection contains a specific value.</para>
            </summary>
            <param name="item">
            <para>The item to locate in the collection.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the item exists; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceReplicaList.CopyTo(System.Fabric.Query.DeployedServiceReplica[],System.Int32)">
            <summary>
            <para>Copies items from this list to the specified array starting at the specified index.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional Array that is the destination of the elements copied from  
            HYPERLINK "http://msdn.microsoft.com/en-us/library/system.collections.icollection(v=vs.110).aspx" collection. The Array 
            must have zero-based indexing.</para>
            </param>
            <param name="arrayIndex">
            <para>The zero-based index in array at which copying begins.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceReplicaList.Remove(System.Fabric.Query.DeployedServiceReplica)">
            <summary>
            <para>Removes the first occurrence of a specific item from the collection.</para>
            </summary>
            <param name="item">
            <para>The item to be removed.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if successfully removed; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceReplicaList.GetEnumerator">
            <summary>
            <para>Gets an enumerator to items in this list.</para>
            </summary>
            <returns>
            <para>An enumerator to items in this list.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceReplicaList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <para>Retrieves an enumerator that iterates through the collection.</para>
            </summary>
            <returns>
            <para>An enumerator that iterates through the collection.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplicaList.Item(System.Int32)">
            <summary>
            <para>Gets an element at the specified index.</para>
            </summary>
            <param name="index">
            <para>The index.</para>
            </param>
            <returns>
            <para>The element at the specified index.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplicaList.Count">
            <summary>
            <para>Gets the number of service replica.</para>
            </summary>
            <value>
            <para>The number of service replica.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplicaList.IsReadOnly">
            <summary>
            <para>Gets a value indicating whether the collection is read-only.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the list is read-only; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.DeployedServiceReplica">
            <summary>
            <para>Represents the view of a replica on a node</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceReplica.#ctor(System.Fabric.Query.ServiceKind)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:System.Fabric.Query.DeployedServiceReplica"/> class.</para>
            </summary>
            <param name="kind">
              <para>The service kind.</para>
            </param>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplica.ServiceKind">
            <summary>
            <para>The type of the replica (Stateful or Stateless)</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.Query.ServiceKind"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplica.ServiceName">
            <summary>
            <para>Gets or sets the name of the service.</para>
            </summary>
            <value>
            <para>The name of the service.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplica.ServiceTypeName">
            <summary>
            <para>Gets or sets the name of the service type.</para>
            </summary>
            <value>
            <para>The name of the service type.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplica.ServiceManifestVersion">
            <summary>
            <para>Gets or sets the version of the service manifest.</para>
            </summary>
            <value>
            <para>The version of the service manifest.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplica.CodePackageName">
            <summary>
            <para>Gets or sets the name of the code package that hosts this replica.</para>
            </summary>
            <value>
            <para>The name of the code package that hosts this replica.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplica.Partitionid">
            <summary>
            <para>Gets or sets the partition id for this replia.</para>
            </summary>
            <value>
            <para>The partition id for this replia.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplica.ServiceManifestName">
            <summary>
            <para>The name of the service package that contains the code package hosting this replica.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplica.ReplicaStatus">
            <summary>
            <para>Gets or sets the status of the replica.</para>
            </summary>
            <value>
            <para>The status of the replica.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplica.Address">
            <summary>
            <para>Gets or sets the last address returned by the replica in Open or ChangeRole.</para>
            </summary>
            <value>
            <para>The last address returned by the replica in Open or ChangeRole.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceReplica.ServiceManifestVersion_">
            <summary>
            Internal property to access ServiceManifestVersion with #pragma warning disable around the accessor
            This is because even though the property is obsolete, product and unit test code still needs to validate it is correct
            </summary>
        </member>
        <member name="T:System.Fabric.Query.DeployedServiceTypeList">
            <summary>
            <para>Represents a list of <see cref="T:System.Fabric.Query.DeployedServiceType"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceTypeList.IndexOf(System.Fabric.Query.DeployedServiceType)">
            <summary>
            <para>Gets the index of the specified item in this list.</para>
            </summary>
            <param name="item">
            <para>The item in the list.</para>
            </param>
            <returns>
            <para>The index of the specified item in this list.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceTypeList.Insert(System.Int32,System.Fabric.Query.DeployedServiceType)">
            <summary>
            <para>Inserts the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The index where the item will be inserted.</para>
            </param>
            <param name="item">
            <para>The item to insert.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceTypeList.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The index of the item to remove.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceTypeList.Add(System.Fabric.Query.DeployedServiceType)">
            <summary>
            <para>Adds the specified item to the list.</para>
            </summary>
            <param name="item">
            <para>The item to add.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceTypeList.Clear">
            <summary>
            <para>Removes all items from the list.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceTypeList.Contains(System.Fabric.Query.DeployedServiceType)">
            <summary>
            <para>Indicates a flag that specifies whether the list contains a specific item.</para>
            </summary>
            <param name="item">
            <para>The item to search.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the list contains a specific item; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceTypeList.CopyTo(System.Fabric.Query.DeployedServiceType[],System.Int32)">
            <summary>
            <para>Copies items from the list to the specified array at the specified starting index.</para>
            </summary>
            <param name="array">
            <para>The array.</para>
            </param>
            <param name="arrayIndex">
            <para>The starting index of the array.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceTypeList.Remove(System.Fabric.Query.DeployedServiceType)">
            <summary>
            <para>Remove the specified item from this list.</para>
            </summary>
            <param name="item">
            <para>The item to remove.</para>
            </param>
            <returns>
            <para>The list with removed item.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceTypeList.GetEnumerator">
            <summary>
            <para>Gets an enumerator to items in this list.</para>
            </summary>
            <returns>
            <para>The enumerator to items in this list.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.DeployedServiceTypeList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <para>Gets an enumerator for items in this list.</para>
            </summary>
            <returns>
            <para>The enumerator for items in this list.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceTypeList.Item(System.Int32)">
            <summary>
            <para>Gets the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The index of the item.</para>
            </param>
            <returns>
            <para>The item at the specified index.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceTypeList.Count">
            <summary>
            <para>Gets or sets the number of items in this list.</para>
            </summary>
            <value>
            <para>The number of items in this list.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceTypeList.IsReadOnly">
            <summary>
            <para>Gets or sets a flag that indicates whether the list can be modified.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the list can be modified; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.ServiceTypeRegistrationStatus">
            <summary>
            <para>Specifies the service type registration status.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceTypeRegistrationStatus.Invalid">
            <summary>
            <para>Invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceTypeRegistrationStatus.Disabled">
            <summary>
            <para>Service type is disabled.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceTypeRegistrationStatus.NotRegistered">
            <summary>
            <para>Service type is not registered.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceTypeRegistrationStatus.Registered">
            <summary>
            <para>Service type is registered.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.DeployedServiceType">
            <summary>
            <para>Represents a deployed service type.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceType.ServiceTypeName">
            <summary>
            <para>Gets the service type name.</para>
            </summary>
            <value>
            <para>The name of the service type.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceType.CodePackageName">
            <summary>
            <para>Gets the code package name.</para>
            </summary>
            <value>
            <para>The code package name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceType.ServiceManifestName">
            <summary>
            <para>Gets the service manifest name.</para>
            </summary>
            <value>
            <para>The name of the service manifest.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedServiceType.ServiceTypeRegistrationStatus">
            <summary>
            <para>Gets the service type registration status.</para>
            </summary>
            <value>
            <para>The status of the service type registration.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.DeployedStatefulServiceReplicaDetail">
            <summary>
            <para>Represents the information about a stateful replica running in a code package.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.DeployedStatefulServiceReplicaDetail.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Query.DeployedStatefulServiceReplicaDetail"/> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.DeployedStatefulServiceReplicaDetail.ReplicaId">
            <summary>
            <para>Gets the replica ID of this replica.</para>
            </summary>
            <value>
            <para>The replica ID.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedStatefulServiceReplicaDetail.CurrentReplicatorOperation">
            <summary>
            <para>Gets the current APIs running on the replicator.</para>
            </summary>
            <value>
            <para>The current APIs running on the replicator.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedStatefulServiceReplicaDetail.ReadStatus">
            <summary>
            <para>Gets the current read status for this replica.</para>
            </summary>
            <value>
            <para>The current read status for this replica.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedStatefulServiceReplicaDetail.WriteStatus">
            <summary>
            <para>Gets the current write status of the replica.</para>
            </summary>
            <value>
            <para>The current write status of the replica.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedStatefulServiceReplicaDetail.ReplicatorStatus">
            <summary>
            <para>Gets the information about the replicator if the replica is using the Service Fabric Replicator</para>
            </summary>
            <value>
            <para>The replicator status.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.DeployedStatefulServiceReplica">
            <summary>
            <para>Represents a deployed stateful service replica.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.DeployedStatefulServiceReplica.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Query.DeployedStatefulServiceReplica"/> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.DeployedStatefulServiceReplica.ReplicaId">
            <summary>
            <para>Gets the replica ID.</para>
            </summary>
            <value>
            <para>The replica ID.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.DeployedStatefulServiceReplica.ReplicaRole">
            <summary>
            <para>Gets the replica role.</para>
            </summary>
            <value>
            <para>The replica role.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.DeployedStatelessServiceInstanceDetail">
            <summary>
            <para>Represents the information about a stateless instance running in a code package.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.DeployedStatelessServiceInstanceDetail.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Query.DeployedStatelessServiceInstanceDetail"/> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.DeployedStatelessServiceInstanceDetail.InstanceId">
            <summary>
            <para>Gets or sets the instance identifier of this instance.</para>
            </summary>
            <value>
            <para>The instance identifier of this instance.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.DeployedStatelessServiceInstance">
            <summary>
            <para>Represents a deployed stateless service instance.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.DeployedStatelessServiceInstance.#ctor">
            <summary>
            <para>Initializes an instance of the <see cref="T:System.Fabric.Query.DeployedStatelessServiceInstance"/> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.DeployedStatelessServiceInstance.InstanceId">
            <summary>
            <para>Gets the instance ID.</para>
            </summary>
            <value>
            <para>The instance ID.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.ProvisionedFabricCodeVersion">
            <summary>
            <para>Represents a provisioned Service Fabric code (MSI) version retrieved by calling 
            <see cref="M:System.Fabric.FabricClient.QueryClient.GetProvisionedFabricCodeVersionListAsync(System.String)"/>.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.ProvisionedFabricCodeVersion.CodeVersion">
            <summary>
            <para>Gets the product version of Service Fabric.</para>
            </summary>
            <value>
            <para>The product version of Service Fabric.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.ProvisionedFabricCodeVersionList">
            <summary>
            <para>Represents a list of provisioned Service Fabric code versions retrieved by calling 
            <see cref="M:System.Fabric.FabricClient.QueryClient.GetProvisionedFabricConfigVersionListAsync"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ProvisionedFabricCodeVersionList.IndexOf(System.Fabric.Query.ProvisionedFabricCodeVersion)">
            <summary>
            <para>Gets the index of the specified item in this list.</para>
            </summary>
            <param name="item">
            <para>The specified item.</para>
            </param>
            <returns>
            <para>The index of the specified item in this list.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ProvisionedFabricCodeVersionList.Insert(System.Int32,System.Fabric.Query.ProvisionedFabricCodeVersion)">
            <summary>
            <para>Inserts the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The location where the item will be inserted.</para>
            </param>
            <param name="item">
            <para>The item to insert.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.ProvisionedFabricCodeVersionList.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the item at the specified index</para>
            </summary>
            <param name="index">
            <para>The index of the item to remove.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.ProvisionedFabricCodeVersionList.Add(System.Fabric.Query.ProvisionedFabricCodeVersion)">
            <summary>
            <para>Adds the specified item to the list.</para>
            </summary>
            <param name="item">
            <para>The item to be added to the list.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.ProvisionedFabricCodeVersionList.Clear">
            <summary>
            <para>Removes all items from the list.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ProvisionedFabricCodeVersionList.Contains(System.Fabric.Query.ProvisionedFabricCodeVersion)">
            <summary>
            <para>Indicates whether the list contains a specified item.</para>
            </summary>
            <param name="item">
            <para>The item to search.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the list contains a specified item; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ProvisionedFabricCodeVersionList.CopyTo(System.Fabric.Query.ProvisionedFabricCodeVersion[],System.Int32)">
            <summary>
            <para>Copies items from the list to the specified array at the specified starting index.</para>
            </summary>
            <param name="array">
            <para>The array of items to copy.</para>
            </param>
            <param name="arrayIndex">
            <para>The index where the array of items will be copied to.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.ProvisionedFabricCodeVersionList.Remove(System.Fabric.Query.ProvisionedFabricCodeVersion)">
            <summary>
            <para>Remove the specified item from this list</para>
            </summary>
            <param name="item">
            <para>The item to remove.</para>
            </param>
            <returns>
            <para>The list with removed item.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ProvisionedFabricCodeVersionList.GetEnumerator">
            <summary>
            <para>Gets an enumerator to items in this list.</para>
            </summary>
            <returns>
            <para>The enumerator that iterates through the list.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ProvisionedFabricCodeVersionList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <para>Gets an enumerator for items in this list</para>
            </summary>
            <returns>
            <para>The enumerator that iterates through the list.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Query.ProvisionedFabricCodeVersionList.Item(System.Int32)">
            <summary>
            <para>Gets the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The index of the item.</para>
            </param>
            <returns>
            <para>The item at the specified index.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Query.ProvisionedFabricCodeVersionList.Count">
            <summary>
            <para>Gets or sets the number of items in this list.</para>
            </summary>
            <value>
            <para>The number of items in this list.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ProvisionedFabricCodeVersionList.IsReadOnly">
            <summary>
            <para>Gets or sets a flag that indicates whether the list is read only.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the list is read only; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.ProvisionedFabricConfigVersion">
            <summary>
            <para>Represents a provisioned Service Fabric configuration (Cluster Manifest) version retrieved by calling 
            <see cref="M:System.Fabric.FabricClient.QueryClient.GetProvisionedFabricConfigVersionListAsync"/>.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.ProvisionedFabricConfigVersion.ConfigVersion">
            <summary>
            <para>Gets the configuration version.</para>
            </summary>
            <value>
            <para>The configuration version.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.ProvisionedFabricConfigVersionList">
            <summary>
            <para>Represents the list of provisioned Service Fabric configuration (Cluster Manifest) versions retrieved by 
            calling <see cref="M:System.Fabric.FabricClient.QueryClient.GetProvisionedFabricConfigVersionListAsync(System.String)"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ProvisionedFabricConfigVersionList.IndexOf(System.Fabric.Query.ProvisionedFabricConfigVersion)">
            <summary>
            <para>Returns the index of the specified item in this list.</para>
            </summary>
            <param name="item">
            <para>The specified item to locate in the list.</para>
            </param>
            <returns>
            <para>The index of the specified item in this list.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ProvisionedFabricConfigVersionList.Insert(System.Int32,System.Fabric.Query.ProvisionedFabricConfigVersion)">
            <summary>
            <para>Inserts the specified item into this list at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index at which item should be inserted.</para>
            </param>
            <param name="item">
            <para>The object to insert into the list.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.ProvisionedFabricConfigVersionList.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the item from the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the item to remove.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.ProvisionedFabricConfigVersionList.Add(System.Fabric.Query.ProvisionedFabricConfigVersion)">
            <summary>
            <para>Adds the specified item to this list.</para>
            </summary>
            <param name="item">
            <para>The specified item to add in the list.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.ProvisionedFabricConfigVersionList.Clear">
            <summary>
            <para>Removes all items from this list.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ProvisionedFabricConfigVersionList.Contains(System.Fabric.Query.ProvisionedFabricConfigVersion)">
            <summary>
            <para>Returns true if the specified item is contained in this list.</para>
            </summary>
            <param name="item">
            <para>The specified item that is contained in the list.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the specified item is contained in this list; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ProvisionedFabricConfigVersionList.CopyTo(System.Fabric.Query.ProvisionedFabricConfigVersion[],System.Int32)">
            <summary>
            <para>Copies items from this list to the specified array at the specified index.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional array that is the destination of elements copied from <see cref="T:System.Fabric.Query.ProvisionedFabricConfigVersionList"/>. 
            The array must have zero-based indexing.</para>
            </param>
            <param name="arrayIndex">
            <para>The zero-based index in array at which copying begins.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.ProvisionedFabricConfigVersionList.Remove(System.Fabric.Query.ProvisionedFabricConfigVersion)">
            <summary>
            <para>Removes the specified item from this list.</para>
            </summary>
            <param name="item">
            <para>The object to remove from the list.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the item was successfully removed from the list; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ProvisionedFabricConfigVersionList.GetEnumerator">
            <summary>
            <para>Returns an enumerator to the items in this list.</para>
            </summary>
            <returns>
            <para>An enumerator to the items in this list.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ProvisionedFabricConfigVersionList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <para>Gets an enumerator to the items in this list.</para>
            </summary>
            <returns>
            <para>An enumerator to the items in this list.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Query.ProvisionedFabricConfigVersionList.Item(System.Int32)">
            <summary>
            <para>Gets the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The specified index.</para>
            </param>
            <returns>
            <para>The item at the specified index.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Query.ProvisionedFabricConfigVersionList.Count">
            <summary>
            <para>Gets the number of items in this list.</para>
            </summary>
            <value>
            <para>The number of items in this list.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ProvisionedFabricConfigVersionList.IsReadOnly">
            <summary>
            <para>Gets a value that indicates whether the list can be modified only if this property is false.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the list can be modified only; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.LoadMetricReport">
            <summary>
            <para>Represents the load metric report.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricReport.Name">
            <summary>
            <para>Gets the name of the metric.</para>
            </summary>
            <value>
            <para>The name of the metric.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricReport.Value">
            <summary>
            <para>Gets the value of the load for the metric.</para>
            </summary>
            <value>
            <para>The value of the load for the metric.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricReport.LastReportedUtc">
            <summary>
            <para>Gets the UTC time when the load is reported.</para>
            </summary>
            <value>
            <para>The UTC time when the load is reported.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.LoadMetricInformation">
            <summary>
            <para>Represents the load metric information.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.LoadMetricInformation.ToString">
            <summary>
            <para>
            Pretty print out each field of <see cref="T:System.Fabric.Query.LoadMetricInformation"/>.
            </para>
            </summary>
            <returns>
            <para>A string representing the load metric information.</para>
            </returns>
            <example>
                LoadMetricName        : Metric1
                IsBalancedBefore      : True
                IsBalancedAfter       : True
                DeviationBefore       : 2
                DeviationAfter        : 2
                BalancingThreshold    : 1
                Action    : NoActionNeeded
                ActivityThreshold     : 3
                ClusterCapacity       : 100
                ClusterLoad           : 1
                ClusterRemainingCapacity : 0
                NodeBufferPercentage  : 0
                ClusterBufferedCapacity : 0
                ClusterRemainingBufferedCapacity : 0
                ClusterCapacityViolation : True
                MinNodeLoadValue      : 0
                MinNodeLoadNodeId     : 1ca9521d70301383417536df0c96f671
                MaxNodeLoadValue      : 1
                MaxNodeLoadNodeId     : cf68563e16a44f808e86197a9cf83de5
            </example>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.Name">
            <summary>
            <para>Gets the name of the metric.</para>
            </summary>
            <value>
            <para>The name of the metric.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.IsBalancedBefore">
            <summary>
            <para>Gets a value that indicates whether the metrics is balanced or not before resource balancer run.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the metrics is balanced or not before resource balancer run; 
            otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.IsBalancedAfter">
            <summary>
            <para>Gets a value that indicates whether the metrics is balanced or not after resource balancer run.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the metrics is balanced or not after resource balancer run; 
            otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.DeviationBefore">
            <summary>
            <para>Gets the standard average deviation of the metrics before resource balancer run.</para>
            </summary>
            <value>
            <para>The standard average deviation of the metrics before resource balancer run.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.DeviationAfter">
            <summary>
            <para>Gets the standard average deviation of the metrics after resource balancer run.</para>
            </summary>
            <value>
            <para>The standard average deviation of the metrics after resource balancer run.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.BalancingThreshold">
            <summary>
            <para>Gets he balancing threshold for a certain metric.</para>
            </summary>
            <value>
            <para>The balancing threshold for a certain metric.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.Action">
            <summary>
            <para>Gets the current action being taken with regard to this metric. Examples could be placement, balancing, and constraint checks.</para>
            </summary>
            <value>
            <para>The current action being taken with regard to this metric.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.ActivityThreshold">
            <summary>
            <para>Gets the Activity Threshold specified for this metric in the system Cluster Manifest.</para>
            </summary>
            <value>
            <para>The Activity Threshold specified for this metric in the system Cluster Manifest.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.ClusterCapacity">
            <summary>
            <para>Gets the total cluster capacity for a given metric, determined by summing the capacity for the metric across all nodes.</para>
            </summary>
            <value>
            <para>The total cluster capacity for a given metric.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.ClusterLoad">
            <summary>
            <para>Gets the total cluster load for a specific metric within the cluster</para>
            </summary>
            <value>
            <para>The total cluster load.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.ClusterRemainingCapacity">
            <summary>
            <para>Gets remaining capacity for the metric in the cluster. Remaining capacity is defined as the current Cluster Capacity 
            minus the current Cluster Load.</para>
            </summary>
            <value>
            <para>The remaining capacity for the metric in the cluster.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.IsClusterCapacityViolation">
            <summary>
            <para>Gets whether the metric is currently over capacity in the cluster.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the metric is currently over capacity in the cluster; 
            otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.NodeBufferPercentage">
            <summary>
            <para>
            Gets the reserved percentage of total node capacity for this metric
            </para>
            </summary>
            <value>
            <para>The reserved percentage of total node capacity for this metric</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.ClusterBufferedCapacity">
            <summary>
            <para>
            The reserved percentage of cluster total capacity for this metric
            </para>
            </summary>
            <value>
            <para>ClusterBufferedCapacity property gets/sets the value of the long field, _clusterBufferedCapacity.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.ClusterRemainingBufferedCapacity">
            <summary>
            <para>
            Gets the remaining percentage of cluster total capacity for this metric
            </para>
            </summary>
            <value>
            <para>The remaining percentage of cluster total capacity for this metric.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.MinNodeLoadValue">
            <summary>
            <para>
            Gets the minimum load on any node for this metric.
            </para>
            </summary>
            <value>
            <para>The minimum load on any node for this metric.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.MinNodeLoadNodeId">
            <summary>
            <para>
            Gets the node id of the node with the minimum load for this metric
            </para>
            </summary>
            <value>
            <para>The node id of the node with the minimum load for this metric.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.MaxNodeLoadValue">
            <summary>
            <para>
            Gets the maximum load on any node for this metric.
            </para>
            </summary>
            <value>
            <para>The maximum load on any node for this metric.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.LoadMetricInformation.MaxNodeLoadNodeId">
            <summary>
            <para>
            Gets the node id of the node with the maximum load for this metric
            </para>
            </summary>
            <value>
            <para>The node id of the node with the maximum load for this metric.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.NodeLoadMetricInformation">
            <summary>
            <para>Represents data structure that contains load information for a certain metric on a node.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.NodeLoadMetricInformation.Name">
            <summary>
            <para>Gets the name of the metric.</para>
            </summary>
            <value>
            <para>The name of the metric.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.NodeLoadMetricInformation.NodeCapacity">
            <summary>
            <para>Gets the total capacity on the node for the metric.</para>
            </summary>
            <value>
            <para>The total capacity on the node for the metric.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.NodeLoadMetricInformation.NodeLoad">
            <summary>
            <para>Gets the current load on the node for a metric.</para>
            </summary>
            <value>
            <para>The current load on the node for a metric.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.NodeLoadMetricInformation.NodeRemainingCapacity">
            <summary>
            <para>Gets the remaining capacity on the node for the metric.</para>
            </summary>
            <value>
            <para>The remaining capacity on the node for the metric.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.NodeLoadMetricInformation.IsCapacityViolation">
            <summary>
            <para>Gets a value that indicates whether there is a capacity violation for the metric on the given node.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if there is a capacity violation for the metric on the given node; 
            otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.NodeLoadMetricInformation.NodeBufferedCapacity">
            <summary>
              <para />
            </summary>
            <value>
              <para />
            </value>
        </member>
        <member name="P:System.Fabric.Query.NodeLoadMetricInformation.NodeRemainingBufferedCapacity">
            <summary>
              <para />
            </summary>
            <value>
              <para />
            </value>
        </member>
        <member name="T:System.Fabric.Query.NodeList">
            <summary>
            <para>Represents a list of Service Fabric nodes retrieved by calling <see cref="M:System.Fabric.FabricClient.QueryClient.GetNodeListAsync"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.NodeList.#ctor">
            <summary>
            <para>
            Creates an empty node list.
            </para>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.NodeDeactivationTaskId">
            <summary>
            <para>Specifies the task ID of a node deactivation task.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.NodeDeactivationTaskId.Id">
            <summary>
            <para>The unique ID of the node deactivation task.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.NodeDeactivationTaskId.Type">
            <summary>
            <para>The ID type of the node deactivation task.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.NodeDeactivationTaskType"/>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.NodeDeactivationTask">
            <summary>
            <para>Specifies a node deactivation task.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.NodeDeactivationTask.TaskId">
            <summary>
            <para>The ID for the node deactivation task.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.Query.NodeDeactivationTaskId"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.NodeDeactivationTask.Intent">
            <summary>
            <para>The node deactivation intent for the node deactivation task.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.NodeDeactivationIntent"/>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.NodeDeactivationResult">
            <summary>
            <para>Contains the detailed deactivation information about a node.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.NodeDeactivationResult.EffectiveIntent">
            <summary>
            <para>A node may get deactivated by multiple tasks at the same time. Each task may specify a different node 
            deactivation intent. In this case, effective intent is highest intent among all deactivation tasks, where ordering 
            is defined as Pause &lt; Restart &lt; RemoveData.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.NodeDeactivationIntent"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.NodeDeactivationResult.Status">
            <summary>
            <para>Specifies the deactivation status for a node.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.NodeDeactivationStatus"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.NodeDeactivationResult.Tasks">
            <summary>
            <para>Contains information about all the node deactivation tasks for a node.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Collections.Generic.IList`1"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.NodeDeactivationResult.PendingSafetyChecks">
            <summary>
            <para>
            Gets a list of safety checks that are currently failing.
            </para>
            </summary>
            <value>
            <para>The list of failing safety checks.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.Node">
            <summary>
            <para>Represents a node.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.Node.NodeName">
            <summary>
            <para>Gets the name of the node.</para>
            </summary>
            <value>
            <para>The name of the node.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Node.IpAddressOrFQDN">
            <summary>
            <para>Gets the IP address or the Fully Qualified Domain Name (FQDN).</para>
            </summary>
            <value>
            <para>The IP address or the Fully Qualified Domain Name (FQDN).</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Node.NodeType">
            <summary>
            <para>Gets the node type.</para>
            </summary>
            <value>
            <para>The node type.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Node.CodeVersion">
            <summary>
            <para>Gets the code version.</para>
            </summary>
            <value>
            <para>The code version.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Node.ConfigVersion">
            <summary>
            <para>Gets the configuration version.</para>
            </summary>
            <value>
            <para>The configuration version.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Node.NodeStatus">
            <summary>
            <para>Gets the node status.</para>
            </summary>
            <value>
            <para>The node status.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Node.NodeUpTime">
            <summary>
            <para>Gets the node up time.</para>
            </summary>
            <value>
            <para>The node up time.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Node.HealthState">
            <summary>
            <para>Gets the health state.</para>
            </summary>
            <value>
            <para>The health state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Node.IsSeedNode">
            <summary>
            <para>Gets a value indicating whether this is a seed node.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if this instance is a seed node; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Node.UpgradeDomain">
            <summary>
            <para>Gets the upgrade domain.</para>
            </summary>
            <value>
            <para>The upgrade domain.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Node.FaultDomain">
            <summary>
            <para>Gets the fault domain.</para>
            </summary>
            <value>
            <para>The fault domain.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Node.NodeId">
            <summary>
            <para>Gets the internal ID used by Service Fabric to uniquely identify a node.</para>
            </summary>
            <value>
            <para>The internal ID used by Service Fabric to uniquely identify a node.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Node.NodeInstanceId">
            <summary>
            <para>Gets the internal ID used by Service Fabric to uniquely identify a node instance. The NodeId is deterministically mapped 
            from NodeName and does not change across node restarts. However, the NodeInstanceId will change with every restart of the node.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Numerics.BigInteger"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Node.NodeDeactivationInfo">
            <summary>
            <para>
            Gets the deactivation information for the node.
            </para>
            </summary>
            <value>
            <para>The node deactivation information.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.NodeStatus">
            <summary>
            <para>Specifies the node status.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.NodeStatus.Invalid">
            <summary>
            <para>Invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.NodeStatus.Up">
            <summary>
            <para>Node is up.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.NodeStatus.Down">
            <summary>
            <para>Node is down.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.NodeStatus.Enabling">
            <summary>
            <para>Node is being enabled.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.NodeStatus.Disabling">
            <summary>
            <para>Node is being disabled.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.NodeStatus.Disabled">
            <summary>
            <para>Node is disabled.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.NodeStatus.Unknown">
            <summary>
            Node status is not known.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.NodeStatus.Removed">
            <summary>
            Node is removed.
            </summary>
        </member>
        <member name="T:System.Fabric.Query.NodeStatusFilter">
            <summary>
            Enumerates the filters used for matching the node status for nodes that should be returned by query.
            </summary>
            <remarks>This enumeration has a <see cref="T:System.FlagsAttribute"/> that allows a bitwise combination of its members.</remarks>
        </member>
        <member name="F:System.Fabric.Query.NodeStatusFilter.Default">
            <summary>
            Returns all nodes other than unknown and removed.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.NodeStatusFilter.All">
            <summary>
            Returns all nodes.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.NodeStatusFilter.Up">
            <summary>
            Returns all up nodes.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.NodeStatusFilter.Down">
            <summary>
            Returns all down nodes.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.NodeStatusFilter.Enabling">
            <summary>
            Returns all nodes that are currently enabling.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.NodeStatusFilter.Disabling">
            <summary>
            Returns all nodes that are currently disabling.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.NodeStatusFilter.Disabled">
            <summary>
            Returns all disabled nodes.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.NodeStatusFilter.Unknown">
            <summary>
            Returns all nodes that are in Unknown state.
            </summary>
        </member>
        <member name="F:System.Fabric.Query.NodeStatusFilter.Removed">
            <summary>
            Returns all removed nodes.
            </summary>
        </member>
        <member name="T:System.Fabric.Query.ReplicatorOperationName">
            <summary>
            <para>Represents the operation currently being executed by the Replicator, either via <see cref="T:System.Fabric.IReplicator"/> 
            or <see cref="T:System.Fabric.IPrimaryReplicator"/> interface.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ReplicatorOperationName.Invalid">
            <summary>
            <para>Default value if the replicator is not yet ready.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ReplicatorOperationName.None">
            <summary>
            <para>Replicator is not running any operation from Service Fabric perspective.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ReplicatorOperationName.Open">
            <summary>
            <para>Replicator is opening.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ReplicatorOperationName.ChangeRole">
            <summary>
            <para>Replicator is in the process of changing its role.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ReplicatorOperationName.UpdateEpoch">
            <summary>
            <para>Due to a change in the replica set, replicator is being updated with its Epoch.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ReplicatorOperationName.Close">
            <summary>
            <para>Replicator is closing.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ReplicatorOperationName.Abort">
            <summary>
            <para>Replicator is being aborted.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ReplicatorOperationName.OnDataLoss">
            <summary>
            <para>Replicator is handling the data loss condition, where the user service may potentially be recovering state from an external source.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ReplicatorOperationName.WaitForCatchup">
            <summary>
            <para>Replicator is waiting for a quorum of replicas to be caught up to the latest state.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ReplicatorOperationName.Build">
            <summary>
            <para>Replicator is in the process of building one or more replicas.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.RemoteReplicatorStatus">
            <summary>
            <para>Represents the state of the secondary replicator from the primary replicator’s point of view.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.RemoteReplicatorStatus.ReplicaId">
            <summary>
            <para>Gets the replica ID of the secondary.</para>
            </summary>
            <value>
            <para>The replica ID.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.RemoteReplicatorStatus.LastAcknowledgementProcessedTimeUtc">
            <summary>
            <para>Gets the last timestamp (in UTC) when an acknowledgement from the secondary replicator was processed in the primary.</para>
            </summary>
            <value>
            <para>The last timestamp when an acknowledgement from the secondary replicator was processed in the primary.</para>
            </value>
            <remarks>
            <para>UTC 0 represents an invalid value, indicating that no acknowledgement messages were ever processed.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Query.RemoteReplicatorStatus.LastReceivedReplicationSequenceNumber">
            <summary>
            <para>Gets the highest replication operation sequence number that the secondary has received from the primary.</para>
            </summary>
            <value>
            <para>The highest replication operation sequence number that the secondary has received from the primary.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.RemoteReplicatorStatus.LastAppliedReplicationSequenceNumber">
            <summary>
            <para>Gets the highest replication operation sequence number that the secondary has applied to its state.</para>
            </summary>
            <value>
            <para>The highest replication operation sequence number that the secondary has applied to its state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.RemoteReplicatorStatus.IsInBuild">
            <summary>
            <para>Gets a value that indicates whether the secondary replica is in the process of being built.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the secondary replica is in the process of being built; 
            otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.RemoteReplicatorStatus.LastReceivedCopySequenceNumber">
            <summary>
            <para>Gets the highest copy operation sequence number that the secondary has received from the primary.</para>
            </summary>
            <value>
            <para>The highest copy operation sequence number that the secondary has received from the primary.</para>
            </value>
            <remarks>
            <para>A value of ‘-1’ can be ignored since it indicates that the copy process is complete.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Query.RemoteReplicatorStatus.LastAppliedCopySequenceNumber">
            <summary>
            <para>Gets the highest copy operation sequence number that the secondary has applied to its state.</para>
            </summary>
            <value>
            <para>The highest copy operation sequence number that the secondary has applied to its state.</para>
            </value>
            <remarks>
            <para>A value of ‘-1’ can be ignored since it indicates that the copy process is complete.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.Query.PrimaryReplicatorStatus">
            <summary>
            <para>Provides statistics about the Service Fabric Replicator, when it is functioning in a <see cref="F:System.Fabric.ReplicaRole.Primary"/> role.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.ReplicatorStatus">
            <summary>
            <para>Provides statistics about the Service Fabric Replicator.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ReplicatorStatus.#ctor">
            <summary>
            Base ReplicatorStatus structure for both primary and secondary replicators
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ReplicatorStatus.#ctor(System.Fabric.ReplicaRole)">
            <summary>
            Base ReplicatorStatus structure for both primary and secondary replicators
            </summary>
            <param name="role">The replica role.</param>
        </member>
        <member name="M:System.Fabric.Query.PrimaryReplicatorStatus.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Query.PrimaryReplicatorStatus"/> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.PrimaryReplicatorStatus.ReplicationQueueStatus">
            <summary>
            <para>Gets the status of the Replication queue.</para>
            </summary>
            <value>
            <para>The status of the replication queue.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.PrimaryReplicatorStatus.RemoteReplicators">
            <summary>
            <para>Gets the status of all the secondary replicas that the primary is aware of.</para>
            </summary>
            <value>
            <para>The list of remote replicators.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.SecondaryReplicatorStatus">
            <summary>
            <para>Provides statistics about the Service Fabric Replicator, when it is functioning in a <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary"/> role.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.SecondaryReplicatorStatus.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Query.SecondaryReplicatorStatus"/> class.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.SecondaryReplicatorStatus.ReplicationQueueStatus">
            <summary>
            <para>Gets the status of the Replication queue.</para>
            </summary>
            <value>
            <para>The status of the replication queue.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.SecondaryReplicatorStatus.LastReplicationOperationReceivedTimeUtc">
            <summary>
            <para>Gets the last time-stamp (UTC) at which a replication operation was received from the primary.</para>
            </summary>
            <value>
            <para>The last time-stamp at which a replication operation was received from the primary.</para>
            </value>
            <remarks>
            <para>UTC 0 represents an invalid value, indicating that a replication operation message was never received.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Query.SecondaryReplicatorStatus.IsInBuild">
            <summary>
            <para>Gets a value that indicates whether the replica is currently being built.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the replica is currently being built; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.SecondaryReplicatorStatus.CopyQueueStatus">
            <summary>
            <para>Gets the status of the Copy queue.</para>
            </summary>
            <value>
            <para>The status of the copy queue.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.SecondaryReplicatorStatus.LastCopyOperationReceivedTimeUtc">
            <summary>
            <para>Gets the last time-stamp (UTC) at which a copy operation was received as part of a build from the primary.</para>
            </summary>
            <value>
            <para>The last time-stamp at which a copy operation was received as part of a build from the primary.</para>
            </value>
            <remarks>
            <para>UTC 0 represents an invalid value, indicating that a copy operation message was never received.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Query.SecondaryReplicatorStatus.LastAcknowledgementSentTimeUtc">
            <summary>
            <para>Gets the last time-stamp (UTC) at which an acknowledgment was sent to the primary replicator.</para>
            </summary>
            <value>
            <para>The last time-stamp at which an acknowledgment was sent to the primary replicator.</para>
            </value>
            <remarks>
            <para>UTC 0 represents an invalid value, indicating that an acknowledgment message was never sent.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.Query.ReplicatorQueueStatus">
            <summary>
            <para>Provides various statistics of the queue used in the Service Fabric Replicator.</para>
            </summary>
            <remarks>
            <para>Depending on the role of the replicator (<see cref="F:System.Fabric.ReplicaRole.Primary"/> 
            or <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary"/>), the properties in this type mean different things.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Query.ReplicatorQueueStatus.QueueUtilizationPercentage">
            <summary>
            <para>Gets the utilization of the queue.</para>
            </summary>
            <value>
            <para>The utilization of the queue.</para>
            </value>
            <remarks>
            <para>A value of ‘0’ indicates that the queue is empty and a value of ‘100’ indicates that the queue is full.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Query.ReplicatorQueueStatus.QueueMemorySize">
            <summary>
            <para>Gets the number of virtual memory bytes being consumed by the queue.</para>
            </summary>
            <value>
            <para>The number of virtual memory bytes being consumed by the queue.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ReplicatorQueueStatus.FirstSequenceNumber">
            <summary>
            <para>See remarks.</para>
            </summary>
            <value>
            <para>The first sequence number.</para>
            </value>
            <remarks>
              <list type="number">
                <item>
                  <description>
                    <para>
                      <see cref="F:System.Fabric.ReplicaRole.Primary"/> – Represents the smallest sequence number of the operation that is 
            present in the queue. It’s value will be the same as <see cref="P:System.Fabric.Query.ReplicatorQueueStatus.CompletedSequenceNumber"/>, 
            since the primary replicator discards operations once it receives an acknowledgement from all the secondary replicas.</para>
                  </description>
                </item>
                <item>
                  <description>
                    <para>
                      <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary"/> – Represents the sequence number of the first operation 
            that is available in the queue.</para>
                  </description>
                </item>
              </list>
            </remarks>
        </member>
        <member name="P:System.Fabric.Query.ReplicatorQueueStatus.CompletedSequenceNumber">
            <summary>
            <para>See remarks.</para>
            </summary>
            <value>
            <para>The completed sequence number.</para>
            </value>
            <remarks>
              <list type="number">
                <item>
                  <description>
                    <para>
                      <see cref="F:System.Fabric.ReplicaRole.Primary"/> – Represents the highest sequence number for which <b>all</b> the 
            secondary replicas have applied the operation.</para>
                  </description>
                </item>
                <item>
                  <description>
                    <para>
                      <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary"/> – Represents the highest sequence number that has been 
            applied by the user service replica.</para>
                  </description>
                </item>
              </list>
            </remarks>
        </member>
        <member name="P:System.Fabric.Query.ReplicatorQueueStatus.CommittedSequenceNumber">
            <summary>
            <para>See remarks.</para>
            </summary>
            <value>
            <para>The committed sequence number.</para>
            </value>
            <remarks>
              <list type="number">
                <item>
                  <description>
                    <para>
                      <see cref="F:System.Fabric.ReplicaRole.Primary"/> – Represents the highest sequence number for which a <b>quorum</b> 
            of secondary replicas have applied the operation.</para>
                  </description>
                </item>
                <item>
                  <description>
                    <para>
                      <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary"/> – Represents the highest sequence number that has been 
            received by the secondary replicator from the primary.</para>
                  </description>
                </item>
              </list>
            </remarks>
        </member>
        <member name="P:System.Fabric.Query.ReplicatorQueueStatus.LastSequenceNumber">
            <summary>
            <para>See remarks.</para>
            </summary>
            <value>
            <para>The last sequence number.</para>
            </value>
            <remarks>
              <list type="number">
                <item>
                  <description>
                    <para>
                      <see cref="F:System.Fabric.ReplicaRole.Primary"/> – Represents the latest sequence number of the operation that 
            is available in the queue.</para>
                  </description>
                </item>
                <item>
                  <description>
                    <para>
                      <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary"/> – Represents the latest sequence number of the operation 
            that is available in the queue.</para>
                  </description>
                </item>
              </list>
            </remarks>
        </member>
        <member name="T:System.Fabric.Query.ServiceList">
            <summary>
            <para>Represents a list of services retrieved by calling <see cref="M:System.Fabric.FabricClient.QueryClient.GetServiceListAsync(System.Uri)"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ServiceList.#ctor">
            <summary>
            <para>
            Creates a service list.
            </para>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.ServiceGroupMemberMemberList">
            <summary>
            <para>The list that contains the service group members.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberMemberList.IndexOf(System.Fabric.Query.ServiceGroupMemberMember)">
            <summary>
            <para>Get the index of a service group member in the list.</para>
            </summary>
            <param name="item">
              <para/>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Int32"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberMemberList.Insert(System.Int32,System.Fabric.Query.ServiceGroupMemberMember)">
            <summary>
            <para>Insert a service group member into an index of the list.</para>
            </summary>
            <param name="index">
              <para />
            </param>
            <param name="item">
              <para />
            </param>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberMemberList.RemoveAt(System.Int32)">
            <summary>
            <para>Remove a service group member from the index of the list.</para>
            </summary>
            <param name="index">
              <para />
            </param>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberMemberList.Add(System.Fabric.Query.ServiceGroupMemberMember)">
            <summary>
            <para>Add service group member to the list.</para>
            </summary>
            <param name="item">
              <para />
            </param>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberMemberList.Clear">
            <summary>
            <para>Clear the service group member list.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberMemberList.Contains(System.Fabric.Query.ServiceGroupMemberMember)">
            <summary>
            <para>Check if a service group member existed in the list.</para>
            </summary>
            <param name="item">
              <para/>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Boolean"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberMemberList.CopyTo(System.Fabric.Query.ServiceGroupMemberMember[],System.Int32)">
            <summary>
            <para>Copy the service group member list into an array.</para>
            </summary>
            <param name="array">
              <para />
            </param>
            <param name="arrayIndex">
              <para />
            </param>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberMemberList.Remove(System.Fabric.Query.ServiceGroupMemberMember)">
            <summary>
            <para>Remove a service group member from the list.</para>
            </summary>
            <param name="item">
              <para/>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Boolean"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberMemberList.GetEnumerator">
            <summary>
            <para>Get the enumerator of the service group member list.</para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.Collections.Generic.IEnumerator`1"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberMemberList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <para>Get the enumerator of the service group member list.</para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.Collections.IEnumerator"/>.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Query.ServiceGroupMemberMemberList.Item(System.Int32)">
            <summary>
            <para>Get the service group member from an index.</para>
            </summary>
            <param name="index">
              <para/>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Fabric.Query.ServiceGroupMemberMember"/>.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Query.ServiceGroupMemberMemberList.Count">
            <summary>
            <para>Get the count of the service group member list.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Int32"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ServiceGroupMemberMemberList.IsReadOnly">
            <summary>
            <para>Get the flag that indicates if the service group member list is read only.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Boolean"/>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.ServiceGroupMemberList">
            <summary>
            <para>The type that stores all the results of service group member query.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberList.IndexOf(System.Fabric.Query.ServiceGroupMember)">
            <summary>
            <para>Get the index of a service group member.</para>
            </summary>
            <param name="item">
              <para/>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Int32"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberList.Insert(System.Int32,System.Fabric.Query.ServiceGroupMember)">
            <summary>
            <para>Insert a service group member to an index.</para>
            </summary>
            <param name="index">
              <para />
            </param>
            <param name="item">
              <para />
            </param>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberList.RemoveAt(System.Int32)">
            <summary>
            <para>Remove a service group member from an index.</para>
            </summary>
            <param name="index">
              <para />
            </param>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberList.Add(System.Fabric.Query.ServiceGroupMember)">
            <summary>
            <para>Add a service group member query result.</para>
            </summary>
            <param name="item">
            <para>The service group member object.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberList.Clear">
            <summary>
            <para>Clear the service group member list.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberList.Contains(System.Fabric.Query.ServiceGroupMember)">
            <summary>
            <para>Check if the same service group member existed in the list.</para>
            </summary>
            <param name="item">
            <para>The service group member to check from the list.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Boolean"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberList.CopyTo(System.Fabric.Query.ServiceGroupMember[],System.Int32)">
            <summary>
            <para>Copy the list to an array.</para>
            </summary>
            <param name="array">
              <para />
            </param>
            <param name="arrayIndex">
              <para />
            </param>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberList.Remove(System.Fabric.Query.ServiceGroupMember)">
            <summary>
            <para>Remove a service group member from the list.</para>
            </summary>
            <param name="item">
              <para/>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Boolean"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberList.GetEnumerator">
            <summary>
            <para>Get an enumerator of the list.</para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.Collections.Generic.IEnumerator`1"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <para>Get enumerator of the service group members.</para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.Collections.IEnumerator"/>.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Query.ServiceGroupMemberList.Item(System.Int32)">
            <summary>
            <para>Get the service group member at an index.</para>
            </summary>
            <param name="index">
              <para/>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Fabric.Query.ServiceGroupMember"/>.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Query.ServiceGroupMemberList.Count">
            <summary>
            <para>Get the count of service group member list.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Int32"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ServiceGroupMemberList.IsReadOnly">
            <summary>
            <para>Get the flag that indicates this list is read only.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Boolean"/>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.ServiceOperationName">
            <summary>
            <para>Specifies the current active life-cycle operation on a stateful service replica or stateless service instance 
            retrieved by calling <see cref="M:System.Fabric.FabricClient.QueryClient.GetDeployedReplicaListAsync(System.String,System.Uri)"/>.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceOperationName.Invalid">
            <summary>
            <para>Reserved for future use.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceOperationName.None">
            <summary>
            <para>The service replica or instance is not going through any life-cycle changes.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceOperationName.Open">
            <summary>
            <para>The service replica or instance is being opened.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceOperationName.ChangeRole">
            <summary>
            <para>The service replica is changing roles.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceOperationName.Close">
            <summary>
            <para>The service replica or instance is being closed.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceOperationName.Abort">
            <summary>
            <para>The service replica or instance is being aborted.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.ServicePartitionList">
            <summary>
            <para>Contains the partition information for a Service Fabric Service.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ServicePartitionList.#ctor">
            <summary>
            <para>
            Creates a service partition list.
            </para>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.Partition">
            <summary>
            <para>Represents a partition.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.Partition.ServiceKind">
            <summary>
            <para>The type of the partition (Stateful/Stateless)</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.Query.ServiceKind"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Partition.HealthState">
            <summary>
            <para>Gets the health state of the partition.</para>
            </summary>
            <value>
            <para>The health state of the partition.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Partition.PartitionInformation">
            <summary>
            <para>Gets the partition information.</para>
            </summary>
            <value>
            <para>The information of the partition.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Partition.PartitionStatus">
            <summary>
            <para>Gets the status of the partition.</para>
            </summary>
            <value>
            <para>The status of the partition.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.ServicePartitionStatus">
            <summary>
            <para>Specifies the service partition status.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServicePartitionStatus.Invalid">
            <summary>
            <para>Invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServicePartitionStatus.Ready">
            <summary>
            <para>Partition is ready.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServicePartitionStatus.NotReady">
            <summary>
            <para>Partition is not ready.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServicePartitionStatus.InQuorumLoss">
            <summary>
            <para>Partition is in quorum loss. This means that less than MinReplicaSetSize number of replicas are participating in quorum.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServicePartitionStatus.Reconfiguring">
            <summary>
            <para>Partition is undergoing a reconfiguration.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServicePartitionStatus.Deleting">
            <summary>
            <para>Partition is getting deleted.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.ServiceReplicaList">
            <summary>
            <para>Contains the replica information for a Service Fabric Partition.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ServiceReplicaList.#ctor">
            <summary>
            <para>
            Creates a service replica list.
            </para>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.Replica">
            <summary>
            <para>Represents a query replica.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.Replica.ServiceKind">
            <summary>
            Gets the service kind.
            </summary>
            <value>The service kind.</value>
        </member>
        <member name="P:System.Fabric.Query.Replica.Id">
            <summary>
            <para>Gets the replica identifier.</para>
            </summary>
            <value>
            <para>The replica identifier.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Replica.ReplicaStatus">
            <summary>
            <para>Gets the status of the replica.</para>
            </summary>
            <value>
            <para>The status of the replica.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Replica.HealthState">
            <summary>
            <para>Gets the health state of the replica.</para>
            </summary>
            <value>
            <para>The health state of the replica.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Replica.ReplicaAddress">
            <summary>
            <para>Gets the address the replica is listening on.</para>
            </summary>
            <value>
            <para>The address the replica is listening on.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Replica.NodeName">
            <summary>
            <para>Gets the node name the replica is running on.</para>
            </summary>
            <value>
            <para>The node name the replica is running on.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Replica.LastInBuildDuration">
            <summary>
            <para>Gets last in build duration.</para>
            </summary>
            <value>
            <para>The last in build duration.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Replica.LastInBuildDurationInSeconds">
            <summary>
            Gets last in build duration in seconds.
            </summary>
            <value>Last in build duration in seconds.</value>
        </member>
        <member name="T:System.Fabric.Query.ServiceReplicaStatus">
            <summary>
            <para>Specifies the status of the replica.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceReplicaStatus.Invalid">
            <summary>
            <para>Invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceReplicaStatus.InBuild">
            <summary>
            <para>Replica is being built. This means that a primary replica is seeding this replica.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceReplicaStatus.Standby">
            <summary>
            <para>
            The replica has restarted and it is being kept as a hot standby.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceReplicaStatus.Ready">
            <summary>
            <para>Replica is ready.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceReplicaStatus.Down">
            <summary>
            <para>Replica is down.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceReplicaStatus.Dropped">
            <summary>
            <para>Replica is dropped. This means that the replica has been removed from the replica set. If it is persisted, 
            its state has been deleted.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.ServiceReplicaStatusFilter">
            <summary>
            <para>Enumerates the filter used for matching the replica status for replicas that should be returned by query.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceReplicaStatusFilter.Default">
            <summary>
            <para>Returns all replicas other than dropped replicas.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceReplicaStatusFilter.All">
            <summary>
            <para>Returns all replicas.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceReplicaStatusFilter.InBuild">
            <summary>
            <para>Returns all InBuild replicas.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceReplicaStatusFilter.Standby">
            <summary>
            <para>Returns all StandBy replicas.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceReplicaStatusFilter.Ready">
            <summary>
            <para>Returns only ready replicas.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceReplicaStatusFilter.Down">
            <summary>
            <para>Returns all down replicas.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceReplicaStatusFilter.Dropped">
            <summary>
            <para>Returns all Dropped replicas.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.ServiceKind">
            <summary>
            <para>Specifies the service kind.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceKind.Invalid">
            <summary>
            <para>Invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceKind.Stateless">
            <summary>
            <para>Does not use Service Fabric to make its state highly available or reliable.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceKind.Stateful">
            <summary>
            <para>Uses Service Fabric to make its state or part of its state highly available and reliable.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.Service">
            <summary>
            <para>Represents a service.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.Service.ServiceKind">
            <summary>
            <para>Gets the service kind.</para>
            </summary>
            <value>
            <para>The service kind.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Service.ServiceName">
            <summary>
            <para>Gets the service name.</para>
            </summary>
            <value>
            <para>The service name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Service.ServiceTypeName">
            <summary>
            <para>Gets the service type name.</para>
            </summary>
            <value>
            <para>The service type name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Service.ServiceManifestVersion">
            <summary>
            <para>Gets the service manifest version.</para>
            </summary>
            <value>
            <para>The service manifest version.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Service.HealthState">
            <summary>
            <para>Gets the health state.</para>
            </summary>
            <value>
            <para>The health state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Service.ServiceStatus">
            <summary>
            <para>Gets the status of the service.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.Query.ServiceStatus"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.Service.IsServiceGroup">
            <summary>
            <para>Flag indicates if this service is a regular service or a service group.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Boolean"/>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.ServiceGroupMember">
            <summary>
            <para>The type that stores the service group member query.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.ServiceGroupMember.ServiceName">
            <summary>
            <para>The service name of the service group query.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Uri"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ServiceGroupMember.ServiceGroupMemberMembers">
            <summary>
            <para>The members of this service group member query.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.Query.ServiceGroupMemberMemberList"/>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.ServiceGroupMemberMember">
            <summary>
            <para>The type that contains a service group member.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.ServiceGroupMemberMember.ServiceName">
            <summary>
            <para>The service name of a service group member.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Uri"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ServiceGroupMemberMember.ServiceTypeName">
            <summary>
            <para>The type of a service group member.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String"/>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.ServiceStatus">
            <summary>
            <para>Represents the status of a service retrieved by calling <see cref="M:System.Fabric.FabricClient.QueryClient.GetServiceListAsync(System.Uri)"/>.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceStatus.Unknown">
            <summary>
            <para>The service status is not yet known.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceStatus.Active">
            <summary>
            <para>The service has been successfully created.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceStatus.Upgrading">
            <summary>
            <para>The service is being upgraded.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Query.ServiceStatus.Deleting">
            <summary>
            <para>The service is being deleted.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.ServiceTypeList">
            <summary>
            <para>Represents a list of service type.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ServiceTypeList.IndexOf(System.Fabric.Query.ServiceType)">
            <summary>
            <para>Searches for the specified <see cref="T:System.Fabric.Query.ServiceType"/>  and returns the zero-based index of the first 
            occurrence within the entire <see cref="T:System.Fabric.Query.ServiceTypeList"/>.</para>
            </summary>
            <param name="item">
            <para>The item to search.</para>
            </param>
            <returns>
            <para>The zero-based index of the first occurrence within the entire <see cref="T:System.Fabric.Query.ServiceTypeList"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ServiceTypeList.Insert(System.Int32,System.Fabric.Query.ServiceType)">
            <summary>
            <para>Inserts an element into the <see cref="T:System.Fabric.Query.ServiceTypeList"/>  at the specified index.</para>
            </summary>
            <param name="index">
            <para>The index.</para>
            </param>
            <param name="item">
            <para>The item to insert.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.ServiceTypeList.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the element at the specified index of the <see cref="T:System.Fabric.Query.ServiceTypeList"/>..</para>
            </summary>
            <param name="index">
            <para>The index where to remove the item.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.ServiceTypeList.Add(System.Fabric.Query.ServiceType)">
            <summary>
            <para>Adds an object to the end of the <see cref="T:System.Fabric.Query.ServiceTypeList"/>.</para>
            </summary>
            <param name="item">
            <para>The item to add.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.ServiceTypeList.Clear">
            <summary>
            <para>Removes all elements from the <see cref="T:System.Fabric.Query.ServiceTypeList"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ServiceTypeList.Contains(System.Fabric.Query.ServiceType)">
            <summary>
            <para>Determines whether an element is in the <see cref="T:System.Fabric.Query.ServiceTypeList"/>..</para>
            </summary>
            <param name="item">
            <para>The item to search.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the item is in the <see cref="T:System.Fabric.Query.ServiceTypeList"/>; 
            otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ServiceTypeList.CopyTo(System.Fabric.Query.ServiceType[],System.Int32)">
            <summary>
            <para>Copies the entire <see cref="T:System.Fabric.Query.ServiceTypeList"/> to a compatible one-dimensional 
            <see cref="T:System.Fabric.Query.ServiceTypeList"/>, starting at the specified index of the target array.</para>
            </summary>
            <param name="array">
            <para>An array of service type.</para>
            </param>
            <param name="arrayIndex">
            <para>The array index.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.ServiceTypeList.Remove(System.Fabric.Query.ServiceType)">
            <summary>
            <para>Removes the first occurrence of a specific object from the <see cref="T:System.Fabric.Query.ServiceTypeList"/>..</para>
            </summary>
            <param name="item">
            <para>The item to remove.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the item exist; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ServiceTypeList.GetEnumerator">
            <summary>
            <para>Returns an enumerator for the entire <see cref="T:System.Fabric.Query.ServiceTypeList"/>..</para>
            </summary>
            <returns>
            <para>An enumerator for the entire <see cref="T:System.Fabric.Query.ServiceTypeList"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ServiceTypeList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <para>Returns the enumerator for the <see cref="T:System.Fabric.Query.ServiceTypeList"/>..</para>
            </summary>
            <returns>
            <para>The numerator for the <see cref="T:System.Fabric.Query.ServiceTypeList"/>.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Query.ServiceTypeList.Item(System.Int32)">
            <summary>
            <para>Gets or sets the element at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the element to get or set.</para>
            </param>
            <returns>
            <para>The element at the specified index.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Query.ServiceTypeList.Count">
            <summary>
            <para>Gets or sets the number of elements in the <see cref="T:System.Fabric.Query.ServiceTypeList"/>.</para>
            </summary>
            <value>
            <para>The number of elements in the <see cref="T:System.Fabric.Query.ServiceTypeList"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ServiceTypeList.IsReadOnly">
            <summary>
            <para>Gets or sets whether <see cref="T:System.Fabric.Query.ServiceTypeList"/> is read-only.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the <see cref="T:System.Fabric.Query.ServiceTypeList"/> is read-only; 
            otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.ServiceGroupMemberTypeList">
            <summary>
              <para />
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberTypeList.IndexOf(System.Fabric.Query.ServiceGroupMemberType)">
            <summary>
            <para>Searches the index of the first occurrence of the element in the list.</para>
            </summary>
            <param name="item">
            <para>The item to search against the list.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Int32"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberTypeList.Insert(System.Int32,System.Fabric.Query.ServiceGroupMemberType)">
            <summary>
            <para>Inserts a service group member type into the list of an index.</para>
            </summary>
            <param name="index">
            <para>The index of the list to insert.</para>
            </param>
            <param name="item">
            <para>The service group member type to be inserted to the list.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberTypeList.RemoveAt(System.Int32)">
            <summary>
            <para>Removes a service group member type at the specified index.</para>
            </summary>
            <param name="index">
            <para>The index to remove from the list.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberTypeList.Add(System.Fabric.Query.ServiceGroupMemberType)">
            <summary>
            <para>Adds a service group member type to the list.</para>
            </summary>
            <param name="item">
            <para>The service group member type to add to the list.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberTypeList.Clear">
            <summary>
            <para>Clears the service group member types list.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberTypeList.Contains(System.Fabric.Query.ServiceGroupMemberType)">
            <summary>
            <para>Checks if a given service group member type exist in the list.</para>
            </summary>
            <param name="item">
            <para>The service group member type to check against the list.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Boolean"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberTypeList.CopyTo(System.Fabric.Query.ServiceGroupMemberType[],System.Int32)">
            <summary>
            <para>Copies the entire list to an array, starting at the specified index of the target array.</para>
            </summary>
            <param name="array">
            <para>The destination array to copy from the list.</para>
            </param>
            <param name="arrayIndex">
            <para>The index in array to begin copy.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberTypeList.Remove(System.Fabric.Query.ServiceGroupMemberType)">
            <summary>
            <para>Removes the first occurrence of the given service group member type from the list.</para>
            </summary>
            <param name="item">
            <para>Thee service group member type to remove from the list.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Boolean"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberTypeList.GetEnumerator">
            <summary>
            <para>Gets the enumerator of the list.</para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.Collections.Generic.IEnumerator`1"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Query.ServiceGroupMemberTypeList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <para>Gets the enumerator of the list.</para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.Collections.IEnumerator"/>.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Query.ServiceGroupMemberTypeList.Item(System.Int32)">
            <summary>
            <para>Access the service group member type of a specified index.</para>
            </summary>
            <param name="index">
            <para>The index of the service group member types.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Fabric.Query.ServiceGroupMemberType"/>.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Query.ServiceGroupMemberTypeList.Count">
            <summary>
            <para>The size of service group member types.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Int32"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ServiceGroupMemberTypeList.IsReadOnly">
            <summary>
            <para>Gets a value indicating whether this ICollection is read-only.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Boolean"/>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.ServiceType">
            <summary>
            <para>Represents a service type.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.ServiceType.ServiceTypeDescription">
            <summary>
            <para>Gets the service type description.</para>
            </summary>
            <value>
            <para>The service type description.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ServiceType.ServiceManifestVersion">
            <summary>
            <para>Gets the service manifest version.</para>
            </summary>
            <value>
            <para>The service manifest version.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ServiceType.ServiceManifestName">
            <summary>
            <para>Gets the service manifest name</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ServiceType.IsServiceGroup">
            <summary>
            <para> 
            Flag represent whether the service is a service group.
            </para>
            </summary>
            <value>
            <para>The boolean indicates whether the service is a service group.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.ServiceGroupMemberType">
            <summary>
            <para>The type that stores the type of service group member query result.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.ServiceGroupMemberType.ServiceGroupMemberTypeDescription">
            <summary>
            <para>The type description of the service group.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Collections.Generic.ICollection`1"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ServiceGroupMemberType.ServiceManifestVersion">
            <summary>
            <para>The service manifest version of the service group.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.ServiceGroupMemberType.ServiceManifestName">
            <summary>
            <para>The service manifest name of the service group.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String"/>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.StatefulServicePartition">
            <summary>
            <para>Represents a stateful service partition.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.StatefulServicePartition.TargetReplicaSetSize">
            <summary>
            <para>Gets the target replica set size.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Int64"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.StatefulServicePartition.MinReplicaSetSize">
            <summary>
            <para>Gets the minimum replica set size allowed for the partition to keep making progress.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Int64"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.StatefulServicePartition.LastQuorumLossDuration">
            <summary>
            <para>Gets the last quorum loss duration.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.TimeSpan"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Query.StatefulServicePartition.PrimaryEpoch">
            <summary>
            <para>
            Gets the epoch of the partition as seen by the replica
            </para>
            </summary>
            <value>
            <para>The epoch of the partition</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.StatefulServiceReplica">
            <summary>
            <para>Represents a stateful service replica.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.StatefulServiceReplica.ReplicaRole">
            <summary>
            <para>Gets the replica role.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.ReplicaRole"/>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.StatefulService">
            <summary>
            <para>Represents a stateful service.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.StatefulService.HasPersistedState">
            <summary>
            <para>Gets a value that determines whether the current service has persisted state.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the current service has persisted state; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.StatelessServiceInstance">
            <summary>
            <para>Represents a stateless service instance.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Query.StatelessServicePartition">
            <summary>
            <para>Represents a stateless service partition.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Query.StatelessServicePartition.InstanceCount">
            <summary>
            <para>Gets the instance count.</para>
            </summary>
            <value>
            <para>The instance count.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Query.StatelessService">
            <summary>
            <para>Represents a stateless service.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Repair.RepairScopeIdentifier">
            <summary>
            <para>Describes the scope of a repair task.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Repair.RepairScopeIdentifier.Kind">
            <summary>
            <para>Gets the kind of the <see cref="T:System.Fabric.Repair.RepairScopeIdentifier"/> represented by the current object.</para>
            </summary>
            <value>
            <para>The kind of the <see cref="T:System.Fabric.Repair.RepairScopeIdentifier"/> represented by the current object.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Repair.ClusterRepairTask">
            <summary>
            <para>Represents a repair task that has Cluster scope.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Repair.RepairTask">
            <summary>
            <para>Represents a repair task, which includes information about what kind of repair was requested, what its progress 
            is, and what its final result was.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.Scope">
            <summary>
            <para>Gets an object describing the scope of the repair task.</para>
            </summary>
            <value>
            <para>A <see cref="T:System.Fabric.Repair.RepairScopeIdentifier"/> object describing the scope of the repair task.</para>
            </value>
            <remarks>
            <para>The repair task scope determines the resource against which access checks are performed when the repair task 
            is created, modified, deleted, or retrieved.  Entities impacted by a repair must be contained within the scope of 
            the repair task.  For example, repairs which impact nodes require that the repair task be created under the Cluster scope.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.TaskId">
            <summary>
            <para>Gets the identifier of the repair task.</para>
            </summary>
            <value>
            <para>The identifier of the repair task.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.Version">
            <summary>
            <para>Gets or sets the version of the repair task.</para>
            </summary>
            <value>
            <para>The version of the repair task.</para>
            </value>
            <remarks>
            <para>When creating a new repair task, the version must be set to zero.  When updating a repair task via the 
            UpdateRepairExecutionStateAsync method, the version is used for optimistic concurrency checks.  If the version is 
            set to zero, the update will not check for write conflicts.  If the version is set to a non-zero value, then the 
            update will only succeed if the actual current version of the repair task matches this value.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.Description">
            <summary>
            <para>Gets or sets a description of the purpose or other informational details of the repair task.</para>
            </summary>
            <value>
            <para>A description of the purpose or other informational details of the repair task.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.State">
            <summary>
            <para>Gets or sets the workflow state of the repair task.</para>
            </summary>
            <value>
            <para>The workflow state of the repair task.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.Flags">
            <summary>
            <para>Gets the flags that give additional details about the status of the repair task.</para>
            </summary>
            <value>
            <para>The flags that give additional details about the status of the repair task.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.Action">
            <summary>
            <para>Gets the requested repair action.</para>
            </summary>
            <value>
            <para>The requested repair action.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.Target">
            <summary>
            <para>Gets or sets an object describing which entities the requested repair action is targeting.</para>
            </summary>
            <value>
            <para>An object describing which entities the requested repair action is targeting.</para>
            </value>
            <remarks>
            <para>Target may be null if the repair action does not require information about specific targets.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.Executor">
            <summary>
            <para>Gets or sets the name of the repair executor.</para>
            </summary>
            <value>
            <para>The name of the repair executor.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.ExecutorData">
            <summary>
            <para>Gets or sets a data string that the repair executor can use to store its internal state.</para>
            </summary>
            <value>
            <para>A data string that the repair executor can use to store its internal state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.Impact">
            <summary>
            <para>Gets an object that describes the impact of the repair.</para>
            </summary>
            <value>
            <para>A <see cref="T:System.Fabric.Repair.RepairImpactDescription"/> object that describes the impact of the repair.</para>
            </value>
            <remarks>
            <para>Impact must be specified by the repair executor upon transitioning to the Preparing state. The impact object 
            determines what actions the system will take to prepare for the impact of the repair, prior to approving execution 
            of the repair.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.ResultStatus">
            <summary>
            <para>Gets or sets a value describing the overall result of the repair task execution.</para>
            </summary>
            <value>
            <para>A <see cref="T:System.Fabric.Repair.RepairTaskResult"/> value describing the overall result of the repair 
            task execution.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.ResultCode">
            <summary>
            <para>Gets or sets a value providing additional details about the result of the repair task execution.</para>
            </summary>
            <value>
            <para>A value providing additional details about the result of the repair task execution.</para>
            </value>
            <remarks>
            <para>This value should be an HRESULT.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.ResultDetails">
            <summary>
            <para>Gets or sets a string providing additional details about the result of the repair task execution.</para>
            </summary>
            <value>
            <para>A string providing additional details about the result of the repair task execution.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.CreatedTimestamp">
            <summary>
            <para>Gets the time when the repair task entered the Created state.</para>
            </summary>
            <value>
            <para>The time when the repair task entered the Created state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.ClaimedTimestamp">
            <summary>
            <para>Gets the time when the repair task entered the Claimed state.</para>
            </summary>
            <value>
            <para>The time when the repair task entered the Claimed state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.PreparingTimestamp">
            <summary>
            <para>Gets the time when the repair task entered the Preparing state.</para>
            </summary>
            <value>
            <para>The time when the repair task entered the Preparing state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.ApprovedTimestamp">
            <summary>
            <para>Gets the time when the repair task entered the Approved state.</para>
            </summary>
            <value>
            <para>The time when the repair task entered the Approved state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.ExecutingTimestamp">
            <summary>
            <para>Gets the time when the repair task entered the Executing state.</para>
            </summary>
            <value>
            <para>The time when the repair task entered the Executing state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.RestoringTimestamp">
            <summary>
            <para>Gets the time when the repair task entered the Restoring state.</para>
            </summary>
            <value>
            <para>The time when the repair task entered the Restoring state.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.RepairTask.CompletedTimestamp">
            <summary>
            <para>Gets the time when the repair task entered the Completed state.</para>
            </summary>
            <value>
            <para>The time when the repair task entered the Completed state.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Repair.ClusterRepairTask.#ctor(System.String,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Repair.ClusterRepairTask"/> class.</para>
            </summary>
            <param name="taskId">
            <para>The ID of the repair task.</para>
            </param>
            <param name="action">
            <para>The repair action being requested.</para>
            </param>
        </member>
        <member name="T:System.Fabric.Repair.NodeImpact">
            <summary>
            <para>Describes the expected impact of a repair to a particular node.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Repair.NodeImpact.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Repair.NodeImpact"/> class.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Repair.NodeImpact.#ctor(System.String,System.Fabric.Repair.NodeImpactLevel)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Repair.NodeImpact"/> class.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the impacted node.</para>
            </param>
            <param name="impactLevel">
            <para>The level of impact expected.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Repair.NodeImpact.ToString">
            <summary>
            <para>Converts the value of the current object to a string representation.</para>
            </summary>
            <returns>
            <para>A string representation of the node name and impact level.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Repair.NodeImpact.NodeName">
            <summary>
            <para>Gets or sets the name of the impacted node.</para>
            </summary>
            <value>
            <para>The name of the impacted node.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.NodeImpact.ImpactLevel">
            <summary>
            <para>Gets or sets the level of impact expected.</para>
            </summary>
            <value>
            <para>The level of impact expected.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Repair.NodeImpactLevel">
            <summary>
            <para>Enumerates the effective impact that a repair is expected to have on a particular node.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.NodeImpactLevel.Invalid">
            <summary>
            <para>Indicates that the node impact level is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.NodeImpactLevel.None">
            <summary>
            <para>Indicates that no impact is expected.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.NodeImpactLevel.Restart">
            <summary>
            <para>Indicates that the node is expected to stop and eventually restart.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.NodeImpactLevel.RemoveData">
            <summary>
            <para>Indicates that the node is expected to stop, and may lose all of its persisted state prior to restarting.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Repair.NodeRepairImpactDescription">
            <summary>
            <para>Represents the expected impact of a repair on a set of nodes.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Repair.RepairImpactDescription">
            <summary>
            <para>Describes the expected impact of executing a repair task.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Repair.RepairImpactDescription.Kind">
            <summary>
            <para>Gets the kind of the <see cref="T:System.Fabric.Repair.RepairImpactDescription"/> represented by the current object.</para>
            </summary>
            <value>
            <para>The kind of the <see cref="T:System.Fabric.Repair.RepairImpactDescription"/> represented by the current object.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Repair.NodeRepairImpactDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Repair.NodeRepairImpactDescription"/> class with 
            an empty impact list.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Repair.NodeRepairImpactDescription.ToString">
            <summary>
            <para>Converts the value of the current object to a string representation.</para>
            </summary>
            <returns>
            <para>A string representation of the value of <see cref="P:System.Fabric.Repair.NodeRepairImpactDescription.ImpactedNodes"/>.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Repair.NodeRepairImpactDescription.ImpactedNodes">
            <summary>
            <para>Gets the list of impacted nodes.</para>
            </summary>
            <value>
            <para>A list of <see cref="T:System.Fabric.Repair.NodeImpact"/> objects describing the impact of the repair.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Repair.NodeRepairTargetDescription">
            <summary>
            <para>Describes the list of nodes targeted by a repair action.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Repair.RepairTargetDescription">
            <summary>
            <para>Describes the entities targeted by a repair action.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.Repair.RepairTargetDescription.Kind">
            <summary>
            <para>Gets the kind of the <see cref="T:System.Fabric.Repair.RepairTargetDescription"/> represented by the current object.</para>
            </summary>
            <value>
            <para>The kind of the <see cref="T:System.Fabric.Repair.RepairTargetDescription"/> represented by the current object.</para>
            </value>
        </member>
        <member name="M:System.Fabric.Repair.NodeRepairTargetDescription.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Repair.NodeRepairTargetDescription"/> class with 
            an empty list of node names.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Repair.NodeRepairTargetDescription.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Repair.NodeRepairTargetDescription"/> class that 
            contains the given node name as the only element in its node list.</para>
            </summary>
            <param name="nodeName">
            <para>The name of the node to be added to the list.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Repair.NodeRepairTargetDescription.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.Repair.NodeRepairTargetDescription"/> class that 
            contains elements copied from the specified collection.</para>
            </summary>
            <param name="nodeNames">
            <para>The collection whose elements are copied to the new list.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Repair.NodeRepairTargetDescription.ToString">
            <summary>
            <para>Converts the value of the current object to a string representation.</para>
            </summary>
            <returns>
            <para>A string representation of the value of <see cref="P:System.Fabric.Repair.NodeRepairTargetDescription.Nodes"/>.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Repair.NodeRepairTargetDescription.Nodes">
            <summary>
            <para>Gets the list of node names.</para>
            </summary>
            <value>
            <para>A list of node names.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Repair.RepairImpactKind">
            <summary>
            <para>Specifies the kind of the <see cref="T:System.Fabric.Repair.RepairImpactDescription"/>.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairImpactKind.Invalid">
            <summary>
            <para>The repair impact is not valid or is of an unknown type.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairImpactKind.Node">
            <summary>
            <para>The repair impact affects a set of Service Fabric nodes.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Repair.RepairScopeIdentifierKind">
            <summary>
            <para>Specifies the kind of the <see cref="T:System.Fabric.Repair.RepairScopeIdentifier"/>.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairScopeIdentifierKind.Invalid">
            <summary>
            <para>The repair scope identifier is not valid or is of an unknown type.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairScopeIdentifierKind.Cluster">
            <summary>
            <para>The repair scope identifier represents the entire cluster.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Repair.RepairTargetKind">
            <summary>
            <para>Specifies the kind of the <see cref="T:System.Fabric.Repair.RepairTargetDescription"/>.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTargetKind.Invalid">
            <summary>
            <para>The repair target is not valid or is of an unknown type.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTargetKind.Node">
            <summary>
            <para>The repair target is a set of Service Fabric nodes.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Repair.RepairTaskFlags">
            <summary>
            <para>Defines flags that provide extended status information about a repair task.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskFlags.None">
            <summary>
            <para>No flags are specified.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskFlags.CancelRequested">
            <summary>
            <para>A user has requested cancellation of the repair task.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskFlags.AbortRequested">
            <summary>
            <para>A user has requested an abort of the repair task.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskFlags.ForcedApproval">
            <summary>
            <para>A user has forced the approval of the repair task, so it may have executed without normal safety guarantees.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskFlags.ValidMask">
            <summary>
            <para>A mask that includes all valid repair task flags.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Repair.RepairTaskList">
            <summary>
            <para>Represents a list of <see cref="T:System.Fabric.Repair.RepairTask"/> objects.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Repair.RepairTaskList.IndexOf(System.Fabric.Repair.RepairTask)">
            <summary>
            <para>Determines the index of a specific item in the <see cref="T:System.Fabric.Repair.RepairTaskList"/>.</para>
            </summary>
            <param name="item">
            <para>The object to locate in the list.</para>
            </param>
            <returns>
            <para>The index of item if found in the list; otherwise, -1.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Repair.RepairTaskList.Insert(System.Int32,System.Fabric.Repair.RepairTask)">
            <summary>
            <para>Inserts an item to the <see cref="T:System.Fabric.Repair.RepairTaskList"/> at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index at which item should be inserted.</para>
            </param>
            <param name="item">
            <para>The object to insert into the list.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Repair.RepairTaskList.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the item at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the item to remove.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Repair.RepairTaskList.Add(System.Fabric.Repair.RepairTask)">
            <summary>
            <para>Adds an item to the <see cref="T:System.Fabric.Repair.RepairTaskList"/>.</para>
            </summary>
            <param name="item">
            <para>The object to add to the list.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Repair.RepairTaskList.Clear">
            <summary>
            <para>Removes all items from the <see cref="T:System.Fabric.Repair.RepairTaskList"/>.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Repair.RepairTaskList.Contains(System.Fabric.Repair.RepairTask)">
            <summary>
            <para>Determines whether the <see cref="T:System.Fabric.Repair.RepairTaskList"/> contains a specific value.</para>
            </summary>
            <param name="item">
            <para>The object to locate in the list.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the <see cref="T:System.Fabric.Repair.RepairTaskList"/> contains a 
            specific value; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Repair.RepairTaskList.CopyTo(System.Fabric.Repair.RepairTask[],System.Int32)">
            <summary>
            <para>Copies the elements of the <see cref="T:System.Fabric.Repair.RepairTaskList"/> to an Array, starting at a 
            particular Array index.</para>
            </summary>
            <param name="array">
            <para>The one-dimensional Array that is the destination of elements copied from 
            <see cref="T:System.Fabric.Repair.RepairTaskList"/>. The Array must have zero-based indexing.</para>
            </param>
            <param name="arrayIndex">
            <para>The zero-based index in array at which copying begins.</para>
            </param>
        </member>
        <member name="M:System.Fabric.Repair.RepairTaskList.Remove(System.Fabric.Repair.RepairTask)">
            <summary>
            <para>Removes the first occurrence of a specific object from the <see cref="T:System.Fabric.Repair.RepairTaskList"/>.</para>
            </summary>
            <param name="item">
            <para>The object to remove from the list.</para>
            </param>
            <returns>
            <para>
                <languageKeyword>true</languageKeyword> if the item was successfully removed from the list; otherwise, 
            <languageKeyword>false</languageKeyword>. This method also returns false if item is not found in the original list.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Repair.RepairTaskList.GetEnumerator">
            <summary>
            <para>Returns an enumerator that iterates through the collection.</para>
            </summary>
            <returns>
            <para>An enumerator that can be used to iterate through the collection.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Repair.RepairTaskList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            <para>Returns an enumerator that iterates through the collection.</para>
            </summary>
            <returns>
            <para>An enumerator that can be used to iterate through the collection.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Repair.RepairTaskList.Item(System.Int32)">
            <summary>
            <para>Gets or sets the element at the specified index.</para>
            </summary>
            <param name="index">
            <para>The zero-based index of the element to get or set.</para>
            </param>
            <returns>
            <para>The element at the specified index.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.Repair.RepairTaskList.Count">
            <summary>
            <para>Gets the number of elements contained in the <see cref="T:System.Fabric.Repair.RepairTaskList"/>.</para>
            </summary>
            <value>
            <para>The number of elements contained in the <see cref="T:System.Fabric.Repair.RepairTaskList"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.Repair.RepairTaskList.IsReadOnly">
            <summary>
            <para>Gets a value indicating whether the <see cref="T:System.Fabric.Repair.RepairTaskList"/> is read-only.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the <see cref="T:System.Fabric.Repair.RepairTaskList"/> is read-only; 
            otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Repair.RepairTaskResult">
            <summary>
            <para>Specifies the result of the repair task.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskResult.Invalid">
            <summary>
            <para>Indicates that the repair task result is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskResult.Succeeded">
            <summary>
            <para>Indicates that the repair task completed execution successfully.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskResult.Cancelled">
            <summary>
            <para>Indicates that the repair task was cancelled prior to execution.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskResult.Interrupted">
            <summary>
            <para>Indicates that execution of the repair task was interrupted by a cancellation request after some work had 
            already been performed.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskResult.Failed">
            <summary>
            <para>Indicates that there was a failure during execution of the repair task. Some work may have been performed.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskResult.Pending">
            <summary>
            <para>Indicates that the repair task result is not yet available, because the repair task has not finished executing.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Repair.RepairTaskState">
            <summary>
            <para>Specifies the workflow state of a repair task.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskState.Invalid">
            <summary>
            <para>Indicates that the repair task state is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskState.Created">
            <summary>
            <para>Indicates that the repair task has been created.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskState.Claimed">
            <summary>
            <para>Indicates that the repair task has been claimed by a repair executor.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskState.Preparing">
            <summary>
            <para>Indicates that the Repair Manager is preparing the system to handle the impact of the repair task, usually by 
            taking resources offline gracefully.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskState.Approved">
            <summary>
            <para>Indicates that the repair task has been approved by the Repair Manager and is safe to execute.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskState.Executing">
            <summary>
            <para>Indicates that execution of the repair task is in progress.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskState.Restoring">
            <summary>
            <para>Indicates that the Repair Manager is restoring the system to its pre-repair state, usually by bringing 
            resources back online.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskState.Completed">
            <summary>
            <para>Indicates that the repair task has completed, and no further state changes will occur.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Repair.RepairTaskStateFilter">
            <summary>
            <para>Specifies values that can be combined as a bitmask to retrieve repair tasks filtered by their current workflow state.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskStateFilter.Default">
            <summary>
            <para>Includes all repair tasks, regardless of state.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskStateFilter.Created">
            <summary>
            <para>Includes repair tasks in the Created state.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskStateFilter.Claimed">
            <summary>
            <para>Includes repair tasks in the Claimed state.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskStateFilter.Preparing">
            <summary>
            <para>Includes repair tasks in the Preparing state.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskStateFilter.Approved">
            <summary>
            <para>Includes repair tasks in the Approved state.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskStateFilter.Executing">
            <summary>
            <para>Includes repair tasks in the Executing state.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskStateFilter.Restoring">
            <summary>
            <para>Includes repair tasks in the Restoring state.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskStateFilter.Completed">
            <summary>
            <para>Includes repair tasks in the Completed state.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskStateFilter.ReadyToExecute">
            <summary>
            <para>Includes repair tasks in the Approved or Executing state.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskStateFilter.Active">
            <summary>
            <para>Includes repair tasks that are not completed.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.RepairTaskStateFilter.All">
            <summary>
            <para>Includes all repair tasks, regardless of state.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.Repair.SystemNodeRepairAction">
            <summary>
            <para>Specifies node repair actions for which the system has a built-in executor.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.SystemNodeRepairAction.Reboot">
            <summary>
            <para>Reboots the OS of the target nodes.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.SystemNodeRepairAction.ReimageOS">
            <summary>
            <para>Reimages the OS volume of the target nodes.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.Repair.SystemNodeRepairAction.FullReimage">
            <summary>
            <para>Reimages all disk volumes of the target nodes, destroying all data stored on the nodes.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.ReplicaInformation">
            <summary>
            FOR INTERNAL USE ONLY. Represents information about a replica.
            </summary>
        </member>
        <member name="M:System.Fabric.ReplicaInformation.#ctor">
            <summary>
            Creates a new instance of a <see cref="T:System.Fabric.ReplicaInformation"/> class.
            </summary>
        </member>
        <member name="P:System.Fabric.ReplicaInformation.Id">
            <summary>
            FOR INTERNAL USE ONLY.
            Gets the replica id.
            </summary>
            <value>The replica id.</value>
        </member>
        <member name="P:System.Fabric.ReplicaInformation.Role">
            <summary>
            FOR INTERNAL USE ONLY.
            Gets the replica role.
            </summary>
            <value>The replica role.</value>
        </member>
        <member name="P:System.Fabric.ReplicaInformation.Status">
            <summary>
            FOR INTERNAL USE ONLY.
            Gets the replica status.
            </summary>
            <value>The replica status.</value>
        </member>
        <member name="P:System.Fabric.ReplicaInformation.ReplicatorAddress">
            <summary>
            FOR INTERNAL USE ONLY.
            Gets the replicator address.
            </summary>
            <value>The replicator address.</value>
        </member>
        <member name="P:System.Fabric.ReplicaInformation.CatchUpCapability">
            <summary>
            FOR INTERNAL USE ONLY.
            Gets the sequence number that represents the catchup capability.
            </summary>
            <value>The catchup capability.</value>
        </member>
        <member name="P:System.Fabric.ReplicaInformation.CurrentProgress">
            <summary>
            FOR INTERNAL USE ONLY.
            Gets the sequence number that represents the replica current progress.
            </summary>
            <value>The replica current progress.</value>
        </member>
        <member name="T:System.Fabric.ReplicaOpenMode">
            <summary>
            <para>Indicates whether this replica is a new replica, or whether it is a recreation of a previously existing replica.</para>
            </summary>
            <remarks>
            <para>Knowing whether a replica is new or a recreation or a re-instantiation of a replica that went down and came back enables the 
            replica to perform some additional error checking.</para>
            <para>The following table describes the possible states and the error checking that services can perform.</para>
            </remarks>
        </member>
        <member name="F:System.Fabric.ReplicaOpenMode.Invalid">
            <summary>
            <para>Indicates that this replica is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ReplicaOpenMode.New">
            <summary>
            <para>Indicates that this replica is activated on this node for the first time.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ReplicaOpenMode.Existing">
            <summary>
            <para>Indicates that this replica previously existed and was recovered or restarted or both.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.ReplicaRole">
            <summary>
            <para>Indicates the role of a stateful service replica. </para>
            </summary>
            <remarks>
            <para>Service Fabric requires different behaviors from a service replica depending on what role it currently performs.</para>
            </remarks>
        </member>
        <member name="F:System.Fabric.ReplicaRole.Unknown">
            <summary>
            <para>Indicates the initial role that a replica is created in.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ReplicaRole.None">
            <summary>
            <para>Specifies that the replica has no responsibility in regard to the replica set. </para>
            </summary>
            <remarks>
            <para>Replicas start in this state when they have no existing persistent state. When 
            <see cref="M:System.Fabric.IStatefulServiceReplica.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)"/> indicates 
            this role, it is safe to delete any persistent state that is associated with this replica.</para>
            </remarks>
        </member>
        <member name="F:System.Fabric.ReplicaRole.Primary">
            <summary>
            <para>Refers to the replica in the set on which all read and write operations are complete in order to enforce strong consistency semantics. 
            Read operations are handled directly by the Primary replica, while write operations must be acknowledged by a quorum of the replicas in the 
            replica set. There can only be one Primary replica in a replica set at a time.  </para>
            </summary>
            <remarks>
              <para />
            </remarks>
        </member>
        <member name="F:System.Fabric.ReplicaRole.IdleSecondary">
            <summary>
            <para>Refers to a replica in the set that receives a state transfer from the Primary replica to prepare for becoming an active Secondary replica. 
            There can be multiple Idle Secondary replicas in a replica set at a time. Idle Secondary replicas do not count as a part of a write quorum.  </para>
            </summary>
            <remarks>
              <para />
            </remarks>
        </member>
        <member name="F:System.Fabric.ReplicaRole.ActiveSecondary">
            <summary>
            <para>Refers to a replica in the set that receives state updates from the Primary replica, applies them, and sends acknowledgements back. 
            Secondary replicas must participate in the write quorum for a replica set. There can be multiple active Secondary replicas in a replica set 
            at a time. The number of active Secondary replicas is configurable that the reliability subsystem should maintain.  </para>
            </summary>
            <remarks>
              <para />
            </remarks>
        </member>
        <member name="T:System.Fabric.ReplicaSetQuorumMode">
            <summary>
            <para>Enumerates the possible modes in which the operation can complete after a quorum of replicas or all replicas have applied all pending operations.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ReplicaSetQuorumMode.Invalid">
            <summary>
            <para>Default value in an uninitialized variable of this type)</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ReplicaSetQuorumMode.WriteQuorum">
            <summary>
            <para>Represents the mode where a <b>majority</b> of the replicas must have applied all pending operations. Majority = ceiling [(n+1)/2], where n= number of replicas. </para>
            </summary>
        </member>
        <member name="F:System.Fabric.ReplicaSetQuorumMode.QuorumAll">
            <summary>
            <para>Represents the mode where <b>all</b> the replicas must have applied all pending operations</para>
            </summary>
        </member>
        <member name="T:System.Fabric.ReplicaStatus">
            <summary>
            <para>Enumerates the possible replica status.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ReplicaStatus.Invalid">
            <summary>
            <para>Default value in an uninitialized variable of this type.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ReplicaStatus.Down">
            <summary>
            <para>Either the process that hosts the replica or the Service Fabric node which is associated with the replica is not running.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ReplicaStatus.Up">
            <summary>
            <para>The process in which the replica is hosted is running.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.ReplicatorSettings">
            <summary>
            <para>Allows a stateful replica to configure the <see cref="T:System.Fabric.FabricReplicator"/> when creating it 
            via <see cref="M:System.Fabric.IStatefulServicePartition.CreateReplicator(System.Fabric.IStateProvider,System.Fabric.ReplicatorSettings)"/>.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.RetryInterval">
            <summary>
            <para>Defines how long the <see cref="T:System.Fabric.FabricReplicator"/> waits after it transmits a message from the primary to the 
            secondary for the secondary to acknowledge that it has received the message.</para>
            </summary>
            <value>
            <para>The time needed the <see cref="T:System.Fabric.FabricReplicator"/> waits after it transmits a message from the primary to the 
            secondary for the secondary to acknowledge that it has received the message.</para>
            </value>
            <remarks>
            <para>Receiving a message does not necessarily that the message has been processed.</para>
            <para>If this timer is exceeded, then the message is retransmitted.</para>
            <para>The default value is 5 seconds.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.BatchAcknowledgementInterval">
            <summary>
            <para>Gets or sets the amount of time that the replicator waits after receiving an operation before sending back an acknowledgment. </para>
            </summary>
            <value>
            <para>The amount of time that the replicator waits after receiving an operation before sending back an acknowledgment.</para>
            </value>
            <remarks>
            <para>Other operations received and acknowledged during this time period will have their acknowledgments sent back in a single message.</para>
            <para>Increasing the <see cref="P:System.Fabric.ReplicatorSettings.BatchAcknowledgementInterval"/> value decreases latency of individual replication 
            operations but increases throughput of the replicator.</para>
            <para>Default value is 0.05 Seconds (50 milliseconds)</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.ReplicatorAddress">
            <summary>
            <para>Configures the address that this replicator will use when communicating with other Replicators.</para>
            </summary>
            <value>
            <para>The address that this replicator will use when communicating with other Replicators.</para>
            </value>
            <remarks>
            <para>String is formatted as “hostname:port”, where hostname can be FQDN or IP address. The default value is localhost:0</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.SecurityCredentials">
            <summary>
            <para>Allows the service to define security credentials for securing the traffic between replicators.</para>
            </summary>
            <value>
            <para>The service to define security credentials for securing the traffic between replicators.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.InitialReplicationQueueSize">
            <summary>
            <para>Gets or sets the initial size of the replication queue size.</para>
            </summary>
            <value>
            <para>The initial size of the replication queue size.</para>
            </value>
            <remarks>
              <para />
            </remarks>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.MaxReplicationQueueSize">
            <summary>
            <para>Gets or sets the maximum size for the replication queue.</para>
            </summary>
            <value>
            <para>the maximum size for the replication queue.</para>
            </value>
            <remarks>
              <para />
            </remarks>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.InitialCopyQueueSize">
            <summary>
            <para>Gets or sets the initial size of the copy operation queue inside <see cref="T:System.Fabric.FabricReplicator"/>, which contains 
            copy <see cref="T:System.Fabric.IOperation"/>s not yet pumped and processed by the service.</para>
            </summary>
            <value>
            <para>The initial size of the copy operation queue inside <see cref="T:System.Fabric.FabricReplicator"/>, which contains copy 
            <see cref="T:System.Fabric.IOperation"/>s not yet pumped and processed by the service.</para>
            </value>
            <remarks>
            <para>The default value is 64. Note that values for this parameter must be a power of 2.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.MaxCopyQueueSize">
            <summary>
            <para>Gets or sets the maximum size of the copy operation queue inside <see cref="T:System.Fabric.FabricReplicator"/>, which contains 
            copy <see cref="T:System.Fabric.IOperation"/>s not yet pumped and processed by the service.</para>
            </summary>
            <value>
            <para>The maximum size of the copy operation queue inside <see cref="T:System.Fabric.FabricReplicator"/>, which contains copy 
            <see cref="T:System.Fabric.IOperation"/>s not yet pumped and processed by the service.</para>
            </value>
            <remarks>
            <para>If this queue size is reached at the secondary, operations will be buffered in the Primary’s copy queue. If that queue also fills, 
            then the Primary will begin seeing <see cref="F:System.Fabric.FabricErrorCode.ReplicationQueueFull"/> exceptions.</para>
            <para>The default value is 1024</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.RequireServiceAck">
            <summary>
            <para>Prevents the optimistic acknowledgment of operations in non-persistent services by requiring that the service calls 
            <see cref="M:System.Fabric.IOperation.Acknowledge"/> before it pumps the next operation.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the optimistic acknowledgment of operations in non-persistent services;otherwise, 
            <languageKeyword>false</languageKeyword>.</para>
            </value>
            <remarks>
            <para>Non-persistent services which require explicit acknowledgment can set this property to True in order to prevent optimistic acknowledgment 
            of the operations by the Replicator. This setting has no effect for persistent services. </para>
            <para>The default value is false.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.MaxReplicationQueueMemorySize">
            <summary>
            <para>Gets or sets the maximum size for the replication queue memory.</para>
            </summary>
            <value>
            <para>The maximum size for the replication queue memory.</para>
            </value>
            <remarks>
            <para>The default value is 0. This implies there is no memory limit</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.SecondaryClearAcknowledgedOperations">
            <summary>
            <para>Typically, operations in the secondary replicator are kept in the queue to be able to catchup replicas if it is promoted to a primary. With 
            this flag enabled, the secondary replicator releases the operation as soon as it is acknowledged by the user service.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the secondary replicator releases the operation as soon as it is acknowledged by the user service; 
            otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
            <remarks>
            <para>The default value is false</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.MaxReplicationMessageSize">
            <summary>
            <para>Gets or sets the maximum size of a message that can be transmitted via the replicator. These include replication messages, copy messages 
            and copy context messages. The unit of representation is bytes.</para>
            </summary>
            <value>
            <para>The maximum size of a message that can be transmitted via the replicator.</para>
            </value>
            <remarks>
            <para>The default value is 50MB</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.UseStreamFaultsAndEndOfStreamOperationAck">
            <summary>
            <para>Specifies whether the replicator uses stream faults.</para>
            </summary>
            <value>
            <para>
                <languageKeyword>true</languageKeyword> if the replicator uses stream faults; otherwise, <languageKeyword>false</languageKeyword>.</para>
            </value>
            <remarks>
            <para>The default value is false</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.InitialPrimaryReplicationQueueSize">
            <summary>
            <para>Defines the initial size of the primary replication operation queue inside <see cref="T:System.Fabric.FabricReplicator"/>, which contains 
            replication <see cref="T:System.Fabric.IOperation"/>s.The unit here is the number of operations in the queue.</para>
            </summary>
            <value>
            <para>The initial size of the primary replication operation queue inside <see cref="T:System.Fabric.FabricReplicator"/></para>
            </value>
            <remarks>
            <para>This setting is specific to the Replicator when the role of the service is Primary</para>
            <para>The default value is 64.  Note that values for this parameter must be a power of 2.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.MaxPrimaryReplicationQueueSize">
            <summary>
            <para>Defines the maximum size of the primary replication operation queue inside <see cref="T:System.Fabric.FabricReplicator"/>, which contains 
            replication <see cref="T:System.Fabric.IOperation"/>s</para>
            </summary>
            <value>
            <para>The maximum size of the primary replication operation queue inside <see cref="T:System.Fabric.FabricReplicator"/>, which contains 
            replication <see cref="T:System.Fabric.IOperation"/>s. The unit here is the number of operations in the queue.</para>
            </value>
            <remarks>
            <para>If this queue size is reached, then the Primary will begin seeing <see cref="F:System.Fabric.FabricErrorCode.ReplicationQueueFull"/> exceptions.</para>
            <para>The default value is 1024 Note that values for this parameter must be a power of 2.</para>
            <para>This setting is specific to the Replicator when the role of the service is Primary</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.MaxPrimaryReplicationQueueMemorySize">
            <summary>
            <para>Defines the maximum size of the primary replication operation queue inside <see cref="T:System.Fabric.FabricReplicator"/>, which contains 
            replication <see cref="T:System.Fabric.IOperation"/>s</para>
            </summary>
            <value>
            <para>. Returns the maximum size of the primary replication operation queue inside <see cref="T:System.Fabric.FabricReplicator"/>, which contains 
            replication <see cref="T:System.Fabric.IOperation"/>s The unit here is the virtual memory consumption of the queue .Returns <see cref="T:System.Int64"/>.</para>
            </value>
            <remarks>
            <para>This setting is specific to the Replicator when the role of the service is Primary. The default value is 0. This implies there is no memory limit</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.InitialSecondaryReplicationQueueSize">
            <summary>
            <para>Defines the initial size of the secondary replication operation queue inside <see cref="T:System.Fabric.FabricReplicator"/>, which contains 
            replication <see cref="T:System.Fabric.IOperation"/>s </para>
            </summary>
            <value>
            <para>The initial size of the secondary replication operation queue inside <see cref="T:System.Fabric.FabricReplicator"/>, which contains 
            replication <see cref="T:System.Fabric.IOperation"/>s not yet pumped and processed by the service. The unit here is the number of operations in the queue </para>
            </value>
            <remarks>
            <para>This setting is specific to the Replicator when the role of the service is Secondary/Idle</para>
            <para>The default value is 64.  Note that values for this parameter must be a power of 2.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.MaxSecondaryReplicationQueueSize">
            <summary>
            <para>Defines the maximum size of the secondary replication operation queue inside <see cref="T:System.Fabric.FabricReplicator"/>, which contains 
            replication <see cref="T:System.Fabric.IOperation"/>s </para>
            </summary>
            <value>
            <para>The maximum size of the secondary replication operation queue inside <see cref="T:System.Fabric.FabricReplicator"/>, which contains 
            replication <see cref="T:System.Fabric.IOperation"/>s not yet pumped and processed by the service. The unit here is the number of operations in the queue</para>
            </value>
            <remarks>
            <para>If this queue size is reached, operations will be buffered in the Primary’s replication queue.  If that queue also fills, then the Primary 
            will begin seeing <see cref="F:System.Fabric.FabricErrorCode.ReplicationQueueFull"/> exceptions.</para>
            <para>The default value is 2048.Note that values for this parameter must be a power of 2.</para>
            <para>This setting is specific to the Replicator when the role of the service is Secondary/Idle</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.MaxSecondaryReplicationQueueMemorySize">
            <summary>
            <para>Defines the maximum size of the secondary replication operation queue inside <see cref="T:System.Fabric.FabricReplicator"/>, which contains 
            replication <see cref="T:System.Fabric.IOperation"/>s.</para>
            </summary>
            <value>
            <para>Returns the maximum size of the secondary replication operation queue inside <see cref="T:System.Fabric.FabricReplicator"/>, which contains 
            replication <see cref="T:System.Fabric.IOperation"/>s. The unit here is the virtual memory consumption of the queue.</para>
            </value>
            <remarks>
            <para>This setting is specific to the Replicator when the role of the service is Secondary/Idle. The default value is 0. This implies there is no memory limit</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ReplicatorSettings.PrimaryWaitForPendingQuorumsTimeout">
            <summary>
            <para>Defines how long the primary replicator waits for receiving a quorum of acknowledgments for any pending replication operations before 
            processing a reconfiguration request, that could potentially result in ‘cancelling’ the pending replication operations.</para>
            </summary>
            <value>
            <para>Amount of time the primary replicator waits for receiving a quorum of acknowledgments for any pending replication operations when there is 
            a request for the primary replicator to process a reconfiguration <see cref="T:System.TimeSpan"/>.</para>
            </value>
            <remarks>
            <para>The default value is 0. This implies that reconfigurations aren’t waited upon for receiving quorum on the pending replication operations. 
            This helps in completing reconfigurations sooner. Note that larger values for this parameter could potentially result in slower reconfigurations, 
            implying longer durations to fail-over a primary. </para>
            </remarks>
        </member>
        <member name="T:System.Fabric.ResolvedServiceEndpoint">
            <summary>
            <para>Represents a resolved service endpoint. </para>
            </summary>
            <remarks>
              <para />
            </remarks>
        </member>
        <member name="P:System.Fabric.ResolvedServiceEndpoint.Role">
            <summary>
            <para>Gets the role of a service endpoint.</para>
            </summary>
            <value>
            <para>The role of a service endpoint.</para>
            </value>
            <remarks>
            <para>Endpoint roles are used by a client to select which service instance or replica to select and connect to.</para>
            </remarks>
            <seealso cref="T:System.Fabric.ServiceEndpointRole"/>
        </member>
        <member name="P:System.Fabric.ResolvedServiceEndpoint.Address">
            <summary>
            <para>Gets the address for the endpoint. The string is given to Service Fabric to be broadcast by the service.</para>
            </summary>
            <value>
            <para>The address for the endpoint.</para>
            </value>
        </member>
        <member name="T:System.Fabric.ResolvedServicePartition">
            <summary>
            <para>Represents a data structure that contains information on the partitioning and set of endpoints to which the specified Service partition listens.</para>
            </summary>
            <remarks>
              <para />
            </remarks>
        </member>
        <member name="M:System.Fabric.ResolvedServicePartition.GetEndpoint">
            <summary>
            <para>Returns a single endpoint, instead of a collection of all endpoints. </para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.Fabric.ResolvedServiceEndpoint"/>.</para>
            </returns>
            <remarks>
            <para>Many times, you only need a single endpoint instead of all the endpoints. If the service is stateless, it returns a random endpoint. 
            If the service is a stateful service, than it returns the endpoint to which the Primary replica of the service partition listens. Note that if 
            the Primary replica currently does not exist, it throws <see cref="T:System.Fabric.FabricException"/>.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.ResolvedServicePartition.CompareVersion(System.Fabric.ResolvedServicePartition)">
            <summary>
            <para>Compares two resolved service partitions and identifies which is newer. </para>
            </summary>
            <param name="other">
            <para>The other resolved service partition to compare.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Int32"/>.</para>
            </returns>
            <exception cref="T:System.Fabric.FabricException">
            <para>The two <see cref="T:System.Fabric.ResolvedServicePartition"/> objects are from different service partitions. This can happen if the 
            service is deleted and re-created with the same name and partitioning between two resolve calls.</para>
            </exception>
            <remarks>
            <para>The <see cref="M:System.Fabric.ResolvedServicePartition.CompareVersion(System.Fabric.ResolvedServicePartition)"/> method takes in a 
            resolved service partition (RSP) argument with the parameter <paramref name="other"/> to enable the user to identify which RSP is more 
            up-to-date. A returned value of 0 indicates that the two RSPs have the same version. 1 indicates that the other RSP has an older version. 
            -1 indicates that the other RSP has a newer version. </para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ResolvedServicePartition.Endpoints">
            <summary>
            <para>Gets the endpoints of the service partition. </para>
            </summary>
            <value>
            <para>A collection of <see cref="T:System.Fabric.ResolvedServiceEndpoint"/> for a service partition.</para>
            </value>
            <remarks>
              <para/>
            </remarks>
        </member>
        <member name="P:System.Fabric.ResolvedServicePartition.Info">
            <summary>
            <para>Gets information about the partition of the service that was resolved. </para>
            </summary>
            <value>The information about the partition of the service that was resolved. </value>
        </member>
        <member name="P:System.Fabric.ResolvedServicePartition.ServiceName">
            <summary>
            <para>Gets the name of the service instance.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Uri"/>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.RollingUpgradeMode">
            <summary>
            <para>Specifies the type of rolling upgrade when upgrading an application instance or cluster.</para>
            </summary>
            <remarks>
            <para>For more information, see Upgrade and Scale a Service Fabric Cluster and Upgrade an Application.</para>
            </remarks>
        </member>
        <member name="F:System.Fabric.RollingUpgradeMode.Invalid">
            <summary>
            <para>All Service Fabric enumerations have reserved Invalid flag.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.RollingUpgradeMode.UnmonitoredAuto">
            <summary>
            <para>Specifies that the upgrade should be unmonitored automatic.</para>
            </summary>
            <remarks>
            <para>Using this mode,  automatically proceeds to upgrading the next upgrade domain until all upgrade domains are upgraded.</para>
            </remarks>
        </member>
        <member name="F:System.Fabric.RollingUpgradeMode.UnmonitoredManual">
            <summary>
            <para>Specifies that the upgrade should be unmonitored manual.</para>
            </summary>
            <remarks>
            <para>Using this mode, the administrator needs to instruct  to move to the next upgrade domain (using the 
            <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.MoveNextApplicationUpgradeDomainAsync(System.Fabric.ApplicationUpgradeProgress)"/> or 
            <see cref="M:System.Fabric.FabricClient.ClusterManagementClient.MoveNextFabricUpgradeDomainAsync(System.Fabric.FabricUpgradeProgress)"/> methods) and continue 
            the upgrade.</para>
            </remarks>
        </member>
        <member name="F:System.Fabric.RollingUpgradeMode.Monitored">
            <summary>
            <para>Specifies that the upgrade should be monitored automatic.</para>
            </summary>
            <remarks>
            <para>After an upgrade domain (UD) is upgraded, Service Fabric will proceed to upgrade the next UD if the health of the UD and the cluster meets the 
            defined health policies for that upgrade. Otherwise, the entire upgrade is marked as failed and the upgrade failure action is taken. The default failure 
            action is to roll-back the entire upgrade.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.Security.EncryptionUtility">
            <summary>
            <para>Represents the encryption utility.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Security.EncryptionUtility.EncryptText(System.String,System.String,System.String)">
            <summary>
            <para>Encrypt text string with an installed X509 certificate. Certificate store location is LocalMachine and the encryption algorithm is AES256 CBC.</para>
            </summary>
            <param name="textToEncrypt">
            <para>The text string to encrypt.</para>
            </param>
            <param name="thumbprint">
            <para>The thumbprint of encryption certificate.</para>
            </param>
            <param name="storeName">
            <para>The name of certificate store, from which encryption certificate is retrieved.</para>
            </param>
            <returns>
            <para>The encrypted text as <see cref="T:System.String"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Security.EncryptionUtility.EncryptText(System.String,System.String,System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.String)">
            <summary>
            <para>Encrypt text string with an installed X509 certificate.</para>
            </summary>
            <param name="textToEncrypt">
            <para>The text to encrypt.</para>
            </param>
            <param name="thumbprint">
            <para>The thumbprint of encryption certificate.</para>
            </param>
            <param name="storeName">
            <para>The name of certificate store, from which encryption certificate is retrieved.</para>
            </param>
            <param name="storeLocation">
            <para>The certificate store location to retrieve encryption certificate.</para>
            </param>
            <param name="algorithmOid">
            <para>The encryption algorithm object identifier (OID).</para>
            </param>
            <returns>
            <para>The encrypted text as <see cref="T:System.String"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Security.EncryptionUtility.EncryptTextByCertFile(System.String,System.String,System.String)">
            <summary>
            <para>Encrypt text string with an X509 certificate in a file.</para>
            </summary>
            <param name="textToEncrypt">
            <para>The text to encrypt.</para>
            </param>
            <param name="certFileName">
            <para>The encryption certificate file path.</para>
            </param>
            <param name="algorithmOid">
            <para>The encryption algorithm object identifier (OID).</para>
            </param>
            <returns>
            <para>The encrypted text as <see cref="T:System.String"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Security.EncryptionUtility.DecryptText(System.String)">
            <summary>
            <para>Decrypt a text string encrypted by EncryptText methods of <see cref="T:System.Fabric.Security.EncryptionUtility"/>, it is assumed that the store location of decryption certificate is LocalMachine.</para>
            </summary>
            <param name="textToDecrypt">
            <para>The encrypted text to decrypt.</para>
            </param>
            <returns>
            <para>The decrypted text as <see cref="T:System.Security.SecureString"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Security.EncryptionUtility.DecryptText(System.String,System.Security.Cryptography.X509Certificates.StoreLocation)">
            <summary>
            <para>Decrypt a text string encrypted by EncryptText methods of <see cref="T:System.Fabric.Security.EncryptionUtility"/>.</para>
            </summary>
            <param name="textToDecrypt">
            <para>The encrypted text to decrypt.</para>
            </param>
            <param name="storeLocation">
            <para>The certificate store location to retrieve decryption certificate.</para>
            </param>
            <returns>
            <para>The decrypted text as <see cref="T:System.Security.SecureString"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Security.EncryptionUtility.EncryptValue(System.String,System.String,System.String)">
            <summary>
            <para>Encrypts string value using specified certificate. This method is deprecated; EncryptText method should be used instead.</para>
            </summary>
            <param name="thumbprint">
            <para>The thumbprint of certificate used to encrypt text.</para>
            </param>
            <param name="storeLocation">
            <para>The StoreName for the certificate. Defaults to "My" store.</para>
            </param>
            <param name="textToEncrypt">
            <para>The text value that needs to be encrypted.</para>
            </param>
            <returns>
            <para>The encrypted text as <see cref="T:System.String"/>.</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Security.EncryptionUtility.DecryptValue(System.String)">
            <summary>
            <para>Decrypts string values that were encrypted by calling EncryptValue. This method is deprecated; EncryptText method should be used instead.</para>
            </summary>
            <param name="textToDecrypt">
            <para>The string value to decrypt.</para>
            </param>
            <returns>
            <para>The decrypted value.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.ServiceEndpointsVersion">
            <summary>
            <para>Represent this class that is used to compare versions between two <see cref="T:System.Fabric.ServiceNotification"/> objects in order to determine which 
            notification event precedes the other.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.ServiceEndpointsVersion.Compare(System.Fabric.ServiceEndpointsVersion)">
            <summary>
            <para>Compares this version with other.</para>
            </summary>
            <param name="other">
            <para>The other to compare.</para>
            </param>
            <returns>
            <para>The <see cref="T:System.Int32"/> that is zero if this and other are equivalent, a negative value if this is less than other, and a positive 
            value if this is greater than other.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.ServiceEndpointRole">
            <summary>
            <para>Enumerates the kinds of possible roles of a service endpoint. </para>
            </summary>
            <remarks>
              <para />
            </remarks>
        </member>
        <member name="F:System.Fabric.ServiceEndpointRole.Invalid">
            <summary>
            <para>Indicates that Service Fabric cannot classify the service endpoint role. </para>
            </summary>
        </member>
        <member name="F:System.Fabric.ServiceEndpointRole.Stateless">
            <summary>
            <para>Indicates that the service endpoint role is stateless. </para>
            </summary>
            <remarks>
              <para />
            </remarks>
        </member>
        <member name="F:System.Fabric.ServiceEndpointRole.StatefulPrimary">
            <summary>
            <para>Indicates that the service endpoint role is a stateful Primary replica. </para>
            </summary>
            <remarks>
              <para />
            </remarks>
        </member>
        <member name="F:System.Fabric.ServiceEndpointRole.StatefulSecondary">
            <summary>
            <para>Indicates that the service endpoint role is a stateful Secondary replica. </para>
            </summary>
            <remarks>
              <para />
            </remarks>
        </member>
        <member name="T:System.Fabric.StatelessServicePartition">
            <summary>
            In Service Fabric we have stateless as well as stateful services which are partitioned. Stateless Services are partitioned for sticky routing.
            In programming model we need to decide if we want to expose StatelessPartition as a concept to end users
            </summary>
        </member>
        <member name="T:System.Fabric.ServiceInitializationParameters">
            <summary>
            <para>Represents the base class for service initialization parameters that are passed to the <see cref="M:System.Fabric.IStatefulServiceReplica.Initialize(System.Fabric.StatefulServiceInitializationParameters)"/> method of 
            a service.</para>
            </summary>
            <remarks>
            <para>Derived types define initialization data that are specific to stateless and stateful services.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ServiceInitializationParameters.CodePackageActivationContext">
            <summary>
            <para>Specifies the activation context that is associated with the code package that contains the service.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.CodePackageActivationContext"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ServiceInitializationParameters.ServiceTypeName">
            <summary>
            <para>Indicates the name of the type of the service.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ServiceInitializationParameters.ServiceName">
            <summary>
            <para>Indicates the Service Fabric name of the service.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Uri"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ServiceInitializationParameters.InitializationData">
            <summary>
            <para>Specifies custom initialization data that is provided by the creator of the service as part of the <see cref="T:System.Fabric.Description.ServiceDescription"/> class.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Byte"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ServiceInitializationParameters.PartitionId">
            <summary>
            <para>Specifies the unique identifier of the service partition.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Guid"/>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.ServiceNotification">
            <summary>
            <para>Represents a service notification containing details about a service whose replica or instance endpoints have changed.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.ServiceNotification.ServiceName">
            <summary>
            <para>Gets the name of the service.</para>
            </summary>
            <value>
            <para>The name of the service.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ServiceNotification.PartitionId">
            <summary>
            <para>Gets the partition ID of the service.</para>
            </summary>
            <value>
            <para>The partition ID.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ServiceNotification.Endpoints">
            <summary>
            <para>Gets the new replica or instance endpoints published by the service. The collection will be empty if the service has been deleted.</para>
            </summary>
            <value>
            <para>A list of endpoints published by the service.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ServiceNotification.Version">
            <summary>
            <para>Gets the version of this notification event. The version can be used to order any two notification events.</para>
            </summary>
            <value>
            <para>The version of this notification event.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ServiceNotification.PartitionInfo">
            <summary>
            <para>Gets the detailed partition information for the service. This property can be null in certain cases where detailed partition information is 
            unavailable – such as when the service notification event is for a service deletion event.</para>
            </summary>
            <value>
            <para>The detailed partition information of the service.</para>
            </value>
        </member>
        <member name="T:System.Fabric.ServicePartitionKind">
            <summary>
            <para>Indicates the type of partitioning scheme that is used. </para>
            </summary>
            <remarks>
            <para>
                <see cref="T:System.Fabric.ServicePartitionKind"/> defines the value of the <see cref="P:System.Fabric.ServicePartitionInformation.Kind"/> property of the 
            <see cref="T:System.Fabric.ServicePartitionInformation"/> class.</para>
            </remarks>
        </member>
        <member name="F:System.Fabric.ServicePartitionKind.Invalid">
            <summary>
            <para>Indicates the partition kind is invalid.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ServicePartitionKind.Singleton">
            <summary>
            <para>Indicates that the partition is based on string names, and is a <see cref="T:System.Fabric.SingletonPartitionInformation"/> object, that was originally 
            created via <see cref="T:System.Fabric.Description.SingletonPartitionSchemeDescription"/>.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ServicePartitionKind.Int64Range">
            <summary>
            <para>Indicates that the partition is based on Int64 key ranges, and is an <see cref="T:System.Fabric.Int64RangePartitionInformation"/> object that was 
            originally created via <see cref="T:System.Fabric.Description.UniformInt64RangePartitionSchemeDescription"/>.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.ServicePartitionKind.Named">
            <summary>
            <para>Indicates that the partition is based on string names, and is a <see cref="T:System.Fabric.NamedPartitionInformation"/> object, that was originally 
            created via <see cref="T:System.Fabric.Description.NamedPartitionSchemeDescription"/>.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.ServicePartitionResolutionChange">
            <summary>
            <para>This wrapper contains the updated <see cref="T:System.Fabric.ResolvedServicePartition"/>. </para>
            </summary>
            <remarks>
            <para>If there was an exception thrown while the newer <see cref="T:System.Fabric.ResolvedServicePartition"/> is acquired, then the 
            <see cref="T:System.Fabric.ServicePartitionResolutionChange"/> also contains the exception. Note that if the <see cref="P:System.Fabric.ServicePartitionResolutionChange.Exception"/> property 
            is not null, then the <see cref="P:System.Fabric.ServicePartitionResolutionChange.Result"/> property is null.</para>
            </remarks>
        </member>
        <member name="P:System.Fabric.ServicePartitionResolutionChange.Exception">
            <summary>
            <para>Gets the exception that was thrown while the relevant <see cref="T:System.Fabric.ResolvedServicePartition"/> was being acquired or updated.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Exception"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ServicePartitionResolutionChange.Result">
            <summary>
            <para>Contains the new <see cref="T:System.Fabric.ResolvedServicePartition"/> that is relevant for the registered service partition.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.ResolvedServicePartition"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ServicePartitionResolutionChange.HasException">
            <summary>
            <para>Indicates whether there was an exception. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Boolean"/>.</para>
            </value>
            <remarks>
            <para>If so, the <see cref="P:System.Fabric.ServicePartitionResolutionChange.Result"/> parameter is null and the <see cref="P:System.Fabric.ServicePartitionResolutionChange.Exception"/> 
            parameter is set.</para>
            </remarks>
        </member>
        <member name="T:System.Fabric.ServicePartitionResolutionChangeHandler">
            <summary>
            <para>A delegate type for client-side callbacks that are made to user code when a service’s endpoint information changes or an exception is 
            encountered during the process of updating the information at runtime.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.SingletonPartitionInformation">
            <summary>
            <para>Indicates that the service is Singleton-partitioned, effectively non-partitioned or with one partition only, and uses the partition 
            scheme of a Singleton service.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.SingletonPartitionInformation.#ctor">
            <summary>
            <para>Creates a new instance of the <see cref="T:System.Fabric.SingletonPartitionInformation"/> class.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.StatefulServiceInitializationParameters">
            <summary>
            <para>Defines service initialization parameters for a stateful service.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.StatefulServiceInitializationParameters.ReplicaId">
            <summary>
            <para>Specifies the unique identifier for the stateful service replica.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Int64"/>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.StatelessServiceInitializationParameters">
            <summary>
            <para>Defines service initialization parameters for a stateless service.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.StatelessServiceInitializationParameters.InstanceId">
            <summary>
            <para>Specifies the unique identifier for the stateless service instance.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Int64"/>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Result.InvokeDataLossResult">
            <summary>
            Represents the data loss result object.
            </summary>
            <remarks>
            This class returns the SelectedPartition information for which invoke data loss action was called.
            </remarks>
        </member>
        <member name="M:System.Fabric.Result.InvokeDataLossResult.#ctor(System.Fabric.SelectedPartition)">
            <summary>
            Invoke data loss result object constructor.
            </summary>
            <param name="selectedPartition">Selected partition</param>
        </member>
        <member name="M:System.Fabric.Result.InvokeDataLossResult.ToString">
            <summary>
            Returns the string representation of the contained information.
            </summary>
            <returns>A string conaining information about the SelectedPartition 
            and (conditionally) about the Exception </returns>
        </member>
        <member name="P:System.Fabric.Result.InvokeDataLossResult.SelectedPartition">
            <summary>
            Gets the selected partition.
            </summary>
            <value>The partition selected by the test command.</value>
        </member>
        <member name="T:System.Fabric.Result.InvokeQuorumLossResult">
            <summary>
            Represents the quorum loss result object.
            </summary>
            <remarks>
            This class returns SelectedPartition information for which Invoke Quorum Loss action was called. 
            </remarks>
        </member>
        <member name="M:System.Fabric.Result.InvokeQuorumLossResult.ToString">
            <summary>
            Formats SelectedPartition as a string.
            </summary>
            <returns>The formatted string.</returns>
        </member>
        <member name="P:System.Fabric.Result.InvokeQuorumLossResult.SelectedPartition">
            <summary>
            Gets selecetd partition.
            </summary>
            <value>The partition selected by the test command.</value>
            <returns>The SelectedPartition.</returns>
        </member>
        <member name="T:System.Fabric.Result.RestartNodeResult">
            <summary>
            Returns Restart node result object.
            </summary>
            <remarks>
            This class returns the SelectedReplica and NodeResult for RestartNode Action.  
            </remarks>
        </member>
        <member name="M:System.Fabric.Result.RestartNodeResult.ToString">
            <summary>
            Returns a string, like: "NodeResult: NodeResult, SelectedReplica: SelectedReplica"
            </summary>
            <returns>A string</returns>
        </member>
        <member name="P:System.Fabric.Result.RestartNodeResult.NodeResult">
            <summary>
            Gets the NodeResult.
            </summary>
        </member>
        <member name="P:System.Fabric.Result.RestartNodeResult.SelectedReplica">
            <summary>
            Gets the SelectedReplica.
            SelectedReplica will be none in case the RestartNode Testability action was performed using node name.
            </summary>
        </member>
        <member name="T:System.Fabric.Result.RestartPartitionResult">
            <summary>
            Represents the restart partition result object.
            </summary>
            <remarks>
            This class returns the Selected partition for which restart partition action was called.
            </remarks>    
        </member>
        <member name="M:System.Fabric.Result.RestartPartitionResult.#ctor(System.Fabric.SelectedPartition)">
            <summary>
            Restart partition result constructor.
            </summary>
            <param name="selectedPartition">selected partition</param>
        </member>
        <member name="M:System.Fabric.Result.RestartPartitionResult.ToString">
            <summary>
            Formats SelectedPartition into a string.
            </summary>
            <returns>The formatted string.</returns>
        </member>
        <member name="P:System.Fabric.Result.RestartPartitionResult.SelectedPartition">
            <summary>
            Gets selected partition.
            </summary>
            <value>The partition selected by the test command.</value>
        </member>
        <member name="T:System.Fabric.Result.RestartReplicaResult">
            <summary>
            Returns Restart replica result object.
            </summary>
            <remarks>
            This class returns the selected replica for which Restart Replica actions was called.
            </remarks>
        </member>
        <member name="M:System.Fabric.Result.RestartReplicaResult.#ctor(System.Fabric.SelectedReplica)">
            <summary>
            Restart replica result constructor.
            </summary>
            <param name="selectedReplica">Selected replica</param>
        </member>
        <member name="T:System.Fabric.Result.PartitionDataLossResult">
            <summary>
            Represents the data loss result object.
            </summary>
            <remarks>
            This class returns the SelectedPartition information for which invoke data loss action was called.
            </remarks>
        </member>
        <member name="M:System.Fabric.Result.PartitionDataLossResult.#ctor(System.Fabric.SelectedPartition,System.Exception)">
            <summary>
            Invoke data loss result object constructor.
            </summary>
            <param name="selectedPartition">Selected partition</param>
        </member>
        <member name="M:System.Fabric.Result.PartitionDataLossResult.ToString">
            <summary>
            Returns the string representation of the contained information.
            </summary>
            <returns>A string conaining information about the SelectedPartition 
            and (conditionally) about the Exception </returns>
        </member>
        <member name="P:System.Fabric.Result.PartitionDataLossResult.SelectedPartition">
            <summary>
            Gets the selected partition.
            </summary>
        </member>
        <member name="T:System.Fabric.Result.PartitionQuorumLossResult">
            <summary>
            Represents the quorum loss result object.
            </summary>
            <remarks>
            This class returns SelectedPartition information for which Invoke Quorum Loss action was called. 
            </remarks>
        </member>
        <member name="M:System.Fabric.Result.PartitionQuorumLossResult.#ctor(System.Fabric.SelectedPartition,System.Exception)">
            <summary>
            Invoke quorum loss result object constructor.
            </summary>
            <param name="selectedPartition">Selected partition</param>
        </member>
        <member name="M:System.Fabric.Result.PartitionQuorumLossResult.ToString">
            <summary>
            Formats the SelectedPartition and Exception into a string.
            </summary>
            <returns>The formatted string.</returns>
        </member>
        <member name="P:System.Fabric.Result.PartitionQuorumLossResult.SelectedPartition">
            <summary>
            Gets selected partition.
            </summary>
            <returns>The SelectedPartition.</returns>
        </member>
        <member name="T:System.Fabric.Result.PartitionRestartResult">
            <summary>
            Returns Restart partition result object.
            </summary>
            <remarks>
            This class returns the Selected partition for which restart partition action was called.
            </remarks>    
        </member>
        <member name="M:System.Fabric.Result.PartitionRestartResult.#ctor(System.Fabric.SelectedPartition,System.Exception)">
            <summary>
            Restart partition result constructor.
            </summary>
            <param name="selectedPartition">selected partition</param>
        </member>
        <member name="M:System.Fabric.Result.PartitionRestartResult.ToString">
            <summary>
            Returns a string, like: "SelectedPartition: SelectedPartition"
            </summary>
            <returns></returns>
        </member>
        <member name="P:System.Fabric.Result.PartitionRestartResult.SelectedPartition">
            <summary>
            Gets selected partition.
            </summary>
        </member>
        <member name="T:System.Fabric.CompletionMode">
            <summary>
            This is an enum used to indicate when the API should complete. 
            </summary>
            <remarks>
            The values indicate whether the API should complete when the request for the operation is done or when the requested operation has completed. 
            For example,  a request to restart a node  could complete as soon the request is accepted or when the API can verify that the node has restarted. 
            The actual verification depends upon the API being used.
            </remarks>
        </member>
        <member name="F:System.Fabric.CompletionMode.Invalid">
            <summary>
            Completion mode does not have a valid value.
            </summary>
        </member>
        <member name="F:System.Fabric.CompletionMode.DoNotVerify">
            <summary>
            Do not verify the completion of the action.
            </summary>
        </member>
        <member name="F:System.Fabric.CompletionMode.Verify">
            <summary>
            Verify the completion of the action.
            </summary>
        </member>
        <member name="T:System.Fabric.DataLossMode">
            <summary>
            Indicates which type of data loss to induce.
            </summary>
        </member>
        <member name="F:System.Fabric.DataLossMode.None">
            <summary>
            Reserved.  Do not pass into API.
            </summary>
        </member>
        <member name="F:System.Fabric.DataLossMode.PartialDataLoss">
            <summary>
            PartialDataLoss option will cause a quorum of replicas to go down, triggering an OnDataLoss event in the system for the given partition. 
            </summary>
            <remarks>
            Whether actual data loss happens depends on whether there were committed transactions that were still being replicated at the time the data loss was induced
            </remarks>
        </member>
        <member name="F:System.Fabric.DataLossMode.FullDataLoss">
            <summary>
            FullDataLoss option will drop all the replicas which means that all the data will be lost. 
            </summary>
            <remarks>
            This option is very useful to test out backup and recovery data paths.
            </remarks>
        </member>
        <member name="T:System.Fabric.QuorumLossMode">
            <summary>
            Type of QuorumLoss that will be invoked.
            </summary>
        </member>
        <member name="F:System.Fabric.QuorumLossMode.None">
            <summary>
            Reserved.  Do not pass into API.
            </summary>
        </member>
        <member name="F:System.Fabric.QuorumLossMode.QuorumReplicas">
            <summary>Partial Quorum loss mode : Minimum number of replicas for a partition will be down that will cause a quorum loss.</summary>
        </member>
        <member name="F:System.Fabric.QuorumLossMode.AllReplicas">
            <summary>Full Quorum loss mode : All replicas for a partition will be down that will cause a quorum loss. </summary>
        </member>
        <member name="T:System.Fabric.PartitionSelector">
            <summary>
            This is a helper class for selecting partitions. 
            </summary>
            <remarks>
            It allows the user to select partitions to be targeted by the testability APIs. The selection can be a particular partition of a service based on the 
            Id or Key or a random partition of a service.
            </remarks>
        </member>
        <member name="M:System.Fabric.PartitionSelector.RandomOf(System.Uri)">
            <summary>
            Selects a random partition for given service.
            </summary>
            <param name="serviceName">Name of the service whose partition needs to be selected.</param>
            <returns>Constructed PartitionSelector.</returns>
        </member>
        <member name="M:System.Fabric.PartitionSelector.SingletonOf(System.Uri)">
            <summary>
            Selects the singleton partition for a service.
            </summary>
            <param name="serviceName">Name of the service whose partition needs to be selected.</param>
            <returns>Constructed PartitionSelector.</returns>
        </member>
        <member name="M:System.Fabric.PartitionSelector.PartitionKeyOf(System.Uri,System.String)">
            <summary>
            Selects a partition for the service with the specified PartitionName.
            </summary>
            <param name="serviceName">Name of the service whose partition needs to be selected.</param>
            <param name="partitionName">Name of the partition that needs to be selected.</param>
            <returns>Constructed PartitionSelector.</returns>
        </member>
        <member name="M:System.Fabric.PartitionSelector.PartitionKeyOf(System.Uri,System.Int64)">
            <summary>
            Selects a partition for the service to which the specified partition key belongs.
            </summary>
            <param name="serviceName">Name of the service whose partition needs to be selected.</param>
            <param name="partitionKey">The partition key which belongs to the partition to be selected.</param>
            <returns>Constructed PartitionSelector.</returns>
        </member>
        <member name="M:System.Fabric.PartitionSelector.PartitionIdOf(System.Uri,System.Guid)">
            <summary>
            Selects a partition for the service given the PartitionId.
            </summary>
            <param name="serviceName">Name of the service whose partition needs to be selected.</param>
            <param name="partitionId">The PartitionId for the partition.</param>
            <returns>Constructed PartitionSelector.</returns>
        </member>
        <member name="M:System.Fabric.PartitionSelector.Equals(System.Object)">
            <summary>
            Compares whether two PartitionSelectors are the same.
            </summary>
            <param name="obj">PartitionSelector to compare t.o</param>
            <returns>true if same false if not.</returns>
        </member>
        <member name="M:System.Fabric.PartitionSelector.GetHashCode">
            <summary>
            Calls the base GetHashCode()
            </summary>
            <returns>An int representing the hash code of the PartitionSelector.</returns>
        </member>
        <member name="M:System.Fabric.PartitionSelector.ToString">
            <summary>
            String representation of the partition selector.
            </summary>
            <returns>A string representation of the selector.</returns>
        </member>
        <member name="T:System.Fabric.ReplicaSelector">
            <summary>
            This is a helper class for selecting replicas. 
            </summary>
            <remarks>
            This allows users to select replicas to be targeted. 
            The selection can be a particular replica of a partition based on the ReplicaId or Role or a random replica of the partition.
            </remarks>
        </member>
        <member name="M:System.Fabric.ReplicaSelector.RandomOf(System.Fabric.PartitionSelector)">
            <summary>
            Selects a random replica for the given partition specified by the PartitionSelector.
            </summary>
            <param name="partitionSelector">PartitionSelector which indicates the partition whose replica needs to be selected.</param>
            <returns>Constructed ReplicaSelector.</returns>
        </member>
        <member name="M:System.Fabric.ReplicaSelector.PrimaryOf(System.Fabric.PartitionSelector)">
            <summary>
            Selects the primary replica for the given partition specified by the PartitionSelector.
            </summary>
            <param name="partitionSelector">PartitionSelector which indicates the partition whose replica needs to be selected.</param>
            <returns>Constructed ReplicaSelector.</returns>
        </member>
        <member name="M:System.Fabric.ReplicaSelector.RandomSecondaryOf(System.Fabric.PartitionSelector)">
            <summary>
            Selects a random secondary replica for the given partition specified by the PartitionSelector.
            </summary>
            <param name="partitionSelector">PartitionSelector which indicates the partition whose replica needs to be selected.</param>
            <returns>Constructed ReplicaSelector.</returns>
        </member>
        <member name="M:System.Fabric.ReplicaSelector.ReplicaIdOf(System.Fabric.PartitionSelector,System.Int64)">
            <summary>
            Selects a replica nased on the ReplicaId for the given partition specified by the PartitionSelector.
            </summary>
            <param name="partitionSelector">PartitionSelector which indicates the partition whose replica needs to be selected.</param>
            <param name="replicaOrInstanceId">ReplicaOrInstanceId for the replica or instance to be selected.</param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.ReplicaSelector.Equals(System.Object)">
            <summary>
            Compares whether two ReplicaSelectors are the same.
            </summary>
            <param name="obj">ReplicaSelector to compare to.</param>
            <returns>true if same false if not.</returns>
        </member>
        <member name="M:System.Fabric.ReplicaSelector.GetHashCode">
            <summary>
            Calls the base GetHashCode()
            </summary>
            <returns>An int representing the hash code of the ReplicaSelector.</returns>
        </member>
        <member name="M:System.Fabric.ReplicaSelector.ToString">
            <summary>
            String representation of the replica selector.
            </summary>
            <returns>A string representation of the selector.</returns>
        </member>
        <member name="P:System.Fabric.ReplicaSelector.PartitionSelector">
            <summary>
            The PartitionSelector specifying the partition for which the replica is being selected by the ReplicaSelector.
            </summary>
            <value>The PartitionSelector object.</value>
        </member>
        <member name="T:System.Fabric.RestartPartitionMode">
            <summary>
            The enum passed into the RestartPartition API to specify what replicas need to be restarted
            </summary>
        </member>
        <member name="F:System.Fabric.RestartPartitionMode.None">
            <summary>
            Reserved.  Do not pass into API.
            </summary>
        </member>
        <member name="F:System.Fabric.RestartPartitionMode.AllReplicasOrInstances">
            <summary>
            All replicas or instances in the partition are restarted at once
            </summary>
        </member>
        <member name="F:System.Fabric.RestartPartitionMode.OnlyActiveSecondaries">
            <summary>
            Only the secondary replicas are restarted. This option can only be used for stateful services and avoids data loss
            </summary>
        </member>
        <member name="T:System.Fabric.SelectedPartition">
            <summary>
            Returns the partition that was selected by PartitionSelector. 
            </summary>
            <remarks> 
            This class returns information about the partition that was selected by PartitionSelector.
            For example if the PartitionSelector was created using the RandomOf overload this class will populate 
            service name and partition id for the selected partition.
            </remarks>
        </member>
        <member name="F:System.Fabric.SelectedPartition.None">
            <summary>
            Returns the None partiton selector.
            </summary>
            <remarks>
            A SelectedPartition will be none for any API with overloads which does not take a partition
            or replica selector as an input. For example if RestartNodeAsync is called with the NodeName overload
            instead of ReplicaSelector then PartitionSelector returned will be None.
            </remarks>
        </member>
        <member name="M:System.Fabric.SelectedPartition.#ctor(System.Uri,System.Guid)">
            <summary>
            Selected partition constructor
            </summary>
            <param name="serviceName">Service name uri</param>
            <param name="partitionId">Partition id</param>
        </member>
        <member name="M:System.Fabric.SelectedPartition.Equals(System.Fabric.SelectedPartition)">
            <summary>
            Compares two SelectedPartition objects for equality.  SelectedPartition objects are considered equal if ServiceName and PartitionId match.
            </summary>
            <param name="other"></param>
            <returns>True if the SelectedPartition objects are equal.</returns>
        </member>
        <member name="M:System.Fabric.SelectedPartition.ToString">
            <summary>
            Formats ServiceName and PartitionId into a string.
            </summary>
            <returns>The formatted string.</returns>
        </member>
        <member name="P:System.Fabric.SelectedPartition.ServiceName">
            <summary>
            Gets service name 
            </summary>
            <value>The service name.</value>
        </member>
        <member name="P:System.Fabric.SelectedPartition.PartitionId">
            <summary>
            Gets partition id
            </summary>
            <value>The partition id.</value>
        </member>
        <member name="T:System.Fabric.SelectedReplica">
            <summary>
            Returns the replica selected by ReplicaSelector.
            </summary>
            <remarks> 
            This class returns information about the SelectedReplica chosen using ReplicaSelector. 
            If the ReplicaSelector was generated using the RandomOf overload this class will be populated with 
            ReplicaOrInstance ID and PartitionSelector for the selected replica.
            </remarks>
        </member>
        <member name="F:System.Fabric.SelectedReplica.None">
            <summary>
            Returns None replica selector. 
            </summary>
            <remarks>
            A SelectedReplica will be none for any API with overloads which does not take a replica instance id and partition
            selector as an input. For example if RestartNodeAsync is called with the NodeName overload
            instead of ReplicaSelector. Returned ReplicaSelector will be None in that case.
            </remarks>
        </member>
        <member name="M:System.Fabric.SelectedReplica.#ctor(System.Int64,System.Fabric.SelectedPartition)">
            <summary>
            Selected replica constructor 
            </summary>
            <param name="replicaOrInstanceId">Replica or instance id</param>
            <param name="partitionSelectorResult">Partition selector result</param>
        </member>
        <member name="M:System.Fabric.SelectedReplica.ToString">
            <summary>
            Returns a string like: "ReplicaOrInstanceId = long, SelectedPartition = Service Name: Uri, Partition Id: Guid"
            </summary>
            <returns>A string</returns>
        </member>
        <member name="P:System.Fabric.SelectedReplica.ReplicaOrInstanceId">
            <summary>
            Gets replica or instance id
            </summary>
        </member>
        <member name="P:System.Fabric.SelectedReplica.SelectedPartition">
            <summary>
            Gets selected partition 
            </summary>
        </member>
        <member name="T:System.Fabric.TokenServiceMetadata">
            <summary>
            <para>
            For internal use only.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.TokenServiceMetadata.#ctor(System.String,System.String,System.String)">
            <summary>
            <para>
            For internal use only.
            </para>
            </summary>
            <param name="metadata">
            <para>The metadata.</para>
            </param>
            <param name="serviceName">
            <para>The service name.</para>
            </param>
            <param name="serviceDnsName">
            <para>The service Dns name.</para>
            </param>
        </member>
        <member name="P:System.Fabric.TokenServiceMetadata.ServiceName">
            <summary>
            <para>
            For internal use only.
            Gets or sets the service name.
            </para>
            </summary>
            <value>
            <para>The service name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.TokenServiceMetadata.ServiceDnsName">
            <summary>
            <para>
            For internal use only.
            Gets or sets the service Dns name.
            </para>
            </summary>
            <value>
            <para>The service Dns name.</para>
            </value>
        </member>
        <member name="P:System.Fabric.TokenServiceMetadata.Metadata">
            <summary>
            <para>
            For internal use only.
            Gets or sets the metadata.
            </para>
            </summary>
            <value>
            <para>The metadata.</para>
            </value>
        </member>
        <member name="T:System.Fabric.Transaction">
            <summary>
            <para>Represents a transaction. See T:System.Fabric.KeyValueStoreReplica</para>
            </summary>
        </member>
        <member name="T:System.Fabric.TransactionBase">
            <summary>
            <para>Provides an abstract base class for a transaction.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.TransactionBase.Finalize">
            <summary>
            <para>Enables an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.TransactionBase.Dispose">
            <summary>
            <para>Performs application-defined tasks that are associated with freeing, releasing, or resetting unmanaged resources.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.TransactionBase.OnDispose">
            <summary>
            <para>The dispose event occurs when the transaction is disposed of through the <languageKeyword>OnDispose</languageKeyword> method.</para>
            </summary>
            <remarks>
            <para>When overriding <see cref="M:System.Fabric.Transaction.OnDispose"/>, be sure to call the <languageKeyword>OnDispose</languageKeyword> 
            method on the base class.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.TransactionBase.IsDisposed">
            <summary>
            <para>Gets a value that indicates whether the object has been disposed.</para>
            </summary>
            <returns>
            <para>Returns <languageKeyword>true</languageKeyword> if the object has been disposed; otherwise, returns <languageKeyword>false</languageKeyword>.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.TransactionBase.Id">
            <summary>
            <para>Gets the ID of the transaction as a <see cref="T:System.Guid"/>.</para>
            </summary>
            <value>
            <para>The transaction ID as a <see cref="T:System.Guid"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.TransactionBase.IsolationLevel">
            <summary>
            <para>Gets the isolation level of the transaction as a <see cref="T:System.Fabric.TransactionIsolationLevel"/>.</para>
            </summary>
            <value>
            <para>A <see cref="T:System.Fabric.TransactionIsolationLevel"/> object that represents the isolation level of the transaction.</para>
            </value>
            <remarks>
            <para>The isolation level of a transaction determines what level of access to volatile data other transactions have before a transaction finishes. 
            For more information about isolation levels, see the documentation for the <see cref="T:System.Fabric.TransactionIsolationLevel"/> enumeration.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Transaction.Rollback">
            <summary>
            <para>Rolls back the set of operations that are associated with this transaction.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.Transaction.CommitAsync">
            <summary>
            <para>Commits the set of operations associated with the transaction. Replication and local disk writes are performed asynchronously</para>
            </summary>
            <returns>
            <para>A Task whose result is the Logical Sequence Number of the transaction..</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Transaction.CommitAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>Commits the set of operations that are associated with the transaction with an optional timeout. Replication and local disk 
            writes are performed asynchronously. Not that the underlying replication operation may not have been cancelled even in the event of a timeout.</para>
            </summary>
            <param name="timeout">
            <para>The amount of time to wait for replication and local disk writes to complete before System.TimeoutException is thrown.</para>
            </param>
            <param name="cancellationToken">
            <para>Currently not used. Reserved for future use.</para>
            </param>
            <returns>
            <para>A Task whose result is the Logical Sequence Number of the transaction..</para>
            </returns>
        </member>
        <member name="M:System.Fabric.Transaction.OnDispose">
            <summary>
            <para>The dispose event occurs when the transaction is disposed of through the <languageKeyword>Dispose</languageKeyword> method. </para>
            </summary>
            <remarks>
            <para>To override <see cref="M:System.Fabric.Transaction.OnDispose"/>, be sure to call <languageKeyword>OnDispose</languageKeyword> on the base class.</para>
            </remarks>
        </member>
        <member name="M:System.Fabric.Transaction.ThrowIfDisposed">
            <summary>
            <para>Throws an exception if the <see cref="T:System.Fabric.Transaction"/> object is disposed.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.TransactionIsolationLevel">
            <summary>
            <para>Enumerates the set of possible isolation levels for a <see cref="T:System.Fabric.Transaction"/>.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.TransactionIsolationLevel.Default">
            <summary>
            <para>Indicates the default isolation level of the store.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.TransactionIsolationLevel.ReadUncommitted">
            <summary>
            <para>
            Indicates that volatile data can be read during the transaction. 
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.TransactionIsolationLevel.ReadCommitted">
            <summary>
            <para>Indicates that volatile data cannot be read during the transaction, but can be modified. Shared locks are held while data is being 
            read to avoid dirty reads, but data can be changed before the end of the transaction that results in non-repeatable reads or phantom data.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.TransactionIsolationLevel.RepeatableRead">
            <summary>
            <para>Indicates that volatile data can be read but not modified during the transaction. Locks are placed on all data that is used in a 
            query to prevent other users from updating data. New rows can be inserted into data sets and are included in later reads in the current transaction.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.TransactionIsolationLevel.Snapshot">
            <summary>
            <para>Indicates the snapshot level where volatile data can be read. Any data that is read will be a transaction-consistent version of the 
            data that existed at start of the transaction.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.TransactionIsolationLevel.Serializable">
            <summary>
            <para>Indicates that volatile data are serializable. Volatile data can be read but not modified, and no new data can be added during the 
            transaction. Indicates that range locks will be put on data sets. The locks prevent updates or inserts in data sets until the transaction finishes.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.UpgradeDomainState">
            <summary>
            <para>Enumerates the states of an upgrade domain.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeDomainState.Invalid">
            <summary>
            <para>Indicates that this upgrade is not valid. All Service Fabric enumerations have the invalid type.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeDomainState.Pending">
            <summary>
            <para>Indicates that the upgrade is pending and has not started.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeDomainState.InProgress">
            <summary>
            <para>Indicates that the upgrade is in progress.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeDomainState.Completed">
            <summary>
            <para>Indicates that the upgrade is completed.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.UpgradeDomainStatus">
            <summary>
            <para>Represents the status of an upgrade domain.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.UpgradeDomainStatus.ToString">
            <summary>
            <para>
            Produces a string representation of the upgrade domain status.
            </para>
            </summary>
            <returns>
            <para>String representing the upgrade domain status.</para>
            </returns>
        </member>
        <member name="P:System.Fabric.UpgradeDomainStatus.Name">
            <summary>
            <para>Specifies the name of the upgrade domain. </para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.String"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.UpgradeDomainStatus.State">
            <summary>
            <para>Specifies the state of the upgrade domain.</para>
            </summary>
            <value>
            <para>Returns <see cref="T:System.Fabric.UpgradeDomainState"/>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.UpgradeFailureAction">
            <summary>
            <para>Enumerates the actions for Service Fabric to take if the upgrade fails.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeFailureAction.Invalid">
            <summary>
            <para>Indicates that this upgrade is not valid. All Service Fabric enumerations have the invalid type.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeFailureAction.Rollback">
            <summary>
            <para>Indicates that a rollback of the upgrade will be performed by Service Fabric if the upgrade fails.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeFailureAction.Manual">
            <summary>
            <para>Indicates that a manual repair will need to be performed by the administrator if the upgrade fails. Service Fabric will 
            not proceed to the next upgrade domain automatically.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.CodePackage">
            <summary>
            <para>Represents the code package definition.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.CodePackage.Description">
            <summary>
            <para>Gets the <see cref="T:System.Fabric.Description.CodePackageDescription"/> 
            for the <see cref="T:System.Fabric.CodePackage"/>.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Description.CodePackageDescription"/> for the <see cref="T:System.Fabric.CodePackage"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.CodePackage.Path">
            <summary>
            <para>Gets the path to the <see cref="T:System.Fabric.CodePackage"/>.</para>
            </summary>
            <value>
            <para>The path to the <see cref="T:System.Fabric.CodePackage"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.CodePackage.SetupEntryPointRunAsPolicy">
            <summary>
            <para>Gets the <see cref="T:System.Fabric.Description.RunAsPolicyDescription"/> object 
            associated with Setup EntryPoint in <see cref="T:System.Fabric.CodePackage"/>.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Description.RunAsPolicyDescription"/> object 
            associated with Setup EntryPoint in <see cref="T:System.Fabric.CodePackage"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.CodePackage.EntryPointRunAsPolicy">
            <summary>
            <para>Gets the <see cref="T:System.Fabric.Description.RunAsPolicyDescription"/> 
            associated with Main EntryPoint in the <see cref="T:System.Fabric.CodePackage"/>.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Description.RunAsPolicyDescription"/> 
            associated with Main EntryPoint in the <see cref="T:System.Fabric.CodePackage"/>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.ConfigurationPackage">
            <summary>
            <para>Represents a configuration package.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.ConfigurationPackage.Description">
            <summary>
            <para>Gets the <see cref="T:System.Fabric.Description.ConfigurationPackageDescription"/> 
            associated with the <see cref="T:System.Fabric.ConfigurationPackage"/>.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Description.ConfigurationPackageDescription"/> 
            associated with the <see cref="T:System.Fabric.ConfigurationPackage"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ConfigurationPackage.Path">
            <summary>
            <para>Gets the local path for the <see cref="T:System.Fabric.ConfigurationPackage"/>.</para>
            </summary>
            <value>
            <para>The local path for the <see cref="T:System.Fabric.ConfigurationPackage"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.ConfigurationPackage.Settings">
            <summary>
            <para>Gets the <see cref="T:System.Fabric.Description.ConfigurationSettings"/> 
            associated with the <see cref="T:System.Fabric.ConfigurationPackage"/>.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Description.ConfigurationSettings"/> 
            associated with the <see cref="T:System.Fabric.ConfigurationPackage"/>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.DataPackage">
            <summary>
            <para>Represents the data package.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.DataPackage.Description">
            <summary>
            <para>Gets or sets the <see cref="T:System.Fabric.Description.PackageDescription"/> object 
            associated with the <see cref="T:System.Fabric.DataPackage"/>.</para>
            </summary>
            <value>
            <para>The <see cref="T:System.Fabric.Description.PackageDescription"/> object 
            associated with the <see cref="T:System.Fabric.DataPackage"/>.</para>
            </value>
        </member>
        <member name="P:System.Fabric.DataPackage.Path">
            <summary>
            <para>Gets or sets the local path of <see cref="T:System.Fabric.DataPackage"/>.</para>
            </summary>
            <value>
            <para>The local path of <see cref="T:System.Fabric.DataPackage"/>.</para>
            </value>
        </member>
        <member name="T:System.Fabric.UpgradeDomainProgress">
            <summary>
            <para>Represents the upgrade progress details of nodes in the upgrade domain.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.UpgradeDomainProgress.UpgradeDomainName">
            <summary>
            <para>Gets or sets the name of the upgrade domain going through upgrade.</para>
            </summary>
            <value>
            <para>The name of the upgrade domain going through upgrade.</para>
            </value>
        </member>
        <member name="P:System.Fabric.UpgradeDomainProgress.NodeProgressList">
            <summary>
            <para>Gets the list of <see cref="T:System.Fabric.NodeUpgradeProgress"/> that indicate upgrade progress details of nodes in the current upgrade domain.</para>
            </summary>
            <value>
            <para>The list of <see cref="T:System.Fabric.NodeUpgradeProgress"/> that indicate upgrade progress details of nodes in the current upgrade domain.</para>
            </value>
        </member>
        <member name="T:System.Fabric.NodeUpgradeProgress">
            <summary>
            <para>Provides the outlines for the upgrade progress details of a node.</para>
            </summary>
        </member>
        <member name="P:System.Fabric.NodeUpgradeProgress.NodeName">
            <summary>
            <para>Gets the name of the node having upgrade progress details.</para>
            </summary>
            <value>
            <para>The name of the node having upgrade progress details.</para>
            </value>
        </member>
        <member name="P:System.Fabric.NodeUpgradeProgress.UpgradePhase">
            <summary>
            <para>Gets the upgrade phase of the node.</para>
            </summary>
            <value>
            <para>The upgrade phase of the node.</para>
            </value>
        </member>
        <member name="P:System.Fabric.NodeUpgradeProgress.PendingSafetyChecks">
            <summary>
            <para>Gets the list of safety checks that Service Fabric is currently performing on the corresponding node.</para>
            </summary>
            <value>
            <para>The list of safety checks that is Service Fabric currently performing on the corresponding node.</para>
            </value>
        </member>
        <member name="T:System.Fabric.PartitionUpgradeSafetyCheck">
            <summary>
            <para>Represents the <see cref="T:System.Fabric.UpgradeSafetyCheck"/> for a partition.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.UpgradeSafetyCheck">
            <summary>
            <para>Represents the safety check that is currently being performed for a node during upgrade.</para>
            </summary>
        </member>
        <member name="M:System.Fabric.UpgradeSafetyCheck.#ctor(System.Fabric.UpgradeSafetyCheckKind)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:System.Fabric.UpgradeSafetyCheck"/> class.</para>
            </summary>
            <param name="kind">
            <para>The kind of the safety check.</para>
            </param>
        </member>
        <member name="P:System.Fabric.UpgradeSafetyCheck.Kind">
            <summary>
            <para>Gets the type of the safety check that is being performed.</para>
            </summary>
            <value>
            <para>The type of the safety check that is being performed.</para>
            </value>
        </member>
        <member name="P:System.Fabric.PartitionUpgradeSafetyCheck.PartitionId">
            <summary>
            <para>Gets the ID of a partition that is undergoing a upgrade safety check.</para>
            </summary>
            <value>
            <para>The ID of a partition that is undergoing a upgrade safety check.</para>
            </value>
        </member>
        <member name="T:System.Fabric.UpgradeSafetyCheckKind">
            <summary>
            <para>Enumerates the <see cref="T:System.Fabric.UpgradeSafetyCheck"/> that is being performed for a node during upgrade.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeSafetyCheckKind.Invalid">
            <summary>
            <para>Indicates that the upgrade safety check kind is invalid. This value is not used.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeSafetyCheckKind.EnsureSeedNodeQuorum">
            <summary>
            <para>Indicates that if we bring down the node then this will result in global seed node quorum loss.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeSafetyCheckKind.EnsurePartitionQuorum">
            <summary>
            <para>Indicates that there is some partition for which if we bring down the replica on the node, it will result in quorum loss for that partition.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeSafetyCheckKind.WaitForPrimaryPlacement">
            <summary>
            <para>Indicates that there is some replica on the node that was moved out of this node due to upgrade. Service Fabric is now waiting for the primary 
            to be moved back to this node.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeSafetyCheckKind.WaitForPrimarySwap">
            <summary>
            <para>Indicates that Service Fabric is waiting for a primary replica to be moved out of the node before starting upgrade on that node.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeSafetyCheckKind.WaitForReconfiguration">
            <summary>
            <para>Indicates that there is some replica on the node that is involved in a reconfiguration. Service Fabric is waiting for the reconfiguration to 
            be complete before staring upgrade on that node.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeSafetyCheckKind.WaitForInbuildReplica">
            <summary>
            <para>Indicates that there is either a replica on the node that is going through copy, or there is a primary replica on the node that is copying 
            data to some other replica. In both cases, bringing down the replica on the node due to upgrade will abort the copy.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.UpgradeSafetyCheckKind.EnsureAvailability">
            <summary>
            <para>Indicates that there is either a stateless service partition on the node having exactly one instance, or there is a primary replica on the 
            node for which the partition is quorum loss. In both cases, bringing down the replicas due to upgrade will result in loss of availability.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.NodeUpgradePhase">
            <summary>
            <para>Describes the upgrade phase of the corresponding node.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.NodeUpgradePhase.Invalid">
            <summary>
            <para>Indicates that the node upgrade phase is invalid. This value is not used.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.NodeUpgradePhase.PreUpgradeSafetyCheck">
            <summary>
            <para>Indicates that upgrade has not started on the node and Service Fabric is performing pre-upgrade safety checks.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.NodeUpgradePhase.Upgrading">
            <summary>
            <para>Indicates that the node is in the process of getting upgraded.</para>
            </summary>
        </member>
        <member name="F:System.Fabric.NodeUpgradePhase.PostUpgradeSafetyCheck">
            <summary>
            <para>Indicates that upgrade is complete on the node and Service Fabric is performing post-upgrade safety checks.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.SeedNodeUpgradeSafetyCheck">
            <summary>
            <para>The safety check that is currently being performed for seed node.during upgrade </para>
            </summary>
        </member>
        <member name="T:System.Fabric.UnknownUpgradeSafetyCheck">
            <summary>
            <para>The upgrade safety check kind is unknown. This is most likely because the client is running an older version.</para>
            </summary>
        </member>
        <member name="T:System.Fabric.StoreBackupOption">
            <summary>
            <para>
            The backup option for the key-value store.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.StoreBackupOption.Full">
            <summary>
            <para>
            A full backup of the key-value store.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.StoreBackupOption.Incremental">
            <summary>
            <para>
            Incremental backup of the key-value store. i.e. only the log files created since the last 
            full or incremental backup will be backed up.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.StoreBackupOption.TruncateLogsOnly">
            <summary>
            <para>
            Option to truncate the transaction logs of the key-value store without creating any backup files.        
            </para>
            </summary>
            <remarks>
            This is useful in avoiding creation of backup files in secondary replicas when incremental backup is turned on.
            If incremental backup is turned on, then disk space fills up with transaction logs of the key-value store.
            To prevent this, frequent backups have to be created. However, creating backups on secondary replicas may not
            be useful for some key-value store services. These services also have to deal with discarding the backup
            directory. If this option is used, it cleans up the transaction logs without creating backup files.
            </remarks>
        </member>
        <member name="T:System.Fabric.StoreBackupInfo">
            <summary>
            Provides info about the backup created on the key-value store.
            </summary>
        </member>
        <member name="M:System.Fabric.StoreBackupInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:System.Fabric.StoreBackupInfo.BackupFolder">
            <summary>
            Gets or sets the folder where the backup was created. 
            </summary>
            <value>
            The backup folder.
            </value>
        </member>
        <member name="P:System.Fabric.StoreBackupInfo.BackupOption">
            <summary>
            Gets or sets the backup option used.
            </summary>
            <value>
            The backup option used.
            </value>
        </member>
        <member name="T:System.Fabric.Query.PagedListHelper">
            <summary>
            <para>
            Extensions for paged list operations.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.Query.PagedListHelper.ToArray``1(System.Fabric.Query.PagedList{``0})">
            <summary>
            <para>
            Returns an array with the items in the paged list.
            </para>
            </summary>
            <param name="list">
            <para>The paged list.</para>
            </param>
            <typeparam name="T">
            <para>The type of the list objects.</para>
            </typeparam>
            <returns>
            <para>The array.</para>
            </returns>
        </member>
        <member name="T:System.Fabric.SafetyCheckKind">
            <summary>
            <para>
            A Service Fabric enumeration that indicates the upgrade safety check performed.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.SafetyCheckKind.Invalid">
            <summary>
            <para>
            Indicates that the upgrade safety check kind is invalid. This value is not used.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.SafetyCheckKind.EnsureSeedNodeQuorum">
            <summary>
            <para>
            Indicates that if we bring down the node then this will result in global seed node quorum loss.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.SafetyCheckKind.EnsurePartitionQuorum">
            <summary>
            <para>
            Indicates that there is some partition for which if we bring down the replica on the node, it will result in quorum loss for that partition.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.SafetyCheckKind.WaitForPrimaryPlacement">
            <summary>
            <para>
            Indicates that there is some replica on the node that was moved out of this node. Service Fabric is now waiting for the primary to be moved back to this node.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.SafetyCheckKind.WaitForPrimarySwap">
            <summary>
            <para>
            Indicates that Service Fabric is waiting for a primary replica to be moved out of the node.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.SafetyCheckKind.WaitForReconfiguration">
            <summary>
            <para>
            Indicates that there is some replica on the node that is involved in a reconfiguration and Service Fabric is waiting for the reconfiguration to be complete.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.SafetyCheckKind.WaitForInBuildReplica">
            <summary>
            <para>
            Indicates that there is either a replica on the node that is going through copy, or there is a primary replica on the node that is copying data to some 
            other replica. In both cases, bringing down the replica on the node will abort the copy.
            </para>
            </summary>
        </member>
        <member name="F:System.Fabric.SafetyCheckKind.EnsureAvailability">
            <summary>
            <para>
            Indicates that there is either a stateless service partition on the node having exactly one instance, or there is a primary replica on the node for 
            which the partition is quorum loss. In both cases, bringing down the replica will result in loss of availability.
            </para>
            </summary>
        </member>
        <member name="T:System.Fabric.SafetyCheck">
            <summary>
            <para>
            Represents a safety check that is currently being performed for a node.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.SafetyCheck.#ctor(System.Fabric.SafetyCheckKind)">
            <summary>
            <para>
            Instantiates a <see cref="T:System.Fabric.SafetyCheck"/> object with the specified kind. 
            Can only be invoked from derived classes.
            </para>
            </summary>
            <param name="kind">
            <para>The safety check kind.</para>
            </param>
        </member>
        <member name="P:System.Fabric.SafetyCheck.Kind">
            <summary>
            <para>
            Gets the type of the safety check that is being performed.
            </para>
            </summary>
            <value>
            <para>The type of safety check that is being performed.</para>
            </value>
        </member>
        <member name="T:System.Fabric.PartitionSafetyCheck">
            <summary>
            <para>
            Represents the SafetyCheck for a partition.
            </para>
            </summary>
        </member>
        <member name="P:System.Fabric.PartitionSafetyCheck.PartitionId">
            <summary>
            <para>
            Gets the ID of the partition that is undergoing a safety check.
            </para>
            </summary>
            <value>
            <para>The ID of the partition that is undergoing a safety check.</para>
            </value>
        </member>
        <member name="T:System.Fabric.SeedNodeSafetyCheck">
            <summary>
            <para>
            The safety check that is currently being performed for seed nodes.
            </para>
            </summary>
        </member>
        <member name="T:System.Fabric.UnknownSafetyCheck">
            <summary>
            <para>
            The safety check that is not known to the current version of Service Fabric.
            </para>
            </summary>
        </member>
        <member name="M:System.Fabric.DeploymentManager.CreateClusterAsync(System.String,System.String,System.Boolean)">
            <summary>
            Creates a Service Fabric cluster based on an input JSON configuration file and Service Fabric CAB file.
            </summary>
            <param name="clusterConfigPath">Specifies the path to the cluster configuration file where you define the cluster size and configuration settings. Template provided as ClusterConfig.json in the downloaded deployment .zip package.</param>
            <param name="fabricPackagePath">Specifies the path to Service Fabric CAB file.</param>
            <param name="rollbackOnFailure">Indicates that the system automatically cleans up the cluster in case of deployment conflict.</param>
        </member>
        <member name="M:System.Fabric.DeploymentManager.CreateClusterAsync(System.String,System.String,System.String,System.Fabric.FabricPackageType,System.String,System.String,System.Boolean)">
            <summary>
            Creates a Service Fabric cluster based on deprecated XML Cluster Manifest file.
            </summary>
            <param name="clusterManifestPath"></param>
            <param name="fabricDataRoot"></param>
            <param name="fabricLogRoot"></param>
            <param name="fabricPackageType"></param>
            <param name="fabricPackageSourcePath"></param>
            <param name="fabricPackageDestinationPath"></param>
            <param name="rollbackOnFailure"></param>
            <returns></returns>
        </member>
        <member name="M:System.Fabric.DeploymentManager.RemoveClusterAsync(System.String,System.Boolean)">
            <summary>
            Removes a Service Fabric cluster based on input JSON configuration file.
            </summary>
            <param name="clusterConfigPath">Specifies the path to the cluster configuration file where you define the cluster size and configuration settings. Template provided as ClusterConfig.json in the downloaded deployment .zip package.</param>
            <param name="deleteLog">Indicates that the operation cleans up Fabric logs as part of removal. </param>
        </member>
        <member name="M:System.Fabric.XMLHelper.GetGeneratedXMLClusterManifestAndInfrastructureManifestPath(System.String)">
            <summary>
             This method generates a temp ClusterManifest.xml and InfrastructureManifest.xml from JsonClusterManifest that user inputs.
             It returns the cm and im path as a string list for the purpose of clean temp directory after consumption.
            </summary>
        </member>
    </members>
</doc>
