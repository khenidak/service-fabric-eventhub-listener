<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.ServiceFabric.Data.Interfaces</name>
    </assembly>
    <members>
        <member name="T:Microsoft.ServiceFabric.Data.BackupDescription">
            <summary>
            Description of the backup request.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.BackupDescription.#ctor(System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Initializes a new instance of the backup description structure.
            </summary>
            <param name="backupCallback">Callback to be called when the backup folder has been created locally and is ready to be moved out of the node.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.BackupDescription.#ctor(Microsoft.ServiceFabric.Data.BackupOption,System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Initializes a new instance of the backup description structure.
            </summary>
            <param name="option">The type of backup to perform.</param>
            <param name="backupCallback">Callback to be called when the backup folder has been created locally and is ready to be moved out of the node.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.BackupDescription.Option">
            <summary>
            The type of backup to perform.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.BackupDescription.BackupCallback">
            <summary>
            Callback to be called when the backup folder has been created locally and is ready to be moved out of the node.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.RestoreContext">
            <summary>
            Context provided during on data loss for restoring.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.RestoreContext.#ctor(Microsoft.ServiceFabric.Data.IStateProviderReplica)">
            <summary>
            Initializes a new instance of the RestoreContext structure.
            </summary>
            <param name="stateProviderReplica">
            An <see cref="T:Microsoft.ServiceFabric.Data.IStateProviderReplica"/> representing a reliable state provider replica.
            </param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.RestoreContext.RestoreAsync(Microsoft.ServiceFabric.Data.RestoreDescription)">
            <summary>
            Restores a backup described by <see cref="T:Microsoft.ServiceFabric.Data.RestoreDescription"/>.
            </summary>
            <param name="restoreDescription">Description for the restore request.</param>
            <remarks>
            A safe backup will be performed, meaning the restore will only be completed 
            if the data to restore is ahead of state of the current replica.
            </remarks>
            <returns>
            Task that represents the asynchronous restore operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.RestoreContext.RestoreAsync(Microsoft.ServiceFabric.Data.RestoreDescription,System.Threading.CancellationToken)">
            <summary>
            Restore a backup described by <see cref="T:Microsoft.ServiceFabric.Data.RestoreDescription"/>.
            </summary>
            <param name="restoreDescription">Description for the restore request.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>Task that represents the asynchronous restore operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.RestoreDescription.#ctor(System.String)">
            <summary>
            Initializes a new instance of the RestoreDescription structure.
            </summary>
            <param name="backupFolderPath">
            The directory where the replica is to be restored from.
            This parameter cannot be null, empty or contain just whitespace. 
            UNC paths may also be provided.
            </param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.RestoreDescription.#ctor(System.String,Microsoft.ServiceFabric.Data.RestorePolicy)">
            <summary>
            Initializes a new instance of the RestoreDescription structure.
            </summary>
            <param name="backupFolderPath">
            The directory where the replica is to be restored from.
            This parameter cannot be null, empty or contain just whitespace. 
            UNC paths may also be provided.
            </param>
            <param name="restorePolicy">The restore policy.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.RestoreDescription.BackupFolderPath">
            <summary>
            The directory where the replica is to be restored from.
            This parameter cannot be null, empty or contain just whitespace. 
            UNC paths may also be provided.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.RestoreDescription.Policy">
            <summary>
            The restore policy.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.BackupInfo">
            <summary>
            Provides info about the backup.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.BackupInfo.ToString">
            <summary>
            Returns a string that represents this instance.
            </summary>
            <returns>A string that represents this instance.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.BackupInfo.Directory">
            <summary>
            Gets or sets the directory where the backup was created. 
            </summary>
            <returns>The directory.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.BackupInfo.Option">
            <summary>
            Gets or sets the backup option used.
            </summary>
            <returns>The backup option.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.BackupInfo.Version">
            <summary>
            Gets or sets the latest epoch included in the backup.
            </summary>
            <returns>The backup version.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion">
            <summary>
            Version of the backup.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.InvalidBackupVersion">
            <summary>
            Invalid Backup Version.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.Epoch">
            <summary>
            Epoch at which the backup was taken.
            </summary>
            <return>The epoch.</return>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.Lsn">
            <summary>
            Last committed logical sequence number included in the backup.
            </summary>
            <returns>The lsn.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.BackupOption">
            <summary>
            The backup option.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Data.BackupOption.Full">
            <summary>
            A full backup of the transactional replicator.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Data.BackupOption.Incremental">
            <summary>
            Incremental backup of the replica. i.e. only the log files created since the last 
            full or incremental backup will be backed up.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.IAsyncEnumerator`1">
            <summary>
            Asynchronous enumerator.
            </summary>
            <remarks>Note that the </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IAsyncEnumerator`1.MoveNextAsync(System.Threading.CancellationToken)">
            <summary>
            Advances the enumerator to the next element of the enumerator.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false
             if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IAsyncEnumerator`1.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element
            in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.IAsyncEnumerator`1.Current">
            <summary>
            Gets the current element in the enumerator.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.IReliableStateManagerReplica">
            <summary>
            Defines replica of a reliable state provider. 
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.IStateProviderReplica">
            <summary>
            Defines methods a reliable state provider replica must implement for Service Fabric to interact with it.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IStateProviderReplica.Initialize(System.Fabric.StatefulServiceInitializationParameters)">
            <summary>
            Initialize the state provider replica using the service initialization information.
            </summary>
            <remarks>
            No complex processing should be done during Initialize. Expensive or long-running initialization should be done in OpenAsync.
            </remarks>
            <param name="initializationParameters">Service initialization information such as service name, partition id, replica id, and code package information.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IStateProviderReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)">
            <summary>
            Open the state provider replica for use.
            </summary>
            <remarks>
            Extended state provider initialization tasks can be started at this time.
            </remarks>
            <param name="openMode">Indicates whether this is a new or existing replica.</param>
            <param name="partition">The partition this replica belongs to.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>
            Task that represents the asynchronous open operation. The result contains the replicator
            responsible for replicating state between other state provider replicas in the partition.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IStateProviderReplica.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)">
            <summary>
            Notify the state provider replica that its role is changing, for example to Primary or Secondary.
            </summary>
            <param name="newRole">The new replica role, such as primary or secondary.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>Task that represents the asynchronous change role operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IStateProviderReplica.CloseAsync(System.Threading.CancellationToken)">
            <summary>
            Gracefully close the state provider replica.
            </summary>
            <remarks>
            This generally occurs when the replica's code is being upgrade, the replica is being moved
            due to load balancing, or a transient fault is detected.
            </remarks>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>Task that represents the asynchronous close operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IStateProviderReplica.Abort">
            <summary>
            Forcefully abort the state provider replica.
            </summary>
            <remarks>
            This generally occurs when a permanent fault is detected on the node, or when
            Service Fabric cannot reliably manage the replica's lifecycle due to internal failures.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Performs a full backup of all reliable state managed by this <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/>.
            </summary>
            <param name="backupCallback">Callback to be called when the backup folder has been created locally and is ready to be moved out of the node.</param>
            <returns>Task that represents the asynchronous backup operation.</returns>
            <remarks>
            A FULL backup will be performed with a one-hour timeout.
            Boolean returned by the backupCallback indicate whether the service was able to successfully move the backup folder to an external location.
            If false is returned, BackupAsync throws InvalidOperationException with the relevant message indicating backupCallback returned false.
            Also, backup will be marked as unsuccessful.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(Microsoft.ServiceFabric.Data.BackupOption,System.TimeSpan,System.Threading.CancellationToken,System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Performs a backup of all reliable state managed by this <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/>.
            </summary>
            <param name="option">The type of backup to perform.</param>
            <param name="timeout">The timeout for this operation.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <param name="backupCallback">Callback to be called when the backup folder has been created locally and is ready to be moved out of the node.</param>
            <returns>Task that represents the asynchronous backup operation.</returns>
            <remarks>
            Boolean returned by the backupCallback indicate whether the service was able to successfully move the backup folder to an external location.
            If false is returned, BackupAsync throws InvalidOperationException with the relevant message indicating backupCallback returned false.
            Also, backup will be marked as unsuccessful.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync(System.String)">
            <summary>
            Restore a backup taken by <see cref="M:Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})"/> or 
            <see cref="M:Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(Microsoft.ServiceFabric.Data.BackupOption,System.TimeSpan,System.Threading.CancellationToken,System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})"/>.
            </summary>
            <param name="backupFolderPath">
            The directory where the replica is to be restored from.
            This parameter cannot be null, empty or contain just whitespace. 
            UNC paths may also be provided.
            </param>
            <remarks>
            A safe backup will be performed, meaning the restore will only be completed if the data to restore is ahead of state of the current replica.
            </remarks>
            <returns>Task that represents the asynchronous restore operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync(System.String,Microsoft.ServiceFabric.Data.RestorePolicy,System.Threading.CancellationToken)">
            <summary>
            Restore a backup taken by <see cref="M:Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})"/> or 
            <see cref="M:Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(Microsoft.ServiceFabric.Data.BackupOption,System.TimeSpan,System.Threading.CancellationToken,System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})"/>.
            </summary>
            <param name="restorePolicy">The restore policy.</param>
            <param name="backupFolderPath">
            The directory where the replica is to be restored from.
            This parameter cannot be null, empty or contain just whitespace. 
            UNC paths may also be provided.
            </param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>Task that represents the asynchronous restore operation.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.IStateProviderReplica.OnDataLossAsync">
            <summary>
            Function called during suspected dataloss.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.IReliableStateManager">
            <summary>
            Manages all <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> for a service replica.
            Each replica in a service has its own state manager and thus its own set of <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer``1(Microsoft.ServiceFabric.Data.IStateSerializer{``0})">
            <summary>
            Adds a state serializer.
            Adds it for all reliable collection instances.
            </summary>
            <typeparam name="T">Type that will be serialized and de-serialized.</typeparam>
            <param name="stateSerializer">
            The state serializer to be added.
            </param>
            <returns>
            True if the serializer was added.
            False if a serailizer is already registered.
            </returns>
            <remarks>
            This method can only be called in InitializeStateSerializers.
            Instance specific state serializers always take precedence.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IReliableStateManager.CreateTransaction">
            <summary>
            Create and start a new transaction that can be used to group operations to be performed atomically.
            </summary>
            <remarks>
            Operations are added to the transaction by passing the <see cref="T:Microsoft.ServiceFabric.Data.ITransaction"/> object in to reliable state methods.
            </remarks>
            <returns>A new transaction.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.Uri,System.TimeSpan)">
            <summary>
            Gets an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> of the given type <typeparamref name="T"/> and with the given name if it exists, or creates one
            and returns it if it doesn't already exist.
            </summary>
            <remarks>
            This is an atomic operation. When an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> needs to be created, it will either complete and return successfully
            or it will not be created. If this method throws an exception, the transaction must be aborted.
            </remarks>
            <typeparam name="T">
            When specifying the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> type, you may ask for either a class type or an interface type.
            <para>
            If specifying a class type, the system will attempt to return an instance of that type. 
            If an instance of that type cannot be instantiated (e.g., abstract class, no suitable constructor), an ArgumentException is thrown.
            </para>
            <para>
            If specifying an interface type, the manager will attempt to resolve the interface to a concrete type.
            If type mapping is specified by the user, this method will use the user-specified mapping to resolve the type (not yet supported).
            If type mapping is not specified by the user this method will select the default implementation for the interface given.
            If the given interface type does not have a default implementation, or a user-specified mapping for the type is not provided or the type
            is invalid, this method will throw ArgumentException.
            </para>
            </typeparam>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="name">
            The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/>. This name must be unique in this <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/>
            across <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> types, including unrelated types.
            </param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An instance of the type <typeparamref name="T"/> cannot be created, or the existing <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> instance is not of type <typeparamref name="T"/>, or <paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <returns>Task that represents the asynchronous operation. The task result is the reliable state instance.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.Uri)">
            <summary>
            Gets an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> of the given type <typeparamref name="T"/> and with the given name if it exists, or creates one
            and returns it if it doesn't already exist.
            </summary>
            <remarks>
            This is an atomic operation. When an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> needs to be created, it will either complete and return successfully
            or it will not be created. If this method throws an exception, the transaction must be aborted.
            </remarks>
            <typeparam name="T">
            When specifying the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> type, you may ask for either a class type or an interface type.
            <para>
            If specifying a class type, the system will attempt to return an instance of that type. 
            If an instance of that type cannot be instantiated (e.g., abstract class, no suitable constructor), an ArgumentException is thrown.
            </para>
            <para>
            If specifying an interface type, the manager will attempt to resolve the interface to a concrete type.
            If type mapping is specified by the user, this method will use the user-specified mapping to resolve the type (not yet supported).
            If type mapping is not specified by the user this method will select the default implementation for the interface given.
            If the given interface type does not have a default implementation, or a user-specified mapping for the type is not provided or the type
            is invalid, this method will throw ArgumentException.
            </para>
            </typeparam>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="name">
            The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/>. This name must be unique in this <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/>
            across <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> types, including unrelated types.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An instance of the type <typeparamref name="T"/> cannot be created, or the existing <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> instance is not of type <typeparamref name="T"/>.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <returns>Task that represents the asynchronous operation. The task result is the reliable state instance.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(System.Uri,System.TimeSpan)">
            <summary>
            Gets an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> of the given type <typeparamref name="T"/> and with the given name if it exists, or creates one
            and returns it if it doesn't already exist.
            </summary>
            <remarks>
            This is an atomic operation. When an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> needs to be created, it will either complete and return successfully
            or it will not be created.
            </remarks>
            <typeparam name="T">
            When specifying the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> type, you may ask for either a class type or an interface type.
            <para>
            If specifying a class type, the system will attempt to return an instance of that type. 
            If an instance of that type cannot be instantiated (e.g., abstract class, no suitable constructor), an ArgumentException is thrown.
            </para>
            <para>
            If specifying an interface type, the manager will attempt to resolve the interface to a concrete type.
            If type mapping is specified by the user, this method will use the user-specified mapping to resolve the type (not yet supported).
            If type mapping is not specified by the user this method will select the default implementation for the interface given.
            If the given interface type does not have a default implementation, or a user-specified mapping for the type is not provided or the type
            is invalid, this method will throw ArgumentException.
            </para>
            </typeparam>
            <param name="name">
            The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/>. This name must be unique in this <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/>
            across <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> types, including unrelated types.
            </param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An instance of the type <typeparamref name="T"/> cannot be created, or the existing <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> instance is not of type <typeparamref name="T"/>, or <paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <returns>Task that represents the asynchronous operation. The task result is the reliable state instance.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(System.Uri)">
            <summary>
            Gets an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> of the given type <typeparamref name="T"/> and with the given name if it exists, or creates one
            and returns it if it doesn't already exist.
            </summary>
            <remarks>
            This is an atomic operation. When an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> needs to be created, it will either complete and return successfully
            or it will not be created.
            </remarks>
            <typeparam name="T">
            When specifying the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> type, you may ask for either a class type or an interface type.
            <para>
            If specifying a class type, the system will attempt to return an instance of that type. 
            If an instance of that type cannot be instantiated (e.g., abstract class, no suitable constructor), an ArgumentException is thrown.
            </para>
            <para>
            If specifying an interface type, the manager will attempt to resolve the interface to a concrete type.
            If type mapping is specified by the user, this method will use the user-specified mapping to resolve the type (not yet supported).
            If type mapping is not specified by the user this method will select the default implementation for the interface given.
            If the given interface type does not have a default implementation, or a user-specified mapping for the type is not provided or the type
            is invalid, this method will throw ArgumentException.
            </para>
            </typeparam>
            <param name="name">
            The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/>. This name must be unique in this <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/>
            across <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> types, including unrelated types.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An instance of the type <typeparamref name="T"/> cannot be created, or the existing <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> instance is not of type <typeparamref name="T"/>.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <returns>Task that represents the asynchronous operation. The task result is the reliable state instance.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.String,System.TimeSpan)">
            <summary>
            Gets an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> of the given type <typeparamref name="T"/> and with the given name if it exists, or creates one
            and returns it if it doesn't already exist.
            </summary>
            <remarks>
            This is an atomic operation. When an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> needs to be created, it will either complete and return successfully
            or it will not be created. If this method throws an exception, the transaction must be aborted.
            </remarks>
            <typeparam name="T">
            When specifying the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> type, you may ask for either a class type or an interface type.
            <para>
            If specifying a class type, the system will attempt to return an instance of that type. 
            If an instance of that type cannot be instantiated (e.g., abstract class, no suitable constructor), an ArgumentException is thrown.
            </para>
            <para>
            If specifying an interface type, the manager will attempt to resolve the interface to a concrete type.
            If type mapping is specified by the user, this method will use the user-specified mapping to resolve the type (not yet supported).
            If type mapping is not specified by the user this method will select the default implementation for the interface given.
            If the given interface type does not have a default implementation, or a user-specified mapping for the type is not provided or the type
            is invalid, this method will throw ArgumentException.
            </para>
            </typeparam>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="name">
            The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/>. This name must be unique in this <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/>
            across <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> types, including unrelated types.
            </param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An instance of the type <typeparamref name="T"/> cannot be created, or the existing <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> instance is not of type <typeparamref name="T"/>, or <paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <returns>Task that represents the asynchronous operation. The task result is the reliable state instance.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.String)">
            <summary>
            Gets an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> of the given type <typeparamref name="T"/> and with the given name if it exists, or creates one
            and returns it if it doesn't already exist.
            </summary>
            <remarks>
            This is an atomic operation. When an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> needs to be created, it will either complete and return successfully
            or it will not be created. If this method throws an exception, the transaction must be aborted.
            </remarks>
            <typeparam name="T">
            When specifying the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> type, you may ask for either a class type or an interface type.
            <para>
            If specifying a class type, the system will attempt to return an instance of that type. 
            If an instance of that type cannot be instantiated (e.g., abstract class, no suitable constructor), an ArgumentException is thrown.
            </para>
            <para>
            If specifying an interface type, the manager will attempt to resolve the interface to a concrete type.
            If type mapping is specified by the user, this method will use the user-specified mapping to resolve the type (not yet supported).
            If type mapping is not specified by the user this method will select the default implementation for the interface given.
            If the given interface type does not have a default implementation, or a user-specified mapping for the type is not provided or the type
            is invalid, this method will throw ArgumentException.
            </para>
            </typeparam>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="name">
            The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/>. This name must be unique in this <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/>
            across <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> types, including unrelated types.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An instance of the type <typeparamref name="T"/> cannot be created, or the existing <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> instance is not of type <typeparamref name="T"/>.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <returns>Task that represents the asynchronous operation. The task result is the reliable state instance.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(System.String,System.TimeSpan)">
            <summary>
            Gets an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> of the given type <typeparamref name="T"/> and with the given name if it exists, or creates one
            and returns it if it doesn't already exist.
            </summary>
            <remarks>
            This is an atomic operation. When an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> needs to be created, it will either complete and return successfully
            or it will not be created.
            </remarks>
            <typeparam name="T">
            When specifying the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> type, you may ask for either a class type or an interface type.
            <para>
            If specifying a class type, the system will attempt to return an instance of that type. 
            If an instance of that type cannot be instantiated (e.g., abstract class, no suitable constructor), an ArgumentException is thrown.
            </para>
            <para>
            If specifying an interface type, the manager will attempt to resolve the interface to a concrete type.
            If type mapping is specified by the user, this method will use the user-specified mapping to resolve the type (not yet supported).
            If type mapping is not specified by the user this method will select the default implementation for the interface given.
            If the given interface type does not have a default implementation, or a user-specified mapping for the type is not provided or the type
            is invalid, this method will throw ArgumentException.
            </para>
            </typeparam>
            <param name="name">
            The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/>. This name must be unique in this <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/>
            across <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> types, including unrelated types.
            </param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An instance of the type <typeparamref name="T"/> cannot be created, or the existing <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> instance is not of type <typeparamref name="T"/>, or <paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <returns>Task that represents the asynchronous operation. The task result is the reliable state instance.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(System.String)">
            <summary>
            Gets an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> of the given type <typeparamref name="T"/> and with the given name if it exists, or creates one
            and returns it if it doesn't already exist.
            </summary>
            <remarks>
            This is an atomic operation. When an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> needs to be created, it will either complete and return successfully
            or it will not be created.
            </remarks>
            <typeparam name="T">
            When specifying the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> type, you may ask for either a class type or an interface type.
            <para>
            If specifying a class type, the system will attempt to return an instance of that type. 
            If an instance of that type cannot be instantiated (e.g., abstract class, no suitable constructor), an ArgumentException is thrown.
            </para>
            <para>
            If specifying an interface type, the manager will attempt to resolve the interface to a concrete type.
            If type mapping is specified by the user, this method will use the user-specified mapping to resolve the type (not yet supported).
            If type mapping is not specified by the user this method will select the default implementation for the interface given.
            If the given interface type does not have a default implementation, or a user-specified mapping for the type is not provided or the type
            is invalid, this method will throw ArgumentException.
            </para>
            </typeparam>
            <param name="name">
            The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/>. This name must be unique in this <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/>
            across <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> types, including unrelated types.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An instance of the type <typeparamref name="T"/> cannot be created, or the existing <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> instance is not of type <typeparamref name="T"/>.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <returns>Task that represents the asynchronous operation. The task result is the reliable state instance.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Uri,System.TimeSpan)">
            <summary>
            Removes the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> with the given name from this state manager. The state is
            permanently removed from persistent storage and all replicas when the transaction is committed.
            </summary>
            <remarks>
            This is an atomic operation. The <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> will be successfully removed along with all state
            or be left in-tact. If this method throws an exception, the transaction must be aborted.
            </remarks>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="name">The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> to remove.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> with the given name does not exist, or <paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <returns>Task that represents the asynchronous remove operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Uri)">
            <summary>
            Removes the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> with the given name from this state manager. The state is
            permanently removed from persistent storage and all replicas when the transaction is committed.
            </summary>
            <remarks>
            This is an atomic operation. The <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> will be successfully removed along with all state
            or be left in-tact. If this method throws an exception, the transaction must be aborted.
            </remarks>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="name">The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> to remove.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> with the given name does not exist.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <returns>Task that represents the asynchronous remove operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.Uri,System.TimeSpan)">
            <summary>
            Removes the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> with the given name from this state manager. The state is
            permanently removed from persistent storage and all replicas.
            </summary>
            <remarks>
            This is an atomic operation. The <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> will be successfully removed along with all state
            or be left in-tact.
            </remarks>
            <param name="name">The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> to remove.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> with the given name does not exist, or <paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <returns>Task that represents the asynchronous remove operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.Uri)">
            <summary>
            Removes the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> with the given name from this state manager. The state is
            permanently removed from persistent storage and all replicas.
            </summary>
            <remarks>
            This is an atomic operation. The <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> will be successfully removed along with all state
            or be left in-tact.
            </remarks>
            <param name="name">The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> to remove.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> with the given name does not exist.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <returns>Task that represents the asynchronous remove operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.String,System.TimeSpan)">
            <summary>
            Removes the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> with the given name from this state manager. The state is
            permanently removed from persistent storage and all replicas when the transaction is committed.
            </summary>
            <remarks>
            This is an atomic operation. The <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> will be successfully removed along with all state
            or be left in-tact. If this method throws an exception, the transaction must be aborted.
            </remarks>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="name">The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> to remove.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> with the given name does not exist, or <paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <returns>Task that represents the asynchronous remove operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.String)">
            <summary>
            Removes the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> with the given name from this state manager. The state is
            permanently removed from persistent storage and all replicas when the transaction is committed.
            </summary>
            <remarks>
            This is an atomic operation. The <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> will be successfully removed along with all state
            or be left in-tact. If this method throws an exception, the transaction must be aborted.
            </remarks>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="name">The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> to remove.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> with the given name does not exist.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <returns>Task that represents the asynchronous remove operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.String,System.TimeSpan)">
            <summary>
            Removes the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> with the given name from this state manager. The state is
            permanently removed from persistent storage and all replicas.
            </summary>
            <remarks>
            This is an atomic operation. The <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> will be successfully removed along with all state
            or be left in-tact.
            </remarks>
            <param name="name">The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> to remove.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> with the given name does not exist, or <paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <returns>Task that represents the asynchronous remove operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.String)">
            <summary>
            Removes the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> with the given name from this state manager. The state is
            permanently removed from persistent storage and all replicas.
            </summary>
            <remarks>
            This is an atomic operation. The <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> will be successfully removed along with all state
            or be left in-tact.
            </remarks>
            <param name="name">The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> to remove.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> with the given name does not exist.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <returns>Task that represents the asynchronous remove operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync``1(System.Uri)">
            <summary>
            Attempts to get an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> of the given type <typeparamref name="T"/> and with the given name.
            </summary>
            <typeparam name="T">
            When specifying the type, you may ask for either a concrete type or an interface type. The retrieved object will
            be cast to the given type.
            </typeparam>
            <param name="name">
            The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/>. This name must be unique in this <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/>
            across <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> types, including unrelated types.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> instance is not convertible to type <typeparamref name="T"/>.</exception>
            <returns>Task that represents the asynchronous operation. The task result is a tuple indicating whether the reliable state was found, and if so the instance.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync``1(System.String)">
            <summary>
            Attempts to get an <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> of the given type <typeparamref name="T"/> and with the given name.
            </summary>
            <typeparam name="T">
            When specifying the type, you may ask for either a concrete type or an interface type. The retrieved object will
            be cast to the given type.
            </typeparam>
            <param name="name">
            The name of the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/>. This name must be unique in this <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/>
            across <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> types, including unrelated types.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> instance is not convertible to type <typeparamref name="T"/>.</exception>
            <returns>Task that represents the asynchronous operation. The task result is a tuple indicating whether the reliable state was found, and if so the instance.</returns>
        </member>
        <member name="E:Microsoft.ServiceFabric.Data.IReliableStateManager.TransactionChanged">
            <summary>
            Occurs when a transaction's state changes.
            For example, commit of a transaction.
            </summary>
        </member>
        <member name="E:Microsoft.ServiceFabric.Data.IReliableStateManager.StateManagerChanged">
            <summary>
            Occurs when State Manager's state changes.
            For example, creation or delete of reliable state or rebuild of the reliable state manager.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.IReliableState">
            <summary>
            Defines methods for interacting with all reliable state in Service Fabric.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.IReliableState.Name">
            <summary>
            Gets a value indicating the unique name for the <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> instance.
            </summary>
            <returns>The <see cref="T:System.Uri"/> name of this <see cref="T:Microsoft.ServiceFabric.Data.IReliableState"/> instance.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.IStateSerializer`1">
            <summary>
            Serialization interface.
            </summary>
            <typeparam name="T">Type to serialize and de-serialize.</typeparam>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IStateSerializer`1.Read(System.IO.BinaryReader)">
            <summary>
            De-serializes to object.
            </summary>
            <param name="binaryReader">The binary reader.</param>
            <returns>De-serialized value.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IStateSerializer`1.Write(`0,System.IO.BinaryWriter)">
            <summary>
            Serializes in to binary writer.
            </summary>
            <param name="value">Value to serialize.</param>
            <param name="binaryWriter">The binary Writer.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IStateSerializer`1.Read(`0,System.IO.BinaryReader)">
            <summary>
            De-serializes to object.
            </summary>
            <param name="baseValue">Base value for the de-serialization.</param>
            <param name="binaryReader">The binary reader.</param>
            <returns>De-serialized value.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.IStateSerializer`1.Write(`0,`0,System.IO.BinaryWriter)">
            <summary>
            Serializes in to binary writer.
            </summary>
            <param name="baseValue">Base value for the serialization.</param>
            <param name="targetValue">Value to serialize.</param>
            <param name="binaryWriter">The binary Writer.</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.ITransaction">
            <summary>
            Represents a set of operations that should all be commited or reverted atomically.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.ITransaction.CommitAsync">
            <summary>
            Commit the transaction.
            </summary>
            <remarks>
            You cannot abort a transaction once it has been committed, because all modifications
            have been persisted and replicated.
            </remarks>
            <exception cref="T:System.InvalidOperationException">The transaction has already been committed or aborted.</exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">
            The transaction includes updates to state and the replica role is not Primary.
            Only Primary replicas are given write status.
            </exception>
            <returns>
            A task that represents the asynchronous commit operation. 
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.ITransaction.Abort">
            <summary>
            Abort (rolls back) the transaction.
            </summary>
            <exception cref="T:System.InvalidOperationException">The transaction has already been committed or aborted.</exception>
            <exception cref="T:System.Fabric.FabricNotPrimaryException">
            The transaction includes updates to state and the replica role is not Primary.
            Only Primary replicas are given write status.
            </exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.ITransaction.GetVisibilitySequenceNumberAsync">
            <summary>
            Gets the visibility sequence number.
            </summary>
            <returns>The visibility sequence number.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ITransaction.CommitSequenceNumber">
            <summary>
            Sequence number for the commit operation.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ITransaction.TransactionId">
            <summary>
            Gets a value identifying the transaction.
            </summary>
            <returns>The transaction id.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.Collections.EnumerationMode">
            <summary>
            Specifies the order items should be returned during enumeration of reliable collections.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Data.Collections.EnumerationMode.Unordered">
            <summary>
            Results can be returned as an unordered enumeration. Fastest enumeration mode.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Data.Collections.EnumerationMode.Ordered">
            <summary>
            Results must be returned as an ordered enumeration.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1">
            <summary>
            Defines methods for manipulating reliable collections.
            </summary>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1.GetCountAsync(Microsoft.ServiceFabric.Data.ITransaction)">
            <summary>
            Gets the number of elements contained in the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1"/>.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <returns>A task that represents the asynchronous operation. The task result indicates the number of elements.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1.ClearAsync">
            <summary>
            Removes all state from the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1"/>, including replicated and persisted state.
            </summary>
            <returns>A task that represents the asynchronous clear operation.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2">
            <summary>
            Represents a reliable collection of key/value pairs that are persisted and replicated.
            </summary>
            <typeparam name="TKey">The type of the keys in the reliable dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the reliable dictionary.</typeparam>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1)">
            <summary>
            Add the specified key/value pair to the reliable dictionary.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key to be added.</param>
            <param name="value">The value to be added. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized.</exception>
            <exception cref="T:System.ArgumentException">A value with the same key already exists in the dictionary.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <returns>A task that represents the asynchronous add operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Add the specified key/value pair to the reliable dictionary.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key to be added.</param>
            <param name="value">The value to be added. The value can be null for reference types.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized.</exception>
            <exception cref="T:System.ArgumentException">A value with the same key already exists in the dictionary, or <paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was cancelled.</exception>
            <returns>A task that represents the asynchronous add operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddOrUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Func{`0,`1},System.Func{`0,`1,`1})">
            <summary>
            Uses the specified functions to add a key/value pair to the reliable dictionary if the key does not already exist,
            or to update a key/value pair in the reliable dictionary if the key already exists.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key to be added or whose value should be updated.</param>
            <param name="addValueFactory">The function used to generate a value for an absent key.</param>
            <param name="updateValueFactory">The function used to generate a new value for an existing key based on the key's existing value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized, or <paramref name="addValueFactory"/> is null, or <paramref name="updateValueFactory"/> is null.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <returns>
            Task that represents the asynchronous add or update operation. The task result is the new value for the key. This will be
            either the result of addValueFactory (if the key was absent) or the result of updateValueFactory (if the key was present).
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddOrUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.Func{`0,`1,`1})">
            <summary>
            Adds a key/value pair to the reliable dictionary if the key does not already exist, or updates a key/value pair 
            in the reliable dictionary by using the specified function if the key already exists.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key to be added or whose value should be updated.</param>
            <param name="addValue">The value to be added for an absent key. The value can be null for reference types.</param>
            <param name="updateValueFactory">The function used to generate a new value for an existing key based on the key's existing value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized, or <paramref name="updateValueFactory"/> is null.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <returns>
            Task that represents the asynchronous add or update operation. The task result is the new value for the key. This will be
            either addValue (if the key was absent) or the result of updateValueFactory (if the key was present).
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddOrUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Func{`0,`1},System.Func{`0,`1,`1},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Uses the specified functions to add a key/value pair to the reliable dictionary if the key does not already exist,
            or to update a key/value pair in the reliable dictionary if the key already exists.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key to be added or whose value should be updated.</param>
            <param name="addValueFactory">The function used to generate a value for an absent key.</param>
            <param name="updateValueFactory">The function used to generate a new value for an existing key based on the key's existing value.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized, or <paramref name="addValueFactory"/> is null, or <paramref name="updateValueFactory"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was cancelled.</exception>
            <returns>
            Task that represents the asynchronous add or update operation. The task result is the new value for the key. This will be
            either the result of addValueFactory (if the key was absent) or the result of updateValueFactory (if the key was present).
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddOrUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.Func{`0,`1,`1},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Adds a key/value pair to the reliable dictionary if the key does not already exist, or updates a key/value pair 
            in the reliable dictionary by using the specified function if the key already exists.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key to be added or whose value should be updated.</param>
            <param name="addValue">The value to be added for an absent key. The value can be null for reference types.</param>
            <param name="updateValueFactory">The function used to generate a new value for an existing key based on the key's existing value.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized, or <paramref name="updateValueFactory"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was cancelled.</exception>
            <returns>
            Task that represents the asynchronous add or update operation. The task result is the new value for the key. This will be
            either addValue (if the key was absent) or the result of updateValueFactory (if the key was present).
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.ClearAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Removes all keys and values from the reliable dictionary.
            </summary>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was cancelled.</exception>
            <returns>Task that represents the asynchronous clear operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.ContainsKeyAsync(Microsoft.ServiceFabric.Data.ITransaction,`0)">
            <summary>
            Determines whether the reliable dictionary contains the specified key.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key to locate in the reliable dictionary.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <returns>A task that represents the asynchronous operation. The task result indicates whether the key exists.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.ContainsKeyAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,Microsoft.ServiceFabric.Data.Collections.LockMode)">
            <summary>
            Determines whether the reliable dictionary contains the specified key.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key to locate in the reliable dictionary.</param>
            <param name="lockMode">Type of locking to use for this read operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <returns>A task that represents the asynchronous operation. The task result indicates whether the key exists.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.ContainsKeyAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Determines whether the reliable dictionary contains the specified key.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key to locate in the reliable dictionary.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was cancelled.</exception>
            <returns>A task that represents the asynchronous operation. The task result indicates whether the key exists.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.ContainsKeyAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,Microsoft.ServiceFabric.Data.Collections.LockMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Determines whether the reliable dictionary contains the specified key.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key to locate in the reliable dictionary.</param>
            <param name="lockMode">Type of locking to use for this read operation.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was cancelled.</exception>
            <returns>A task that represents the asynchronous operation. The task result indicates whether the key exists.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.CreateEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction)">
            <summary>
            Creates an async enumerator over the reliable dictionary.
            </summary>
            <param name="txn">Transaction to associate this operation with.</param>
            <remarks>
            The enumerator returned from the reliable dictionary is safe to use concurrently with reads and writes
            to the dictionary. It represents a snapshot consistent view of the dictionary.
            </remarks>
            <returns>An enumerator for the reliable dictionary.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.CreateEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction,Microsoft.ServiceFabric.Data.Collections.EnumerationMode)">
            <summary>
            Creates an async enumerator over the reliable dictionary.
            </summary>
            <param name="txn">Transaction to associate this operation with.</param>
            <param name="enumerationMode">The enumeration mode to use. The default is Unordered.</param>
            <remarks>
            The enumerator returned from the reliable dictionary is safe to use concurrently with reads and writes
            to the dictionary. It represents a snapshot consistent view of the dictionary.
            </remarks>
            <returns>An enumerator for the reliable dictionary.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.CreateEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Func{`0,System.Boolean},Microsoft.ServiceFabric.Data.Collections.EnumerationMode)">
            <summary>
            Creates an async enumerable over the reliable dictionary.
            </summary>
            <param name="txn">Transaction to associate this operation with.</param>
            <param name="filter">Predicate that filters the keys to include in the enumeration.</param>
            <param name="enumerationMode">The enumeration mode to use. The default is Unordered.</param>
            <remarks>
            The enumerator returned from the reliable dictionary is safe to use concurrently with reads and writes
            to the dictionary. It represents a snapshot consistent view of the dictionary.
            </remarks>
            <returns>An enumerator for the reliable dictionary.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.GetOrAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Func{`0,`1})">
            <summary>
            Adds a key/value pair to the reliable dictionary by using the specified function, if the key does not already exist.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key of the element to add.</param>
            <param name="valueFactory">The function used to generate a value for the key.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized, or <paramref name="valueFactory"/> is null.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <returns>
            A task that represents the asynchronous add operation. The task result is the value for the key. This will be
            either the existing value for the key if the key is already in the dictionary, or the new value for the key
            as returned by valueFactory if the key was not in the dictionary.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.GetOrAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1)">
            <summary>
            Adds a key/value pair to the reliable dictionary if the key does not already exist.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value to be added, if the key does not already exist.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <returns>
            A task that represents the asynchronous add operation. The task result is the value for the key. This will be either the
            existing value for the key if the key is already in the dictionary, or the new value if the key was not in the dictionary.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.GetOrAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Func{`0,`1},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Adds a key/value pair to the reliable dictionary by using the specified function, if the key does not already exist.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key of the element to add.</param>
            <param name="valueFactory">The function used to generate a value for the key.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized, or <paramref name="valueFactory"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was cancelled.</exception>
            <returns>
            A task that represents the asynchronous add operation. The task result is the value for the key. This will be
            either the existing value for the key if the key is already in the dictionary, or the new value for the key
            as returned by valueFactory if the key was not in the dictionary.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.GetOrAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Adds a key/value pair to the reliable dictionary if the key does not already exist.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value to be added, if the key does not already exist.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was cancelled.</exception>
            <returns>
            A task that represents the asynchronous add operation. The task result is the value for the key. This will be either the
            existing value for the key if the key is already in the dictionary, or the new value if the key was not in the dictionary.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1)">
            <summary>
            Attempts to add the specified key and value to the reliable dictionary.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <returns>A task that represents the asynchronous add operation. The task result indicates whether the key/value pair was added.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Attempts to add the specified key and value to the reliable dictionary.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be null for reference types.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was cancelled.</exception>
            <returns>A task that represents the asynchronous add operation. The task result indicates whether the key/value pair was added.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryGetValueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0)">
            <summary>
            Attempts to get the value associated with the specified key from the reliable dictionary.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key of the value to get.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <returns>
            A task that represents the asynchronous read operation. The task result is a tuple indicating
            whether the key was found in the dictionary and if so, the value.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryGetValueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,Microsoft.ServiceFabric.Data.Collections.LockMode)">
            <summary>
            Attempts to get the value associated with the specified key from the reliable dictionary.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key of the value to get.</param>
            <param name="lockMode">Type of locking to use for this read operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <returns>
            A task that represents the asynchronous read operation. The task result is a tuple indicating
            whether the key was found in the dictionary and if so, the value.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryGetValueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Attempts to get the value associated with the specified key from the reliable dictionary.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key of the value to get.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was cancelled.</exception>
            <returns>
            A task that represents the asynchronous read operation. The task result is a tuple indicating
            whether the key was found in the dictionary and if so, the value.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryGetValueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,Microsoft.ServiceFabric.Data.Collections.LockMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Attempts to get the value associated with the specified key from the reliable dictionary.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key of the value to get.</param>
            <param name="lockMode">Type of locking to use for this read operation.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was cancelled.</exception>
            <returns>
            A task that represents the asynchronous read operation. The task result is a tuple indicating
            whether the key was found in the dictionary and if so, the value.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryRemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,`0)">
            <summary>
            Attempts to remove the value with the specified key from the reliable dictionary.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key of the element to remove.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <returns>
            Task that represents the asynchronous remove operation. The task result is a tuple indicating
            whether the key was removed from the dictionary and if so, the value.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryRemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Attempts to remove the value with the specified key from the reliable dictionary.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key of the element to remove.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was cancelled.</exception>
            <returns>
            Task that represents the asynchronous remove operation. The task result is a tuple indicating
            whether the key was removed from the dictionary and if so, the value.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,`1)">
            <summary>
            Compares the existing value for the specified key with a specified value, and if they are equal, updates the key with a third value.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key whose value is compared with <paramref name="comparisonValue"/> and possibly replaced.</param>
            <param name="newValue">The value that replaces the value of the element that has the specified <paramref name="key"/> if the comparison results in equality.</param>
            <param name="comparisonValue">The value that is compared to the value of the element that has the specified <paramref name="key"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <returns>A task that represents the asynchronous update operation. The task result indicates whether the object was updated.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,`1,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Compares the existing value for the specified key with a specified value, and if they are equal, updates the key with a third value.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key whose value is compared with <paramref name="comparisonValue"/> and possibly replaced.</param>
            <param name="newValue">The value that replaces the value of the element that has the specified <paramref name="key"/> if the comparison results in equality.</param>
            <param name="comparisonValue">The value that is compared to the value of the element that has the specified <paramref name="key"/>.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
            <returns>A task that represents the asynchronous update operation. The task result indicates whether the object was updated.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.SetAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1)">
            <summary>
            Update the specified key/value pair in the reliable dictionary.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key whose value should be updated.</param>
            <param name="value">The value that replaces the value of the element that has the specified <paramref name="key"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> does not exist in the dictionary.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <returns>A task that represents the asynchronous update operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.SetAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Update the specified key/value pair in the reliable dictionary.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="key">The key whose value should be updated.</param>
            <param name="value">The value that replaces the value of the element that has the specified <paramref name="key"/>.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null, or <paramref name="key"/> is null or cannot be serialized.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="key"/> does not exist in the dictionary, or <paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was cancelled.</exception>
            <returns>A task that represents the asynchronous update operation.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.RebuildNotificationAsyncCallback">
            <summary>
            Occurs when dictionary is being rebuild during copy, restore and recovery.
            </summary>
        </member>
        <member name="E:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.DictionaryChanged">
            <summary>
            Occurs when the dictionary changes.
            For example, addition, update or removal of an item.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1">
            <summary>
            Represents a reliable first-in, first-out collection of objects that are persisted and replicated.
            </summary>
            <typeparam name="T">The type of the elements contained in the reliable queue.</typeparam>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.EnqueueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0)">
            <summary>
            Adds an object to the end of the reliable queue.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="item">The object to add to the end of the queue. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <returns>Task that represents the asynchronous enqueue operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.EnqueueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Adds an object to the end of the reliable queue.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="item">The object to add to the end of the queue. The value can be null for reference types.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was cancelled.</exception>
            <returns>Task that represents the asynchronous enqueue operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryDequeueAsync(Microsoft.ServiceFabric.Data.ITransaction)">
            <summary>
            Tries to remove and return the object at the beginning of the reliable queue.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <returns>
            Task that represents the asynchronous dequeue operation. The task result is a tuple indicating
            whether an object was removed and if so, the object.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryDequeueAsync(Microsoft.ServiceFabric.Data.ITransaction,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Tries to remove and return the object at the beginning of the reliable queue.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was cancelled.</exception>
            <returns>
            Task that represents the asynchronous dequeue operation. The task result is a tuple indicating
            whether an object was removed and if so, the object.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryPeekAsync(Microsoft.ServiceFabric.Data.ITransaction)">
            <summary>
            Tries to return an object from the beginning of the reliable queue without removing it.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <returns>
            Task that represents the asynchronous peek operation. The task result is a tuple indicating
            whether an object was found at the beginning of the queue and if so, the object.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryPeekAsync(Microsoft.ServiceFabric.Data.ITransaction,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Tries to return an object from the beginning of the reliable queue without removing it.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was cancelled.</exception>
            <returns>
            Task that represents the asynchronous peek operation. The task result is a tuple indicating
            whether an object was found at the beginning of the queue and if so, the object.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryPeekAsync(Microsoft.ServiceFabric.Data.ITransaction,Microsoft.ServiceFabric.Data.Collections.LockMode)">
            <summary>
            Tries to return an object from the beginning of the reliable queue without removing it.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="lockMode">Type of locking to use for this read operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
            <returns>
            Task that represents the asynchronous peek operation. The task result is a tuple indicating
            whether an object was found at the beginning of the queue and if so, the object.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryPeekAsync(Microsoft.ServiceFabric.Data.ITransaction,Microsoft.ServiceFabric.Data.Collections.LockMode,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Tries to return an object from the beginning of the reliable queue without removing it.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <param name="lockMode">Type of locking to use for this read operation.</param>
            <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tx"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="timeout"/> is negative.</exception>
            <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was cancelled.</exception>
            <returns>
            Task that represents the asynchronous peek operation. The task result is a tuple indicating
            whether an object was found at the beginning of the queue and if so, the object.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.CreateEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction)">
            <summary>
            Creates an async enumerable over the DistributedQueue.
            </summary>
            <param name="tx">Transaction to associate this operation with.</param>
            <returns>IEnumerable that represents all the values.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.Collections.LockMode">
            <summary>
            Specifies how reliable collections will lock resources, which determines
            how the resources can be accessed by concurrent transactions.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Data.Collections.LockMode.Default">
            <summary>
            Use the default lock mode based on the operation and isolation level of the transaction.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Data.Collections.LockMode.Update">
            <summary>
            Used on resources that are intended to be updated. Prevents a common form of deadlock
            that occurs when multiple transactions are reading, locking, and potentially
            updating resources later.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.ConditionalValue`1">
            <summary>
            Result class returned by DistributedCollections APIs that may or may not return a value.
            </summary>
            <typeparam name="TValue">Value to initialize the result with.</typeparam>
        </member>
        <member name="F:Microsoft.ServiceFabric.Data.ConditionalValue`1.hasValue">
            <summary>
            Is there a value.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Data.ConditionalValue`1.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.ConditionalValue`1.#ctor(System.Boolean,`0)">
            <summary>
            Initializes a new instance of the ConditionalValue class with the given value.
            </summary>
            <param name="hasValue">Indicates whether the value is valid.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ConditionalValue`1.HasValue">
            <summary>
            Gets a value indicating whether the value is valid.
            </summary>
            <returns>Whether the value is valid.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ConditionalValue`1.Value">
            <summary>
            Gets the value.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.ReliableStateManagerConfiguration">
            <summary>
            Configuration object used to create ReliableStateManager/>
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.ReliableStateManagerConfiguration.#ctor(System.String,System.String,System.String,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Create a new ReliableStateManagerConfiguration.
            </summary>
            <param name="configPackageName">Optional config package name from which to load replicator security/settings.</param>
            <param name="replicatorSecuritySectionName">Optional config section name from which to load replicator security settings.</param>
            <param name="replicatorSettingsSectionName">Optional config section name from which to load replicator settings.</param>
            <param name="onInitializeStateSerializersEvent">
            Optional callback which will fire when custom serializers should be added.
            Used to set the <see cref="P:Microsoft.ServiceFabric.Data.ReliableStateManagerConfiguration.OnInitializeStateSerializersEvent"/> property.
            </param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.ReliableStateManagerConfiguration.#ctor(Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Create a new ReliableStateManagerConfiguration.
            </summary>
            <param name="replicatorSettings">Replicator settings with which to initialize the ReliableStateManager/&gt;</param>
            <param name="onInitializeStateSerializersEvent">
            Optional callback which will fire when custom serializers should be added.
            Used to set the <see cref="P:Microsoft.ServiceFabric.Data.ReliableStateManagerConfiguration.OnInitializeStateSerializersEvent"/> property.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerConfiguration.ReplicatorSettings">
            <summary>
            Gets or sets the replicator settings.
            </summary>
            <returns>The replicator settings.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerConfiguration.ConfigPackageName">
            <summary>
            Gets or sets the config package name.
            </summary>
            <returns>The config package name.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerConfiguration.ReplicatorSecuritySectionName">
            <summary>
            Gets or sets the replicator security section name.
            </summary>
            <returns>The section name.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerConfiguration.ReplicatorSettingsSectionName">
            <summary>
            Gets or sets the replicator section name.
            </summary>
            <returns>The section name.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerConfiguration.OnInitializeStateSerializersEvent">
            <summary>
            When called, specify custom serializers via <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/>.TryAddStateSerializerAsync
            </summary>
            <returns>Task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings">
            <summary>
            Settings that configure the replicator
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.Equals(System.Object)">
            <summary>
            Determines whether the specified ReplicatorSettings is equal to the current object 
            </summary>
            <param name="obj">
            object to check against
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.GetHashCode">
            <summary>
            Serves as a hash function for this type
            </summary>
            <returns>
            The <see cref="T:System.Int32"/> representing the hash code.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.ToString">
            <summary>
            The to string.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.InternalEquals(Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings,Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings)">
            <summary>
            Checks for equality of setting values
            </summary>
            <param name="old">old settings</param>
            <param name="updated">updated settings</param>
            <returns>
            TRUE if the settings are equivalent
            </returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.RetryInterval">
            <summary>
            Gets or sets how long the Replicator waits after it transmits a message from the primary to the secondary for the secondary to acknowledge that it has received the message.
            The default value is 5 seconds.
            </summary>
            <returns>The retry interval.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.BatchAcknowledgementInterval">
            <summary>
            Gets or sets the amount of time that the replicator waits after receiving an operation before sending back an acknowledgement
            The default value is 50 milliseconds.
            </summary>
            <returns>The batch acknowledgement interval.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.ReplicatorAddress">
            <summary>
            Gets or sets the address that this replicator will use when communicating with other Replicators.
            The default value is "localhost:0", which picks a dynamic port number in runtime 
            </summary>
            <returns>The replicator address.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.SecurityCredentials">
            <summary>
            Gets or sets the security credentials for securing the traffic between replicators
            </summary>
            <returns>The security credentials.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.InitialCopyQueueSize">
            <summary>
            Gets or sets the initial size of the copy operation queue inside the replicator, which contains copy Operations.
            Default value is 64.
            The value must be a power of 2 and the unit is 'Number of operations'
            </summary>
            <returns>The initial copy queue size.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.MaxCopyQueueSize">
            <summary>
            Gets or sets the maximum size of the copy operation queue inside Replicator, which contains copy Operations.
            Default value is 1024.
            The value must be a power of 2 and the unit is 'Number of operations'
            </summary>
            <returns>The max copy queue size.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.MaxReplicationMessageSize">
            <summary>
            Gets or sets the max replication message size.
            Default value is 50MB.
            The unit is Bytes.
            </summary>
            <returns>The max replication message size.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.InitialPrimaryReplicationQueueSize">
            <summary>
            Gets or sets the initial primary replication queue size.
            Default value is 64.
            The value must be a power of 2 and the unit is 'Number of operations'
            </summary>
            <returns>The initial primary replication queue size.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.MaxPrimaryReplicationQueueSize">
            <summary>
            Gets or sets the max primary replication queue size.
            Default value is 1024.
            The value must be a power of 2 and the unit is 'Number of operations'
            </summary>
            <returns>The max primary replication queue size.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.MaxPrimaryReplicationQueueMemorySize">
            <summary>
            Gets or sets the max primary replication queue memory size.
            Default value is 0, which implies there is no memory limitation.
            The unit is Bytes
            </summary>
            <returns>The max primary replication queue memory size.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.InitialSecondaryReplicationQueueSize">
            <summary>
            Gets or sets the initial secondary replication queue size.
            Default value is 64.
            The value must be a power of 2 and the unit is 'Number of operations'
            </summary>
            <returns>The initial secondary replication queue size.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.MaxSecondaryReplicationQueueSize">
            <summary>
            Gets or sets the max secondary replication queue size.
            Default value is 2048.
            The value must be a power of 2 and the unit is 'Number of operations'
            </summary>
            <returns>The max secondary replication queue size.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.MaxSecondaryReplicationQueueMemorySize">
            <summary>
            Gets or sets the max secondary replication queue memory size.
            Default value is 0, which implies there is no memory limitation.
            The unit is Bytes
            </summary>
            <returns>The max secondary replication queue size.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.SharedLogId">
            <summary>
            Gets or sets the GUID Identifier for the log container that is shared by a number of replicas on the windows fabric node including this one
            Default value is "" which causes the replicator to use the global shared log for the node.
            </summary>
            <returns>The shared log id.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.SharedLogPath">
            <summary>
            Gets or sets the full pathname to the log container that is shared by a number of replicas on the node including this one
            Default value is "" which causes the replicator to use the global shared log for the node.
            </summary>
            <returns>The shared log path.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.MaxStreamSizeInMB">
            <summary>
            Deprecated
            </summary>
            <returns>The max stream size.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.MaxMetadataSizeInKB">
            <summary>
            Gets or sets the Amount of extra persistent storage space reserved for the replicator specified in kilobytes that is associated with this replica. This 
            value must be a multiple of 4.
            The default value is 4. 
            The unit is KB.
            </summary>
            <returns>The max metadata size.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.MaxRecordSizeInKB">
            <summary>
            Gets or sets the largest record size which the replicator may write specified in kilobytes for the log that is associated with this replica. This 
            value must be a multiple of 4 and greater than or equal to 128.
            The default value is 1024. 
            The unit is KB.
            </summary>
            <returns>The max record size.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.MaxWriteQueueDepthInKB">
            <summary>
            Gets or sets the maximum write queue depth that the core logger can use as specified in kilobytes for the log that is associated with this replica. This 
            value is the maximum number of bytes that can be outstanding during core logger updates. It may be 0 for the core logger
            to compute an appropriate value or a multiple of 4.
            The default value is 0.
            The unit is KB.
            </summary>
            <returns>The max write queue depth.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.CheckpointThresholdInMB">
            <summary>
            Gets or sets the checkpoint threshold. A checkpoint will be initiated when the log usage exceeds this value.
            Default value is 50.
            </summary>
            <returns>The checkpoint threshold.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.MaxAccumulatedBackupLogSizeInMB">
            <summary>
            Gets or sets the max size for an accumulated backup log across backups. 
            An incremental backup requests will fail if the incremental backup would generate a backup log that would cause the accumulated backup logs since the relevant full backup to be larger than this size.
            In such cases, user is required to take a full backup.
            Default value is 800.
            </summary>
            <returns>The max accumulated backup log size in MB.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.OptimizeForLocalSSD">
            <summary>
            Deprecated
            </summary>
            <returns>If the OptimizeFOrLocalSSD option is enabled.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.OptimizeLogForLowerDiskUsage">
            <summary>
            Gets or sets a flag that when true indicates the log should optimize in a way where less disk space is used for the log at the cost of IO performance. If false, the log will use more disk space but have better IO performance.
            Default value is true.
            </summary>
            <returns>If the OptimizeLogForLowerDiskUsage option is enabled.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.ReliableStateManagerReplicatorSettings.SecondaryClearAcknowledgedOperations">
            <summary>
            Gets or sets a flag that when true indicates the secondary replicator should clear the in-memory queue after acknowledging the operations to the primary (After the operations are flushed to disk)
            Default value is false.
            Settings this to "TRUE" can result in additional disk reads on the new primary, while catching up replicas after a failover
            </summary>
            <returns>If the SecondaryClearAcknowledgedOperations option is enabled.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.RestorePolicy">
            <summary>
            Policy for restore operation.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Data.RestorePolicy.Safe">
            <summary>
            Ensures that the backed up state being restored is ahead of the current state.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Data.RestorePolicy.Force">
            <summary>
            Does not check whether backed up state being restored is ahead of the current state.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryChangedAction">
            <summary>
            Describes the action that caused the DictionaryChanged event.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryChangedEventArgs`2">
            <summary>
            Provides data for the DictionaryChanged event.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryChangedEventArgs`2.Action">
            <summary>
            Gets the action that caused the event.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryTransactionalEventArgs`2">
            <summary>
            Provides data for the DictionaryChanged event caused by a transactional operation.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryTransactionalEventArgs`2.Transaction">
            <summary>
            Gets the transaction that the operation belongs to.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryRebuildEventArgs`2">
            <summary>
            Provides data for the DictionaryChanged event caused by a rebuild operation.
            Rebuild notification is fired at the end of recovery, copy or restore of reliable state.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryRebuildEventArgs`2.State">
            <summary>
            Gets an enumerable that contains all items in the Dictionary.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryClearEventArgs`2">
            <summary>
            Provides data for the DictionaryChanged event caused by a clear operation.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryClearEventArgs`2.CommitSequenceNumber">
            <summary>
            Gets the commit sequence number for the operation that committed the clear.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryItemAddedEventArgs`2">
            <summary>
            Provides data for the DictionaryChanged event caused by item addition.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryItemAddedEventArgs`2.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryItemAddedEventArgs`2.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryItemUpdatedEventArgs`2">
            <summary>
            Provides data for the DictionaryChanged event caused by item update.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryItemUpdatedEventArgs`2.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryItemUpdatedEventArgs`2.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryItemRemovedEventArgs`2">
            <summary>
            Provides data for the DictionaryChanged event caused by item removal.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryItemRemovedEventArgs`2.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerChangedAction">
            <summary>
            Describes the action that caused the StateManagerChanged event.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerChangedAction.Add">
            <summary> 
            A state provider has been added.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerChangedAction.Remove">
            <summary> 
            A state provider has been removed.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerChangedAction.Rebuild">
            <summary> 
            State manager has been rebuilt.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerChangedEventArgs">
            <summary>
            Provides data for the StateManagerChanged event.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerChangedEventArgs.action">
            <summary>
            The action.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerChangedEventArgs.Action">
            <summary>
            Gets the action that caused the event.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerRebuildEventArgs">
            <summary>
            Provides data for the StateManagerChanged event caused by a rebuild.
            Commonly called during recovery, restore and end of copy.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerRebuildEventArgs.reliableStates">
            <summary>
            The state providers.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerRebuildEventArgs.ReliableStates">
            <summary>
            Enumerable of all the new state providers now in the State Manager.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerSingleEntityChangedEventArgs">
            <summary>
            Provides data for the DictionaryChanged event caused by a transactional single entity operation.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerSingleEntityChangedEventArgs.Transaction">
            <summary>
            Gets the transaction.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerSingleEntityChangedEventArgs.ReliableState">
            <summary>
            Gets the reliable state
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.Notifications.NotifyTransactionChangedAction">
            <summary>
            Describes the action that caused the TransactionChanged event.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Data.Notifications.NotifyTransactionChangedAction.Commit">
            <summary> 
            Transaction has committed.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Data.Notifications.NotifyTransactionChangedEventArgs">
            <summary>
            Event arguments for transactions.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.Notifications.NotifyTransactionChangedEventArgs.Action">
            <summary>
            Type of action for which the event was created.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Data.Notifications.NotifyTransactionChangedEventArgs.Transaction">
            <summary>
            Gets the transaction.
            </summary>
        </member>
    </members>
</doc>
